{"bad_before": [[{"CorrectInputs": [[["3"], 1517192312]], "UniqueId": "db563486-b1d6-4e88-e675-78d85c5ea520_0", "CoverageInfo": [2, 0, 0, 0, 100], "TimeStamp": 1517192278, "BadInput": ["s"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 2, in <module>\n    a = int(input())\nValueError: invalid literal for int() with base 10: 's'\n", "ip": "5.228.139.38"}, [{"EndTime": 1552286225.6109593, "FinalMinimizedSolution": ["2"], "FinalCoverage": [2, 0, 0, 0, 100], "FinalSolution": ["2"], "StartTime": 1552286224.750453, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["s"]]}, {"EndTime": 1552286226.4748843, "FinalMinimizedSolution": ["6"], "FinalCoverage": [2, 0, 0, 0, 100], "FinalSolution": ["6"], "StartTime": 1552286225.6111374, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["s"], ["s"]]}, {"EndTime": 1552286227.3326912, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [2, 0, 0, 0, 100], "FinalSolution": ["-1"], "StartTime": 1552286226.4750674, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["s"], ["s"], ["s"]]}, {"EndTime": 1552286228.1898375, "FinalMinimizedSolution": ["4"], "FinalCoverage": [2, 0, 0, 0, 100], "FinalSolution": ["4"], "StartTime": 1552286227.3328788, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["s"], ["s"], ["s"], ["s"]]}, {"EndTime": 1552286229.2350774, "FinalMinimizedSolution": ["3"], "FinalCoverage": [2, 0, 0, 0, 100], "FinalSolution": ["3"], "StartTime": 1552286228.1900368, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["s"], ["s"], ["s"], ["s"], ["s"], []]}]], [{"CorrectInputs": [[["1", "3"], 1522021818]], "UniqueId": "b49fa7db-a755-4a2d-f324-cf0ebcb5af2b_0", "CoverageInfo": [7, 3, 2, 1, 56, "4-5,", "9,", "8->9"], "TimeStamp": 1522021587, "BadInput": ["1", "0"], "ErrorType": "ZeroDivisionError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 8, in <module>\n    if numerator / denominator * denominator == numerator:\nZeroDivisionError: division by zero\n", "ip": "204.195.116.178"}, [{"EndTime": 1552267227.7177286, "FinalMinimizedSolution": ["1", "1"], "FinalCoverage": [7, 2, 2, 1, 67, "4-5,", "8->exit"], "FinalSolution": ["1", "1"], "StartTime": 1552267226.663736, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "0"], ["1"]]}, {"EndTime": 1552267229.5188074, "FinalMinimizedSolution": ["6", "6"], "FinalCoverage": [7, 2, 2, 1, 67, "4-5,", "8->exit"], "FinalSolution": ["6", "6"], "StartTime": 1552267227.7179198, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["1", "0"], ["1"], ["1", "0"], [], ["-1"], ["-1", "0"], ["-1 4ot"], ["6"]]}, {"EndTime": 1552267231.1820776, "FinalMinimizedSolution": ["0", "3"], "FinalCoverage": [7, 2, 2, 1, 67, "4-5,", "8->exit"], "FinalSolution": ["0", "3", "0"], "StartTime": 1552267229.5190496, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["1", "0"], ["1"], ["1", "0"], [], ["-1"], ["-1", "0"], ["-1 4ot"], ["6"], ["1", "0"], ["EW4"], ["0"], ["0", "0"], ["0", "4 20", "0"]]}, {"EndTime": 1552267232.7986987, "FinalMinimizedSolution": ["0", "4"], "FinalCoverage": [7, 2, 2, 1, 67, "4-5,", "8->exit"], "FinalSolution": ["0", "4"], "StartTime": 1552267231.1823614, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["1", "0"], ["1"], ["1", "0"], [], ["-1"], ["-1", "0"], ["-1 4ot"], ["6"], ["1", "0"], ["EW4"], ["0"], ["0", "0"], ["0", "4 20", "0"], ["1", "0"], ["1 MZD", "0"], ["0", "0", "0"], ["0 H04", "0", "0"], ["0", "0 Fuu"]]}, {"EndTime": 1552267234.2182195, "FinalMinimizedSolution": ["3", "7"], "FinalCoverage": [7, 2, 2, 1, 67, "4-5,", "8->exit"], "FinalSolution": ["3", "7"], "StartTime": 1552267232.7990232, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1", "0"], ["1"], ["1", "0"], [], ["-1"], ["-1", "0"], ["-1 4ot"], ["6"], ["1", "0"], ["EW4"], ["0"], ["0", "0"], ["0", "4 20", "0"], ["1", "0"], ["1 MZD", "0"], ["0", "0", "0"], ["0 H04", "0", "0"], ["0", "0 Fuu"], ["1", "0"], ["7cQ"], ["3"], ["3", "NF1"]]}]], [{"CorrectInputs": [[["roulerie", "dcdscdc", "qsxqxqX", "cxscQC", "cdcsdcsc", "qcqscsqcq"], 1541137224]], "UniqueId": "35f0a3a4-0795-450d-acce-5279703052b2_0", "CoverageInfo": [30, 7, 14, 6, 70, "21-22,", "25-26,", "28-29,", "32,", "13->exit,", "14->20,", "20->21,", "23->32,", "24->25,", "27->28"], "TimeStamp": 1541137103, "BadInput": ["chat"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 24, in <module>\n    if prop[i] == deviner[i] and lettres[prop[i]] > 0:\nIndexError: string index out of range\n", "ip": "2a01:cb18:830d:5500:9591:fb50:d09d:dc8c"}, [{"EndTime": 1552290516.557668, "FinalMinimizedSolution": ["rouler"], "FinalCoverage": [30, 2, 14, 3, 89, "21-22,", "13->exit,", "14->20,", "20->21"], "FinalSolution": ["rouler", "rouler"], "StartTime": 1552290514.9604437, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["chat"], ["5000", "chat"], [], ["rouler"]]}, {"EndTime": 1552290519.230636, "FinalMinimizedSolution": ["marche mortes", "ruines", "aigris", "aigris", "chat"], "FinalCoverage": [30, 2, 14, 3, 89, "21-22,", "13->exit,", "14->20,", "20->21"], "FinalSolution": ["marche mortes", "ruines", "aigris", "aigris", "chat"], "StartTime": 1552290516.557856, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["chat"], ["5000", "chat"], [], ["rouler"], ["chat"], ["+,a,+,b,-,b", "chat"], ["gO3"], ["5LK"], ["poG"], ["poG mortes"], ["poG mortes", "aigris"], ["poG mortes", "aigris", "aigris"], ["poG mortes", "aigris", "aigris", "chat"], ["poG mortes", "ruines", "aigris", "aigris", "chat"]]}, {"EndTime": 1552290521.4378753, "FinalMinimizedSolution": ["-If BPT", "merlus", "-If BPT", "-If BPT", "merlus"], "FinalCoverage": null, "FinalSolution": ["-If BPT", "merlus", "-If BPT", "-If BPT", "merlus"], "StartTime": 1552290519.2309568, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["chat"], ["5000", "chat"], [], ["rouler"], ["chat"], ["+,a,+,b,-,b", "chat"], ["gO3"], ["5LK"], ["poG"], ["poG mortes"], ["poG mortes", "aigris"], ["poG mortes", "aigris", "aigris"], ["poG mortes", "aigris", "aigris", "chat"], ["poG mortes", "ruines", "aigris", "aigris", "chat"], ["chat"], ["blW", "chat"], ["-If"], ["-If BPT"], ["-If BPT", "merlus"], ["-If BPT", "merlus", "-If BPT"], ["-If BPT", "merlus", "-If BPT", "-If BPT"]]}, {"EndTime": 1552290527.9553063, "FinalMinimizedSolution": ["c3,d1,hA,c5,sK,hJ", "bEg sachez", "c3,d1,hA,c5,sK,hJ", "c3,d1,hA,c5,sK,hJ", "c3,d1,hA,c5,sK,hJ", "bEg sachez"], "FinalCoverage": [30, 4, 14, 3, 84, "21-22,", "25-26,", "14->20,", "20->21,", "24->25"], "FinalSolution": ["c3,d1,hA,c5,sK,hJ", "bEg sachez", "c3,d1,hA,c5,sK,hJ", "c3,d1,hA,c5,sK,hJ", "c3,d1,hA,c5,sK,hJ", "bEg sachez"], "StartTime": 1552290521.4381897, "FoundSolution": true, "NumProbesMade": 31, "InputHistory": [["chat"], ["5000", "chat"], [], ["rouler"], ["chat"], ["+,a,+,b,-,b", "chat"], ["gO3"], ["5LK"], ["poG"], ["poG mortes"], ["poG mortes", "aigris"], ["poG mortes", "aigris", "aigris"], ["poG mortes", "aigris", "aigris", "chat"], ["poG mortes", "ruines", "aigris", "aigris", "chat"], ["chat"], ["blW", "chat"], ["-If"], ["-If BPT"], ["-If BPT", "merlus"], ["-If BPT", "merlus", "-If BPT"], ["-If BPT", "merlus", "-If BPT", "-If BPT"], ["chat"], ["7mY", "chat"], ["7mY"], ["eKj"], ["u0V"], ["80", "u0V"], ["2", "80", "u0V"], ["GoL", "2", "80", "u0V"], ["mortes", "GoL", "2", "80", "u0V"], ["mortes", "m", "GoL", "2", "80", "u0V"], ["mortes CFQ", "m", "GoL", "2", "80", "u0V"], ["mortes CFQ", "m", "GoL", "iEW", "2", "80", "u0V"], ["mortes CFQ", "m", "GoL", "iEW", "2", "80"], ["mortes CFQ", "m sachez", "GoL", "iEW", "2", "80"], ["", "m sachez", "GoL", "iEW", "2", "80"], ["", "m sachez", "GoL", "iEW", "Hord", "2", "80"], ["", "m sachez", "GoL wXU", "iEW", "Hord", "2", "80"], ["", "m sachez", "GoL wXU", "7Y7", "iEW", "Hord", "2", "80"], ["iEW", "", "m sachez", "GoL wXU", "7Y7", "iEW", "Hord", "2", "80"], ["iEW", " .", "m sachez", "GoL wXU", "7Y7", "iEW", "Hord", "2", "80"], ["iEW", " .", "m sachez", "GoL wXU", "7Y7", "iEW", "Hord", "2 jmq", "80"], ["iEW", " .", "m m", "GoL wXU", "7Y7", "iEW", "Hord", "2 jmq", "80"], ["iEW", " .", "m m", "GoL wXU", "7Y7", "iEW", "Hord", "2 jmq", "abc", "80"], ["7Y7", "iEW", " .", "m m", "GoL wXU", "7Y7", "iEW", "Hord", "2 jmq", "abc", "80"], ["7Y7", "iEW", " .", "m m", "ld9 wXU", "7Y7", "iEW", "Hord", "2 jmq", "abc", "80"], ["bEg"], ["c3,d1,hA,c5,sK,hJ", "bEg"], ["c3,d1,hA,c5,sK,hJ", "bEg sachez"], ["c3,d1,hA,c5,sK,hJ", "bEg sachez", "c3,d1,hA,c5,sK,hJ"], ["c3,d1,hA,c5,sK,hJ", "bEg sachez", "c3,d1,hA,c5,sK,hJ", "c3,d1,hA,c5,sK,hJ"], ["c3,d1,hA,c5,sK,hJ", "bEg sachez", "c3,d1,hA,c5,sK,hJ", "c3,d1,hA,c5,sK,hJ", "c3,d1,hA,c5,sK,hJ"]]}, {"EndTime": 1552290529.7947335, "FinalMinimizedSolution": ["savoir", "8DM", "ruines", "Wq6"], "FinalCoverage": [30, 4, 14, 4, 82, "21-22,", "25-26,", "13->exit,", "14->20,", "20->21,", "24->25"], "FinalSolution": ["savoir", "8DM", "ruines", "Wq6"], "StartTime": 1552290527.956088, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["chat"], ["5000", "chat"], [], ["rouler"], ["chat"], ["+,a,+,b,-,b", "chat"], ["gO3"], ["5LK"], ["poG"], ["poG mortes"], ["poG mortes", "aigris"], ["poG mortes", "aigris", "aigris"], ["poG mortes", "aigris", "aigris", "chat"], ["poG mortes", "ruines", "aigris", "aigris", "chat"], ["chat"], ["blW", "chat"], ["-If"], ["-If BPT"], ["-If BPT", "merlus"], ["-If BPT", "merlus", "-If BPT"], ["-If BPT", "merlus", "-If BPT", "-If BPT"], ["chat"], ["7mY", "chat"], ["7mY"], ["eKj"], ["u0V"], ["80", "u0V"], ["2", "80", "u0V"], ["GoL", "2", "80", "u0V"], ["mortes", "GoL", "2", "80", "u0V"], ["mortes", "m", "GoL", "2", "80", "u0V"], ["mortes CFQ", "m", "GoL", "2", "80", "u0V"], ["mortes CFQ", "m", "GoL", "iEW", "2", "80", "u0V"], ["mortes CFQ", "m", "GoL", "iEW", "2", "80"], ["mortes CFQ", "m sachez", "GoL", "iEW", "2", "80"], ["", "m sachez", "GoL", "iEW", "2", "80"], ["", "m sachez", "GoL", "iEW", "Hord", "2", "80"], ["", "m sachez", "GoL wXU", "iEW", "Hord", "2", "80"], ["", "m sachez", "GoL wXU", "7Y7", "iEW", "Hord", "2", "80"], ["iEW", "", "m sachez", "GoL wXU", "7Y7", "iEW", "Hord", "2", "80"], ["iEW", " .", "m sachez", "GoL wXU", "7Y7", "iEW", "Hord", "2", "80"], ["iEW", " .", "m sachez", "GoL wXU", "7Y7", "iEW", "Hord", "2 jmq", "80"], ["iEW", " .", "m m", "GoL wXU", "7Y7", "iEW", "Hord", "2 jmq", "80"], ["iEW", " .", "m m", "GoL wXU", "7Y7", "iEW", "Hord", "2 jmq", "abc", "80"], ["7Y7", "iEW", " .", "m m", "GoL wXU", "7Y7", "iEW", "Hord", "2 jmq", "abc", "80"], ["7Y7", "iEW", " .", "m m", "ld9 wXU", "7Y7", "iEW", "Hord", "2 jmq", "abc", "80"], ["bEg"], ["c3,d1,hA,c5,sK,hJ", "bEg"], ["c3,d1,hA,c5,sK,hJ", "bEg sachez"], ["c3,d1,hA,c5,sK,hJ", "bEg sachez", "c3,d1,hA,c5,sK,hJ"], ["c3,d1,hA,c5,sK,hJ", "bEg sachez", "c3,d1,hA,c5,sK,hJ", "c3,d1,hA,c5,sK,hJ"], ["c3,d1,hA,c5,sK,hJ", "bEg sachez", "c3,d1,hA,c5,sK,hJ", "c3,d1,hA,c5,sK,hJ", "c3,d1,hA,c5,sK,hJ"], ["chat"], ["mortes"], ["mortes", "Wq6"], ["Wq6"], ["8DM", "Wq6"], ["8DM", "ruines", "Wq6"]]}]], [{"CorrectInputs": [[["2 3"], 1540581316]], "UniqueId": "90a37f57-b2b9-472f-ab1d-d665f2e1d350_0", "CoverageInfo": [3, 2, 0, 0, 33, "3-4"], "TimeStamp": 1540581309, "BadInput": ["2"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    var1, var2 = input(\"Enter two numbers here: \").split()\nValueError: not enough values to unpack (expected 2, got 1)\n", "ip": "161.73.173.47"}, [{"EndTime": 1552422439.4854975, "FinalMinimizedSolution": ["2 2"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["2 2"], "StartTime": 1552422439.029726, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["2"]]}, {"EndTime": 1552422440.2372835, "FinalMinimizedSolution": ["jem jem"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["jem jem"], "StartTime": 1552422439.485626, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["2"], ["2"], [""], [" "], [" jem"]]}, {"EndTime": 1552422443.1746898, "FinalMinimizedSolution": ["21U xgO"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["21U xgO"], "StartTime": 1552422440.2374353, "FoundSolution": true, "NumProbesMade": 25, "InputHistory": [["2"], ["2"], [""], [" "], [" jem"], ["2"], ["2", "2"], ["2", "2 2"], ["2", "2 2 2"], ["2", "2 2 2 2"], ["2", "2 2 2 2 2"], ["2", "2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2 2 2"], ["2", "2", "2"], ["2", "2", "2 2"], ["2", "2", "2 2 2"], ["2", "2", "2 2 2 2"], ["2", "2", "2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2 2 2 2 2"], [], ["21U xgO xgO"]]}, {"EndTime": 1552422443.6348646, "FinalMinimizedSolution": ["2 messi"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["2 messi"], "StartTime": 1552422443.1749523, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["2"], ["2"], [""], [" "], [" jem"], ["2"], ["2", "2"], ["2", "2 2"], ["2", "2 2 2"], ["2", "2 2 2 2"], ["2", "2 2 2 2 2"], ["2", "2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2 2 2"], ["2", "2", "2"], ["2", "2", "2 2"], ["2", "2", "2 2 2"], ["2", "2", "2 2 2 2"], ["2", "2", "2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2 2 2 2 2"], [], ["21U xgO xgO"], ["2"]]}, {"EndTime": 1552422444.0879004, "FinalMinimizedSolution": ["2 ipH"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["2 ipH"], "StartTime": 1552422443.6351187, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["2"], ["2"], [""], [" "], [" jem"], ["2"], ["2", "2"], ["2", "2 2"], ["2", "2 2 2"], ["2", "2 2 2 2"], ["2", "2 2 2 2 2"], ["2", "2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2 2 2"], ["2", "2", "2"], ["2", "2", "2 2"], ["2", "2", "2 2 2"], ["2", "2", "2 2 2 2"], ["2", "2", "2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2 2 2 2"], ["2", "2", "2 2 2 2 2 2 2 2 2 2 2"], [], ["21U xgO xgO"], ["2"], ["2"]]}]], [{"CorrectInputs": [[["12.4"], 1522359499]], "UniqueId": "274552d6-852a-44f4-e762-57afb8bad67e_0", "CoverageInfo": [7, 4, 0, 0, 43, "7-8,", "12-13"], "TimeStamp": 1522359444, "BadInput": ["12,4"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 11, in <module>\n    radius = float(radius)\nValueError: could not convert string to float: '12,4'\n", "ip": "2001:6a8:2100:241::4868:aac6"}, [{"EndTime": 1552290664.4827151, "FinalMinimizedSolution": ["9.2"], "FinalCoverage": [7, 0, 0, 0, 100], "FinalSolution": ["9.2"], "StartTime": 1552290663.674151, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["12,4"]]}, {"EndTime": 1552290664.9110827, "FinalMinimizedSolution": ["5.0"], "FinalCoverage": [7, 0, 0, 0, 100], "FinalSolution": ["5.0"], "StartTime": 1552290664.4828198, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["12,4"], ["12,4"]]}, {"EndTime": 1552290665.7381523, "FinalMinimizedSolution": ["5.4"], "FinalCoverage": [7, 0, 0, 0, 100], "FinalSolution": ["5.4"], "StartTime": 1552290664.91119, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["12,4"], ["12,4"], ["12,4"]]}, {"EndTime": 1552290665.9887137, "FinalMinimizedSolution": ["6.4"], "FinalCoverage": null, "FinalSolution": ["6.4"], "StartTime": 1552290665.7383294, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["12,4"], ["12,4"], ["12,4"], ["12,4"]]}, {"EndTime": 1552290666.2355337, "FinalMinimizedSolution": ["10.6"], "FinalCoverage": null, "FinalSolution": ["10.6"], "StartTime": 1552290665.9888592, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["12,4"], ["12,4"], ["12,4"], ["12,4"], ["12,4"]]}]], [{"CorrectInputs": [[["4", "1 2 3 4", "2 3 4 1", "4 3 2 1", "3 2 3 1"], 1546130546]], "UniqueId": "0bdfb582-c075-4e9a-8bc4-3f068fc4014f_0", "CoverageInfo": [33, 31, 22, 0, 4, "2-7,", "9-39"], "TimeStamp": 1546130471, "BadInput": ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 8, in <module>\n    n=int(input())\nValueError: invalid literal for int() with base 10: '41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1'\n", "ip": "2.176.127.205"}, [{"InputHistory": [["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7"], ["7", "Ub2"], ["7", "Ub2", "Ub2"], ["7", "Ub2", "Ub2", "7"], ["7", "Ub2", "Ub2", "7", "Ub2"], ["7", "Ub2", "Ub2", "7", "Ub2", "7"], ["7", "Ub2", "Ub2", "7", "Ub2", "7", "7"], ["7", "Ub2", "Ub2", "7", "Ub2", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "Ub2", "Ub2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "Ub2", "2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "mBP", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "cLa", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "-1", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], [], ["5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "", "", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["31u", "5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["4", "5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["4", "5", "1", "41", "2", "3", "4", "2", "3", "4", "1", "4", "3", "5", "1", "3", "2", "3", "1", "5", "", "", "5"], ["9Ua"], ["5 JlF"], ["9"], ["9", "kg2"], ["9", "kg2", "kg2"], ["9", "kg2", "kg2", "9"], ["9", "kg2", "kg2", "9", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "7", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "7", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "2", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["lDH"], ["2"], ["2", "2"], ["2", "2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["2", "2", "41 2 3 4 2 3 4 1 41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1 3 2 1 3 2 3 1"], ["9e0"], ["4"], ["4", "5ae"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552414426.3672578, "StartTime": 1552414414.894325}, {"EndTime": 1552414427.4889014, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [33, 17, 22, 6, 40, "3-7,", "11,", "15-18,", "21-24,", "29,", "33-36,", "2->3,", "10->11,", "12->33,", "14->15,", "20->21,", "28->29"], "FinalSolution": ["-1", "4"], "StartTime": 1552414426.3682182, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7"], ["7", "Ub2"], ["7", "Ub2", "Ub2"], ["7", "Ub2", "Ub2", "7"], ["7", "Ub2", "Ub2", "7", "Ub2"], ["7", "Ub2", "Ub2", "7", "Ub2", "7"], ["7", "Ub2", "Ub2", "7", "Ub2", "7", "7"], ["7", "Ub2", "Ub2", "7", "Ub2", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "Ub2", "Ub2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "Ub2", "2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "mBP", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "cLa", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "-1", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], [], ["5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "", "", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["31u", "5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["4", "5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["4", "5", "1", "41", "2", "3", "4", "2", "3", "4", "1", "4", "3", "5", "1", "3", "2", "3", "1", "5", "", "", "5"], ["9Ua"], ["5 JlF"], ["9"], ["9", "kg2"], ["9", "kg2", "kg2"], ["9", "kg2", "kg2", "9"], ["9", "kg2", "kg2", "9", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "7", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "7", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "2", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["lDH"], ["2"], ["2", "2"], ["2", "2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["2", "2", "41 2 3 4 2 3 4 1 41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1 3 2 1 3 2 3 1"], ["9e0"], ["4"], ["4", "5ae"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["2WZ", "4"]]}, {"InputHistory": [["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7"], ["7", "Ub2"], ["7", "Ub2", "Ub2"], ["7", "Ub2", "Ub2", "7"], ["7", "Ub2", "Ub2", "7", "Ub2"], ["7", "Ub2", "Ub2", "7", "Ub2", "7"], ["7", "Ub2", "Ub2", "7", "Ub2", "7", "7"], ["7", "Ub2", "Ub2", "7", "Ub2", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "Ub2", "Ub2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "Ub2", "2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "mBP", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "cLa", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "-1", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], [], ["5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "", "", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["31u", "5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["4", "5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["4", "5", "1", "41", "2", "3", "4", "2", "3", "4", "1", "4", "3", "5", "1", "3", "2", "3", "1", "5", "", "", "5"], ["9Ua"], ["5 JlF"], ["9"], ["9", "kg2"], ["9", "kg2", "kg2"], ["9", "kg2", "kg2", "9"], ["9", "kg2", "kg2", "9", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "7", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "7", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "2", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["lDH"], ["2"], ["2", "2"], ["2", "2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["2", "2", "41 2 3 4 2 3 4 1 41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1 3 2 1 3 2 3 1"], ["9e0"], ["4"], ["4", "5ae"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["2WZ", "4"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["3", "5"], ["3", "5", "3"], ["3", "5", "3", "lDm"], ["3", "5", "3", "6"], ["3", "3", "5", "3", "6"], ["3", "oLm", "3", "5", "3", "6"], ["3", "10", "3", "5", "3", "6"], ["3", "10", "3", "5", "6"], ["3", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCCCCCCiiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "10", "3", "5", "6"], ["3", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "10", "3", "5", "6"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "10", "3", "5", "6"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "10", "3", "5", "6", "10"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "-1", "3", "5", "6", "10"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "-1", "3", "9", "6", "10"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "6", "3", "9", "6", "10"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "5", "3", "9", "6", "10"], ["6", "3", "5", "3", "9", "6", "10"], ["6", "3", "5", "3", "9", "6", "100000", "10"], ["iS2"], ["of4", "5"], ["1", "5"], ["1"], ["1", "1"], ["1", "1", "1"], ["1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["vwz", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "b55", "1", "1", "1", "1", "1"], ["1", "1", "1", "7", "b55", "1", "1", "1", "1", "1"], ["1", "1", "1", "7", "b55 37C", "1", "1", "1", "1", "1"], ["1", "1", "1 1 1", "1", "7", "b55 37C", "1", "1", "1", "1", "1"], ["NEx"], ["o9s", "5"], ["8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8", "8"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "8"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 5 5 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 Q6q 4 1 4 3 2 1 3 2 5 5 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 rte", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 6lv 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 8 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 8 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "1", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 8 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 2 1 3 2 5 5 1", "8", "5 0", "1", "5"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552414438.981058, "StartTime": 1552414427.490003}, {"InputHistory": [["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7"], ["7", "Ub2"], ["7", "Ub2", "Ub2"], ["7", "Ub2", "Ub2", "7"], ["7", "Ub2", "Ub2", "7", "Ub2"], ["7", "Ub2", "Ub2", "7", "Ub2", "7"], ["7", "Ub2", "Ub2", "7", "Ub2", "7", "7"], ["7", "Ub2", "Ub2", "7", "Ub2", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "Ub2", "Ub2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "Ub2", "2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "mBP", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "cLa", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "-1", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], [], ["5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "", "", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["31u", "5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["4", "5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["4", "5", "1", "41", "2", "3", "4", "2", "3", "4", "1", "4", "3", "5", "1", "3", "2", "3", "1", "5", "", "", "5"], ["9Ua"], ["5 JlF"], ["9"], ["9", "kg2"], ["9", "kg2", "kg2"], ["9", "kg2", "kg2", "9"], ["9", "kg2", "kg2", "9", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "7", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "7", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "2", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["lDH"], ["2"], ["2", "2"], ["2", "2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["2", "2", "41 2 3 4 2 3 4 1 41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1 3 2 1 3 2 3 1"], ["9e0"], ["4"], ["4", "5ae"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["2WZ", "4"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["3", "5"], ["3", "5", "3"], ["3", "5", "3", "lDm"], ["3", "5", "3", "6"], ["3", "3", "5", "3", "6"], ["3", "oLm", "3", "5", "3", "6"], ["3", "10", "3", "5", "3", "6"], ["3", "10", "3", "5", "6"], ["3", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCCCCCCiiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "10", "3", "5", "6"], ["3", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "10", "3", "5", "6"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "10", "3", "5", "6"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "10", "3", "5", "6", "10"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "-1", "3", "5", "6", "10"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "-1", "3", "9", "6", "10"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "6", "3", "9", "6", "10"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "5", "3", "9", "6", "10"], ["6", "3", "5", "3", "9", "6", "10"], ["6", "3", "5", "3", "9", "6", "100000", "10"], ["iS2"], ["of4", "5"], ["1", "5"], ["1"], ["1", "1"], ["1", "1", "1"], ["1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["vwz", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "b55", "1", "1", "1", "1", "1"], ["1", "1", "1", "7", "b55", "1", "1", "1", "1", "1"], ["1", "1", "1", "7", "b55 37C", "1", "1", "1", "1", "1"], ["1", "1", "1 1 1", "1", "7", "b55 37C", "1", "1", "1", "1", "1"], ["NEx"], ["o9s", "5"], ["8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8", "8"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "8"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 5 5 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 Q6q 4 1 4 3 2 1 3 2 5 5 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 rte", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 6lv 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 8 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 8 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "1", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 8 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 2 1 3 2 5 5 1", "8", "5 0", "1", "5"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["41w", "2"], ["9", "2"], ["9", "2", "2"], ["9", "2", "2", "2"], ["9", "2", "2", "2", "c-i"], ["9", "2", "2", "2", "c-i", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "2", "2", "2", "c-i", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "A36"], ["9", "2", "2", "2", "c-i", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "A36", "DQP"], ["9", "2", "2", "2", "c-i", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "A36", "DQP", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "2", "2", "2", "c-i", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "A36", "DQP", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "2"], ["9", "2", "2", "2", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "A36", "DQP", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "2"], ["9", "2", "2", "2", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "DQP", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "2"], ["9", "2", "2", "2", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "2"], ["9", "2", "2", "2 8Va", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "2"], ["9", "2", "2", "2 6", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "2"], ["9", "2", "2", "2 6", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "2", "2", "2 6", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "2", "2 KU5", "2 6", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "2", "2 6", "2 6", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["2zZ"], ["3"], ["3", "3"], ["3", "3", "3"], ["3", "3", "3", "3"], ["3 81Y", "3", "3", "3"], ["5", "3", "3", "3"], ["5", "3", "3", "3", "3"], ["5", "3", "3", "3", "3", "3"], ["5", "3", "3", "12 2", "3", "3", "3"], ["5", "gsJ", "3", "3", "12 2", "3", "3", "3"], ["5", "9", "3", "3", "12 2", "3", "3", "3"], ["5", "9", "3", "3", "12", "2", "3", "3", "3"], ["vYa"], ["10"], ["10", "2bb"], ["10", "2bb", "10"], ["10", "2bb", "10", "VaH"], ["10", "2bb", "10", "VaH", "10"], ["10", "2bb", "10", "VaH", "10", "10"], ["10", "2bb", "10", "VaH", "10", "10", "VaH"], ["10", "2bb", "10", "VaH", "10", "10", "VaH", "VaH"], ["10", "2bb", "10", "VaH", "10", "10", "VaH", "VaH", "D5C"], ["10", "2bb", "10", "VaH", "10", "10", "VaH", "VaH", "D5C", "dmi"], ["10", "2bb", "10", "VaH", "10", "10", "VaH", "VaH", "D5C", "dmi", "10"], ["10", "0", "10", "VaH", "10", "10", "VaH", "VaH", "D5C", "dmi", "10"], ["10", "0", "10", "VaH", "10", "10", "VaH", "1", "D5C", "dmi", "10"], ["10", "0", "10", "VaH", "10", "10", "-1", "1", "D5C", "dmi", "10"], ["10", "0", "10", "7", "10", "10", "-1", "1", "D5C", "dmi", "10"], ["10", "0", "10", "7", "10", "10", "-1", "1", "6", "dmi", "10"], ["10", "0", "10", "7", "10", "10", "-1", "1", "6", "0", "10"], ["10", "0", "10", "7", "10", "10", "1", "6", "0", "10"], ["10", "0", "10", "7", "10", "10", "1", "6", "0", "10", "0I7"], ["10", "0", "10", "7", "10", "10", "1", "6", "0", "10", "1"], ["10", "0", "10", "7", "10 z3J", "10", "1", "6", "0", "10", "1"], ["10", "0", "10", "7", "10 6", "10", "1", "6", "0", "10", "1"], ["10", "10", "7", "10 6", "10", "1", "6", "0", "10", "1"], ["10", "10", "7", "10 6", "10", "1", "6", "0", "10", "1", "10"], ["10", "10", "7", "10 6", "10", "1", "6", "0", "10", "10", "1", "10"], ["Z23"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552414450.480759, "StartTime": 1552414438.982948}, {"EndTime": 1552414451.3686397, "FinalMinimizedSolution": ["0"], "FinalCoverage": [33, 17, 22, 6, 40, "3-7,", "11,", "15-18,", "21-24,", "29,", "33-36,", "2->3,", "10->11,", "12->33,", "14->15,", "20->21,", "28->29"], "FinalSolution": ["0"], "StartTime": 1552414450.4835987, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7"], ["7", "Ub2"], ["7", "Ub2", "Ub2"], ["7", "Ub2", "Ub2", "7"], ["7", "Ub2", "Ub2", "7", "Ub2"], ["7", "Ub2", "Ub2", "7", "Ub2", "7"], ["7", "Ub2", "Ub2", "7", "Ub2", "7", "7"], ["7", "Ub2", "Ub2", "7", "Ub2", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "Ub2", "Ub2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "Ub2", "2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "mBP", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "cLa", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["7", "1", "-1", "2", "7", "5", "10", "7", "7", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], [], ["5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "", "", "5"], ["5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "", "", "5"], ["5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["31u", "5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["4", "5", "1", "41 2 3 4 2 3 4 1 4 3 5 1 3 2 3 1", "5", "", "", "5"], ["4", "5", "1", "41", "2", "3", "4", "2", "3", "4", "1", "4", "3", "5", "1", "3", "2", "3", "1", "5", "", "", "5"], ["9Ua"], ["5 JlF"], ["9"], ["9", "kg2"], ["9", "kg2", "kg2"], ["9", "kg2", "kg2", "9"], ["9", "kg2", "kg2", "9", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "kg2"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "kg2", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "kg2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "kg2", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "kg2", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "7", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "7", "-1", "9", "1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "2", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["lDH"], ["2"], ["2", "2"], ["2", "2", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["2", "2", "41 2 3 4 2 3 4 1 41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1 3 2 1 3 2 3 1"], ["9e0"], ["4"], ["4", "5ae"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["2WZ", "4"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["3", "5"], ["3", "5", "3"], ["3", "5", "3", "lDm"], ["3", "5", "3", "6"], ["3", "3", "5", "3", "6"], ["3", "oLm", "3", "5", "3", "6"], ["3", "10", "3", "5", "3", "6"], ["3", "10", "3", "5", "6"], ["3", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCCCCCCiiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "10", "3", "5", "6"], ["3", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "10", "3", "5", "6"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "10", "3", "5", "6"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "10", "3", "5", "6", "10"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "-1", "3", "5", "6", "10"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "-1", "3", "9", "6", "10"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "6", "3", "9", "6", "10"], ["6", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC3iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "5", "3", "9", "6", "10"], ["6", "3", "5", "3", "9", "6", "10"], ["6", "3", "5", "3", "9", "6", "100000", "10"], ["iS2"], ["of4", "5"], ["1", "5"], ["1"], ["1", "1"], ["1", "1", "1"], ["1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["vwz", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "b55", "1", "1", "1", "1", "1"], ["1", "1", "1", "7", "b55", "1", "1", "1", "1", "1"], ["1", "1", "1", "7", "b55 37C", "1", "1", "1", "1", "1"], ["1", "1", "1 1 1", "1", "7", "b55 37C", "1", "1", "1", "1", "1"], ["NEx"], ["o9s", "5"], ["8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8", "8"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "8"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "Z90", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 5 5 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 Q6q 4 1 4 3 2 1 3 2 5 5 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 rte", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "7", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 6lv 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 8 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 8 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 1 3 2 5 5 1", "8", "5 0", "1", "5"], ["8", "5 0", "5", "41 2 3 4 2 3 4 1 4 3 2 8 3 2 3 1", "8", "8", "41 2 3 4 2 7 4 1 4 3 2 2 1 3 2 5 5 1", "8", "5 0", "1", "5"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["41w", "2"], ["9", "2"], ["9", "2", "2"], ["9", "2", "2", "2"], ["9", "2", "2", "2", "c-i"], ["9", "2", "2", "2", "c-i", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "2", "2", "2", "c-i", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "A36"], ["9", "2", "2", "2", "c-i", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "A36", "DQP"], ["9", "2", "2", "2", "c-i", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "A36", "DQP", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "2", "2", "2", "c-i", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "A36", "DQP", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "2"], ["9", "2", "2", "2", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "A36", "DQP", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "2"], ["9", "2", "2", "2", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "DQP", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "2"], ["9", "2", "2", "2", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "2"], ["9", "2", "2", "2 8Va", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "2"], ["9", "2", "2", "2 6", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "2"], ["9", "2", "2", "2 6", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "2", "2", "2 6", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "2", "2 KU5", "2 6", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["9", "2", "2 6", "2 6", "0", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "3", "10", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1", "41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"], ["2zZ"], ["3"], ["3", "3"], ["3", "3", "3"], ["3", "3", "3", "3"], ["3 81Y", "3", "3", "3"], ["5", "3", "3", "3"], ["5", "3", "3", "3", "3"], ["5", "3", "3", "3", "3", "3"], ["5", "3", "3", "12 2", "3", "3", "3"], ["5", "gsJ", "3", "3", "12 2", "3", "3", "3"], ["5", "9", "3", "3", "12 2", "3", "3", "3"], ["5", "9", "3", "3", "12", "2", "3", "3", "3"], ["vYa"], ["10"], ["10", "2bb"], ["10", "2bb", "10"], ["10", "2bb", "10", "VaH"], ["10", "2bb", "10", "VaH", "10"], ["10", "2bb", "10", "VaH", "10", "10"], ["10", "2bb", "10", "VaH", "10", "10", "VaH"], ["10", "2bb", "10", "VaH", "10", "10", "VaH", "VaH"], ["10", "2bb", "10", "VaH", "10", "10", "VaH", "VaH", "D5C"], ["10", "2bb", "10", "VaH", "10", "10", "VaH", "VaH", "D5C", "dmi"], ["10", "2bb", "10", "VaH", "10", "10", "VaH", "VaH", "D5C", "dmi", "10"], ["10", "0", "10", "VaH", "10", "10", "VaH", "VaH", "D5C", "dmi", "10"], ["10", "0", "10", "VaH", "10", "10", "VaH", "1", "D5C", "dmi", "10"], ["10", "0", "10", "VaH", "10", "10", "-1", "1", "D5C", "dmi", "10"], ["10", "0", "10", "7", "10", "10", "-1", "1", "D5C", "dmi", "10"], ["10", "0", "10", "7", "10", "10", "-1", "1", "6", "dmi", "10"], ["10", "0", "10", "7", "10", "10", "-1", "1", "6", "0", "10"], ["10", "0", "10", "7", "10", "10", "1", "6", "0", "10"], ["10", "0", "10", "7", "10", "10", "1", "6", "0", "10", "0I7"], ["10", "0", "10", "7", "10", "10", "1", "6", "0", "10", "1"], ["10", "0", "10", "7", "10 z3J", "10", "1", "6", "0", "10", "1"], ["10", "0", "10", "7", "10 6", "10", "1", "6", "0", "10", "1"], ["10", "10", "7", "10 6", "10", "1", "6", "0", "10", "1"], ["10", "10", "7", "10 6", "10", "1", "6", "0", "10", "1", "10"], ["10", "10", "7", "10 6", "10", "1", "6", "0", "10", "10", "1", "10"], ["Z23"], ["41 2 3 4 2 3 4 1 4 3 2 1 3 2 3 1"]]}]], [{"CorrectInputs": [[["29.2", "26.6"], 1518288496]], "UniqueId": "da3a8ee3-0ddc-4032-f70e-fab0d5aaf06d_0", "CoverageInfo": [6, 5, 2, 0, 12, "2-7"], "TimeStamp": 1518288463, "BadInput": ["26,2"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    x=float(input())\nValueError: could not convert string to float: '26,2'\n", "ip": "46.229.141.88"}, [{"EndTime": 1552341844.94588, "FinalMinimizedSolution": ["4.0", "1.5"], "FinalCoverage": [6, 1, 2, 1, 75, "6,", "3->6"], "FinalSolution": ["4.0", "1.5"], "StartTime": 1552341843.6985848, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["26,2"], ["4.0"], ["4.0", "26,2"]]}, {"EndTime": 1552341846.1900165, "FinalMinimizedSolution": ["10.3", "7.3"], "FinalCoverage": [6, 1, 2, 1, 75, "6,", "3->6"], "FinalSolution": ["10.3", "7.3"], "StartTime": 1552341844.9460607, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["26,2"], ["4.0"], ["4.0", "26,2"], ["26,2"], ["10.3"], ["10.3", "26,2"]]}, {"EndTime": 1552341847.4346619, "FinalMinimizedSolution": ["9.10", "6.2"], "FinalCoverage": [6, 1, 2, 1, 75, "6,", "3->6"], "FinalSolution": ["9.10", "6.2"], "StartTime": 1552341846.1902213, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["26,2"], ["4.0"], ["4.0", "26,2"], ["26,2"], ["10.3"], ["10.3", "26,2"], ["26,2"], ["9.10"], ["9.10", "wh-"]]}, {"EndTime": 1552341850.9615514, "FinalMinimizedSolution": ["2.1", "0.7"], "FinalCoverage": [6, 1, 2, 1, 75, "6,", "3->6"], "FinalSolution": ["2.1", "0.7"], "StartTime": 1552341847.4349015, "FoundSolution": true, "NumProbesMade": 15, "InputHistory": [["26,2"], ["4.0"], ["4.0", "26,2"], ["26,2"], ["10.3"], ["10.3", "26,2"], ["26,2"], ["9.10"], ["9.10", "wh-"], ["26,2"], ["9.2"], ["9.2", "9.2"], ["1", "9.2", "9.2"], ["1 0Y3", "9.2", "9.2"], ["3.0", "9.2", "9.2"], ["3.0", "00 00 01 80", "9.2", "9.2"], ["3.0", "7.5", "9.2", "9.2"], ["3.0", "7.5", "9.2", "15", "9.2"], ["3.0", "7.5", "9.2", "15", "3.5", "9.2"], ["3.0", "45m", "7.5", "9.2", "15", "3.5", "9.2"], ["3.0", "4.4", "7.5", "9.2", "15", "3.5", "9.2"], [], ["2.1"], ["2.1", "toD"]]}, {"EndTime": 1552341852.207454, "FinalMinimizedSolution": ["5.5", "-1.1"], "FinalCoverage": [6, 1, 2, 1, 75, "6,", "3->6"], "FinalSolution": ["5.5", "-1.1"], "StartTime": 1552341850.9619474, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["26,2"], ["4.0"], ["4.0", "26,2"], ["26,2"], ["10.3"], ["10.3", "26,2"], ["26,2"], ["9.10"], ["9.10", "wh-"], ["26,2"], ["9.2"], ["9.2", "9.2"], ["1", "9.2", "9.2"], ["1 0Y3", "9.2", "9.2"], ["3.0", "9.2", "9.2"], ["3.0", "00 00 01 80", "9.2", "9.2"], ["3.0", "7.5", "9.2", "9.2"], ["3.0", "7.5", "9.2", "15", "9.2"], ["3.0", "7.5", "9.2", "15", "3.5", "9.2"], ["3.0", "45m", "7.5", "9.2", "15", "3.5", "9.2"], ["3.0", "4.4", "7.5", "9.2", "15", "3.5", "9.2"], [], ["2.1"], ["2.1", "toD"], ["26,2"], ["5.5"], ["5.5", "-cT"]]}]], [{"CorrectInputs": [[["2", "B : A", "C : B", "2", " A B", "A B"], 1532435149]], "UniqueId": "d2b6a176-f189-47ce-f72c-b3021f5eb846_0", "CoverageInfo": [16, 13, 12, 2, 11, "3,", "6-21,", "5->6,", "5->14"], "TimeStamp": 1532434990, "BadInput": ["B : A"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 5, in <module>\n    for i in range(int(input())):\nValueError: invalid literal for int() with base 10: 'B : A'\n", "ip": "82.179.72.86"}, [{"EndTime": 1552357929.765349, "FinalMinimizedSolution": ["1", "1", "0"], "FinalCoverage": [16, 9, 12, 2, 39, "3,", "8-12,", "15-19,", "7->8,", "14->15"], "FinalSolution": ["1", "1", "0"], "StartTime": 1552357928.3295393, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["B : A"], ["1"], ["1", "1"], ["1", "1", "B : A"]]}, {"EndTime": 1552357932.1486392, "FinalMinimizedSolution": ["6", "B : A", "u7K", "6", "B : A", "B : A", "B : A", "-1"], "FinalCoverage": [16, 6, 12, 2, 64, "3,", "10,", "15-19,", "9->10,", "14->15"], "FinalSolution": ["6", "B : A", "u7K", "6", "B : A", "B : A", "B : A", "-1"], "StartTime": 1552357929.7655523, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["B : A"], ["1"], ["1", "1"], ["1", "1", "B : A"], ["B : A"], ["6"], ["6", "B : A"], ["6", "B : A", "u7K"], ["6", "B : A", "u7K", "6"], ["6", "B : A", "u7K", "6", "B : A"], ["6", "B : A", "u7K", "6", "B : A", "B : A"], ["6", "B : A", "u7K", "6", "B : A", "B : A", "B : A"], ["6", "B : A", "u7K", "6", "B : A", "B : A", "B : A", "B : A"]]}, {"InputHistory": [["B : A"], ["1"], ["1", "1"], ["1", "1", "B : A"], ["B : A"], ["6"], ["6", "B : A"], ["6", "B : A", "u7K"], ["6", "B : A", "u7K", "6"], ["6", "B : A", "u7K", "6", "B : A"], ["6", "B : A", "u7K", "6", "B : A", "B : A"], ["6", "B : A", "u7K", "6", "B : A", "B : A", "B : A"], ["6", "B : A", "u7K", "6", "B : A", "B : A", "B : A", "B : A"], ["B : A"], ["10"], ["10", "B : A"], ["10", "B : A", "B : A"], ["10", "B : A", "B : A", ":"], ["10", "B : A", "B : A", ":", "10"], ["10", "B : A", "B : A", ":", "10", ":"], ["10", "B : A", "B : A", ":", "10", ":", ":"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A", "99h"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A", "2"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A", "2", ":"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A", "2", ": :"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ": :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ": :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ":"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":"], [], ["5"], ["5", "Dn0"], ["5", "Dn0", "Dn0"], ["5", "Dn0", "Dn0", ":"], ["5", "Dn0", "Dn0", ":", "Dn0"], ["5", "Dn0", "Dn0", ":", "Dn0", "5"], ["5", "Dn0", "Dn0", ":", "Dn0", "5", "Dn0"], ["5", "Dn0", "Dn0", ":", "Dn0", "5", "7"], ["5", "Dn0", "Dn0", ":", "Dn0", "5", "7", "Dn0"], ["5", "Dn0", "Dn0", ":", "Dn0", "5", "7", "Dn0 Dn0"], [":"], ["8"], ["8", "0GY"], ["8", "0GY", "0GY"], ["8", "0GY", "0GY", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A", "8"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A", "8", "7lL"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A", "8", "7lL 7lL"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8 1-0", "8", "B : A", "8", "7lL 7lL"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8 1-0", "8", "B 1 A", "8", "7lL 7lL"], [":", ":"], [":", "8"], ["7", "8"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552357943.4938562, "StartTime": 1552357932.1489675}, {"EndTime": 1552357952.31022, "FinalMinimizedSolution": ["-1", "-1"], "FinalCoverage": [16, 11, 12, 2, 25, "3,", "6-12,", "15-19,", "5->6,", "14->15"], "FinalSolution": ["-1", "-1"], "StartTime": 1552357943.4951453, "FoundSolution": true, "NumProbesMade": 43, "InputHistory": [["B : A"], ["1"], ["1", "1"], ["1", "1", "B : A"], ["B : A"], ["6"], ["6", "B : A"], ["6", "B : A", "u7K"], ["6", "B : A", "u7K", "6"], ["6", "B : A", "u7K", "6", "B : A"], ["6", "B : A", "u7K", "6", "B : A", "B : A"], ["6", "B : A", "u7K", "6", "B : A", "B : A", "B : A"], ["6", "B : A", "u7K", "6", "B : A", "B : A", "B : A", "B : A"], ["B : A"], ["10"], ["10", "B : A"], ["10", "B : A", "B : A"], ["10", "B : A", "B : A", ":"], ["10", "B : A", "B : A", ":", "10"], ["10", "B : A", "B : A", ":", "10", ":"], ["10", "B : A", "B : A", ":", "10", ":", ":"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A", "99h"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A", "2"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A", "2", ":"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A", "2", ": :"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ": :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ": :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ":"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":"], [], ["5"], ["5", "Dn0"], ["5", "Dn0", "Dn0"], ["5", "Dn0", "Dn0", ":"], ["5", "Dn0", "Dn0", ":", "Dn0"], ["5", "Dn0", "Dn0", ":", "Dn0", "5"], ["5", "Dn0", "Dn0", ":", "Dn0", "5", "Dn0"], ["5", "Dn0", "Dn0", ":", "Dn0", "5", "7"], ["5", "Dn0", "Dn0", ":", "Dn0", "5", "7", "Dn0"], ["5", "Dn0", "Dn0", ":", "Dn0", "5", "7", "Dn0 Dn0"], [":"], ["8"], ["8", "0GY"], ["8", "0GY", "0GY"], ["8", "0GY", "0GY", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A", "8"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A", "8", "7lL"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A", "8", "7lL 7lL"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8 1-0", "8", "B : A", "8", "7lL 7lL"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8 1-0", "8", "B 1 A", "8", "7lL 7lL"], [":", ":"], [":", "8"], ["7", "8"], ["B : A"], ["7"], ["7", "7"], ["7", "7", "B : A"], ["7", "7", "B : A", "B : A"], ["7", "7", "B : A", "B : A", "B : A"], ["7", "7", "B : A", "B : A", "B : A", "7"], ["7", "7", "B : A", "B : A", "B : A", "7", "B : A"], ["7", "7", "B : A", "B : A", "B : A", "7", "B : A", "B : A"], ["7", "7", "B : A", "B : A", "B : A", "7", "B : A", "B : A", "B : A"], ["7", "7", "B : A", "B : A", "B : A", "7", "B : A", "B : A", "8"], ["7", "7", "B : A", "B : A", "B : A", "7", "B : A", "B : A", "8", "112"], ["7", "7", "B : A", "B : A", "B : A", "7", "B : A", "B : A", "8", "112 112"], ["vMT"], ["9"], ["9", "B : A"], ["9", "B : A", "9"], ["9", "B : A", "9", "3yg"], ["9", "B : A", "9", "3yg", "9"], ["9", "B : A", "9", "3yg", "9", "3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "B : A"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "2"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "2", "3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "2", "3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "n = int(input())      horas = n // 3600      minutos = n // 60     segundos = (n % 3600) % 60           print('%d:%d:%d' % (horas, minutos, segundos))", "2", "3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2 2"], [": C39"], ["-1"]]}, {"InputHistory": [["B : A"], ["1"], ["1", "1"], ["1", "1", "B : A"], ["B : A"], ["6"], ["6", "B : A"], ["6", "B : A", "u7K"], ["6", "B : A", "u7K", "6"], ["6", "B : A", "u7K", "6", "B : A"], ["6", "B : A", "u7K", "6", "B : A", "B : A"], ["6", "B : A", "u7K", "6", "B : A", "B : A", "B : A"], ["6", "B : A", "u7K", "6", "B : A", "B : A", "B : A", "B : A"], ["B : A"], ["10"], ["10", "B : A"], ["10", "B : A", "B : A"], ["10", "B : A", "B : A", ":"], ["10", "B : A", "B : A", ":", "10"], ["10", "B : A", "B : A", ":", "10", ":"], ["10", "B : A", "B : A", ":", "10", ":", ":"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A", "99h"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A", "2"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A", "2", ":"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : A", ":", "B : A", "2", ": :"], ["10", "B : A", "B : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ": :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ": :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ":"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":", ": : : : : : : : : : :"], ["10", "B : A", "IJ0 : A", ":", "10", ":", ":", "B : A", "B : :", ":", "B : A", "2", ":"], [], ["5"], ["5", "Dn0"], ["5", "Dn0", "Dn0"], ["5", "Dn0", "Dn0", ":"], ["5", "Dn0", "Dn0", ":", "Dn0"], ["5", "Dn0", "Dn0", ":", "Dn0", "5"], ["5", "Dn0", "Dn0", ":", "Dn0", "5", "Dn0"], ["5", "Dn0", "Dn0", ":", "Dn0", "5", "7"], ["5", "Dn0", "Dn0", ":", "Dn0", "5", "7", "Dn0"], ["5", "Dn0", "Dn0", ":", "Dn0", "5", "7", "Dn0 Dn0"], [":"], ["8"], ["8", "0GY"], ["8", "0GY", "0GY"], ["8", "0GY", "0GY", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A", "B : A"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A", "8"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A", "8", "7lL"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8", "8", "B : A", "8", "7lL 7lL"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8 1-0", "8", "B : A", "8", "7lL 7lL"], ["8", "0GY", "0GY", "B : A", "B : A", "B : A", "8 1-0", "8", "B 1 A", "8", "7lL 7lL"], [":", ":"], [":", "8"], ["7", "8"], ["B : A"], ["7"], ["7", "7"], ["7", "7", "B : A"], ["7", "7", "B : A", "B : A"], ["7", "7", "B : A", "B : A", "B : A"], ["7", "7", "B : A", "B : A", "B : A", "7"], ["7", "7", "B : A", "B : A", "B : A", "7", "B : A"], ["7", "7", "B : A", "B : A", "B : A", "7", "B : A", "B : A"], ["7", "7", "B : A", "B : A", "B : A", "7", "B : A", "B : A", "B : A"], ["7", "7", "B : A", "B : A", "B : A", "7", "B : A", "B : A", "8"], ["7", "7", "B : A", "B : A", "B : A", "7", "B : A", "B : A", "8", "112"], ["7", "7", "B : A", "B : A", "B : A", "7", "B : A", "B : A", "8", "112 112"], ["vMT"], ["9"], ["9", "B : A"], ["9", "B : A", "9"], ["9", "B : A", "9", "3yg"], ["9", "B : A", "9", "3yg", "9"], ["9", "B : A", "9", "3yg", "9", "3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "B : A"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "2"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "2", "3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "2", "3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "n = int(input())      horas = n // 3600      minutos = n // 60     segundos = (n % 3600) % 60           print('%d:%d:%d' % (horas, minutos, segundos))", "2", "3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2", "3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg 3yg"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2"], ["9", "B : A", "9", "3yg", "9", "3yg", "B : A", "3yg", "9", "F0-", "8", "2 2"], [": C39"], ["-1"], ["B : A"], ["iY0"], ["tC3"], [": :", ":"], ["4", ":"], ["4", ":", "B : A"], ["4", ":", "B : A", "B : A"], ["4", ":", "B : A", "B : A", ":"], ["4", ":", "B : A", "B : A", ":", ":"], ["4", ":", "B : A", "B : A", ":", "8"], ["4", ":", "B : A", "B : A", ":", "8", "8"], ["4", ":", "B : A", "B : A", ":", "8", "8 8"], ["4", ":", "B : A", "B : A", "get foo a", ":", "8", "8 8"], ["4", ":", "B : A", "B : A", "get foo a", "8", "8", "8 8"], ["4", ":", "B : A", "B : A", "get foo a", "8", "8", "8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "8", "8", "8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "8", "8", "8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "8", "8", "8 8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "8", "8", "8 8 8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "8", "8", "8 8 8 8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "8", "8", "8 8 8 8 8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "8", "8", "8 8 8 8 8 8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "8", "8", "8 8 8 8 8 8 8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "8", "8"], ["4", ":", "B : A", "B : A", "get foo a", "8", "8 8"], ["4", ":", "B : A", "B : A", "get foo a", "2.11", "8", "8 8"], ["4", ":", "B : A", "B : A", "get foo a", "5", "8", "8 8"], ["4", ":", "B : A", "B : A", "get foo a", "5", "8", "8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "5", "8", "8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "5", "8", "8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "5", "8", "8 8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "5", "8", "8 8 8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "5", "8", "8 8 8 8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "5", "8", "8 8 8 8 8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "5", "8", "8 8 8 8 8 8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "5", "8", "8 8 8 8 8 8 8 8 8 8 8"], ["4", ":", "B : A", "B : A", "get foo a", "5", "8"], ["4", ":", "B : A", "B : A", "get foo a", "5", "8 8"], ["4", "4", ":", "B : A", "B : A", "get foo a", "5", "8 8"], ["4", "4", ":", "B : A", "B : A", "9", "5", "8 8"], ["4", "4", ":", "B : A", "B : A", "9", "5", "8 8 8"], ["4", "4", ":", "B : A", "B : A", "9", "5", "8 8 8 8"], ["4", "4", ":", "B : A", "B : A", "9", "5", "8 8 8 8 8"], ["4", "4", ":", "B : A", "B : A", "9", "5", "8 8 8 8 8 8"], ["4", "4", ":", "B : A", "B : A", "9", "5", "8 8 8 8 8 8 8"], ["4", "4", ":", "B : A", "B : A", "9", "5", "8 8 8 8 8 8 8 8"], ["4", "4", ":", "B : A", "B : A", "9", "5", "8 8 8 8 8 8 8 8 8"], ["4", "4", ":", "B : A", "B : A", "9", "5", "8 8 8 8 8 8 8 8 8 8"], ["4", "4", ":", "B : A", "B : A", "9", "5", "8 8 8 8 8 8 8 8 8 8 8"], ["4", "4", ":", "B : A", "B : A", "9", "5"], ["4", "4", ":", "B : A", "B : A", "9", "5 5"], ["4 2p5", "4", ":", "B : A", "B : A", "9", "5 5"], ["5", "4", ":", "B : A", "B : A", "9", "5 5"], ["5", "4", ":", "B : A", "B : A", "9", "8"], ["5", "4", ":", "B : A", "B : A", "9", "8", "B : A"], ["5", "4", ":", "B : A", "B : A", "9", "8", "B :"], ["8", "5", "4", ":", "B : A", "B : A", "9", "8", "B :"], ["8", "5", "4", ":", "B : A", "B : A", "9", "8", "B :", "B : A"], ["8", "5", "4", ":", "B : A", "B : A", "9", "8", "B :", "7"], ["8", "5", "4", ":", "B : A", "B : A", "9", "8", "B :", "7", "7"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552357963.660049, "StartTime": 1552357952.3123193}]], [{"CorrectInputs": [[["10 10 1", "2 8 8 2"], 1527481917]], "UniqueId": "1a12edcd-58ad-4ee4-8bb3-60c3e4e9e226_0", "CoverageInfo": [12, 10, 12, 0, 8, "3-12"], "TimeStamp": 1527481896, "BadInput": ["10 10 1", "10 10 1"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 2, in <module>\n    l1,c1,l2,c2 = map(int,input().split())\nValueError: not enough values to unpack (expected 4, got 3)\n", "ip": "170.244.137.86"}, [{"EndTime": 1552319919.7857363, "FinalMinimizedSolution": ["10 10 1", "10 10 1 1"], "FinalCoverage": [12, 2, 12, 2, 75, "11-12,", "7->exit,", "10->11"], "FinalSolution": ["10 10 1", "10 10 1 1"], "StartTime": 1552319918.9134982, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["10 10 1", "10 10 1"]]}, {"EndTime": 1552319923.14624, "FinalMinimizedSolution": ["9 699 699", "10 10 1 1"], "FinalCoverage": [12, 5, 12, 1, 42, "8-12,", "7->8"], "FinalSolution": ["9 699 699", "10 10 1 1"], "StartTime": 1552319919.7859163, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["10 10 1", "10 10 1"], ["10 10 1", "10 10 1"], ["10 9 4 5 8 1", "10 10 1 1"], ["10 9 4 5 8 1", "10 10 1"], ["10 9 4 5 8 1", "10 10"], ["10 9 4 5 8 1", "10"], ["10 9 4 5 8 1", ""], ["", ""], ["", " "], ["*", "", " "], ["10", "", " "], [], ["3p8 699 699"], ["9 699 699"], ["9 699 699", "10 10 1"]]}, {"EndTime": 1552319926.6747894, "FinalMinimizedSolution": ["7 7 7", "10 10 1 1"], "FinalCoverage": [12, 5, 12, 1, 42, "8-12,", "7->8"], "FinalSolution": ["7 7 7", "10 10 1 1"], "StartTime": 1552319923.146526, "FoundSolution": true, "NumProbesMade": 15, "InputHistory": [["10 10 1", "10 10 1"], ["10 10 1", "10 10 1"], ["10 9 4 5 8 1", "10 10 1 1"], ["10 9 4 5 8 1", "10 10 1"], ["10 9 4 5 8 1", "10 10"], ["10 9 4 5 8 1", "10"], ["10 9 4 5 8 1", ""], ["", ""], ["", " "], ["*", "", " "], ["10", "", " "], [], ["3p8 699 699"], ["9 699 699"], ["9 699 699", "10 10 1"], ["10 10 1", "10 10 1"], ["10 10 1", ""], ["10 10 1", " "], ["10 10 1 10 1", " "], ["10 10 1 10 1", ""], ["10 10 1 10 1", "2", ""], ["10 10 1 10 1", "2", "2", ""], ["10 10 1 10 1", "2", "2", "3ru", ""], ["", "2", "2", "3ru", ""], ["", "2", "2", "3ru", " "], ["b81"], ["7"], ["7 7"], ["7 7 7"], ["7 7 7", "10 10 1"]]}, {"EndTime": 1552319934.5407782, "FinalMinimizedSolution": ["10 10 1", "10 10 10 10"], "FinalCoverage": null, "FinalSolution": ["10 10 1", "10 10 10 10"], "StartTime": 1552319926.6751988, "FoundSolution": true, "NumProbesMade": 37, "InputHistory": [["10 10 1", "10 10 1"], ["10 10 1", "10 10 1"], ["10 9 4 5 8 1", "10 10 1 1"], ["10 9 4 5 8 1", "10 10 1"], ["10 9 4 5 8 1", "10 10"], ["10 9 4 5 8 1", "10"], ["10 9 4 5 8 1", ""], ["", ""], ["", " "], ["*", "", " "], ["10", "", " "], [], ["3p8 699 699"], ["9 699 699"], ["9 699 699", "10 10 1"], ["10 10 1", "10 10 1"], ["10 10 1", ""], ["10 10 1", " "], ["10 10 1 10 1", " "], ["10 10 1 10 1", ""], ["10 10 1 10 1", "2", ""], ["10 10 1 10 1", "2", "2", ""], ["10 10 1 10 1", "2", "2", "3ru", ""], ["", "2", "2", "3ru", ""], ["", "2", "2", "3ru", " "], ["b81"], ["7"], ["7 7"], ["7 7 7"], ["7 7 7", "10 10 1"], ["10 10 1", "10 10 1"], ["10 10 1", "10", "10", "1", "1"], ["10 10 1", "10", "10", "1", "1 1"], ["10 10 1", "10", "10", "1", "1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1"], ["10 10 1", "10", "10", "1 1"], ["10 10 1", "10", "10", "1 1 1"], ["10 10 1", "10", "10", "1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10"], ["10 10 1", "10", "10 10"], ["10 10 1", "10", "10 10 10"], ["10 10 1", "10", "10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10 10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10 10 10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10 10 10 10 10 10 10"], ["10 10 1", "10"], ["10 10 1", "10 10"], ["10 10 1", "10 10 10"]]}, {"EndTime": 1552319944.9055183, "FinalMinimizedSolution": ["145 145 145", "7 7 7 7"], "FinalCoverage": [12, 5, 12, 1, 42, "8-12,", "7->8"], "FinalSolution": ["145 145 145", "7 7 7 7"], "StartTime": 1552319934.5416174, "FoundSolution": true, "NumProbesMade": 51, "InputHistory": [["10 10 1", "10 10 1"], ["10 10 1", "10 10 1"], ["10 9 4 5 8 1", "10 10 1 1"], ["10 9 4 5 8 1", "10 10 1"], ["10 9 4 5 8 1", "10 10"], ["10 9 4 5 8 1", "10"], ["10 9 4 5 8 1", ""], ["", ""], ["", " "], ["*", "", " "], ["10", "", " "], [], ["3p8 699 699"], ["9 699 699"], ["9 699 699", "10 10 1"], ["10 10 1", "10 10 1"], ["10 10 1", ""], ["10 10 1", " "], ["10 10 1 10 1", " "], ["10 10 1 10 1", ""], ["10 10 1 10 1", "2", ""], ["10 10 1 10 1", "2", "2", ""], ["10 10 1 10 1", "2", "2", "3ru", ""], ["", "2", "2", "3ru", ""], ["", "2", "2", "3ru", " "], ["b81"], ["7"], ["7 7"], ["7 7 7"], ["7 7 7", "10 10 1"], ["10 10 1", "10 10 1"], ["10 10 1", "10", "10", "1", "1"], ["10 10 1", "10", "10", "1", "1 1"], ["10 10 1", "10", "10", "1", "1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1", "1 1 1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1"], ["10 10 1", "10", "10", "1 1"], ["10 10 1", "10", "10", "1 1 1"], ["10 10 1", "10", "10", "1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "1 1 1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10"], ["10 10 1", "10", "10 10"], ["10 10 1", "10", "10 10 10"], ["10 10 1", "10", "10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10 10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10 10 10 10 10 10"], ["10 10 1", "10", "10 10 10 10 10 10 10 10 10 10 10"], ["10 10 1", "10"], ["10 10 1", "10 10"], ["10 10 1", "10 10 10"], ["10 10 1", "10 10 1"], ["10 10 1", "10", "10", "10 10 1", "1", "1"], ["10 10 1", "10", "10", "10 10 1", "1", "1 1"], ["10 10 1", "10", "10", "10 10 1", "1", "1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1", "1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1", "1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1", "1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1", "1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1", "1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1", "1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1", "1 1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1", "1 1 1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1"], ["10 10 1", "10", "10", "10 10 1", "1 1"], ["10 10 1", "10", "10", "10 10 1", "1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1 1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1", "1 1 1 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1"], ["10 10 1", "10", "10", "10 10 1 1"], ["10 10 1", "10", "10", "10 10 1 1 1"], ["10 10 1", "10", "10", "10 10 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1 1 1 1 1 1 1 1"], ["10 10 1", "10", "10", "10 10 1 1 1 1 1 1 1 1 1"], ["*"], ["145", "7"], ["145", "7 7"], ["145", "7 7 7"], ["145", "7 7 7 7"], ["145", "7 7 7 7 7"], ["145", "7 7 7 7 7 7"], ["145", "7 7 7 7 7 7 7"], ["145", "7 7 7 7 7 7 7 7"], ["145", "7 7 7 7 7 7 7 7 7"], ["145", "7 7 7 7 7 7 7 7 7 7"], ["145", "7 7 7 7 7 7 7 7 7 7 7"], ["145"], ["145 145"], ["145 145 145"], ["145 145 145", "."], ["145 145 145", "7"], ["145 145 145", "7 7"], ["145 145 145", "7 7 7"]]}]], [{"CorrectInputs": [[["1", "2", "3", "4"], 1543442515]], "UniqueId": "aba64814-d220-4836-c99f-85cfae246785_0", "CoverageInfo": [11, 3, 6, 1, 76, "13-16,", "9->13"], "TimeStamp": 1543442347, "BadInput": ["2", "2", "1", "4"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 11, in <module>\n    list.remove(index)\nValueError: list.remove(x): x not in list\n", "ip": "192.133.12.123"}, [{"InputHistory": [["2", "2", "1", "4"], ["2", "2", "1", "4 Tb8"], ["2", "2", "1", "2"], ["2", "2", "1 x40", "2"], ["2", "2", "4", "2"], ["2", "b : c d a", "2", "4", "2"], ["2", "-1", "2", "4", "2"], ["2", "-1", "2", "4", "-1", "2"], ["2", "-1", "2", "4", "-1 Ir7", "2"], ["2", "-1", "2", "4", "", "2"], ["2", "wyD", "-1", "2", "4", "", "2"], ["2", "7", "-1", "2", "4", "", "2"], [], ["4"], ["4", "20j"], ["4", "0"], ["4", "0", "x9t"], ["4", "0", "10"], ["4", "0", "10", "4"], ["4", "0", "10", "1 2 3 4 5", "4"], ["4", "0", "10", "4", "4"], ["4", "0", "10", "4 JvS", "4"], ["4", "0", "10", "6", "4"], ["4", "0", "10", "6", "4 1o2"], ["5F9"], ["2"], ["2", "2"], ["2", "2", "oNU"], ["2", "2", "0"], ["2", "2", "0", "y6Z"], ["2", "2", "0", "5"], ["2 11", "2", "2", "0", "5"], ["10", "2", "2", "0", "5"], ["10", "2", "2", "OCj", "0", "5"], ["10", "2", "2", "2", "0", "5"], ["10 xmk", "2", "2", "0", "5"], ["10", "2", "2 8F2", "0", "5"], ["416"], ["416", "416"], ["416", "416", "4"], ["416", "416", "4", "416"], ["416", "416", "4", "2", "416"], ["416", "4", "416"], ["416", "4", "416", "4"], ["416", "4", "rg6", "416"], ["416", "4", "0", "416"], ["O55"], ["9"], ["9", "1"], ["9", "1", "4"], ["9", "1", "4", "1"], ["mark", "9", "1", "4", "1"], ["7", "9", "1", "4", "1"], ["7", "9", "1", "K6u", "4", "1"], ["7", "9", "1", "9", "4", "1"], ["7", "9", "1", "9", "4", "c2b", "1"], ["7", "9", "1", "9", "4", "2", "1"], ["7", "9", "$10,000,000", "1", "9", "4", "2", "1"], ["7", "9", "1", "1", "9", "4", "2", "1"], ["7 lp2", "9", "1", "1", "9", "4", "2", "1"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552320645.3738527, "StartTime": 1552320633.985732}, {"EndTime": 1552320647.5719836, "FinalMinimizedSolution": ["3", "1", "4", "3"], "FinalCoverage": [11, 1, 6, 0, 94, "14"], "FinalSolution": ["3", "1", "4", "3"], "StartTime": 1552320645.3746367, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["2", "2", "1", "4"], ["2", "2", "1", "4 Tb8"], ["2", "2", "1", "2"], ["2", "2", "1 x40", "2"], ["2", "2", "4", "2"], ["2", "b : c d a", "2", "4", "2"], ["2", "-1", "2", "4", "2"], ["2", "-1", "2", "4", "-1", "2"], ["2", "-1", "2", "4", "-1 Ir7", "2"], ["2", "-1", "2", "4", "", "2"], ["2", "wyD", "-1", "2", "4", "", "2"], ["2", "7", "-1", "2", "4", "", "2"], [], ["4"], ["4", "20j"], ["4", "0"], ["4", "0", "x9t"], ["4", "0", "10"], ["4", "0", "10", "4"], ["4", "0", "10", "1 2 3 4 5", "4"], ["4", "0", "10", "4", "4"], ["4", "0", "10", "4 JvS", "4"], ["4", "0", "10", "6", "4"], ["4", "0", "10", "6", "4 1o2"], ["5F9"], ["2"], ["2", "2"], ["2", "2", "oNU"], ["2", "2", "0"], ["2", "2", "0", "y6Z"], ["2", "2", "0", "5"], ["2 11", "2", "2", "0", "5"], ["10", "2", "2", "0", "5"], ["10", "2", "2", "OCj", "0", "5"], ["10", "2", "2", "2", "0", "5"], ["10 xmk", "2", "2", "0", "5"], ["10", "2", "2 8F2", "0", "5"], ["416"], ["416", "416"], ["416", "416", "4"], ["416", "416", "4", "416"], ["416", "416", "4", "2", "416"], ["416", "4", "416"], ["416", "4", "416", "4"], ["416", "4", "rg6", "416"], ["416", "4", "0", "416"], ["O55"], ["9"], ["9", "1"], ["9", "1", "4"], ["9", "1", "4", "1"], ["mark", "9", "1", "4", "1"], ["7", "9", "1", "4", "1"], ["7", "9", "1", "K6u", "4", "1"], ["7", "9", "1", "9", "4", "1"], ["7", "9", "1", "9", "4", "c2b", "1"], ["7", "9", "1", "9", "4", "2", "1"], ["7", "9", "$10,000,000", "1", "9", "4", "2", "1"], ["7", "9", "1", "1", "9", "4", "2", "1"], ["7 lp2", "9", "1", "1", "9", "4", "2", "1"], ["2", "2", "1", "4"], ["2", "C : A", "2", "1", "4"], ["2", "4", "2", "1", "4"], ["kh4"], ["3"], ["3", "pRF"], ["3", "1"], ["3", "1", "4"]]}, {"EndTime": 1552320652.3546128, "FinalMinimizedSolution": ["1", "2", "3", "2"], "FinalCoverage": [11, 1, 6, 0, 94, "14"], "FinalSolution": ["1", "2", "3", "2"], "StartTime": 1552320647.572914, "FoundSolution": true, "NumProbesMade": 23, "InputHistory": [["2", "2", "1", "4"], ["2", "2", "1", "4 Tb8"], ["2", "2", "1", "2"], ["2", "2", "1 x40", "2"], ["2", "2", "4", "2"], ["2", "b : c d a", "2", "4", "2"], ["2", "-1", "2", "4", "2"], ["2", "-1", "2", "4", "-1", "2"], ["2", "-1", "2", "4", "-1 Ir7", "2"], ["2", "-1", "2", "4", "", "2"], ["2", "wyD", "-1", "2", "4", "", "2"], ["2", "7", "-1", "2", "4", "", "2"], [], ["4"], ["4", "20j"], ["4", "0"], ["4", "0", "x9t"], ["4", "0", "10"], ["4", "0", "10", "4"], ["4", "0", "10", "1 2 3 4 5", "4"], ["4", "0", "10", "4", "4"], ["4", "0", "10", "4 JvS", "4"], ["4", "0", "10", "6", "4"], ["4", "0", "10", "6", "4 1o2"], ["5F9"], ["2"], ["2", "2"], ["2", "2", "oNU"], ["2", "2", "0"], ["2", "2", "0", "y6Z"], ["2", "2", "0", "5"], ["2 11", "2", "2", "0", "5"], ["10", "2", "2", "0", "5"], ["10", "2", "2", "OCj", "0", "5"], ["10", "2", "2", "2", "0", "5"], ["10 xmk", "2", "2", "0", "5"], ["10", "2", "2 8F2", "0", "5"], ["416"], ["416", "416"], ["416", "416", "4"], ["416", "416", "4", "416"], ["416", "416", "4", "2", "416"], ["416", "4", "416"], ["416", "4", "416", "4"], ["416", "4", "rg6", "416"], ["416", "4", "0", "416"], ["O55"], ["9"], ["9", "1"], ["9", "1", "4"], ["9", "1", "4", "1"], ["mark", "9", "1", "4", "1"], ["7", "9", "1", "4", "1"], ["7", "9", "1", "K6u", "4", "1"], ["7", "9", "1", "9", "4", "1"], ["7", "9", "1", "9", "4", "c2b", "1"], ["7", "9", "1", "9", "4", "2", "1"], ["7", "9", "$10,000,000", "1", "9", "4", "2", "1"], ["7", "9", "1", "1", "9", "4", "2", "1"], ["7 lp2", "9", "1", "1", "9", "4", "2", "1"], ["2", "2", "1", "4"], ["2", "C : A", "2", "1", "4"], ["2", "4", "2", "1", "4"], ["kh4"], ["3"], ["3", "pRF"], ["3", "1"], ["3", "1", "4"], ["2", "2", "1", "4"], ["U2N"], ["8"], ["8", "8"], ["8", "8", "1"], ["8", "8", "1", "1"], ["jE5", "8", "8", "1", "1"], ["2", "8", "8", "1", "1"], ["2", "8", "8", "1", "1 lNS"], ["2", "8", "1", "1 lNS"], ["2", "8", "1", "2"], ["2", "A : B C D", "8", "1", "2"], ["2", "10", "8", "1", "2"], ["2", "10", "8", "1"], ["2", "10", "8", "4", "1"], ["2", "2", "10", "8", "4", "1"], ["2", "2", "10", "8", "8", "4", "1"], ["BdS"], ["1"], ["1", "2"], ["1", "2", "64Z"], ["1", "2", "3"], ["1", "2", "3", "1YU"]]}, {"InputHistory": [["2", "2", "1", "4"], ["2", "2", "1", "4 Tb8"], ["2", "2", "1", "2"], ["2", "2", "1 x40", "2"], ["2", "2", "4", "2"], ["2", "b : c d a", "2", "4", "2"], ["2", "-1", "2", "4", "2"], ["2", "-1", "2", "4", "-1", "2"], ["2", "-1", "2", "4", "-1 Ir7", "2"], ["2", "-1", "2", "4", "", "2"], ["2", "wyD", "-1", "2", "4", "", "2"], ["2", "7", "-1", "2", "4", "", "2"], [], ["4"], ["4", "20j"], ["4", "0"], ["4", "0", "x9t"], ["4", "0", "10"], ["4", "0", "10", "4"], ["4", "0", "10", "1 2 3 4 5", "4"], ["4", "0", "10", "4", "4"], ["4", "0", "10", "4 JvS", "4"], ["4", "0", "10", "6", "4"], ["4", "0", "10", "6", "4 1o2"], ["5F9"], ["2"], ["2", "2"], ["2", "2", "oNU"], ["2", "2", "0"], ["2", "2", "0", "y6Z"], ["2", "2", "0", "5"], ["2 11", "2", "2", "0", "5"], ["10", "2", "2", "0", "5"], ["10", "2", "2", "OCj", "0", "5"], ["10", "2", "2", "2", "0", "5"], ["10 xmk", "2", "2", "0", "5"], ["10", "2", "2 8F2", "0", "5"], ["416"], ["416", "416"], ["416", "416", "4"], ["416", "416", "4", "416"], ["416", "416", "4", "2", "416"], ["416", "4", "416"], ["416", "4", "416", "4"], ["416", "4", "rg6", "416"], ["416", "4", "0", "416"], ["O55"], ["9"], ["9", "1"], ["9", "1", "4"], ["9", "1", "4", "1"], ["mark", "9", "1", "4", "1"], ["7", "9", "1", "4", "1"], ["7", "9", "1", "K6u", "4", "1"], ["7", "9", "1", "9", "4", "1"], ["7", "9", "1", "9", "4", "c2b", "1"], ["7", "9", "1", "9", "4", "2", "1"], ["7", "9", "$10,000,000", "1", "9", "4", "2", "1"], ["7", "9", "1", "1", "9", "4", "2", "1"], ["7 lp2", "9", "1", "1", "9", "4", "2", "1"], ["2", "2", "1", "4"], ["2", "C : A", "2", "1", "4"], ["2", "4", "2", "1", "4"], ["kh4"], ["3"], ["3", "pRF"], ["3", "1"], ["3", "1", "4"], ["2", "2", "1", "4"], ["U2N"], ["8"], ["8", "8"], ["8", "8", "1"], ["8", "8", "1", "1"], ["jE5", "8", "8", "1", "1"], ["2", "8", "8", "1", "1"], ["2", "8", "8", "1", "1 lNS"], ["2", "8", "1", "1 lNS"], ["2", "8", "1", "2"], ["2", "A : B C D", "8", "1", "2"], ["2", "10", "8", "1", "2"], ["2", "10", "8", "1"], ["2", "10", "8", "4", "1"], ["2", "2", "10", "8", "4", "1"], ["2", "2", "10", "8", "8", "4", "1"], ["BdS"], ["1"], ["1", "2"], ["1", "2", "64Z"], ["1", "2", "3"], ["1", "2", "3", "1YU"], ["2", "2", "1", "4"], ["2", "1", "4"], ["2", "1", "4", "1"], ["2", "84.5", "1", "4", "1"], ["2", "7", "1", "4", "1"], ["2", "7", "1", "4", "sXk", "1"], ["3j9"], ["0"], ["0", "2"], ["0", "2", "4"], ["0", "2", "4", "4"], ["0", "0", "2", "4", "4"], ["0", "0", "2", "4", "N23", "4"], ["0", "0", "m0S", "2", "4", "N23", "4"], ["0", "0", "5", "2", "4", "N23", "4"], ["0", "0", "5", "2", "4", "N23", "2", "4"], ["0 1 2 3 4 5", "0", "0", "5", "2", "4", "N23", "2", "4"], ["0", "0", "0", "5", "2", "4", "N23", "2", "4"], ["0", "0", "0", "5", "2", "4", "-5 2 9", "N23", "2", "4"], ["0", "0", "0", "5", "2", "-5 2 9", "N23", "2", "4"], ["0", "0", "0 kBs", "5", "2", "-5 2 9", "N23", "2", "4"], ["0", "0", "1", "5", "2", "-5 2 9", "N23", "2", "4"], ["0", "0", "1", "5", "2", "-5 2 9", "N23", "2", "5", "4"], ["0", "0", "1", "5", "2", "-5", "2", "9", "N23", "2", "5", "4"], ["0", "0", "1", "5", "2", "-5", "2 NMz", "9", "N23", "2", "5", "4"], ["0", "0", "6", "1", "5", "2", "-5", "2 NMz", "9", "N23", "2", "5", "4"], ["0", "0", "6", "1", "5", "2", "-5", "2 NMz", "9", "N23", "2", "4"], ["0", "0", "1", "5", "2", "-5", "2 NMz", "9", "N23", "2", "4"], ["0", "0", "1", "5", "2", "-5", "2 63h", "9", "N23", "2", "4"], ["0", "0", "1", "5", "2", "-5", "2 63h", "9", "N23", "2 ZtS", "4"], ["0", "0", "1231TEST", "1", "5", "2", "-5", "2 63h", "9", "N23", "2 ZtS", "4"], ["0", "0", "0", "1", "5", "2", "-5", "2 63h", "9", "N23", "2 ZtS", "4"], ["0", "0", "0", "1", "5", "2", "2,3,4,5", "-5", "2 63h", "9", "N23", "2 ZtS", "4"], ["0", "0", "0", "1", "5", "2", "2,3,4,5", "-5", "2 63h", "9", "2 ZtS", "4"], ["0", "0", "0", "1", "5", "2", "2,3,4,5", "18", "-5", "2 63h", "9", "2 ZtS", "4"], ["0", "0", "0", "1", "5", "2", "2,3,4,5", "18", "-5", "2 CbW", "9", "2 ZtS", "4"], ["0", "2", "0", "0", "1", "5", "2", "2,3,4,5", "18", "-5", "2 CbW", "9", "2 ZtS", "4"], ["0", "2", "0 n57", "0", "1", "5", "2", "2,3,4,5", "18", "-5", "2 CbW", "9", "2 ZtS", "4"], ["0", "2", "-1", "0", "1", "5", "2", "2,3,4,5", "18", "-5", "2 CbW", "9", "2 ZtS", "4"], ["0", "2", "-1", "0", "1", "5 t6h", "2", "2,3,4,5", "18", "-5", "2 CbW", "9", "2 ZtS", "4"], ["0", "2", "-1", "0", "1", "5 t6h", "2", "2,3,4,5", "18", "-5", "2 CbW", "9", "2 ZtS", "0P0", "4"], ["0", "2", "-1", "0", "1", "5 t6h", "2", "2,3,4,5", "18 63C", "-5", "2 CbW", "9", "2 ZtS", "0P0", "4"], ["0", "2", "-1", "0", "1", "5 t6h", "2", "lgx", "2,3,4,5", "18 63C", "-5", "2 CbW", "9", "2 ZtS", "0P0", "4"], ["0", "2", "-1", "0", "1", "5 t6h", "2", "lgx", "2,3,4,5", "18 63C", "-5", "2 CbW", "2 ZtS", "0P0", "4"], ["l3a"], ["7"], ["7", "2"], ["7", "2", "2"], ["7", "2", "2", "4"], ["4", "7", "2", "2", "4"], ["Yw-"], ["-1"], ["-1", "2"], ["-1", "2", "2"], ["-1", "2", "2", "jw6"], ["-1", "2", "2", "8"], ["2", "-1", "2", "2", "8"], ["7", "2", "-1", "2", "2", "8"], ["7 BRD", "2", "-1", "2", "2", "8"], ["3", "2", "-1", "2", "2", "8"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552320663.7462115, "StartTime": 1552320652.3557756}, {"EndTime": 1552320664.8059285, "FinalMinimizedSolution": ["3", "2", "1", "4"], "FinalCoverage": [11, 1, 6, 0, 94, "14"], "FinalSolution": ["3", "2", "1", "4"], "StartTime": 1552320663.7483058, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["2", "2", "1", "4"], ["2", "2", "1", "4 Tb8"], ["2", "2", "1", "2"], ["2", "2", "1 x40", "2"], ["2", "2", "4", "2"], ["2", "b : c d a", "2", "4", "2"], ["2", "-1", "2", "4", "2"], ["2", "-1", "2", "4", "-1", "2"], ["2", "-1", "2", "4", "-1 Ir7", "2"], ["2", "-1", "2", "4", "", "2"], ["2", "wyD", "-1", "2", "4", "", "2"], ["2", "7", "-1", "2", "4", "", "2"], [], ["4"], ["4", "20j"], ["4", "0"], ["4", "0", "x9t"], ["4", "0", "10"], ["4", "0", "10", "4"], ["4", "0", "10", "1 2 3 4 5", "4"], ["4", "0", "10", "4", "4"], ["4", "0", "10", "4 JvS", "4"], ["4", "0", "10", "6", "4"], ["4", "0", "10", "6", "4 1o2"], ["5F9"], ["2"], ["2", "2"], ["2", "2", "oNU"], ["2", "2", "0"], ["2", "2", "0", "y6Z"], ["2", "2", "0", "5"], ["2 11", "2", "2", "0", "5"], ["10", "2", "2", "0", "5"], ["10", "2", "2", "OCj", "0", "5"], ["10", "2", "2", "2", "0", "5"], ["10 xmk", "2", "2", "0", "5"], ["10", "2", "2 8F2", "0", "5"], ["416"], ["416", "416"], ["416", "416", "4"], ["416", "416", "4", "416"], ["416", "416", "4", "2", "416"], ["416", "4", "416"], ["416", "4", "416", "4"], ["416", "4", "rg6", "416"], ["416", "4", "0", "416"], ["O55"], ["9"], ["9", "1"], ["9", "1", "4"], ["9", "1", "4", "1"], ["mark", "9", "1", "4", "1"], ["7", "9", "1", "4", "1"], ["7", "9", "1", "K6u", "4", "1"], ["7", "9", "1", "9", "4", "1"], ["7", "9", "1", "9", "4", "c2b", "1"], ["7", "9", "1", "9", "4", "2", "1"], ["7", "9", "$10,000,000", "1", "9", "4", "2", "1"], ["7", "9", "1", "1", "9", "4", "2", "1"], ["7 lp2", "9", "1", "1", "9", "4", "2", "1"], ["2", "2", "1", "4"], ["2", "C : A", "2", "1", "4"], ["2", "4", "2", "1", "4"], ["kh4"], ["3"], ["3", "pRF"], ["3", "1"], ["3", "1", "4"], ["2", "2", "1", "4"], ["U2N"], ["8"], ["8", "8"], ["8", "8", "1"], ["8", "8", "1", "1"], ["jE5", "8", "8", "1", "1"], ["2", "8", "8", "1", "1"], ["2", "8", "8", "1", "1 lNS"], ["2", "8", "1", "1 lNS"], ["2", "8", "1", "2"], ["2", "A : B C D", "8", "1", "2"], ["2", "10", "8", "1", "2"], ["2", "10", "8", "1"], ["2", "10", "8", "4", "1"], ["2", "2", "10", "8", "4", "1"], ["2", "2", "10", "8", "8", "4", "1"], ["BdS"], ["1"], ["1", "2"], ["1", "2", "64Z"], ["1", "2", "3"], ["1", "2", "3", "1YU"], ["2", "2", "1", "4"], ["2", "1", "4"], ["2", "1", "4", "1"], ["2", "84.5", "1", "4", "1"], ["2", "7", "1", "4", "1"], ["2", "7", "1", "4", "sXk", "1"], ["3j9"], ["0"], ["0", "2"], ["0", "2", "4"], ["0", "2", "4", "4"], ["0", "0", "2", "4", "4"], ["0", "0", "2", "4", "N23", "4"], ["0", "0", "m0S", "2", "4", "N23", "4"], ["0", "0", "5", "2", "4", "N23", "4"], ["0", "0", "5", "2", "4", "N23", "2", "4"], ["0 1 2 3 4 5", "0", "0", "5", "2", "4", "N23", "2", "4"], ["0", "0", "0", "5", "2", "4", "N23", "2", "4"], ["0", "0", "0", "5", "2", "4", "-5 2 9", "N23", "2", "4"], ["0", "0", "0", "5", "2", "-5 2 9", "N23", "2", "4"], ["0", "0", "0 kBs", "5", "2", "-5 2 9", "N23", "2", "4"], ["0", "0", "1", "5", "2", "-5 2 9", "N23", "2", "4"], ["0", "0", "1", "5", "2", "-5 2 9", "N23", "2", "5", "4"], ["0", "0", "1", "5", "2", "-5", "2", "9", "N23", "2", "5", "4"], ["0", "0", "1", "5", "2", "-5", "2 NMz", "9", "N23", "2", "5", "4"], ["0", "0", "6", "1", "5", "2", "-5", "2 NMz", "9", "N23", "2", "5", "4"], ["0", "0", "6", "1", "5", "2", "-5", "2 NMz", "9", "N23", "2", "4"], ["0", "0", "1", "5", "2", "-5", "2 NMz", "9", "N23", "2", "4"], ["0", "0", "1", "5", "2", "-5", "2 63h", "9", "N23", "2", "4"], ["0", "0", "1", "5", "2", "-5", "2 63h", "9", "N23", "2 ZtS", "4"], ["0", "0", "1231TEST", "1", "5", "2", "-5", "2 63h", "9", "N23", "2 ZtS", "4"], ["0", "0", "0", "1", "5", "2", "-5", "2 63h", "9", "N23", "2 ZtS", "4"], ["0", "0", "0", "1", "5", "2", "2,3,4,5", "-5", "2 63h", "9", "N23", "2 ZtS", "4"], ["0", "0", "0", "1", "5", "2", "2,3,4,5", "-5", "2 63h", "9", "2 ZtS", "4"], ["0", "0", "0", "1", "5", "2", "2,3,4,5", "18", "-5", "2 63h", "9", "2 ZtS", "4"], ["0", "0", "0", "1", "5", "2", "2,3,4,5", "18", "-5", "2 CbW", "9", "2 ZtS", "4"], ["0", "2", "0", "0", "1", "5", "2", "2,3,4,5", "18", "-5", "2 CbW", "9", "2 ZtS", "4"], ["0", "2", "0 n57", "0", "1", "5", "2", "2,3,4,5", "18", "-5", "2 CbW", "9", "2 ZtS", "4"], ["0", "2", "-1", "0", "1", "5", "2", "2,3,4,5", "18", "-5", "2 CbW", "9", "2 ZtS", "4"], ["0", "2", "-1", "0", "1", "5 t6h", "2", "2,3,4,5", "18", "-5", "2 CbW", "9", "2 ZtS", "4"], ["0", "2", "-1", "0", "1", "5 t6h", "2", "2,3,4,5", "18", "-5", "2 CbW", "9", "2 ZtS", "0P0", "4"], ["0", "2", "-1", "0", "1", "5 t6h", "2", "2,3,4,5", "18 63C", "-5", "2 CbW", "9", "2 ZtS", "0P0", "4"], ["0", "2", "-1", "0", "1", "5 t6h", "2", "lgx", "2,3,4,5", "18 63C", "-5", "2 CbW", "9", "2 ZtS", "0P0", "4"], ["0", "2", "-1", "0", "1", "5 t6h", "2", "lgx", "2,3,4,5", "18 63C", "-5", "2 CbW", "2 ZtS", "0P0", "4"], ["l3a"], ["7"], ["7", "2"], ["7", "2", "2"], ["7", "2", "2", "4"], ["4", "7", "2", "2", "4"], ["Yw-"], ["-1"], ["-1", "2"], ["-1", "2", "2"], ["-1", "2", "2", "jw6"], ["-1", "2", "2", "8"], ["2", "-1", "2", "2", "8"], ["7", "2", "-1", "2", "2", "8"], ["7 BRD", "2", "-1", "2", "2", "8"], ["3", "2", "-1", "2", "2", "8"], ["2", "2", "1", "4"], ["2 E82", "2", "1", "4"]]}]], [{"CorrectInputs": [[["6"], 1525887142]], "UniqueId": "68233ed6-0070-4708-8c8e-09ccb83f8ca9_0", "CoverageInfo": [11, 10, 6, 0, 6, "2-12"], "TimeStamp": 1525887133, "BadInput": ["y"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    wb = int(input(\"\ubb3c\ud48d\uc120 \uac1c\uc218 \uc785\ub825 : \"))\nValueError: invalid literal for int() with base 10: 'y'\n", "ip": "210.97.150.2"}, [{"EndTime": 1552290643.928814, "FinalMinimizedSolution": ["7"], "FinalCoverage": [11, 6, 6, 1, 35, "4-9,", "3->4"], "FinalSolution": ["7"], "StartTime": 1552290643.0690308, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["y"]]}, {"EndTime": 1552290644.7941244, "FinalMinimizedSolution": ["4"], "FinalCoverage": [11, 6, 6, 1, 35, "4-9,", "3->4"], "FinalSolution": ["4"], "StartTime": 1552290643.928993, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["y"], ["y"]]}, {"EndTime": 1552290645.6584806, "FinalMinimizedSolution": ["2"], "FinalCoverage": [11, 6, 6, 1, 35, "4-9,", "3->4"], "FinalSolution": ["2"], "StartTime": 1552290644.794299, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["y"], ["y"], ["y"]]}, {"EndTime": 1552290646.5183938, "FinalMinimizedSolution": ["0"], "FinalCoverage": [11, 6, 6, 2, 41, "5-11,", "3->11,", "4->5"], "FinalSolution": ["0"], "StartTime": 1552290645.6586635, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["y"], ["y"], ["y"], ["y"]]}, {"EndTime": 1552290647.3815384, "FinalMinimizedSolution": ["5"], "FinalCoverage": [11, 6, 6, 2, 41, "5-11,", "3->11,", "4->5"], "FinalSolution": ["5"], "StartTime": 1552290646.5185826, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["y"], ["y"], ["y"], ["y"], ["y"]]}]], [{"CorrectInputs": [[["1", "4", "sachin tweet_id_1", "sehwag tweet_id_2", "sachin tweet_id_3", "sachin tweet_id_4"], 1524136406]], "UniqueId": "1dd86e4c-915f-41a2-9295-6f58257063fd_0", "CoverageInfo": [21, 20, 14, 0, 3, "2-23"], "TimeStamp": 1524136255, "BadInput": ["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    inp = int(input())\nValueError: invalid literal for int() with base 10: '1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4'\n", "ip": "171.78.166.124"}, [{"InputHistory": [["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["7"], ["7", "mH8"], ["7", "5"], ["7", "5", "7"], ["7", "5", "7", " "], ["7", "5", "7", "", ""], ["7", "5", "7", ""], ["7", "7", ""], ["7", "7"], ["7", "7", "7"], ["7", "7", "7", " "], ["7", "7", "7", " 3"], ["7", "7", "7", " 3", "7"], ["7", "7", "7", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "OsH", "7", "7", "7", "4", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  "], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2", "OsH", "7"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552365293.8702254, "StartTime": 1552365282.4841495}, {"EndTime": 1552365300.4379716, "FinalMinimizedSolution": ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3", "7", "4", "cM3"], "FinalCoverage": [21, 0, 14, 0, 100], "FinalSolution": ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3", "7", "4", "cM3"], "StartTime": 1552365293.8727646, "FoundSolution": true, "NumProbesMade": 31, "InputHistory": [["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["7"], ["7", "mH8"], ["7", "5"], ["7", "5", "7"], ["7", "5", "7", " "], ["7", "5", "7", "", ""], ["7", "5", "7", ""], ["7", "7", ""], ["7", "7"], ["7", "7", "7"], ["7", "7", "7", " "], ["7", "7", "7", " 3"], ["7", "7", "7", " 3", "7"], ["7", "7", "7", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "OsH", "7", "7", "7", "4", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  "], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2", "OsH", "7"], ["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4"], ["4", " "], ["4", "7"], ["4", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3", "7", "4"]]}, {"EndTime": 1552365305.5515332, "FinalMinimizedSolution": ["0"], "FinalCoverage": [21, 17, 14, 2, 17, "4-21,", "23,", "3->4,", "22->23"], "FinalSolution": ["0", "10", "7  ", "7  create foo global", "7  ", "7  ", "7  ", "7", "", "", "7  ", "ocp", " "], "StartTime": 1552365300.441542, "FoundSolution": true, "NumProbesMade": 20, "InputHistory": [["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["7"], ["7", "mH8"], ["7", "5"], ["7", "5", "7"], ["7", "5", "7", " "], ["7", "5", "7", "", ""], ["7", "5", "7", ""], ["7", "7", ""], ["7", "7"], ["7", "7", "7"], ["7", "7", "7", " "], ["7", "7", "7", " 3"], ["7", "7", "7", " 3", "7"], ["7", "7", "7", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "OsH", "7", "7", "7", "4", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  "], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2", "OsH", "7"], ["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4"], ["4", " "], ["4", "7"], ["4", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3", "7", "4"], ["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["8"], ["8", "8"], ["8", "8", " "], [], ["7  "], ["7  ", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["7  ", "10"], ["7  ", "10", "7  "], ["7  ", "10", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "ocp"], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "ocp", " "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7", "", "", "7  ", "ocp", " "], ["7  ", "10", "7  ", "7  create foo global", "7  ", "7  ", "7  ", "7", "", "", "7  ", "ocp", " "], ["7  Mz5", "10", "7  ", "7  create foo global", "7  ", "7  ", "7  ", "7", "", "", "7  ", "ocp", " "]]}, {"InputHistory": [["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["7"], ["7", "mH8"], ["7", "5"], ["7", "5", "7"], ["7", "5", "7", " "], ["7", "5", "7", "", ""], ["7", "5", "7", ""], ["7", "7", ""], ["7", "7"], ["7", "7", "7"], ["7", "7", "7", " "], ["7", "7", "7", " 3"], ["7", "7", "7", " 3", "7"], ["7", "7", "7", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "OsH", "7", "7", "7", "4", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  "], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2", "OsH", "7"], ["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4"], ["4", " "], ["4", "7"], ["4", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3", "7", "4"], ["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["8"], ["8", "8"], ["8", "8", " "], [], ["7  "], ["7  ", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["7  ", "10"], ["7  ", "10", "7  "], ["7  ", "10", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "ocp"], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "ocp", " "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7", "", "", "7  ", "ocp", " "], ["7  ", "10", "7  ", "7  create foo global", "7  ", "7  ", "7  ", "7", "", "", "7  ", "ocp", " "], ["7  Mz5", "10", "7  ", "7  create foo global", "7  ", "7  ", "7  ", "7", "", "", "7  ", "ocp", " "], ["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_idinches", "9", "10", "9", "9", "9", " "], ["9", "9  ", "9", "9", "9", "9", "9", "9", "9  ", "9", "inches", "9", "10", "9", "9", "9", " "], ["9", "9  ", "9", "9", "9", "9", "9", "9", "9  ", "9", "inches", "9", "10", "9", "9", "9", ""], ["9", "9  ", "9", "9", "9", "9", "9", "9", "9  ", "9", "inches", "9", "10", "9", "orchestra", "9", "9", ""], ["9", "9  ", "9", "9", "9", "9  ", "9", "9", "9  ", "9", "inches", "9", "10", "9", "orchestra", "9", "9", ""], ["9", "9  ", "9", "9", "9", "9  ", "9", "9", "9  ", "9", "inches", "9", "10", "9 9ei", "orchestra", "9", "9", ""], ["9", "9  ", "9", "9", "9  ", "9", "9", "9  ", "9", "inches", "9", "10", "9 9ei", "orchestra", "9", "9", ""], ["aaaabbcaa", "9", "9  ", "9", "9", "9  ", "9", "9", "9  ", "9", "inches", "9", "10", "9 9ei", "orchestra", "9", "9", ""], ["3", "9", "9  ", "9", "9", "9  ", "9", "9", "9  ", "9", "inches", "9", "10", "9 9ei", "orchestra", "9", "9", ""], ["3", "9", "9  ", "9", "9", "9  ", "9", "9", "9  ", "9", "g9v", "inches", "9", "10", "9 9ei", "orchestra", "9", "9", ""], ["3", "9", "9  ", "9", "9", "9  ", "9", "9", "9  ", "9", "g9v", "-1", "9", "10", "9 9ei", "orchestra", "9", "9", ""], ["X0r"], ["2 2", "4"], ["4", "4"], ["4", "4", "4"], ["4", "4", "4", "4"], ["4", "4", "4", "4", "4"], ["4", "4", "4", "4", "4", "4"], ["4", "4", "4", "4", "4", "4", "4"], ["4", "4", "4", "4", "4", "4", "4", " "], ["4", "4", "4", "4", "4", "4", "4", "", ""], ["4", "0 7 -1", "4", "4", "4", "4", "4", "4", "", ""], ["4", "4", "4", "4", "4", "4", "4", "4", "", ""], ["4", "4", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "4", "4", "4", "4", "4", "", ""], ["4", "4", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "4", "4", "4", "4", "0 7 -1", "4", "", ""], ["4", "4", "4", "", "4", "4", "4", "4", "0 7 -1", "4", "", ""], ["4", "4", "4", "", "4", "4", "4", "0 7 -1", "4", "", ""], ["4", "4", "4", "", "4", "4", "4", "0 7 4", "4", "", ""], ["4", "4", "4", "", "4", "4", "4", "0", "7", "4", "4", "", ""], ["4", "4", "4", "", "4", "4", "4", "0", "7", "7", "4", "4", "", ""], ["4", "4", "4", "", "4", "4", "4", "0", "7", "7", "4", "4", "4", "", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0", "7", "7", "4", "4", "4", "", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0", "7", "7", "4", "4", " ", "4", "", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0", "7", "7", "4", "4", " ", "tom marvolo riddle", "4", "", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0", "7", "7", "4", "4", " 7", "tom marvolo riddle", "4", "", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0", "7", "7", "4", "4", " 7", "tom marvolo riddle", "4", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0", "7", "7", "4", "4", " 1.0, 3, 1", "tom marvolo riddle", "4", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0 -D5", "7", "7", "4", "4", " 1.0, 3, 1", "tom marvolo riddle", "4", ""]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552365316.5835063, "StartTime": 1552365305.555371}, {"EndTime": 1552365317.4624805, "FinalMinimizedSolution": ["0"], "FinalCoverage": [21, 17, 14, 2, 17, "4-21,", "23,", "3->4,", "22->23"], "FinalSolution": ["0"], "StartTime": 1552365316.5885966, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["7"], ["7", "mH8"], ["7", "5"], ["7", "5", "7"], ["7", "5", "7", " "], ["7", "5", "7", "", ""], ["7", "5", "7", ""], ["7", "7", ""], ["7", "7"], ["7", "7", "7"], ["7", "7", "7", " "], ["7", "7", "7", " 3"], ["7", "7", "7", " 3", "7"], ["7", "7", "7", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "OsH", "7", "7", "7", "OsH", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "OsH", "7", "7", "7", "4", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  "], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2", "OsH"], ["7", "7", "7", " 3", "7", "7", "7", "7", "7  ", " 3", "OsH", " 3", "7", "7", "7", "7", "OsH", "OsH", "7", " 3", "7", "7  ", "7", "7", "pGh", "read abacab", "OsH", "7", "7", "2", "7", "7", "7", "4", "7", "7", "7", "7", "0", "7  ", "7", "7", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "2", "OsH", "7"], ["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4"], ["4", " "], ["4", "7"], ["4", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3", "7"], ["4", "7", "cM3", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "cM3", "8dT", "8dT", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "cM3", "8dT", "4", "7", "cM3", "cM3", "cM3", "1c6", "cM3", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "7", "cM3", "cM3", "7", "cM3", "7", "4"], ["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["8"], ["8", "8"], ["8", "8", " "], [], ["7  "], ["7  ", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"], ["7  ", "10"], ["7  ", "10", "7  "], ["7  ", "10", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "7  "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "ocp"], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "7  ", "ocp", " "], ["7  ", "10", "7  ", "7  ", "7  ", "7  ", "7  ", "7", "", "", "7  ", "ocp", " "], ["7  ", "10", "7  ", "7  create foo global", "7  ", "7  ", "7  ", "7", "", "", "7  ", "ocp", " "], ["7  Mz5", "10", "7  ", "7  create foo global", "7  ", "7  ", "7  ", "7", "", "", "7  ", "ocp", " "], ["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_idinches", "9", "10", "9", "9", "9", " "], ["9", "9  ", "9", "9", "9", "9", "9", "9", "9  ", "9", "inches", "9", "10", "9", "9", "9", " "], ["9", "9  ", "9", "9", "9", "9", "9", "9", "9  ", "9", "inches", "9", "10", "9", "9", "9", ""], ["9", "9  ", "9", "9", "9", "9", "9", "9", "9  ", "9", "inches", "9", "10", "9", "orchestra", "9", "9", ""], ["9", "9  ", "9", "9", "9", "9  ", "9", "9", "9  ", "9", "inches", "9", "10", "9", "orchestra", "9", "9", ""], ["9", "9  ", "9", "9", "9", "9  ", "9", "9", "9  ", "9", "inches", "9", "10", "9 9ei", "orchestra", "9", "9", ""], ["9", "9  ", "9", "9", "9  ", "9", "9", "9  ", "9", "inches", "9", "10", "9 9ei", "orchestra", "9", "9", ""], ["aaaabbcaa", "9", "9  ", "9", "9", "9  ", "9", "9", "9  ", "9", "inches", "9", "10", "9 9ei", "orchestra", "9", "9", ""], ["3", "9", "9  ", "9", "9", "9  ", "9", "9", "9  ", "9", "inches", "9", "10", "9 9ei", "orchestra", "9", "9", ""], ["3", "9", "9  ", "9", "9", "9  ", "9", "9", "9  ", "9", "g9v", "inches", "9", "10", "9 9ei", "orchestra", "9", "9", ""], ["3", "9", "9  ", "9", "9", "9  ", "9", "9", "9  ", "9", "g9v", "-1", "9", "10", "9 9ei", "orchestra", "9", "9", ""], ["X0r"], ["2 2", "4"], ["4", "4"], ["4", "4", "4"], ["4", "4", "4", "4"], ["4", "4", "4", "4", "4"], ["4", "4", "4", "4", "4", "4"], ["4", "4", "4", "4", "4", "4", "4"], ["4", "4", "4", "4", "4", "4", "4", " "], ["4", "4", "4", "4", "4", "4", "4", "", ""], ["4", "0 7 -1", "4", "4", "4", "4", "4", "4", "", ""], ["4", "4", "4", "4", "4", "4", "4", "4", "", ""], ["4", "4", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "4", "4", "4", "4", "4", "", ""], ["4", "4", "4", "1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4", "4", "4", "4", "4", "0 7 -1", "4", "", ""], ["4", "4", "4", "", "4", "4", "4", "4", "0 7 -1", "4", "", ""], ["4", "4", "4", "", "4", "4", "4", "0 7 -1", "4", "", ""], ["4", "4", "4", "", "4", "4", "4", "0 7 4", "4", "", ""], ["4", "4", "4", "", "4", "4", "4", "0", "7", "4", "4", "", ""], ["4", "4", "4", "", "4", "4", "4", "0", "7", "7", "4", "4", "", ""], ["4", "4", "4", "", "4", "4", "4", "0", "7", "7", "4", "4", "4", "", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0", "7", "7", "4", "4", "4", "", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0", "7", "7", "4", "4", " ", "4", "", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0", "7", "7", "4", "4", " ", "tom marvolo riddle", "4", "", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0", "7", "7", "4", "4", " 7", "tom marvolo riddle", "4", "", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0", "7", "7", "4", "4", " 7", "tom marvolo riddle", "4", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0", "7", "7", "4", "4", " 1.0, 3, 1", "tom marvolo riddle", "4", ""], ["4", "4", "4", "", "4", "4", "7", "4", "0 -D5", "7", "7", "4", "4", " 1.0, 3, 1", "tom marvolo riddle", "4", ""], ["1 4 sachin tweet_id_1 sehwag tweet_id_2 sachin tweet_id_3 sachin tweet_id_4"]]}]], [{"CorrectInputs": [[["3", "1", "Ir aOP 4 Posicion (7,15)"], 1538953930]], "UniqueId": "18fc6c09-589a-44b5-976d-f9e4034e3fda_0", "CoverageInfo": [37, 36, 24, 0, 2, "2-38"], "TimeStamp": 1538953869, "BadInput": ["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    B=int(input())\nValueError: invalid literal for int() with base 10: '60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 P\n", "ip": "190.215.254.45"}, [{"EndTime": 1552278238.274074, "FinalMinimizedSolution": ["9", "0"], "FinalCoverage": [37, 31, 24, 1, 11, "7-38,", "6->7"], "FinalSolution": ["9", "0"], "StartTime": 1552278236.6736932, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP5Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["9"], ["9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["9", "60 13 Mostrar BOP6Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"]]}, {"EndTime": 1552278240.2196758, "FinalMinimizedSolution": ["1", "5", "0123456789", "1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], "FinalCoverage": null, "FinalSolution": ["1", "5", "0123456789", "1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], "StartTime": 1552278238.274283, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP5Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["9"], ["9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["9", "60 13 Mostrar BOP6Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP10Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1"], ["1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1", "60 13 Mostrar BOP3Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1", "5"], ["1", "5", "0123456789"], ["1", "5", "0123456789", "1"], ["1", "5", "0123456789", "1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1", "5", "0123456789", "1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "1"]]}, {"EndTime": 1552278243.139336, "FinalMinimizedSolution": ["6", "8", "6", "6", "6", "Ir a Posicion", "6", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "6", "6"], "FinalCoverage": [37, 14, 24, 3, 59, "21,", "23-24,", "26-37,", "20->21,", "22->23,", "25->26"], "FinalSolution": ["6", "8", "6", "6", "6", "Ir a Posicion", "6", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "6", "6"], "StartTime": 1552278240.2199578, "FoundSolution": true, "NumProbesMade": 12, "InputHistory": [["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP5Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["9"], ["9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["9", "60 13 Mostrar BOP6Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP10Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1"], ["1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1", "60 13 Mostrar BOP3Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1", "5"], ["1", "5", "0123456789"], ["1", "5", "0123456789", "1"], ["1", "5", "0123456789", "1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1", "5", "0123456789", "1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "1"], ["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP6Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["6"], ["6", "Mostrar Bateria"], ["6", "8"], ["6", "8", "6"], ["6", "8", "6", "6"], ["6", "8", "6", "6", "6"], ["6", "8", "6", "6", "6", "Ir a Posicion"], ["6", "8", "6", "6", "6", "Ir a Posicion", "6"], ["6", "8", "6", "6", "6", "Ir a Posicion", "6", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["6", "8", "6", "6", "6", "Ir a Posicion", "6", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "6"]]}, {"EndTime": 1552278244.726613, "FinalMinimizedSolution": ["8", "-1"], "FinalCoverage": [37, 31, 24, 1, 11, "7-38,", "6->7"], "FinalSolution": ["8", "-1"], "StartTime": 1552278243.1397927, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP5Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["9"], ["9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["9", "60 13 Mostrar BOP6Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP10Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1"], ["1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1", "60 13 Mostrar BOP3Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1", "5"], ["1", "5", "0123456789"], ["1", "5", "0123456789", "1"], ["1", "5", "0123456789", "1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1", "5", "0123456789", "1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "1"], ["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP6Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["6"], ["6", "Mostrar Bateria"], ["6", "8"], ["6", "8", "6"], ["6", "8", "6", "6"], ["6", "8", "6", "6", "6"], ["6", "8", "6", "6", "6", "Ir a Posicion"], ["6", "8", "6", "6", "6", "Ir a Posicion", "6"], ["6", "8", "6", "6", "6", "Ir a Posicion", "6", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["6", "8", "6", "6", "6", "Ir a Posicion", "6", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "6"], ["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP2Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["8"], ["8", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["8", "60 13 Mostrar BOP10Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"]]}, {"EndTime": 1552278247.867489, "FinalMinimizedSolution": ["2", "9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "Mostrar Bateria", "2", "Cargar Bateria", "Ufh", "2", "2", "Mostrar Bateria", "Mostrar Bateria"], "FinalCoverage": [37, 14, 24, 3, 59, "21,", "23-24,", "26-37,", "20->21,", "22->23,", "25->26"], "FinalSolution": ["2", "9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "Mostrar Bateria", "2", "Cargar Bateria", "Ufh", "2", "2", "Mostrar Bateria", "Mostrar Bateria"], "StartTime": 1552278244.7270947, "FoundSolution": true, "NumProbesMade": 13, "InputHistory": [["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP5Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["9"], ["9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["9", "60 13 Mostrar BOP6Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP10Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1"], ["1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1", "60 13 Mostrar BOP3Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1", "5"], ["1", "5", "0123456789"], ["1", "5", "0123456789", "1"], ["1", "5", "0123456789", "1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["1", "5", "0123456789", "1", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "1"], ["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP6Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["6"], ["6", "Mostrar Bateria"], ["6", "8"], ["6", "8", "6"], ["6", "8", "6", "6"], ["6", "8", "6", "6", "6"], ["6", "8", "6", "6", "6", "Ir a Posicion"], ["6", "8", "6", "6", "6", "Ir a Posicion", "6"], ["6", "8", "6", "6", "6", "Ir a Posicion", "6", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["6", "8", "6", "6", "6", "Ir a Posicion", "6", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "6"], ["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP2Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["8"], ["8", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["8", "60 13 Mostrar BOP10Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["60 13 Mostrar BOP7Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["2"], ["2", "rSG"], ["2", "9"], ["2", "9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2"], ["2", "9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "Mostrar Bateria"], ["2", "9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "Mostrar Bateria", "2"], ["2", "9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "Mostrar Bateria", "2", "Cargar Bateria"], ["2", "9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "Mostrar Bateria", "2", "Cargar Bateria", "Ufh"], ["2", "9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "Mostrar Bateria", "2", "Cargar Bateria", "Ufh", "2"], ["2", "9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "Mostrar Bateria", "2", "Cargar Bateria", "Ufh", "2", "2"], ["2", "9", "60 13 Mostrar BOP 1ateria Deshacer MoOP 5vimiento Deshacer MovimOP 5iento Rehacer MOP 6ovimiento Deshacer MovimientOP 5o RehaOP 6cer Movimiento COP 2argar Bateria 4 Deshacer MovimienOP 5to Ir aOP 4 Posicion (7,15) Rehacer MovimOP 6iento Cargar BOP 2ateria 22 Ir a Posicion (20,OP 413) Cargar BateriOP 2a 2", "Mostrar Bateria", "2", "Cargar Bateria", "Ufh", "2", "2", "Mostrar Bateria"]]}]], [{"CorrectInputs": [[["3", "apple black 3", "mint pink 2", "cherry blue 4"], 1532537072], [["2", "apple black 3", "apple black 3"], 1532537152]], "UniqueId": "6061a33c-19ae-4f40-967b-d94eed008d1e_0", "CoverageInfo": [7, 4, 4, 2, 27, "6-10,", "5->6,", "5->9"], "TimeStamp": 1532536955, "BadInput": ["apple black 3"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 5, in <module>\n    for _ in range(int(input())):\nValueError: invalid literal for int() with base 10: 'apple black 3'\n", "ip": "203.82.251.3"}, [{"EndTime": 1552292837.814235, "FinalMinimizedSolution": ["7", "apple black 3", "apple black 3", "apple black 3", "7", "apple black 3", "7", "apple black 3"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["7", "apple black 3", "apple black 3", "apple black 3", "7", "apple black 3", "7", "apple black 3"], "StartTime": 1552292835.61943, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["apple black 3"], ["7"], ["7", "apple black 3"], ["7", "apple black 3", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3", "7"], ["7", "apple black 3", "apple black 3", "apple black 3", "7", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3", "7", "apple black 3", "7"]]}, {"EndTime": 1552292839.2652109, "FinalMinimizedSolution": ["3", "apple black 3", "apple black 3", "apple black 3"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["3", "apple black 3", "apple black 3", "apple black 3"], "StartTime": 1552292837.814516, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["apple black 3"], ["7"], ["7", "apple black 3"], ["7", "apple black 3", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3", "7"], ["7", "apple black 3", "apple black 3", "apple black 3", "7", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3", "7", "apple black 3", "7"], ["apple black 3"], ["3"], ["3", "apple black 3"], ["3", "apple black 3", "apple black 3"]]}, {"EndTime": 1552292841.2717092, "FinalMinimizedSolution": ["6", "6", "apple black 3", "apple black 3", "apple black 3", "apple black 3", "apple black 3"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["6", "6", "apple black 3", "apple black 3", "apple black 3", "apple black 3", "apple black 3"], "StartTime": 1552292839.2654932, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["apple black 3"], ["7"], ["7", "apple black 3"], ["7", "apple black 3", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3", "7"], ["7", "apple black 3", "apple black 3", "apple black 3", "7", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3", "7", "apple black 3", "7"], ["apple black 3"], ["3"], ["3", "apple black 3"], ["3", "apple black 3", "apple black 3"], ["apple black 3"], ["6"], ["6", "6"], ["6", "6", "apple black 3"], ["6", "6", "apple black 3", "apple black 3"], ["6", "6", "apple black 3", "apple black 3", "apple black 3"], ["6", "6", "apple black 3", "apple black 3", "apple black 3", "apple black 3"]]}, {"EndTime": 1552292843.5121288, "FinalMinimizedSolution": ["9", "apple black 3", "apple black 3", "apple black 3", "1", "1", "9", "1", "9", "1"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["9", "apple black 3", "apple black 3", "apple black 3", "1", "1", "9", "1", "9", "1"], "StartTime": 1552292841.2720737, "FoundSolution": true, "NumProbesMade": 11, "InputHistory": [["apple black 3"], ["7"], ["7", "apple black 3"], ["7", "apple black 3", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3", "7"], ["7", "apple black 3", "apple black 3", "apple black 3", "7", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3", "7", "apple black 3", "7"], ["apple black 3"], ["3"], ["3", "apple black 3"], ["3", "apple black 3", "apple black 3"], ["apple black 3"], ["6"], ["6", "6"], ["6", "6", "apple black 3"], ["6", "6", "apple black 3", "apple black 3"], ["6", "6", "apple black 3", "apple black 3", "apple black 3"], ["6", "6", "apple black 3", "apple black 3", "apple black 3", "apple black 3"], ["apple black 3"], ["9"], ["9", "apple black 3"], ["9", "apple black 3", "apple black 3"], ["9", "apple black 3", "apple black 3", "apple black 3"], ["9", "apple black 3", "apple black 3", "apple black 3", "zxG"], ["9", "apple black 3", "apple black 3", "apple black 3", "1"], ["9", "apple black 3", "apple black 3", "apple black 3", "1", "1"], ["9", "apple black 3", "apple black 3", "apple black 3", "1", "1", "9"], ["9", "apple black 3", "apple black 3", "apple black 3", "1", "1", "9", "1"], ["9", "apple black 3", "apple black 3", "apple black 3", "1", "1", "9", "1", "9"]]}, {"EndTime": 1552292846.4664912, "FinalMinimizedSolution": ["10", "apple black 3", "apple black 3", "apple black 3", " 3", "apple black 3", "apple black 3", " 3", "apple black 3", "apple black 3", "apple black 3"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["10", "apple black 3", "apple black 3", "apple black 3", " 3", "apple black 3", "apple black 3", " 3", "apple black 3", "apple black 3", "apple black 3"], "StartTime": 1552292843.5126383, "FoundSolution": true, "NumProbesMade": 12, "InputHistory": [["apple black 3"], ["7"], ["7", "apple black 3"], ["7", "apple black 3", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3", "7"], ["7", "apple black 3", "apple black 3", "apple black 3", "7", "apple black 3"], ["7", "apple black 3", "apple black 3", "apple black 3", "7", "apple black 3", "7"], ["apple black 3"], ["3"], ["3", "apple black 3"], ["3", "apple black 3", "apple black 3"], ["apple black 3"], ["6"], ["6", "6"], ["6", "6", "apple black 3"], ["6", "6", "apple black 3", "apple black 3"], ["6", "6", "apple black 3", "apple black 3", "apple black 3"], ["6", "6", "apple black 3", "apple black 3", "apple black 3", "apple black 3"], ["apple black 3"], ["9"], ["9", "apple black 3"], ["9", "apple black 3", "apple black 3"], ["9", "apple black 3", "apple black 3", "apple black 3"], ["9", "apple black 3", "apple black 3", "apple black 3", "zxG"], ["9", "apple black 3", "apple black 3", "apple black 3", "1"], ["9", "apple black 3", "apple black 3", "apple black 3", "1", "1"], ["9", "apple black 3", "apple black 3", "apple black 3", "1", "1", "9"], ["9", "apple black 3", "apple black 3", "apple black 3", "1", "1", "9", "1"], ["9", "apple black 3", "apple black 3", "apple black 3", "1", "1", "9", "1", "9"], ["apple black 3"], ["10"], ["10", "apple black 3"], ["10", "apple black 3", "apple black 3"], ["10", "apple black 3", "apple black 3", "apple black 3"], ["10", "apple black 3", "apple black 3", "apple black 3", " "], ["10", "apple black 3", "apple black 3", "apple black 3", " 3"], ["10", "apple black 3", "apple black 3", "apple black 3", " 3", "apple black 3"], ["10", "apple black 3", "apple black 3", "apple black 3", " 3", "apple black 3", "apple black 3"], ["10", "apple black 3", "apple black 3", "apple black 3", " 3", "apple black 3", "apple black 3", " 3"], ["10", "apple black 3", "apple black 3", "apple black 3", " 3", "apple black 3", "apple black 3", " 3", "apple black 3"], ["10", "apple black 3", "apple black 3", "apple black 3", " 3", "apple black 3", "apple black 3", " 3", "apple black 3", "apple black 3"]]}]], [{"CorrectInputs": [[["50 M", "12 M", "20 M", "40 F", "30 M"], 1523999970]], "UniqueId": "f24b7395-2f61-4788-f0f3-29d972b8e095_0", "CoverageInfo": [30, 18, 10, 1, 32, "13-34,", "8->22"], "TimeStamp": 1523999894, "BadInput": ["10"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    gen = str(a[1])\nIndexError: list index out of range\n", "ip": "200.136.205.181"}, [{"InputHistory": [["10"], ["10 M"], ["10 M", "10"], ["", "10"], [" M", "10"], [" 10", "10"], [" 10", "10", "10"], ["", "10", "10", "10"], ["", "10", "10"], [], ["twl"], ["6"], ["M"], ["5"], ["6.674f-11", "5"], ["0", "5"], ["5 w68"], ["5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5 w68", "", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5", "w68", "", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["M", "M"], ["M", "7"], ["3", "7"], ["3 M", "7"], ["", "7"], ["F", "M"], ["5", "M"], ["5 F", "M"], ["5 F", "6"], ["5", "F", "6"], ["6", "5", "F", "6"], ["6", "5", "F F", "6"], ["6", "5", "", "6"], ["6", "5", "", "b49", "6"], ["M M"], ["M 5"], ["10 5"], ["10 5", "M"], ["10 5", "7"], ["10", "5", "7"], ["1234", "10", "5", "7"], ["1234", "10", "5", "F", "7"], ["1234", "10", "5", "F", "C Q ", "7"], ["1234", "10", "5", "F", "C Q "], ["paR"], ["M", "6"], ["8", "6"], ["8", "10", "6"], ["8", "10", "M", "6"], ["8", "4 8 0 3 4 2 0 3", "10", "M", "6"], ["8", "4 8 0 3 4 2 0 3", "10", "123152", "M", "6"], ["rE2"], ["2"], ["3 34", "2"], ["3", "34", "2"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552349962.531722, "StartTime": 1552349951.178904}, {"InputHistory": [["10"], ["10 M"], ["10 M", "10"], ["", "10"], [" M", "10"], [" 10", "10"], [" 10", "10", "10"], ["", "10", "10", "10"], ["", "10", "10"], [], ["twl"], ["6"], ["M"], ["5"], ["6.674f-11", "5"], ["0", "5"], ["5 w68"], ["5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5 w68", "", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5", "w68", "", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["M", "M"], ["M", "7"], ["3", "7"], ["3 M", "7"], ["", "7"], ["F", "M"], ["5", "M"], ["5 F", "M"], ["5 F", "6"], ["5", "F", "6"], ["6", "5", "F", "6"], ["6", "5", "F F", "6"], ["6", "5", "", "6"], ["6", "5", "", "b49", "6"], ["M M"], ["M 5"], ["10 5"], ["10 5", "M"], ["10 5", "7"], ["10", "5", "7"], ["1234", "10", "5", "7"], ["1234", "10", "5", "F", "7"], ["1234", "10", "5", "F", "C Q ", "7"], ["1234", "10", "5", "F", "C Q "], ["paR"], ["M", "6"], ["8", "6"], ["8", "10", "6"], ["8", "10", "M", "6"], ["8", "4 8 0 3 4 2 0 3", "10", "M", "6"], ["8", "4 8 0 3 4 2 0 3", "10", "123152", "M", "6"], ["rE2"], ["2"], ["3 34", "2"], ["3", "34", "2"], ["10"], ["F", "10"], ["-1", "10"], ["F"], ["1"], ["2", "1"], ["K82", "F"], ["2", "F"], ["M", "2", "F"], ["8", "2", "F"], ["8", "2"], ["8", "2 M"], ["8", "8 M"], ["8", "8", "M"], ["8", "M"], ["FDN"], ["8"], ["F", "8"], ["-1", "8"], ["-1", "M", "8"], ["-1 O7b", "M", "8"], ["-1 O7b", "-1", "8"], ["-1 O7b", "-1", "0", "8"], ["-1 O7b", "8"], ["F O7b", "8"], ["4 O7b", "8"], ["cic"], ["AsS"], ["0"], ["M", "0"], ["3", "0"], ["aJs"], ["4"], ["4 M"], ["4 M", "4 M"], ["4 M", "4 M", "M"], ["4 M", "4 M", "0"], ["4 M", "4 M", "10", "0"], ["4 M", "4 M", "zUq", "10", "0"], ["4 M", "4 M", "8", "10", "0"], ["8 M", "4 M", "8", "10", "0"], ["8 M", "", "8", "10", "0"], ["8 M", "3J1", "", "8", "10", "0"], ["8 M", "6", "", "8", "10", "0"], ["8 M", "6", "", "8", "10", "1SQ", "0"], ["8 M", "6", "", "8 h1Q", "10", "1SQ", "0"], ["8 M", "6", "", "1SQ h1Q", "10", "1SQ", "0"], ["F", "F"], ["F", "3"], ["0", "3"], ["M G95"], ["10 G95"], ["10 G95", "10"], [""], ["9", ""], ["9"], ["p72"], ["-1"], ["-1 F"], ["-1 F", "10"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552349973.8842118, "StartTime": 1552349962.532357}, {"InputHistory": [["10"], ["10 M"], ["10 M", "10"], ["", "10"], [" M", "10"], [" 10", "10"], [" 10", "10", "10"], ["", "10", "10", "10"], ["", "10", "10"], [], ["twl"], ["6"], ["M"], ["5"], ["6.674f-11", "5"], ["0", "5"], ["5 w68"], ["5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5 w68", "", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5", "w68", "", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["M", "M"], ["M", "7"], ["3", "7"], ["3 M", "7"], ["", "7"], ["F", "M"], ["5", "M"], ["5 F", "M"], ["5 F", "6"], ["5", "F", "6"], ["6", "5", "F", "6"], ["6", "5", "F F", "6"], ["6", "5", "", "6"], ["6", "5", "", "b49", "6"], ["M M"], ["M 5"], ["10 5"], ["10 5", "M"], ["10 5", "7"], ["10", "5", "7"], ["1234", "10", "5", "7"], ["1234", "10", "5", "F", "7"], ["1234", "10", "5", "F", "C Q ", "7"], ["1234", "10", "5", "F", "C Q "], ["paR"], ["M", "6"], ["8", "6"], ["8", "10", "6"], ["8", "10", "M", "6"], ["8", "4 8 0 3 4 2 0 3", "10", "M", "6"], ["8", "4 8 0 3 4 2 0 3", "10", "123152", "M", "6"], ["rE2"], ["2"], ["3 34", "2"], ["3", "34", "2"], ["10"], ["F", "10"], ["-1", "10"], ["F"], ["1"], ["2", "1"], ["K82", "F"], ["2", "F"], ["M", "2", "F"], ["8", "2", "F"], ["8", "2"], ["8", "2 M"], ["8", "8 M"], ["8", "8", "M"], ["8", "M"], ["FDN"], ["8"], ["F", "8"], ["-1", "8"], ["-1", "M", "8"], ["-1 O7b", "M", "8"], ["-1 O7b", "-1", "8"], ["-1 O7b", "-1", "0", "8"], ["-1 O7b", "8"], ["F O7b", "8"], ["4 O7b", "8"], ["cic"], ["AsS"], ["0"], ["M", "0"], ["3", "0"], ["aJs"], ["4"], ["4 M"], ["4 M", "4 M"], ["4 M", "4 M", "M"], ["4 M", "4 M", "0"], ["4 M", "4 M", "10", "0"], ["4 M", "4 M", "zUq", "10", "0"], ["4 M", "4 M", "8", "10", "0"], ["8 M", "4 M", "8", "10", "0"], ["8 M", "", "8", "10", "0"], ["8 M", "3J1", "", "8", "10", "0"], ["8 M", "6", "", "8", "10", "0"], ["8 M", "6", "", "8", "10", "1SQ", "0"], ["8 M", "6", "", "8 h1Q", "10", "1SQ", "0"], ["8 M", "6", "", "1SQ h1Q", "10", "1SQ", "0"], ["F", "F"], ["F", "3"], ["0", "3"], ["M G95"], ["10 G95"], ["10 G95", "10"], [""], ["9", ""], ["9"], ["p72"], ["-1"], ["-1 F"], ["-1 F", "10"], ["10"], ["10", "10"], ["10", "F", "10"], ["5Ng"], ["10", "F"], ["10.6", "F"], ["1", "F"], ["309"], ["F", "309"], ["1", "309"], ["bTf", "1", "309"], ["7", "1", "309"], ["7", "1"], ["YyY", "7", "1"], ["0", "7", "1"], ["0", "7", "M", "1"], ["4EH"], ["yqg"], ["7"], ["SYa", "7"], ["1", "7"], ["1 F", "7"], ["1 F", "I1 I25 Sjulieta I3 Sabril F0.25 F0.5 F0.75 ", "7"], ["1 F", "0 I25 Sjulieta I3 Sabril F0.25 F0.5 F0.75 ", "7"], ["1 F", "0 I25 Sjulieta I3 Sabril F0.25 F0.5 F0.75 ", "3", "7"], ["1 3", "0 I25 Sjulieta I3 Sabril F0.25 F0.5 F0.75 ", "3", "7"], ["z34", "F"], ["9", "F"], ["9", "F", "F"], ["9", "F", "F", "F"], ["F", "9", "F", "F", "F"], ["F", "9", "F", "F", "4"], ["F", "9", "F", "-1", "4"], ["F", "9", "8", "-1", "4"], ["3", "9", "8", "-1", "4"], ["3", "9", "8", "-1"], ["1", "3", "9", "8", "-1"], ["F", "1", "3", "9", "8", "-1"], ["10", "1", "3", "9", "8", "-1"], ["F F"], ["F 5"], ["8 5"], ["8 5", "8 5"], ["8 5", "8 5", "-x3"], ["8 5", "8 5", "3"], ["8 5", "8 7Jw", "3"], ["8 5 0", "8 7Jw", "3"], ["8 5 0", "8", "7Jw", "3"], ["8 5 2 4 8 9 7 9 5", "8", "7Jw", "3"], ["8 5 2 4 8 9 7 9 5", "7Jw", "3"], ["8 5 2 4 8 9 7 9 5", "5", "3"], ["8 5 2 F 8 9 7 9 5", "5", "3"], ["8 5 2 F 8 9 7 9 5", "edbae", "5", "3"], ["8 5 2 F 8 9 7 9 5", "4", "5", "3"], ["8 5 2 F 8 9 7 9 5", "4", "3"], ["8 5 2 F 8 9 7 9 6", "4", "3"], ["8 5 2 F 8 9 7 9 6", "4", "191.15.33.255", "3"], ["", "4", "191.15.33.255", "3"], ["4", "191.15.33.255", "3"], ["4", "191.15.33.255", "1", "3"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552349985.281858, "StartTime": 1552349973.8853986}, {"EndTime": 1552349989.9393213, "FinalMinimizedSolution": ["8 M", "8 M", "8 M", "8 M", "8 M"], "FinalCoverage": [30, 4, 10, 2, 80, "18-20,", "28,", "13->18,", "27->28"], "FinalSolution": ["8 M", "8 M", "8 M", "8 M", "8 M"], "StartTime": 1552349985.2835255, "FoundSolution": true, "NumProbesMade": 21, "InputHistory": [["10"], ["10 M"], ["10 M", "10"], ["", "10"], [" M", "10"], [" 10", "10"], [" 10", "10", "10"], ["", "10", "10", "10"], ["", "10", "10"], [], ["twl"], ["6"], ["M"], ["5"], ["6.674f-11", "5"], ["0", "5"], ["5 w68"], ["5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5 w68", "", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5", "w68", "", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["M", "M"], ["M", "7"], ["3", "7"], ["3 M", "7"], ["", "7"], ["F", "M"], ["5", "M"], ["5 F", "M"], ["5 F", "6"], ["5", "F", "6"], ["6", "5", "F", "6"], ["6", "5", "F F", "6"], ["6", "5", "", "6"], ["6", "5", "", "b49", "6"], ["M M"], ["M 5"], ["10 5"], ["10 5", "M"], ["10 5", "7"], ["10", "5", "7"], ["1234", "10", "5", "7"], ["1234", "10", "5", "F", "7"], ["1234", "10", "5", "F", "C Q ", "7"], ["1234", "10", "5", "F", "C Q "], ["paR"], ["M", "6"], ["8", "6"], ["8", "10", "6"], ["8", "10", "M", "6"], ["8", "4 8 0 3 4 2 0 3", "10", "M", "6"], ["8", "4 8 0 3 4 2 0 3", "10", "123152", "M", "6"], ["rE2"], ["2"], ["3 34", "2"], ["3", "34", "2"], ["10"], ["F", "10"], ["-1", "10"], ["F"], ["1"], ["2", "1"], ["K82", "F"], ["2", "F"], ["M", "2", "F"], ["8", "2", "F"], ["8", "2"], ["8", "2 M"], ["8", "8 M"], ["8", "8", "M"], ["8", "M"], ["FDN"], ["8"], ["F", "8"], ["-1", "8"], ["-1", "M", "8"], ["-1 O7b", "M", "8"], ["-1 O7b", "-1", "8"], ["-1 O7b", "-1", "0", "8"], ["-1 O7b", "8"], ["F O7b", "8"], ["4 O7b", "8"], ["cic"], ["AsS"], ["0"], ["M", "0"], ["3", "0"], ["aJs"], ["4"], ["4 M"], ["4 M", "4 M"], ["4 M", "4 M", "M"], ["4 M", "4 M", "0"], ["4 M", "4 M", "10", "0"], ["4 M", "4 M", "zUq", "10", "0"], ["4 M", "4 M", "8", "10", "0"], ["8 M", "4 M", "8", "10", "0"], ["8 M", "", "8", "10", "0"], ["8 M", "3J1", "", "8", "10", "0"], ["8 M", "6", "", "8", "10", "0"], ["8 M", "6", "", "8", "10", "1SQ", "0"], ["8 M", "6", "", "8 h1Q", "10", "1SQ", "0"], ["8 M", "6", "", "1SQ h1Q", "10", "1SQ", "0"], ["F", "F"], ["F", "3"], ["0", "3"], ["M G95"], ["10 G95"], ["10 G95", "10"], [""], ["9", ""], ["9"], ["p72"], ["-1"], ["-1 F"], ["-1 F", "10"], ["10"], ["10", "10"], ["10", "F", "10"], ["5Ng"], ["10", "F"], ["10.6", "F"], ["1", "F"], ["309"], ["F", "309"], ["1", "309"], ["bTf", "1", "309"], ["7", "1", "309"], ["7", "1"], ["YyY", "7", "1"], ["0", "7", "1"], ["0", "7", "M", "1"], ["4EH"], ["yqg"], ["7"], ["SYa", "7"], ["1", "7"], ["1 F", "7"], ["1 F", "I1 I25 Sjulieta I3 Sabril F0.25 F0.5 F0.75 ", "7"], ["1 F", "0 I25 Sjulieta I3 Sabril F0.25 F0.5 F0.75 ", "7"], ["1 F", "0 I25 Sjulieta I3 Sabril F0.25 F0.5 F0.75 ", "3", "7"], ["1 3", "0 I25 Sjulieta I3 Sabril F0.25 F0.5 F0.75 ", "3", "7"], ["z34", "F"], ["9", "F"], ["9", "F", "F"], ["9", "F", "F", "F"], ["F", "9", "F", "F", "F"], ["F", "9", "F", "F", "4"], ["F", "9", "F", "-1", "4"], ["F", "9", "8", "-1", "4"], ["3", "9", "8", "-1", "4"], ["3", "9", "8", "-1"], ["1", "3", "9", "8", "-1"], ["F", "1", "3", "9", "8", "-1"], ["10", "1", "3", "9", "8", "-1"], ["F F"], ["F 5"], ["8 5"], ["8 5", "8 5"], ["8 5", "8 5", "-x3"], ["8 5", "8 5", "3"], ["8 5", "8 7Jw", "3"], ["8 5 0", "8 7Jw", "3"], ["8 5 0", "8", "7Jw", "3"], ["8 5 2 4 8 9 7 9 5", "8", "7Jw", "3"], ["8 5 2 4 8 9 7 9 5", "7Jw", "3"], ["8 5 2 4 8 9 7 9 5", "5", "3"], ["8 5 2 F 8 9 7 9 5", "5", "3"], ["8 5 2 F 8 9 7 9 5", "edbae", "5", "3"], ["8 5 2 F 8 9 7 9 5", "4", "5", "3"], ["8 5 2 F 8 9 7 9 5", "4", "3"], ["8 5 2 F 8 9 7 9 6", "4", "3"], ["8 5 2 F 8 9 7 9 6", "4", "191.15.33.255", "3"], ["", "4", "191.15.33.255", "3"], ["4", "191.15.33.255", "3"], ["4", "191.15.33.255", "1", "3"], ["10"], ["6", "F"], ["6", "6", "F"], ["P55"], ["6 M"], ["6 M", "K1y"], ["6 M", "5"], ["6", "M", "5"], ["M", "5"], ["5", "5"], ["WrO"], ["8 F"], ["8 F", "F"], ["8 F", "10"], ["8 F", "M", "10"], ["8 F", "10", "10"], ["F M"], ["8 M"], ["8 M", "8 M"], ["8 M", "8 M", "8 M"], ["8 M", "8 M", "8 M", "8 M"]]}, {"InputHistory": [["10"], ["10 M"], ["10 M", "10"], ["", "10"], [" M", "10"], [" 10", "10"], [" 10", "10", "10"], ["", "10", "10", "10"], ["", "10", "10"], [], ["twl"], ["6"], ["M"], ["5"], ["6.674f-11", "5"], ["0", "5"], ["5 w68"], ["5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5 w68", "5 w68", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5 w68", "", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["5", "w68", "", "5 w68", "5 w68 FID3963,0,2,5,13,18,10,3,0,3,5,23,1,27,29,5,1,5,11,6,15,21,12", "5 w68"], ["M", "M"], ["M", "7"], ["3", "7"], ["3 M", "7"], ["", "7"], ["F", "M"], ["5", "M"], ["5 F", "M"], ["5 F", "6"], ["5", "F", "6"], ["6", "5", "F", "6"], ["6", "5", "F F", "6"], ["6", "5", "", "6"], ["6", "5", "", "b49", "6"], ["M M"], ["M 5"], ["10 5"], ["10 5", "M"], ["10 5", "7"], ["10", "5", "7"], ["1234", "10", "5", "7"], ["1234", "10", "5", "F", "7"], ["1234", "10", "5", "F", "C Q ", "7"], ["1234", "10", "5", "F", "C Q "], ["paR"], ["M", "6"], ["8", "6"], ["8", "10", "6"], ["8", "10", "M", "6"], ["8", "4 8 0 3 4 2 0 3", "10", "M", "6"], ["8", "4 8 0 3 4 2 0 3", "10", "123152", "M", "6"], ["rE2"], ["2"], ["3 34", "2"], ["3", "34", "2"], ["10"], ["F", "10"], ["-1", "10"], ["F"], ["1"], ["2", "1"], ["K82", "F"], ["2", "F"], ["M", "2", "F"], ["8", "2", "F"], ["8", "2"], ["8", "2 M"], ["8", "8 M"], ["8", "8", "M"], ["8", "M"], ["FDN"], ["8"], ["F", "8"], ["-1", "8"], ["-1", "M", "8"], ["-1 O7b", "M", "8"], ["-1 O7b", "-1", "8"], ["-1 O7b", "-1", "0", "8"], ["-1 O7b", "8"], ["F O7b", "8"], ["4 O7b", "8"], ["cic"], ["AsS"], ["0"], ["M", "0"], ["3", "0"], ["aJs"], ["4"], ["4 M"], ["4 M", "4 M"], ["4 M", "4 M", "M"], ["4 M", "4 M", "0"], ["4 M", "4 M", "10", "0"], ["4 M", "4 M", "zUq", "10", "0"], ["4 M", "4 M", "8", "10", "0"], ["8 M", "4 M", "8", "10", "0"], ["8 M", "", "8", "10", "0"], ["8 M", "3J1", "", "8", "10", "0"], ["8 M", "6", "", "8", "10", "0"], ["8 M", "6", "", "8", "10", "1SQ", "0"], ["8 M", "6", "", "8 h1Q", "10", "1SQ", "0"], ["8 M", "6", "", "1SQ h1Q", "10", "1SQ", "0"], ["F", "F"], ["F", "3"], ["0", "3"], ["M G95"], ["10 G95"], ["10 G95", "10"], [""], ["9", ""], ["9"], ["p72"], ["-1"], ["-1 F"], ["-1 F", "10"], ["10"], ["10", "10"], ["10", "F", "10"], ["5Ng"], ["10", "F"], ["10.6", "F"], ["1", "F"], ["309"], ["F", "309"], ["1", "309"], ["bTf", "1", "309"], ["7", "1", "309"], ["7", "1"], ["YyY", "7", "1"], ["0", "7", "1"], ["0", "7", "M", "1"], ["4EH"], ["yqg"], ["7"], ["SYa", "7"], ["1", "7"], ["1 F", "7"], ["1 F", "I1 I25 Sjulieta I3 Sabril F0.25 F0.5 F0.75 ", "7"], ["1 F", "0 I25 Sjulieta I3 Sabril F0.25 F0.5 F0.75 ", "7"], ["1 F", "0 I25 Sjulieta I3 Sabril F0.25 F0.5 F0.75 ", "3", "7"], ["1 3", "0 I25 Sjulieta I3 Sabril F0.25 F0.5 F0.75 ", "3", "7"], ["z34", "F"], ["9", "F"], ["9", "F", "F"], ["9", "F", "F", "F"], ["F", "9", "F", "F", "F"], ["F", "9", "F", "F", "4"], ["F", "9", "F", "-1", "4"], ["F", "9", "8", "-1", "4"], ["3", "9", "8", "-1", "4"], ["3", "9", "8", "-1"], ["1", "3", "9", "8", "-1"], ["F", "1", "3", "9", "8", "-1"], ["10", "1", "3", "9", "8", "-1"], ["F F"], ["F 5"], ["8 5"], ["8 5", "8 5"], ["8 5", "8 5", "-x3"], ["8 5", "8 5", "3"], ["8 5", "8 7Jw", "3"], ["8 5 0", "8 7Jw", "3"], ["8 5 0", "8", "7Jw", "3"], ["8 5 2 4 8 9 7 9 5", "8", "7Jw", "3"], ["8 5 2 4 8 9 7 9 5", "7Jw", "3"], ["8 5 2 4 8 9 7 9 5", "5", "3"], ["8 5 2 F 8 9 7 9 5", "5", "3"], ["8 5 2 F 8 9 7 9 5", "edbae", "5", "3"], ["8 5 2 F 8 9 7 9 5", "4", "5", "3"], ["8 5 2 F 8 9 7 9 5", "4", "3"], ["8 5 2 F 8 9 7 9 6", "4", "3"], ["8 5 2 F 8 9 7 9 6", "4", "191.15.33.255", "3"], ["", "4", "191.15.33.255", "3"], ["4", "191.15.33.255", "3"], ["4", "191.15.33.255", "1", "3"], ["10"], ["6", "F"], ["6", "6", "F"], ["P55"], ["6 M"], ["6 M", "K1y"], ["6 M", "5"], ["6", "M", "5"], ["M", "5"], ["5", "5"], ["WrO"], ["8 F"], ["8 F", "F"], ["8 F", "10"], ["8 F", "M", "10"], ["8 F", "10", "10"], ["F M"], ["8 M"], ["8 M", "8 M"], ["8 M", "8 M", "8 M"], ["8 M", "8 M", "8 M", "8 M"], ["10"], ["12.3 M"], ["F", "8", "M"], ["3", "8", "M"], ["s", "3", "8", "M"], ["0", "3", "8", "M"], ["0", "3", "8", "prasad55", "M"], ["0", "3", "8", "86.9", "prasad55", "M"], ["0", "3", "8", "86.9", "prasad55", "M 3W4"], ["0", "3", "8", "86.9", "F", "prasad55", "M 3W4"], ["3", "8", "86.9", "F", "prasad55", "M 3W4"], ["3", "M", "8", "86.9", "F", "prasad55", "M 3W4"], ["3", "M", "8", "86.9", "F", "86.9", "prasad55", "M 3W4"], ["3", "M", "8", "F", "86.9", "prasad55", "M 3W4"], ["3", "M", "a3b4c2e10b10", "8", "F", "86.9", "prasad55", "M 3W4"], ["3", "M", "a3b4c2e10b10", "M 3W4", "8", "F", "86.9", "prasad55", "M 3W4"], ["3", "M", "F", "a3b4c2e10b10", "M 3W4", "8", "F", "86.9", "prasad55", "M 3W4"], ["3", "M", "F", "F", "a3b4c2e10b10", "M 3W4", "8", "F", "86.9", "prasad55", "M 3W4"], ["3", "M", "F", "F", "a3b4c2e10b10", "M 3W4", "8", "86.9", "prasad55", "M 3W4"], ["3", "M", "F", "F", "a3b4c2e10b10", "M 3W4", "8", "86.9", "1", "prasad55", "M 3W4"], ["3", "M", "F", "F", "a3b4c2e10b10", "M 3W4", "8", "1", "prasad55", "M 3W4"], ["3", "M", "F", "F", "a3b4c2e10b10", "M 3W4", "8", "-Ah", "1", "prasad55", "M 3W4"], ["3", "1", "M", "F", "F", "a3b4c2e10b10", "M 3W4", "8", "-Ah", "1", "prasad55", "M 3W4"], ["3", "1", "M", "F", "4AB", "F", "a3b4c2e10b10", "M 3W4", "8", "-Ah", "1", "prasad55", "M 3W4"], ["1", "M", "F", "4AB", "F", "a3b4c2e10b10", "M 3W4", "8", "-Ah", "1", "prasad55", "M 3W4"], ["1", "M", "F", "4AB", "F", "a3b4c2e10b10", "M 3W4", "8", "-Ah", "\u043f\u0440\u0430\u0434\u0435\u0434", "1", "prasad55", "M 3W4"], ["1", "M", "F", "4AB", "F", "a3b4c2e10b10", "M 3W4", "8", "-Ah", "\u043f\u0440\u0430\u0434\u0435\u0434", "10", "1", "prasad55", "M 3W4"], ["1", "M", "F", "4AB", "F", "a3b4c2e10b10", "M 3W4", "8", "-Ah", "\u043f\u0440\u0430\u0434\u0435\u0434", "10", "1", "prasad55", "M 1"], ["1", "M", "F", "4AB", "F", "a3b4c2e10b10", "M 3W4", "8", "-Ah", "\u043f\u0440\u0430\u0434\u0435\u0434", "10", "1", "M 1"], ["M", "F", "4AB", "F", "a3b4c2e10b10", "M 3W4", "8", "-Ah", "\u043f\u0440\u0430\u0434\u0435\u0434", "10", "1", "M 1"], ["M", "F", "4AB", "F", "a3b4c2e10b10", "M 3W4", "8", "-Ah", "\u043f\u0440\u0430\u0434\u0435\u0434", "10", "1", "9 1"], ["M", "F", "4AB", "F", "a3b4c2e10b10", "5 3W4", "8", "-Ah", "\u043f\u0440\u0430\u0434\u0435\u0434", "10", "1", "9 1"], ["-1", "F", "4AB", "F", "a3b4c2e10b10", "5 3W4", "8", "-Ah", "\u043f\u0440\u0430\u0434\u0435\u0434", "10", "1", "9 1"], ["-1", "F", "4AB", "F M", "a3b4c2e10b10", "5 3W4", "8", "-Ah", "\u043f\u0440\u0430\u0434\u0435\u0434", "10", "1", "9 1"], ["-1", "F", "4AB", "F M", "a3b4c2e10b10", "5 3W4", "8", "-Ah", "\u043f\u0440\u0430\u0434\u0435\u0434", "10", "1 F", "9 1"], ["-1", "F", "4AB", "F M", "a3b4c2e10b10", "5 3W4", "8", "-Ah", "10", "1 F", "9 1"], ["-1", "F", "4AB", "F M", "a3b4c2e10b10", "5 3W4", "8", "-Ah", "F", "10", "1 F", "9 1"], ["8", "-1", "F", "4AB", "F M", "a3b4c2e10b10", "5 3W4", "8", "-Ah", "F", "10", "1 F", "9 1"], ["8", "-1", "F", "4AB", "F M", "a3b4c2e10b10", "5 3W4", "8", "-Ah", "F", "10", "D : C B F", "9 1"], ["8", "-1", "F", "4AB", "F M", "a3b4c2e10b10", "5 3W4", "8", "-Ah", "F", "10 BaK", "D : C B F", "9 1"], ["8", "-1", "F", "4AB", "F M", "8", "a3b4c2e10b10", "5 3W4", "8", "-Ah", "F", "10 BaK", "D : C B F", "9 1"], ["8", "-1", "F", "4AB", "F M", "8", "a3b4c2e10b10", "5 3W4", "8", "-Ah", "F", "10 BaK", "D : F B F", "9 1"], ["8", "-1", "F", "F M", "8", "a3b4c2e10b10", "5 3W4", "8", "-Ah", "F", "10 BaK", "D : F B F", "9 1"], ["8", "-1", "F", "F M", "8", "a3b4c2e10b10", "5", "3W4", "8", "-Ah", "F", "10 BaK", "D : F B F", "9 1"], ["8", "-1", "F", "3 50 M", "8", "a3b4c2e10b10", "5", "3W4", "8", "-Ah", "F", "10 BaK", "D : F B F", "9 1"], ["8", "-1", "F", "3 50 M", "8", "a3b4c2e10b10", "3W4", "8", "-Ah", "F", "10 BaK", "D : F B F", "9 1"], ["8", "-1", "F", "3 50 M", "8", "a3b4c2e10b10", "3W4", "8", "-Ah", "F", "10 BaK", "D : F B F", ""], ["8", "-1", "F", "3 50 M", "8", "a3b4c2e10b10", "3W4", "8", "-Ah", "F", "10 BaK", "D : F B ", ""], ["8", "-1", "F", "3 50 M", "9", "8", "a3b4c2e10b10", "3W4", "8", "-Ah", "F", "10 BaK", "D : F B ", ""], ["8", "-1", "F", "", "9", "8", "a3b4c2e10b10", "3W4", "8", "-Ah", "F", "10 BaK", "D : F B ", ""], ["8", "-1", "M", "F", "", "9", "8", "a3b4c2e10b10", "3W4", "8", "-Ah", "F", "10 BaK", "D : F B ", ""], ["-1", "M", "F", "", "9", "8", "a3b4c2e10b10", "3W4", "8", "-Ah", "F", "10 BaK", "D : F B ", ""], ["English2", "M"], ["1", "M"], ["1 M", "M"], ["1 M", "9"], ["1", "M", "9"], ["1", "M", "HXN", "9"], ["1", "M", "HXN", "pedro", "9"], ["1", "M", "HXN", "pedro", "S47", "9"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552350001.302656, "StartTime": 1552349989.9412656}]], [{"CorrectInputs": [[["1", "112 12"], 1531083098]], "UniqueId": "0ab26c76-e798-4f3c-c83d-9b368cca597e_0", "CoverageInfo": [10, 7, 6, 1, 25, "4-12,", "2->exit"], "TimeStamp": 1531083079, "BadInput": ["1", "111123"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 3, in <module>\n    a,b=input().split()\nValueError: not enough values to unpack (expected 2, got 1)\n", "ip": "186.212.231.123"}, [{"EndTime": 1552415379.7382274, "FinalMinimizedSolution": ["1", "111123 111123"], "FinalCoverage": [10, 2, 6, 2, 75, "10-12,", "4->12,", "7->10"], "FinalSolution": ["1", "111123 111123"], "StartTime": 1552415378.8759384, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1", "111123"]]}, {"EndTime": 1552415383.6236224, "FinalMinimizedSolution": ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123 111123", "10 10"], "FinalCoverage": [10, 2, 6, 2, 75, "10-12,", "4->12,", "7->10"], "FinalSolution": ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123 111123", "10 10"], "StartTime": 1552415379.7384105, "FoundSolution": true, "NumProbesMade": 17, "InputHistory": [["1", "111123"], ["1", "111123"], [], ["10"], ["10", "41I"], ["10", "41I 41I"], ["10", "41I 41I", "10"], ["10", "41I 41I", "10 10"], ["10", "41I 41I", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10"], ["10", "41I 41I", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123 111123"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123 111123", "10"]]}, {"EndTime": 1552415384.4865317, "FinalMinimizedSolution": ["1", "1 111123"], "FinalCoverage": [10, 5, 6, 1, 50, "5-10,", "4->5"], "FinalSolution": ["1", "1 111123"], "StartTime": 1552415383.6240826, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1", "111123"], ["1", "111123"], [], ["10"], ["10", "41I"], ["10", "41I 41I"], ["10", "41I 41I", "10"], ["10", "41I 41I", "10 10"], ["10", "41I 41I", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10"], ["10", "41I 41I", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123 111123"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123 111123", "10"], ["1", "111123"]]}, {"EndTime": 1552415387.7949553, "FinalMinimizedSolution": ["1", "1 1"], "FinalCoverage": [10, 2, 6, 2, 75, "10-12,", "4->12,", "7->10"], "FinalSolution": ["1", "1 1"], "StartTime": 1552415384.4869683, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["1", "111123"], ["1", "111123"], [], ["10"], ["10", "41I"], ["10", "41I 41I"], ["10", "41I 41I", "10"], ["10", "41I 41I", "10 10"], ["10", "41I 41I", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10"], ["10", "41I 41I", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123 111123"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123 111123", "10"], ["1", "111123"], ["1", "111123"], ["1 tRe", "1 111123"], ["1", "1", "111123"], ["1", "1", "111123 111123"], ["1", "1", "111123 111123 111123"], ["1", "1", "111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "1"]]}, {"EndTime": 1552415392.7215037, "FinalMinimizedSolution": ["1", "6.5 6.5"], "FinalCoverage": [10, 2, 6, 2, 75, "10-12,", "4->12,", "7->10"], "FinalSolution": ["1", "6.5 6.5"], "StartTime": 1552415387.7955298, "FoundSolution": true, "NumProbesMade": 24, "InputHistory": [["1", "111123"], ["1", "111123"], [], ["10"], ["10", "41I"], ["10", "41I 41I"], ["10", "41I 41I", "10"], ["10", "41I 41I", "10 10"], ["10", "41I 41I", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10"], ["10", "41I 41I", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123 111123"], ["10", "41I 41I", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "10 10", "111123 111123", "10"], ["1", "111123"], ["1", "111123"], ["1 tRe", "1 111123"], ["1", "1", "111123"], ["1", "1", "111123 111123"], ["1", "1", "111123 111123 111123"], ["1", "1", "111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "1", "111123 111123 111123 111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "1"], ["1", "111123"], ["1", "111123", "111123"], ["1", "111123", "111123 111123"], ["1", "111123", "111123 111123 111123"], ["1", "111123", "111123 111123 111123 111123"], ["1", "111123", "111123 111123 111123 111123 111123"], ["1", "111123", "111123 111123 111123 111123 111123 111123"], ["1", "111123", "111123 111123 111123 111123 111123 111123 111123"], ["1", "111123", "111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "111123", "111123 111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "111123", "111123 111123 111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "111123", "111123 111123 111123 111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "6.5", "111123"], ["1", "6.5", "111123 111123"], ["1", "6.5", "111123 111123 111123"], ["1", "6.5", "111123 111123 111123 111123"], ["1", "6.5", "111123 111123 111123 111123 111123"], ["1", "6.5", "111123 111123 111123 111123 111123 111123"], ["1", "6.5", "111123 111123 111123 111123 111123 111123 111123"], ["1", "6.5", "111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "6.5", "111123 111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "6.5", "111123 111123 111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "6.5", "111123 111123 111123 111123 111123 111123 111123 111123 111123 111123 111123"], ["1", "6.5"]]}]], [{"CorrectInputs": [[["3", "1 0 0", "0 1 0", "0 0 1"], 1544438415]], "UniqueId": "574430ed-af75-4ec8-85dc-90062518ea16_0", "CoverageInfo": [15, 4, 10, 3, 64, "12-16,", "9->13,", "10->9,", "11->12"], "TimeStamp": 1544438335, "BadInput": ["3", "1", "0", "0"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 11, in <module>\n    if matriz[i][j]==0:\nIndexError: list index out of range\n", "ip": "187.127.220.14"}, [{"EndTime": 1552342263.5641181, "FinalMinimizedSolution": ["1", "1"], "FinalCoverage": [15, 2, 10, 2, 84, "12,", "14,", "11->12,", "13->14"], "FinalSolution": ["1", "1"], "StartTime": 1552342257.9472077, "FoundSolution": true, "NumProbesMade": 26, "InputHistory": [["3", "1", "0", "0"], [], ["5"], ["5", "1"], ["5", "1", "0"], ["5", "1", "0", "3"], ["5", "1", "0", "3", "3g7"], ["5", "1", "0", "3", "8"], ["5", "1", "0", "3", "8", "fuS"], ["5", "1", "0", "3", "8", "1"], ["0v9", "5", "1", "0", "3", "8", "1"], ["4", "5", "1", "0", "3", "8", "1"], ["4", "5", "1", "3", "8", "1"], ["4", "5", "1", "3", "8", "0", "1"], ["4", "5", "s3Q", "1", "3", "8", "0", "1"], ["4", "5", "8", "1", "3", "8", "0", "1"], ["4", "HNs", "5", "8", "1", "3", "8", "0", "1"], ["4", "1", "5", "8", "1", "3", "8", "0", "1"], ["2dv"], ["4"], ["4", "0"], ["4", "0", "1"], ["4", "0", "1", "1"], ["4", "0", "1", "1", "0"], ["oZ8"], ["1"]]}, {"EndTime": 1552342268.2590492, "FinalMinimizedSolution": ["2", "1 -1", "3 9"], "FinalCoverage": [15, 2, 10, 2, 84, "12,", "14,", "11->12,", "13->14"], "FinalSolution": ["2", "1 -1", "3 9", "0", "0 0", "4", ""], "StartTime": 1552342263.5646162, "FoundSolution": true, "NumProbesMade": 20, "InputHistory": [["3", "1", "0", "0"], [], ["5"], ["5", "1"], ["5", "1", "0"], ["5", "1", "0", "3"], ["5", "1", "0", "3", "3g7"], ["5", "1", "0", "3", "8"], ["5", "1", "0", "3", "8", "fuS"], ["5", "1", "0", "3", "8", "1"], ["0v9", "5", "1", "0", "3", "8", "1"], ["4", "5", "1", "0", "3", "8", "1"], ["4", "5", "1", "3", "8", "1"], ["4", "5", "1", "3", "8", "0", "1"], ["4", "5", "s3Q", "1", "3", "8", "0", "1"], ["4", "5", "8", "1", "3", "8", "0", "1"], ["4", "HNs", "5", "8", "1", "3", "8", "0", "1"], ["4", "1", "5", "8", "1", "3", "8", "0", "1"], ["2dv"], ["4"], ["4", "0"], ["4", "0", "1"], ["4", "0", "1", "1"], ["4", "0", "1", "1", "0"], ["oZ8"], ["1"], ["3", "1", "0", "0"], ["jfy", "3", "1", "0", "0"], ["6", "3", "1", "0", "0"], ["6", "3", "1", "0", "0", "3"], ["6", "3", "1", "0", "0", "3", "0"], ["6", "3", "1", "0", "0", "86.9", "3", "0"], ["6", "3", "1", "0", "0", "4", "3", "0"], ["6", "3", "1", "-1f", "0", "0", "4", "3", "0"], ["6", "3", "1", "3", "0", "0", "4", "3", "0"], ["6", "3", "1", "3 s1V", "0", "0", "4", "3", "0"], ["6", "3", "1", "3 9", "0", "0", "4", "3", "0"], ["6", "3", "1", "3 9", "0", "0", "4", "3 i8T", "0"], ["6", "3", "1", "3 9", "0", "0", "4", "3 i8T"], ["6", "3", "1", "3 9", "0", "0", "4", ""], ["6", "3", "1 9YR", "3 9", "0", "0", "4", ""], ["6", "3", "1 -1", "3 9", "0", "0", "4", ""], ["6", "1 -1", "3 9", "0", "0", "4", ""], ["6", "1 -1", "3 9", "0", "0 e9R", "4", ""], ["6", "1 -1", "3 9", "0", "0 0", "4", ""], ["6 Y04", "1 -1", "3 9", "0", "0 0", "4", ""]]}, {"EndTime": 1552342269.6202755, "FinalMinimizedSolution": ["1", "3"], "FinalCoverage": [15, 2, 10, 2, 84, "12,", "14,", "11->12,", "13->14"], "FinalSolution": ["1", "3", "0", "0"], "StartTime": 1552342268.2598734, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["3", "1", "0", "0"], [], ["5"], ["5", "1"], ["5", "1", "0"], ["5", "1", "0", "3"], ["5", "1", "0", "3", "3g7"], ["5", "1", "0", "3", "8"], ["5", "1", "0", "3", "8", "fuS"], ["5", "1", "0", "3", "8", "1"], ["0v9", "5", "1", "0", "3", "8", "1"], ["4", "5", "1", "0", "3", "8", "1"], ["4", "5", "1", "3", "8", "1"], ["4", "5", "1", "3", "8", "0", "1"], ["4", "5", "s3Q", "1", "3", "8", "0", "1"], ["4", "5", "8", "1", "3", "8", "0", "1"], ["4", "HNs", "5", "8", "1", "3", "8", "0", "1"], ["4", "1", "5", "8", "1", "3", "8", "0", "1"], ["2dv"], ["4"], ["4", "0"], ["4", "0", "1"], ["4", "0", "1", "1"], ["4", "0", "1", "1", "0"], ["oZ8"], ["1"], ["3", "1", "0", "0"], ["jfy", "3", "1", "0", "0"], ["6", "3", "1", "0", "0"], ["6", "3", "1", "0", "0", "3"], ["6", "3", "1", "0", "0", "3", "0"], ["6", "3", "1", "0", "0", "86.9", "3", "0"], ["6", "3", "1", "0", "0", "4", "3", "0"], ["6", "3", "1", "-1f", "0", "0", "4", "3", "0"], ["6", "3", "1", "3", "0", "0", "4", "3", "0"], ["6", "3", "1", "3 s1V", "0", "0", "4", "3", "0"], ["6", "3", "1", "3 9", "0", "0", "4", "3", "0"], ["6", "3", "1", "3 9", "0", "0", "4", "3 i8T", "0"], ["6", "3", "1", "3 9", "0", "0", "4", "3 i8T"], ["6", "3", "1", "3 9", "0", "0", "4", ""], ["6", "3", "1 9YR", "3 9", "0", "0", "4", ""], ["6", "3", "1 -1", "3 9", "0", "0", "4", ""], ["6", "1 -1", "3 9", "0", "0", "4", ""], ["6", "1 -1", "3 9", "0", "0 e9R", "4", ""], ["6", "1 -1", "3 9", "0", "0 0", "4", ""], ["6 Y04", "1 -1", "3 9", "0", "0 0", "4", ""], ["3", "1", "0", "0"], ["3", "0", "0"], ["3", "0", "0", "0"]]}, {"EndTime": 1552342270.844112, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [15, 6, 10, 3, 48, "4-5,", "10-12,", "16,", "3->4,", "9->10,", "13->16"], "FinalSolution": ["-1", "1", "0", "0"], "StartTime": 1552342269.6211507, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["3", "1", "0", "0"], [], ["5"], ["5", "1"], ["5", "1", "0"], ["5", "1", "0", "3"], ["5", "1", "0", "3", "3g7"], ["5", "1", "0", "3", "8"], ["5", "1", "0", "3", "8", "fuS"], ["5", "1", "0", "3", "8", "1"], ["0v9", "5", "1", "0", "3", "8", "1"], ["4", "5", "1", "0", "3", "8", "1"], ["4", "5", "1", "3", "8", "1"], ["4", "5", "1", "3", "8", "0", "1"], ["4", "5", "s3Q", "1", "3", "8", "0", "1"], ["4", "5", "8", "1", "3", "8", "0", "1"], ["4", "HNs", "5", "8", "1", "3", "8", "0", "1"], ["4", "1", "5", "8", "1", "3", "8", "0", "1"], ["2dv"], ["4"], ["4", "0"], ["4", "0", "1"], ["4", "0", "1", "1"], ["4", "0", "1", "1", "0"], ["oZ8"], ["1"], ["3", "1", "0", "0"], ["jfy", "3", "1", "0", "0"], ["6", "3", "1", "0", "0"], ["6", "3", "1", "0", "0", "3"], ["6", "3", "1", "0", "0", "3", "0"], ["6", "3", "1", "0", "0", "86.9", "3", "0"], ["6", "3", "1", "0", "0", "4", "3", "0"], ["6", "3", "1", "-1f", "0", "0", "4", "3", "0"], ["6", "3", "1", "3", "0", "0", "4", "3", "0"], ["6", "3", "1", "3 s1V", "0", "0", "4", "3", "0"], ["6", "3", "1", "3 9", "0", "0", "4", "3", "0"], ["6", "3", "1", "3 9", "0", "0", "4", "3 i8T", "0"], ["6", "3", "1", "3 9", "0", "0", "4", "3 i8T"], ["6", "3", "1", "3 9", "0", "0", "4", ""], ["6", "3", "1 9YR", "3 9", "0", "0", "4", ""], ["6", "3", "1 -1", "3 9", "0", "0", "4", ""], ["6", "1 -1", "3 9", "0", "0", "4", ""], ["6", "1 -1", "3 9", "0", "0 e9R", "4", ""], ["6", "1 -1", "3 9", "0", "0 0", "4", ""], ["6 Y04", "1 -1", "3 9", "0", "0 0", "4", ""], ["3", "1", "0", "0"], ["3", "0", "0"], ["3", "0", "0", "0"], ["3", "1", "0", "0"], ["3 Msi", "1", "0", "0"]]}, {"EndTime": 1552342279.657271, "FinalMinimizedSolution": ["1", "6"], "FinalCoverage": [15, 2, 10, 2, 84, "12,", "14,", "11->12,", "13->14"], "FinalSolution": ["1", "6", "0", "0", "1", "6", "1 6", "0", "0", "8", "6", "1"], "StartTime": 1552342270.8450222, "FoundSolution": true, "NumProbesMade": 40, "InputHistory": [["3", "1", "0", "0"], [], ["5"], ["5", "1"], ["5", "1", "0"], ["5", "1", "0", "3"], ["5", "1", "0", "3", "3g7"], ["5", "1", "0", "3", "8"], ["5", "1", "0", "3", "8", "fuS"], ["5", "1", "0", "3", "8", "1"], ["0v9", "5", "1", "0", "3", "8", "1"], ["4", "5", "1", "0", "3", "8", "1"], ["4", "5", "1", "3", "8", "1"], ["4", "5", "1", "3", "8", "0", "1"], ["4", "5", "s3Q", "1", "3", "8", "0", "1"], ["4", "5", "8", "1", "3", "8", "0", "1"], ["4", "HNs", "5", "8", "1", "3", "8", "0", "1"], ["4", "1", "5", "8", "1", "3", "8", "0", "1"], ["2dv"], ["4"], ["4", "0"], ["4", "0", "1"], ["4", "0", "1", "1"], ["4", "0", "1", "1", "0"], ["oZ8"], ["1"], ["3", "1", "0", "0"], ["jfy", "3", "1", "0", "0"], ["6", "3", "1", "0", "0"], ["6", "3", "1", "0", "0", "3"], ["6", "3", "1", "0", "0", "3", "0"], ["6", "3", "1", "0", "0", "86.9", "3", "0"], ["6", "3", "1", "0", "0", "4", "3", "0"], ["6", "3", "1", "-1f", "0", "0", "4", "3", "0"], ["6", "3", "1", "3", "0", "0", "4", "3", "0"], ["6", "3", "1", "3 s1V", "0", "0", "4", "3", "0"], ["6", "3", "1", "3 9", "0", "0", "4", "3", "0"], ["6", "3", "1", "3 9", "0", "0", "4", "3 i8T", "0"], ["6", "3", "1", "3 9", "0", "0", "4", "3 i8T"], ["6", "3", "1", "3 9", "0", "0", "4", ""], ["6", "3", "1 9YR", "3 9", "0", "0", "4", ""], ["6", "3", "1 -1", "3 9", "0", "0", "4", ""], ["6", "1 -1", "3 9", "0", "0", "4", ""], ["6", "1 -1", "3 9", "0", "0 e9R", "4", ""], ["6", "1 -1", "3 9", "0", "0 0", "4", ""], ["6 Y04", "1 -1", "3 9", "0", "0 0", "4", ""], ["3", "1", "0", "0"], ["3", "0", "0"], ["3", "0", "0", "0"], ["3", "1", "0", "0"], ["3 Msi", "1", "0", "0"], ["3", "1", "0", "0"], ["3", "1", "0", "abc a bCd bC AbC BC BCD bcd ABC hh hh hh", "0"], ["3", "1", "0", "7 a bCd bC AbC BC BCD bcd ABC hh hh hh", "0"], ["3", "1", "0", "7 4 bCd bC AbC BC BCD bcd ABC hh hh hh", "0"], ["3", "1", "0", "7 4 9 bC AbC BC BCD bcd ABC hh hh hh", "0"], ["3", "1", "0", "7 4 9 bC A8 BC BCD bcd ABC hh hh hh", "0"], ["3", "1", "0", "7 4 9 5 A8 BC BCD bcd ABC hh hh hh", "0"], ["3", "1", "0", "7 4 9 5 3 BC BCD bcd ABC hh hh hh", "0"], ["3", "1", "0", "7 4 9 5 3 BC BCD bcd A3 hh hh hh", "0"], ["3", "1", "0", "7 4 9 5 3 BC 5D bcd A3 hh hh hh", "0"], ["3", "1", "0", "7 4 9 5 3 3 5D bcd A3 hh hh hh", "0"], ["3", "1", "0", "7 4 9 5 3 3 9 bcd A3 hh hh hh", "0"], ["3", "1", "0", "7 4 9 5 3 3 9 3 A3 hh hh hh", "0"], ["3", "1", "0", "7 4 9 5 3 3 9 3 0 hh hh hh", "0"], ["3", "1", "0", "7 4 9 5 3 3 9 3 0 hh hh 0", "0"], ["3", "1", "0", "7 4 9 5 3 3 9 3 0 hh 9 0", "0"], ["3", "1", "0", "7 4 9 5 3 3 9 3 0 6 9 0", "0"], ["3", "1", "0", "7 4 zIj 5 3 3 9 3 0 6 9 0", "0"], ["3", "1", "0", "7 4 2 5 3 3 9 3 0 6 9 0", "0"], ["3", "1", "0", "0", "7 4 2 5 3 3 9 3 0 6 9 0", "0"], ["3", "1", "0", "0", "7 4 2 1 3 3 9 3 0 6 9 0", "0"], ["efq"], ["izB"], ["6"], ["6", "1"], ["6", "1", "6"], ["6", "1", "6", "1"], ["6", "1", "6", "1", "0"], ["6", "1", "6", "1", "0", "83O"], ["6", "1", "6", "1", "0", "6"], ["6", "1", "6", "1", "0", "6", "1"], ["6", "1", "6", "1", "0", "0", "6", "1"], ["6", "1", "6", "1 -6t", "0", "0", "6", "1"], ["6", "1", "6", "1 6", "0", "0", "6", "1"], ["6", "0", "1", "6", "1 6", "0", "0", "6", "1"], ["6", "0", "1", "6", "1 6", "0", "0 9iE", "6", "1"], ["6", "0", "1", "6", "1 6", "0", "0 8", "6", "1"], ["6", "0", "1", "6", "1 6", "0", "0", "8", "6", "1"], ["6", "0", "0", "1", "6", "1 6", "0", "0", "8", "6", "1"], ["0.0", "6", "0", "0", "1", "6", "1 6", "0", "0", "8", "6", "1"]]}]], [{"CorrectInputs": [[["cat", "123"], 1525991239]], "UniqueId": "6aa3fa52-4ac8-4643-edaa-9ef5bf3fbce6_0", "CoverageInfo": [12, 10, 4, 0, 12, "4-30"], "TimeStamp": 1525991196, "BadInput": ["dog", "cat"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 2, in <module>\n    key = int(input(\"Enter a key: \"))\nValueError: invalid literal for int() with base 10: 'cat'\n", "ip": "50.194.112.189"}, [{"EndTime": 1552362509.6534915, "FinalMinimizedSolution": ["dog", "9"], "FinalCoverage": [12, 0, 4, 0, 100], "FinalSolution": ["dog", "9"], "StartTime": 1552362508.7883174, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dog", "cat"]]}, {"EndTime": 1552362510.5208879, "FinalMinimizedSolution": ["dog", "2"], "FinalCoverage": [12, 0, 4, 0, 100], "FinalSolution": ["dog", "2"], "StartTime": 1552362509.6536705, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dog", "cat"], ["dog", "cat"]]}, {"EndTime": 1552362511.3858712, "FinalMinimizedSolution": ["dog 87W", "9"], "FinalCoverage": [12, 0, 4, 0, 100], "FinalSolution": ["dog 87W", "9"], "StartTime": 1552362510.5210853, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dog", "cat"], ["dog", "cat"], ["dog", "cat"]]}, {"EndTime": 1552362512.2503245, "FinalMinimizedSolution": ["dog", "4"], "FinalCoverage": [12, 0, 4, 0, 100], "FinalSolution": ["dog", "4"], "StartTime": 1552362511.3860707, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dog", "cat"], ["dog", "cat"], ["dog", "cat"], ["dog", "cat"]]}, {"EndTime": 1552362513.1157959, "FinalMinimizedSolution": ["dog", "6"], "FinalCoverage": [12, 0, 4, 0, 100], "FinalSolution": ["dog", "6"], "StartTime": 1552362512.250543, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dog", "cat"], ["dog", "cat"], ["dog", "cat"], ["dog", "cat"], ["dog", "cat"]]}]], [{"CorrectInputs": [[["1 1 2 3 4 3 2 2 2 5 6"], 1526652975]], "UniqueId": "94489ef3-411e-4be0-b861-9435f525acab_0", "CoverageInfo": [13, 1, 8, 2, 86, "15,", "5->exit,", "11->15"], "TimeStamp": 1526652956, "BadInput": ["1 2 3 3 3 3 1 1 1 2 2"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 6, in <module>\n    while a[y] == a[z] and z <= (len(a) - 1):\nIndexError: list index out of range\n", "ip": "37.113.134.149"}, [{"EndTime": 1552414045.7826376, "FinalMinimizedSolution": [], "FinalCoverage": [13, 0, 8, 1, 95, "5->exit"], "FinalSolution": ["1 2 3 3 3 3 1 1 1 5 2"], "StartTime": 1552414044.482557, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 3 3 3 3 1 1 1 X5s 2"], ["1 2 3 3 3 3 1 1 1 3 2"], ["1 2 3 3 3 3 1 1 1 e8b 2"]]}, {"EndTime": 1552414046.5213418, "FinalMinimizedSolution": [], "FinalCoverage": [13, 8, 8, 1, 38, "6-15,", "5->6"], "FinalSolution": [""], "StartTime": 1552414045.7828362, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 3 3 3 3 1 1 1 X5s 2"], ["1 2 3 3 3 3 1 1 1 3 2"], ["1 2 3 3 3 3 1 1 1 e8b 2"], ["1 2 3 3 3 3 1 1 1 2 2"]]}, {"EndTime": 1552414051.3330522, "FinalMinimizedSolution": [], "FinalCoverage": [13, 8, 8, 1, 38, "6-15,", "5->6"], "FinalSolution": ["1", "", "", "1", "2", "3", "3", "", "", "3", "1", "1", "1", "2", "2", "2", "0", "2", "2", "6", "7", "7", "6", "3", "3", "3", "1", "1", "1", "2", "2"], "StartTime": 1552414046.5215535, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 3 3 3 3 1 1 1 X5s 2"], ["1 2 3 3 3 3 1 1 1 3 2"], ["1 2 3 3 3 3 1 1 1 e8b 2"], ["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3 3 3 1 1 1 2 2 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 print( 'SPJ:2397', type(get_zero_positions([[]])), sorted(get_zero_positions([ [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 'SPJ:2397', type(get_zero_positions([[]])), sorted(get_zero_positions([ [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 type(get_zero_positions([[]])), sorted(get_zero_positions([ [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 sorted(get_zero_positions([ [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 7 ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 7 7 ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 7 7 6 3 3 3 1 1 1 2 2"], ["1   1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 7 7 6 3 3 3 1 1 1 2 2"]]}, {"EndTime": 1552414052.5066538, "FinalMinimizedSolution": [], "FinalCoverage": [13, 8, 8, 1, 38, "6-15,", "5->6"], "FinalSolution": ["1", ""], "StartTime": 1552414051.3334672, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 3 3 3 3 1 1 1 X5s 2"], ["1 2 3 3 3 3 1 1 1 3 2"], ["1 2 3 3 3 3 1 1 1 e8b 2"], ["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3 3 3 1 1 1 2 2 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 print( 'SPJ:2397', type(get_zero_positions([[]])), sorted(get_zero_positions([ [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 'SPJ:2397', type(get_zero_positions([[]])), sorted(get_zero_positions([ [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 type(get_zero_positions([[]])), sorted(get_zero_positions([ [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 sorted(get_zero_positions([ [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 7 ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 7 7 ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 7 7 6 3 3 3 1 1 1 2 2"], ["1   1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 7 7 6 3 3 3 1 1 1 2 2"], ["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 3 3 3 3 1 1 2 3 3 3 3 1 1 1 2 2 1 2 2"], ["tu2", ""]]}, {"EndTime": 1552414053.7510064, "FinalMinimizedSolution": [], "FinalCoverage": [13, 8, 8, 1, 38, "6-15,", "5->6"], "FinalSolution": [], "StartTime": 1552414052.507056, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 3 3 3 3 1 1 1 X5s 2"], ["1 2 3 3 3 3 1 1 1 3 2"], ["1 2 3 3 3 3 1 1 1 e8b 2"], ["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3 3 3 1 1 1 2 2 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 print( 'SPJ:2397', type(get_zero_positions([[]])), sorted(get_zero_positions([ [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 'SPJ:2397', type(get_zero_positions([[]])), sorted(get_zero_positions([ [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 type(get_zero_positions([[]])), sorted(get_zero_positions([ [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 sorted(get_zero_positions([ [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 [1,1,1,2], [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 [1,3,4,4], [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 [0,3,2,2] ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 7 ])) ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 7 7 ) 3 3 3 1 1 1 2 2"], ["1 2 1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 7 7 6 3 3 3 1 1 1 2 2"], ["1   1 2 3 3   3 1 1 1 2 2 2 0 2 2 6 7 7 6 3 3 3 1 1 1 2 2"], ["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 3 3 3 3 1 1 2 3 3 3 3 1 1 1 2 2 1 2 2"], ["tu2", ""], ["1 2 3 3 3 3 1 1 1 2 2"], ["1 2 3 3 3 3 1 1 1 2 3 3 3 3 1 1 1 2 2 2 2"], ["1 1 2 3 3 3 3 1 1 1 2 2 3 3 3 3 1 1 1 2 3 3 3 3 1 1 1 2 2 2 2"], ["1 1 2 3 3 3 3 1 1 1 2 2 3 1 1 2 3 3 3 3 1 1 1 2 2 3 3 3 3 1 1 1 2 3 3 3 3 1 1 1 2 2 2 2 3 3 1 1 1 2 3 3 3 3 1 1 1 2 2 2 2"]]}]], [{"CorrectInputs": [[["23 1 8"], 1533487147]], "UniqueId": "a5f5fdb6-944e-4e45-924c-64182d3bf577_0", "CoverageInfo": [8, 7, 4, 0, 8, "2-10"], "TimeStamp": 1533487122, "BadInput": ["1 6"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    d, key, value = input().split()\nValueError: not enough values to unpack (expected 3, got 2)\n", "ip": "5.3.210.149"}, [{"EndTime": 1552416668.1371918, "FinalMinimizedSolution": ["1 6 6"], "FinalCoverage": [8, 1, 4, 2, 75, "5,", "4->5,", "6->10"], "FinalSolution": ["1 6 6"], "StartTime": 1552416667.2744288, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 6"]]}, {"EndTime": 1552416673.7195544, "FinalMinimizedSolution": ["1 1 1"], "FinalCoverage": [8, 1, 4, 2, 75, "5,", "4->5,", "6->10"], "FinalSolution": ["1 1 1"], "StartTime": 1552416668.137373, "FoundSolution": true, "NumProbesMade": 26, "InputHistory": [["1 6"], ["1 6"], ["1 6 6 6"], ["1", "6", "6"], ["1", "6", "6 6"], ["1", "6", "6 6 6"], ["1", "6", "6 6 6 6"], ["1", "6", "6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6 6 6 6"], ["1", "6"], ["1", "6 6"], ["1", "6 6 6"], ["1", "6 6 6 6"], ["1", "6 6 6 6 6"], ["1", "6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6 6 6 6"], ["1"], ["1 1"]]}, {"EndTime": 1552416677.230447, "FinalMinimizedSolution": ["0f2 2 10"], "FinalCoverage": [8, 1, 4, 2, 75, "5,", "4->5,", "6->10"], "FinalSolution": ["0f2 2 10"], "StartTime": 1552416673.719977, "FoundSolution": true, "NumProbesMade": 15, "InputHistory": [["1 6"], ["1 6"], ["1 6 6 6"], ["1", "6", "6"], ["1", "6", "6 6"], ["1", "6", "6 6 6"], ["1", "6", "6 6 6 6"], ["1", "6", "6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6 6 6 6"], ["1", "6"], ["1", "6 6"], ["1", "6 6 6"], ["1", "6 6 6 6"], ["1", "6 6 6 6 6"], ["1", "6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6 6 6 6"], ["1"], ["1 1"], ["1 6"], ["1", "6", "6", "6"], ["1", "6", "6", "6 6"], ["1", "6", "6", "6 6 6"], ["1", "6", "6", "6 6 6 6"], ["1", "6", "6", "6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6 6 6 6 6"], [], ["0f2 0QL 0QL"], ["0f2 0QL 10"]]}, {"EndTime": 1552416682.6211436, "FinalMinimizedSolution": ["Z44 9 6"], "FinalCoverage": [8, 1, 4, 2, 75, "5,", "4->5,", "6->10"], "FinalSolution": ["Z44 9 6"], "StartTime": 1552416677.231004, "FoundSolution": true, "NumProbesMade": 25, "InputHistory": [["1 6"], ["1 6"], ["1 6 6 6"], ["1", "6", "6"], ["1", "6", "6 6"], ["1", "6", "6 6 6"], ["1", "6", "6 6 6 6"], ["1", "6", "6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6 6 6 6"], ["1", "6"], ["1", "6 6"], ["1", "6 6 6"], ["1", "6 6 6 6"], ["1", "6 6 6 6 6"], ["1", "6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6 6 6 6"], ["1"], ["1 1"], ["1 6"], ["1", "6", "6", "6"], ["1", "6", "6", "6 6"], ["1", "6", "6", "6 6 6"], ["1", "6", "6", "6 6 6 6"], ["1", "6", "6", "6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6 6 6 6 6"], [], ["0f2 0QL 0QL"], ["0f2 0QL 10"], ["1 6"], ["1", "6", "6 9-k"], ["1", "6", "6 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k 9-k 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k 9-k 9-k 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k 9-k 9-k 9-k 9-k 9-k 9-k"], ["1", "6 -yY"], ["1", "6 -yY -yY"], ["1", "6 -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY -yY -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY -yY -yY -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY -yY -yY -yY -yY -yY -yY"], ["Z44"], ["Z44 Z44"], ["Z44 Z44 Z44"], ["Z44 Z44 6"]]}, {"EndTime": 1552416683.5917444, "FinalMinimizedSolution": ["1 0 4"], "FinalCoverage": [8, 1, 4, 2, 75, "5,", "4->5,", "6->10"], "FinalSolution": ["1 0 4", "1", "6"], "StartTime": 1552416682.6218877, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 6"], ["1 6"], ["1 6 6 6"], ["1", "6", "6"], ["1", "6", "6 6"], ["1", "6", "6 6 6"], ["1", "6", "6 6 6 6"], ["1", "6", "6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6 6 6"], ["1", "6", "6 6 6 6 6 6 6 6 6 6 6"], ["1", "6"], ["1", "6 6"], ["1", "6 6 6"], ["1", "6 6 6 6"], ["1", "6 6 6 6 6"], ["1", "6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6 6 6"], ["1", "6 6 6 6 6 6 6 6 6 6 6"], ["1"], ["1 1"], ["1 6"], ["1", "6", "6", "6"], ["1", "6", "6", "6 6"], ["1", "6", "6", "6 6 6"], ["1", "6", "6", "6 6 6 6"], ["1", "6", "6", "6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6 6 6 6"], ["1", "6", "6", "6 6 6 6 6 6 6 6 6 6 6"], [], ["0f2 0QL 0QL"], ["0f2 0QL 10"], ["1 6"], ["1", "6", "6 9-k"], ["1", "6", "6 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k 9-k 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k 9-k 9-k 9-k 9-k 9-k"], ["1", "6", "6 9-k 9-k 9-k 9-k 9-k 9-k 9-k 9-k 9-k 9-k"], ["1", "6 -yY"], ["1", "6 -yY -yY"], ["1", "6 -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY -yY -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY -yY -yY -yY -yY -yY"], ["1", "6 -yY -yY -yY -yY -yY -yY -yY -yY -yY -yY"], ["Z44"], ["Z44 Z44"], ["Z44 Z44 Z44"], ["Z44 Z44 6"], ["1 6"]]}]], [{"CorrectInputs": [[["4", "A", "B : A", "C : A", "D : B C", "4", "A B", "B D", "C D", "D A"], 1542046953]], "UniqueId": "4148c583-5645-4b21-f5f4-54135b718116_0", "CoverageInfo": [7, 0, 9, 3, 81, "2->exit,", "4->exit,", "6->5"], "TimeStamp": 1542046496, "BadInput": ["2", "a:c b", "b:d e", "1", "e a"], "ErrorType": "KeyError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 6, in <module>\n    if j: print(['No', 'Yes'][isP(*c)])\n  File \"temp2018.py\", line 2, in isP\n    return ch == pr or any(map(lambda pl: isP(pr, pl), p[ch]))\nKeyError: 'a'\n", "ip": "178.122.106.98"}, [{"InputHistory": [["2", "a:c b", "b:d e", "1", "e a"], ["2", "a:c b", "", "1", "e a"], ["2", "a:c", "b", "", "1", "e a"], ["2", "a:c", "b", "", "1", "e a-1"], ["2", "a:c", "b", "", "1", "e a-16"], ["2", "a:c", "b", "", "1", "e a-168"], ["2", "a:c", "b", "", "1", "e a-168-1"], ["2", "a:c", "b", "", "1", "e a-168-18"], ["2", "a:c", "b", "", "1", "e a-168-18-1"], ["2", "a:c", "b", "", "1", "e a-168-18-18"], ["2", "a:c", "b", "", "1", "e a-168-18-189"], ["2", "a:c", "b", "", "1", "e a-168-18-1896"], ["2", "a:c", "b", "", "1", "e a-168-18-18969"], ["2", "a:c", "b", "", "1", "e a-168-18-189691"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-17"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-1754"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-17548"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485101"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510116"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485101164"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510116410"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214700"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147004"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214700410"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147004100"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003-15"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552360970.0033414, "StartTime": 1552360958.609774}, {"InputHistory": [["2", "a:c b", "b:d e", "1", "e a"], ["2", "a:c b", "", "1", "e a"], ["2", "a:c", "b", "", "1", "e a"], ["2", "a:c", "b", "", "1", "e a-1"], ["2", "a:c", "b", "", "1", "e a-16"], ["2", "a:c", "b", "", "1", "e a-168"], ["2", "a:c", "b", "", "1", "e a-168-1"], ["2", "a:c", "b", "", "1", "e a-168-18"], ["2", "a:c", "b", "", "1", "e a-168-18-1"], ["2", "a:c", "b", "", "1", "e a-168-18-18"], ["2", "a:c", "b", "", "1", "e a-168-18-189"], ["2", "a:c", "b", "", "1", "e a-168-18-1896"], ["2", "a:c", "b", "", "1", "e a-168-18-18969"], ["2", "a:c", "b", "", "1", "e a-168-18-189691"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-17"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-1754"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-17548"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485101"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510116"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485101164"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510116410"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214700"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147004"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214700410"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147004100"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003-15"], ["2", "a:c b", "b:d e", "1", "e a"], [], ["4"], ["4", "a:c b"], ["4", "a:c b", "a:c b"], ["4", "a:c b", "a:c b", "4"], ["4", "a:c b", "a:c b", "4", "1"], ["4", "a:c b", "a:c b", "4", "1", "4"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b", "1"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b", "1", "a:c b"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b", "1", "a:c b", "No"], ["No"], ["8"], ["8", "b:d e"], ["8", "b:d e", "1"], ["8", "b:d e", "1", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d e", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d e", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "2 e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf HZb", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "2 HZb", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "2 HZb", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "4Kf", "b:d e", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "4Kf", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "4Kf", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "4Kf", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 6", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "1", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 6", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "1", "3", "6", "9", "3 b", "Yes", "e", "", "1", "e a", "b:d 6", "a:c end", "b:d Yes", "c6z"], ["Yes"], ["10"], ["10", "b:d e"], ["10", "b:d e", "b:d e"], ["10", "b:d e", "b:d e", "b:d e"], ["10", "b:d e", "b:d e", "b:d e", "a:c b"], ["10", "b:d e", "b:d e", "b:d e", "a:c b", "a:c b"], ["10", "b:d e", "b:d e", "b:d e", "a:c b", "a:c b", "b:d e"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552360981.21414, "StartTime": 1552360970.0043519}, {"EndTime": 1552360987.2536883, "FinalMinimizedSolution": ["1", "Yes", "0"], "FinalCoverage": [7, 1, 9, 1, 75, "2,", "6->5"], "FinalSolution": ["1", "Yes", "0"], "StartTime": 1552360981.2165625, "FoundSolution": true, "NumProbesMade": 34, "InputHistory": [["2", "a:c b", "b:d e", "1", "e a"], ["2", "a:c b", "", "1", "e a"], ["2", "a:c", "b", "", "1", "e a"], ["2", "a:c", "b", "", "1", "e a-1"], ["2", "a:c", "b", "", "1", "e a-16"], ["2", "a:c", "b", "", "1", "e a-168"], ["2", "a:c", "b", "", "1", "e a-168-1"], ["2", "a:c", "b", "", "1", "e a-168-18"], ["2", "a:c", "b", "", "1", "e a-168-18-1"], ["2", "a:c", "b", "", "1", "e a-168-18-18"], ["2", "a:c", "b", "", "1", "e a-168-18-189"], ["2", "a:c", "b", "", "1", "e a-168-18-1896"], ["2", "a:c", "b", "", "1", "e a-168-18-18969"], ["2", "a:c", "b", "", "1", "e a-168-18-189691"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-17"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-1754"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-17548"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485101"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510116"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485101164"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510116410"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214700"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147004"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214700410"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147004100"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003-15"], ["2", "a:c b", "b:d e", "1", "e a"], [], ["4"], ["4", "a:c b"], ["4", "a:c b", "a:c b"], ["4", "a:c b", "a:c b", "4"], ["4", "a:c b", "a:c b", "4", "1"], ["4", "a:c b", "a:c b", "4", "1", "4"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b", "1"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b", "1", "a:c b"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b", "1", "a:c b", "No"], ["No"], ["8"], ["8", "b:d e"], ["8", "b:d e", "1"], ["8", "b:d e", "1", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d e", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d e", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "2 e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf HZb", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "2 HZb", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "2 HZb", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "4Kf", "b:d e", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "4Kf", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "4Kf", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "4Kf", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 6", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "1", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 6", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "1", "3", "6", "9", "3 b", "Yes", "e", "", "1", "e a", "b:d 6", "a:c end", "b:d Yes", "c6z"], ["Yes"], ["10"], ["10", "b:d e"], ["10", "b:d e", "b:d e"], ["10", "b:d e", "b:d e", "b:d e"], ["10", "b:d e", "b:d e", "b:d e", "a:c b"], ["10", "b:d e", "b:d e", "b:d e", "a:c b", "a:c b"], ["10", "b:d e", "b:d e", "b:d e", "a:c b", "a:c b", "b:d e"], ["2", "a:c b", "b:d e", "1", "e a"], ["2", "a:c b", "y : a b e", "1", "e a"], ["2", "tO1 b", "y : a b e", "1", "e a"], ["Yes", "2", "tO1 b", "y : a b e", "1", "e a"], ["4", "2", "tO1 b", "y : a b e", "1", "e a"], ["4", "2", "tO1 b", "y : a b e", "1", "8"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "2"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "2", "b:d e"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "2", "b:d e", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "2", "b:d e", "1", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1 h8Y", "2", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1 h8Y", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "a:c b b", "y : a b e", "1", "8", "b:d e", "1 h8Y", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "a:c b b", "y : a b e", "1", "8", "", "1 h8Y", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "a:c b b", "y : a b e", "1", "8", "", "1 h8Y", "1", "2", "b:d e", "1", "1"], ["4", "2", "a:c b b", "y : a b e", "1", "8", "", "1 h8Y", "1", "2", "b:d e", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1 h8Y", "1", "2", "b:d e", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "1", "2", "b:d e", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "1", "2", "b:d e", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "1", "2", "", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "e a", "1", "2", "", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "e a", "1", "2 Yes", "", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "KIB", "", "1", "8", "", "1", "h8Y", "e a", "1", "2 Yes", "", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "KIB", "", "1", "8", "", "1", "h8Y", "e a", "1", "2 Yes", "", "Yes", "1", "1", "e a", "2"], ["4", "2", "a:c b b", "KIB", "", "1", "8", "", "1", "h8Y", "e a", "1", "2 Yes", "", "Yes c4-", "1", "1", "e a", "2"], ["4", "2", "a:c b b", "KIB", "", "1", "8", "", "1 Yes", "h8Y", "e a", "1", "2 Yes", "", "Yes c4-", "1", "1", "e a", "2"], ["4", "2", "a:c b b", "KIB", " No", "1", "8", "", "1 Yes", "h8Y", "e a", "1", "2 Yes", "", "Yes c4-", "1", "1", "e a", "2"], ["1", "Yes"], ["1", "Yes", "e a"]]}, {"EndTime": 1552360990.5947351, "FinalMinimizedSolution": ["1", "1", "0"], "FinalCoverage": [7, 1, 9, 1, 75, "2,", "6->5"], "FinalSolution": ["1", "1", "0"], "StartTime": 1552360987.256998, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["2", "a:c b", "b:d e", "1", "e a"], ["2", "a:c b", "", "1", "e a"], ["2", "a:c", "b", "", "1", "e a"], ["2", "a:c", "b", "", "1", "e a-1"], ["2", "a:c", "b", "", "1", "e a-16"], ["2", "a:c", "b", "", "1", "e a-168"], ["2", "a:c", "b", "", "1", "e a-168-1"], ["2", "a:c", "b", "", "1", "e a-168-18"], ["2", "a:c", "b", "", "1", "e a-168-18-1"], ["2", "a:c", "b", "", "1", "e a-168-18-18"], ["2", "a:c", "b", "", "1", "e a-168-18-189"], ["2", "a:c", "b", "", "1", "e a-168-18-1896"], ["2", "a:c", "b", "", "1", "e a-168-18-18969"], ["2", "a:c", "b", "", "1", "e a-168-18-189691"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-17"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-1754"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-17548"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485101"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510116"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485101164"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510116410"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214700"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147004"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214700410"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147004100"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003-15"], ["2", "a:c b", "b:d e", "1", "e a"], [], ["4"], ["4", "a:c b"], ["4", "a:c b", "a:c b"], ["4", "a:c b", "a:c b", "4"], ["4", "a:c b", "a:c b", "4", "1"], ["4", "a:c b", "a:c b", "4", "1", "4"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b", "1"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b", "1", "a:c b"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b", "1", "a:c b", "No"], ["No"], ["8"], ["8", "b:d e"], ["8", "b:d e", "1"], ["8", "b:d e", "1", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d e", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d e", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "2 e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf HZb", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "2 HZb", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "2 HZb", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "4Kf", "b:d e", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "4Kf", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "4Kf", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "4Kf", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 6", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "1", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 6", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "1", "3", "6", "9", "3 b", "Yes", "e", "", "1", "e a", "b:d 6", "a:c end", "b:d Yes", "c6z"], ["Yes"], ["10"], ["10", "b:d e"], ["10", "b:d e", "b:d e"], ["10", "b:d e", "b:d e", "b:d e"], ["10", "b:d e", "b:d e", "b:d e", "a:c b"], ["10", "b:d e", "b:d e", "b:d e", "a:c b", "a:c b"], ["10", "b:d e", "b:d e", "b:d e", "a:c b", "a:c b", "b:d e"], ["2", "a:c b", "b:d e", "1", "e a"], ["2", "a:c b", "y : a b e", "1", "e a"], ["2", "tO1 b", "y : a b e", "1", "e a"], ["Yes", "2", "tO1 b", "y : a b e", "1", "e a"], ["4", "2", "tO1 b", "y : a b e", "1", "e a"], ["4", "2", "tO1 b", "y : a b e", "1", "8"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "2"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "2", "b:d e"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "2", "b:d e", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "2", "b:d e", "1", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1 h8Y", "2", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1 h8Y", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "a:c b b", "y : a b e", "1", "8", "b:d e", "1 h8Y", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "a:c b b", "y : a b e", "1", "8", "", "1 h8Y", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "a:c b b", "y : a b e", "1", "8", "", "1 h8Y", "1", "2", "b:d e", "1", "1"], ["4", "2", "a:c b b", "y : a b e", "1", "8", "", "1 h8Y", "1", "2", "b:d e", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1 h8Y", "1", "2", "b:d e", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "1", "2", "b:d e", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "1", "2", "b:d e", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "1", "2", "", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "e a", "1", "2", "", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "e a", "1", "2 Yes", "", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "KIB", "", "1", "8", "", "1", "h8Y", "e a", "1", "2 Yes", "", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "KIB", "", "1", "8", "", "1", "h8Y", "e a", "1", "2 Yes", "", "Yes", "1", "1", "e a", "2"], ["4", "2", "a:c b b", "KIB", "", "1", "8", "", "1", "h8Y", "e a", "1", "2 Yes", "", "Yes c4-", "1", "1", "e a", "2"], ["4", "2", "a:c b b", "KIB", "", "1", "8", "", "1 Yes", "h8Y", "e a", "1", "2 Yes", "", "Yes c4-", "1", "1", "e a", "2"], ["4", "2", "a:c b b", "KIB", " No", "1", "8", "", "1 Yes", "h8Y", "e a", "1", "2 Yes", "", "Yes c4-", "1", "1", "e a", "2"], ["1", "Yes"], ["1", "Yes", "e a"], ["2", "a:c b", "b:d e", "1", "e a"], ["2", "a:c v", "b:d e", "1", "e a"], ["2 Yes", "a:c v", "b:d e", "1", "e a"], ["6", "a:c v", "b:d e", "1", "e a"], ["6", "a:c v", "b:d e", "1", "e a", "b:d e"], ["6", "a:c v", "b:d e", "1", "e a", "b:d e", "2"], ["6", "a:c v", "b:d e", "1", "e a", "b:d e", "2", "1"], ["6", "a:c v", "b:d e", "1", "e a", "b:d e", "2", "1", "6"], ["6", "a:c", "v", "b:d e", "1", "e a", "b:d e", "2", "1", "6"], ["Y5i"], ["5g0"], ["1"], ["1", "1"], ["1", "1", "xvc"]]}, {"InputHistory": [["2", "a:c b", "b:d e", "1", "e a"], ["2", "a:c b", "", "1", "e a"], ["2", "a:c", "b", "", "1", "e a"], ["2", "a:c", "b", "", "1", "e a-1"], ["2", "a:c", "b", "", "1", "e a-16"], ["2", "a:c", "b", "", "1", "e a-168"], ["2", "a:c", "b", "", "1", "e a-168-1"], ["2", "a:c", "b", "", "1", "e a-168-18"], ["2", "a:c", "b", "", "1", "e a-168-18-1"], ["2", "a:c", "b", "", "1", "e a-168-18-18"], ["2", "a:c", "b", "", "1", "e a-168-18-189"], ["2", "a:c", "b", "", "1", "e a-168-18-1896"], ["2", "a:c", "b", "", "1", "e a-168-18-18969"], ["2", "a:c", "b", "", "1", "e a-168-18-189691"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-17"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-1754"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-17548"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485101"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510116"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-11052287294485101164"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-1105228729448510116410"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214700"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147004"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-15274214700410"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-152742147004100"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003-1"], ["2", "a:c", "b", "", "1", "e a-168-18-189691-175489-14-110522872944851011641010-1527421470041003-15"], ["2", "a:c b", "b:d e", "1", "e a"], [], ["4"], ["4", "a:c b"], ["4", "a:c b", "a:c b"], ["4", "a:c b", "a:c b", "4"], ["4", "a:c b", "a:c b", "4", "1"], ["4", "a:c b", "a:c b", "4", "1", "4"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b", "1"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b", "1", "a:c b"], ["4", "a:c b", "a:c b", "4", "1", "4", "a:c b", "1", "a:c b", "No"], ["No"], ["8"], ["8", "b:d e"], ["8", "b:d e", "1"], ["8", "b:d e", "1", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d e"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "a:c b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d e", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d e", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c b", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d e", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "b:d e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "2 e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "4Kf HZb", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "2 HZb", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "2 HZb", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "a:c b", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "b:d e", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "4Kf", "b:d e", "6", "9", "b:d e b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "4Kf", "b:d e", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "4Kf", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "4Kf", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 4Kf", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "4Kf", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 6", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "1", "3", "6", "9", "3 b", "Yes e", "", "1", "e a", "b:d 6", "a:c end", "b:d Yes", "c6z"], ["8", "8", "b:d e", "1", "a:c b", "1 2 3 b", "b:d e", "No", "No", "1", "3", "6", "9", "3 b", "Yes", "e", "", "1", "e a", "b:d 6", "a:c end", "b:d Yes", "c6z"], ["Yes"], ["10"], ["10", "b:d e"], ["10", "b:d e", "b:d e"], ["10", "b:d e", "b:d e", "b:d e"], ["10", "b:d e", "b:d e", "b:d e", "a:c b"], ["10", "b:d e", "b:d e", "b:d e", "a:c b", "a:c b"], ["10", "b:d e", "b:d e", "b:d e", "a:c b", "a:c b", "b:d e"], ["2", "a:c b", "b:d e", "1", "e a"], ["2", "a:c b", "y : a b e", "1", "e a"], ["2", "tO1 b", "y : a b e", "1", "e a"], ["Yes", "2", "tO1 b", "y : a b e", "1", "e a"], ["4", "2", "tO1 b", "y : a b e", "1", "e a"], ["4", "2", "tO1 b", "y : a b e", "1", "8"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "2"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "2", "b:d e"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "2", "b:d e", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "2", "b:d e", "1", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1", "2", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1 h8Y", "2", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "tO1 b", "y : a b e", "1", "8", "b:d e", "1 h8Y", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "a:c b b", "y : a b e", "1", "8", "b:d e", "1 h8Y", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "a:c b b", "y : a b e", "1", "8", "", "1 h8Y", "1", "No", "2", "b:d e", "1", "1"], ["4", "2", "a:c b b", "y : a b e", "1", "8", "", "1 h8Y", "1", "2", "b:d e", "1", "1"], ["4", "2", "a:c b b", "y : a b e", "1", "8", "", "1 h8Y", "1", "2", "b:d e", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1 h8Y", "1", "2", "b:d e", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "1", "2", "b:d e", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "1", "2", "b:d e", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "1", "2", "", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "e a", "1", "2", "", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "", "1", "8", "", "1", "h8Y", "e a", "1", "2 Yes", "", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "KIB", "", "1", "8", "", "1", "h8Y", "e a", "1", "2 Yes", "", "Yes", "1", "1", "2"], ["4", "2", "a:c b b", "KIB", "", "1", "8", "", "1", "h8Y", "e a", "1", "2 Yes", "", "Yes", "1", "1", "e a", "2"], ["4", "2", "a:c b b", "KIB", "", "1", "8", "", "1", "h8Y", "e a", "1", "2 Yes", "", "Yes c4-", "1", "1", "e a", "2"], ["4", "2", "a:c b b", "KIB", "", "1", "8", "", "1 Yes", "h8Y", "e a", "1", "2 Yes", "", "Yes c4-", "1", "1", "e a", "2"], ["4", "2", "a:c b b", "KIB", " No", "1", "8", "", "1 Yes", "h8Y", "e a", "1", "2 Yes", "", "Yes c4-", "1", "1", "e a", "2"], ["1", "Yes"], ["1", "Yes", "e a"], ["2", "a:c b", "b:d e", "1", "e a"], ["2", "a:c v", "b:d e", "1", "e a"], ["2 Yes", "a:c v", "b:d e", "1", "e a"], ["6", "a:c v", "b:d e", "1", "e a"], ["6", "a:c v", "b:d e", "1", "e a", "b:d e"], ["6", "a:c v", "b:d e", "1", "e a", "b:d e", "2"], ["6", "a:c v", "b:d e", "1", "e a", "b:d e", "2", "1"], ["6", "a:c v", "b:d e", "1", "e a", "b:d e", "2", "1", "6"], ["6", "a:c", "v", "b:d e", "1", "e a", "b:d e", "2", "1", "6"], ["Y5i"], ["5g0"], ["1"], ["1", "1"], ["1", "1", "xvc"], ["2", "a:c b", "b:d e", "1", "e a"], ["2", "a:c b", "b:d e", "b:d e", "1", "e a"], ["2", "a:c b", "b:d e", "8", "1", "e a"], ["2", "a:c b", "b:d e", "8", "1", "e a", "a:c b"], ["2", "a:c b", "b:d e", "8", "1", "e a", "a:c b", "e a"], ["2", "a:c b", "b:d e", "8", "1", "e a", "a:c b", "e a", "e a"], ["2", "a:c b", "b:d e", "8", "1", "e a", "a:c b", "e a", "e a", "a:c b"], ["2", "a:c b", "b:d e", "8", "1", "e a", "a:c b", "e a", "e a", "a:c b", "b:d e"], ["2", "a:c b", "b:d e", "8", "1", "e a", "a:c b", "e a", "e a", "a:c b", "b:d e", "e a"], ["2", "a:c b", "b:d e", "8", "mi9", "1", "e a", "a:c b", "e a", "e a", "a:c b", "b:d e", "e a"], ["2", "a:c b", "b:d e", "8", "mi9", "Yes", "1", "e a", "a:c b", "e a", "e a", "a:c b", "b:d e", "e a"], ["KTI", "Yes"], ["6", "Yes"], ["6", "Yes", "6"], ["6", "Yes", "6", "6"], ["6", "Yes", "6", "6", "Yes"], ["6", "Yes", "6", "6", "Yes", "1"], ["6", "Yes", "6", "6", "Yes", "1", "1"], ["6", "Yes", "6", "6", "Yes", "1", "1", "6"], ["6", "Yes", "6", "6", "Yes", "1", "1", "6", "6"], ["6", "Yes", "6", "6", "Yes", "1", "1", "6", "6", "1"], ["6", "Yes", "6", "6", "Yes", "1", "1", "6", "6", "1", "1"], ["6", "Yes", "6", "6", "Yes", "1", "1", "6", "6", "1", "1", "6"], ["6", "Yes", "6", "6", "Yes", "1", "1", "6", "6", "1", "1", "6", "b:d e"], ["6", "Yes", "6", "6", "Yes", "1", "1", "6", "6", "1", "1", "6", "b:d e", "1"], ["5", "Yes"], ["5", "Yes", "1"], ["5", "Yes", "1", "e a"], ["5", "Yes", "1", "e a", "b:d e"], ["5", "Yes", "1", "e a", "b:d e", "e a"], ["5", "Yes", "1", "e a", "b:d e", "e a", "b:d e"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9", "e a"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9", "e a", "5"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9", "e a", "5", "a:c b"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9", "e a", "5", "a:c b", "a:c b"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9", "e a", "5", "a:c b", "a:c b", "e a"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9", "e a", "5", "a:c b", "a:c b", "e a", "b:d e"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9", "e a", "5", "a:c b", "a:c b", "e a", "b:d e", "b:d e"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9", "e a", "5", "a:c b", "a:c b", "e a", "b:d e", "b:d e", "e a"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9", "e a", "5", "a:c b", "a:c b", "e a", "b:d e", "b:d e", "e a", "b:d e"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9", "e a", "5", "a:c b", "a:c b", "e a", "b:d e", "b:d", "e", "e a", "b:d e"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9", "", "5", "a:c b", "a:c b", "e a", "b:d e", "b:d", "e", "e a", "b:d e"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9", "", "5", "a:c b b", "a:c b", "e a", "b:d e", "b:d", "e", "e a", "b:d e"], ["5", "Yes", "1", "e a", "b:d e", "e a", "9", "", "a:c b b", "a:c b", "e a", "b:d e", "b:d", "e", "e a", "b:d e"], ["5", "Yes", "1", "e a", "b:d Yes", "e a", "9", "", "a:c b b", "a:c b", "e a", "b:d e", "b:d", "e", "e a", "b:d e"], ["5", "Yes", "2fl", "1", "e a", "b:d Yes", "e a", "9", "", "a:c b b", "a:c b", "e a", "b:d e", "b:d", "e", "e a", "b:d e"], ["5", "Yes", "2fl", "1", "e a", "b:d Yes", "e a", "9", "", "a:c b b", "a:c b", "e a", "b:d e", "b:d", "e", "8", "b:d e"], ["5", "Yes", "2fl", "1", "e a", "b:d Yes", "e a", "9", "", "a:c b b", "a:c b", "8", "b:d e", "b:d", "e", "8", "b:d e"], ["5", "Yes", "2fl", "1", "e a", "b:d Yes", "9", "9", "", "a:c b b", "a:c b", "8", "b:d e", "b:d", "e", "8", "b:d e"], ["5", "2fl", "1", "e a", "b:d Yes", "9", "9", "", "a:c b b", "a:c b", "8", "b:d e", "b:d", "e", "8", "b:d e"], ["5", "2fl", "1", "e a", "b:d Yes", "9", "9", "", "a:c b b", "a:c b", "8", "b:d e", "c6F", "b:d", "e", "8", "b:d e"], ["5", "1", "e a", "b:d Yes", "9", "9", "", "a:c b b", "a:c b", "8", "b:d e", "c6F", "b:d", "e", "8", "b:d e"], ["5", "1", "e a", "b:d Yes", "9", "9", "", "a:c b b", "a:c b", "8", "b:d e", "c6F", "b:d", "e", "8", "b:d e10"], ["5", "1", "e a", "b:d Yes", "9", "9", "", "a:c b b", "a:c b", "8", "b:d e", "c6F", "b:d", "e", "8", "b:d e106"], ["5", "1", "e a", "b:d Yes", "9", "9", "", "a:c b b", "a:c b", "8", "b:d e", "c6F", "b:d", "e", "8", "b:d e10610"], ["5", "1", "e a", "b:d Yes", "9", "9", "", "a:c b b", "a:c b", "8", "b:d e", "c6F", "b:d", "e", "8", "b:d e106106"], ["5", "1", "e a", "b:d Yes", "9", "9", "", "a:c b b", "a:c b", "8", "b:d e", "c6F", "b:d", "e", "8", "b:d e1061062"], ["5", "1", "e a", "b:d Yes", "9", "9", "", "a:c b b", "a:c b", "8", "b:d e", "c6F", "b:d", "e", "8", "b:d e10610629"], ["5", "1", "e a", "b:d Yes", "9", "9", "", "a:c b b", "a:c b", "8", "b:d e", "c6F", "b:d", "e", "8", "b:d e106106295"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552361001.3704565, "StartTime": 1552360990.5981827}]], [{"CorrectInputs": [[["exit"], 1516667920]], "UniqueId": "fe284afc-bbda-47f5-e547-b6289b408c9d_0", "CoverageInfo": [15, 2, 8, 4, 74, "11,", "20,", "7->exit,", "10->11,", "16->19,", "19->20"], "TimeStamp": 1516667871, "BadInput": ["4", "7"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 23, in <module>\n    print(\"You got it but you have taken \" + count + \" number of attempts\")\nTypeError: Can't convert 'int' object to str implicitly\n", "ip": "182.75.45.225"}, [{"EndTime": 1552419001.9606752, "FinalMinimizedSolution": ["-1", "0", "3", "exit"], "FinalCoverage": [15, 2, 8, 3, 78, "17,", "23,", "7->exit,", "16->17,", "19->23"], "FinalSolution": ["-1", "0", "3", "exit", "7"], "StartTime": 1552419000.2256544, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["4", "7"], ["7", "4", "7"], ["7", "7 3", "4", "7"], ["7", "7 3", "4 hDs", "7"], ["7", "7 3", "4 hDs", "exit", "7"], ["7 YT-", "7 3", "4 hDs", "exit", "7"], ["-1", "7 3", "4 hDs", "exit", "7"], ["-1", "0", "4 hDs", "exit", "7"]]}, {"EndTime": 1552419004.190539, "FinalMinimizedSolution": ["exit"], "FinalCoverage": [15, 7, 8, 2, 43, "13-23,", "7->exit,", "10->13"], "FinalSolution": ["exit", "1"], "StartTime": 1552419001.9609544, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["4", "7"], ["7", "4", "7"], ["7", "7 3", "4", "7"], ["7", "7 3", "4 hDs", "7"], ["7", "7 3", "4 hDs", "exit", "7"], ["7 YT-", "7 3", "4 hDs", "exit", "7"], ["-1", "7 3", "4 hDs", "exit", "7"], ["-1", "0", "4 hDs", "exit", "7"], ["4", "7"], ["0 0", "4", "7"], ["10", "4", "7"], ["10", "4", "7 exit"], [], ["6"], ["6 xDm"], ["1"], ["1", "7"]]}, {"EndTime": 1552419005.438233, "FinalMinimizedSolution": ["exit"], "FinalCoverage": [15, 7, 8, 2, 43, "13-23,", "7->exit,", "10->13"], "FinalSolution": ["exit"], "StartTime": 1552419004.1908917, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["4", "7"], ["7", "4", "7"], ["7", "7 3", "4", "7"], ["7", "7 3", "4 hDs", "7"], ["7", "7 3", "4 hDs", "exit", "7"], ["7 YT-", "7 3", "4 hDs", "exit", "7"], ["-1", "7 3", "4 hDs", "exit", "7"], ["-1", "0", "4 hDs", "exit", "7"], ["4", "7"], ["0 0", "4", "7"], ["10", "4", "7"], ["10", "4", "7 exit"], [], ["6"], ["6 xDm"], ["1"], ["1", "7"], ["4", "7"], ["asX"], ["5"]]}, {"EndTime": 1552419005.941689, "FinalMinimizedSolution": ["exit"], "FinalCoverage": null, "FinalSolution": ["exit", "4"], "StartTime": 1552419005.4386022, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["4", "7"], ["7", "4", "7"], ["7", "7 3", "4", "7"], ["7", "7 3", "4 hDs", "7"], ["7", "7 3", "4 hDs", "exit", "7"], ["7 YT-", "7 3", "4 hDs", "exit", "7"], ["-1", "7 3", "4 hDs", "exit", "7"], ["-1", "0", "4 hDs", "exit", "7"], ["4", "7"], ["0 0", "4", "7"], ["10", "4", "7"], ["10", "4", "7 exit"], [], ["6"], ["6 xDm"], ["1"], ["1", "7"], ["4", "7"], ["asX"], ["5"], ["4", "7"], ["4"]]}, {"EndTime": 1552419011.7019634, "FinalMinimizedSolution": ["exit"], "FinalCoverage": null, "FinalSolution": ["exit", "exit"], "StartTime": 1552419005.9420233, "FoundSolution": true, "NumProbesMade": 30, "InputHistory": [["4", "7"], ["7", "4", "7"], ["7", "7 3", "4", "7"], ["7", "7 3", "4 hDs", "7"], ["7", "7 3", "4 hDs", "exit", "7"], ["7 YT-", "7 3", "4 hDs", "exit", "7"], ["-1", "7 3", "4 hDs", "exit", "7"], ["-1", "0", "4 hDs", "exit", "7"], ["4", "7"], ["0 0", "4", "7"], ["10", "4", "7"], ["10", "4", "7 exit"], [], ["6"], ["6 xDm"], ["1"], ["1", "7"], ["4", "7"], ["asX"], ["5"], ["4", "7"], ["4"], ["4", "7"], ["4", "7 97e"], ["7 97e"], ["exit  number of attempts"], ["-1"], ["-1", "-1"], ["-1", "-1", "-1"], ["-1", "-1", "-1", "-1"], ["-1", "-1", "-1", "-1", "-1"], ["-1", "-1", "-1", "-1", "-1", "-1"], ["-1", "-1", "-1", "-1", "-1", "-1", "-1"], ["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"], ["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"], ["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "4"], ["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "4", "-1"], ["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "4", "-1", "-1"], ["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "4", "-1", "-1", "-1"], ["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "4", "-1", "-1", "-1", "-1"], ["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "4", "-1", "-1", "-1", "-1"], ["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "4", "-1", "-1", "-1", "-1", "7"], ["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "4", "-1", "-1", "-1", "-1", "7", "-1"], ["tt0", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "4", "-1", "-1", "-1", "-1", "7", "-1"], ["4", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "4", "-1", "-1", "-1", "-1", "7", "-1"], ["4", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "4", "-1", "-1", "-1", "-1", "7", "-1", "4"], ["Nnm"], ["exit 9js"], ["3"], ["3", "4"], ["3", "4", "4"], ["dok"]]}]], [{"CorrectInputs": [[["main()", "Ploy Pat", "Ploy Boy", "Eak Pat", "Boy Pat", "Poom Pat", "Boy Eak", "Boy Eak", "q"], 1543782755]], "UniqueId": "27ab55a3-a5f1-4d19-cbaa-7d98342c1a5c_0", "CoverageInfo": [30, 24, 16, 0, 13, "2,", "4-14,", "16-21,", "24-28,", "30-35"], "TimeStamp": 1543782595, "BadInput": ["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], "ErrorType": "SyntaxError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 37, in <module>\n    exec(input().strip())       \n  File \"<string>\", line 1\n    main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q\n              ^\nSyntaxError: invalid syntax\n", "ip": "124.121.155.9"}, [{"EndTime": 1552347002.1720588, "FinalMinimizedSolution": [], "FinalCoverage": [30, 24, 16, 0, 13, "2,", "4-14,", "16-21,", "24-28,", "30-35"], "FinalSolution": [""], "StartTime": 1552347001.4366732, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"]]}, {"EndTime": 1552347003.8250022, "FinalMinimizedSolution": [], "FinalCoverage": [30, 24, 16, 0, 13, "2,", "4-14,", "16-21,", "24-28,", "30-35"], "FinalSolution": ["", "`", "asd", ""], "StartTime": 1552347002.1722252, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat EkR Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() 4 Pat EkR Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["`", ""], ["`", "asd", ""]]}, {"EndTime": 1552347005.3431349, "FinalMinimizedSolution": ["main()", "Ploy"], "FinalCoverage": [30, 13, 16, 3, 43, "2,", "8-13,", "16-21,", "25-26,", "35,", "7->8,", "24->25,", "32->35"], "FinalSolution": ["main()", "Ploy", "Pat", "Ploy", "Boy", "Eak", "Pat", "Boy", "Pat", "Poom", "Pat", "Boy", "Eak", "q"], "StartTime": 1552347003.8252807, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat EkR Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() 4 Pat EkR Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["`", ""], ["`", "asd", ""], ["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"]]}, {"EndTime": 1552347011.1609976, "FinalMinimizedSolution": ["main()", "Ploy"], "FinalCoverage": [30, 13, 16, 3, 43, "2,", "8-13,", "16-21,", "25-26,", "35,", "7->8,", "24->25,", "32->35"], "FinalSolution": ["main()", "Ploy", "Pat", "YHx", "main()", "Ploy", "Pat", "Ploy", "Boy", "Eak", "Pat", "Boy", "main()", "Ploy", "main()", "Ploy", "Pat", "Ploy", "Boy", "Eak", "Pat", "Boy", "Pat", "Poom", "Pat", "Boy", "Eak", "q", "YHx", "main()", "o", "Pat", "Ploy", "Boy", "Eak", "Pat", "Boy", "Pat", "Poom", "Pat", "Boy", "R0Q", "q", "Eak", "xey", "Boy", "In-", "Poom", "Pat", "Boy", "Eak", "q", "Poom", "Pat", "Boy", "R0Q", "q", "Eak", "xey", "Boy", "In-", "Poom", "Pat", "Boy", "Eak", "q"], "StartTime": 1552347005.3433962, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat EkR Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() 4 Pat EkR Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["`", ""], ["`", "asd", ""], ["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat YHx Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat YHx Boy Eak xey Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat YHx Boy Eak xey Boy In- Poom Pat Boy Eak q"], ["main() Ploy Pat YHx main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q Eak xey Boy In- Poom Pat Boy Eak q"], ["main() Ploy Pat YHx main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q"], ["main() Ploy Pat YHx main() Ploy Pat Ploy Boy Eak Pat Boy main() Ploy Pat YHx main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q"], ["main() Ploy Pat YHx main() Ploy Pat Ploy Boy Eak Pat Boy main() Ploy Pat YHx main() o Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q"], ["main() Ploy Pat YHx main() Ploy Pat Ploy Boy Eak Pat Boy main() Ploy main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q YHx main() o Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q"]]}, {"EndTime": 1552347012.729805, "FinalMinimizedSolution": ["main()", "Ploy"], "FinalCoverage": [30, 13, 16, 3, 43, "2,", "8-13,", "16-21,", "25-26,", "35,", "7->8,", "24->25,", "32->35"], "FinalSolution": ["main()", "Ploy", "Pat", "ycn", "Ploy", "Boy", "Eak", "Pat", "Boy", "Pat", "Poom", "Pat", "Boy", "Eak", "q"], "StartTime": 1552347011.1614225, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat EkR Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() 4 Pat EkR Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["`", ""], ["`", "asd", ""], ["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat YHx Boy Eak Pat Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat YHx Boy Eak xey Boy Pat Poom Pat Boy Eak q"], ["main() Ploy Pat YHx Boy Eak xey Boy In- Poom Pat Boy Eak q"], ["main() Ploy Pat YHx main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q Eak xey Boy In- Poom Pat Boy Eak q"], ["main() Ploy Pat YHx main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q"], ["main() Ploy Pat YHx main() Ploy Pat Ploy Boy Eak Pat Boy main() Ploy Pat YHx main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q"], ["main() Ploy Pat YHx main() Ploy Pat Ploy Boy Eak Pat Boy main() Ploy Pat YHx main() o Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q"], ["main() Ploy Pat YHx main() Ploy Pat Ploy Boy Eak Pat Boy main() Ploy main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q YHx main() o Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q Poom Pat Boy R0Q q Eak xey Boy In- Poom Pat Boy Eak q"], ["main() Ploy Pat Ploy Boy Eak Pat Boy Pat Poom Pat Boy Eak q"]]}]], [{"CorrectInputs": [[["5 6"], 1545782837]], "UniqueId": "354f0808-f2fa-4da8-fdd3-fd780d4001ee_0", "CoverageInfo": [7, 6, 2, 0, 11, "2-7"], "TimeStamp": 1545782820, "BadInput": ["5"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    a,n = input().split()\nValueError: not enough values to unpack (expected 2, got 1)\n", "ip": "2001:da8:7013:9017:918f:65a8:59e8:fa93"}, [{"EndTime": 1552413882.023861, "FinalMinimizedSolution": ["5 5"], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["5 5"], "StartTime": 1552413881.1592443, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5"]]}, {"EndTime": 1552413886.7101429, "FinalMinimizedSolution": ["6 6"], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["6 6"], "StartTime": 1552413882.0240376, "FoundSolution": true, "NumProbesMade": 21, "InputHistory": [["5"], ["5"], ["5", "5"], ["5", "5 5"], ["5", "5 5 5"], ["5", "5 5 5 5"], ["5", "5 5 5 5 5"], ["5", "5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5 5 5 5"], [], ["-nR YTN YTN"], ["-nR YTN"], ["-nR 3"], ["-1"], ["-1 -1"], ["-1 -1-1"], ["-1 5"], ["6"]]}, {"EndTime": 1552413888.1499605, "FinalMinimizedSolution": ["5 4"], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["5 4"], "StartTime": 1552413886.7105024, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["5"], ["5"], ["5", "5"], ["5", "5 5"], ["5", "5 5 5"], ["5", "5 5 5 5"], ["5", "5 5 5 5 5"], ["5", "5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5 5 5 5"], [], ["-nR YTN YTN"], ["-nR YTN"], ["-nR 3"], ["-1"], ["-1 -1"], ["-1 -1-1"], ["-1 5"], ["6"], ["5"], ["5 create foo global"], ["5 create foo"], ["5 create"]]}, {"EndTime": 1552413889.2226734, "FinalMinimizedSolution": ["5 7"], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["5 7"], "StartTime": 1552413888.1503468, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["5"], ["5"], ["5", "5"], ["5", "5 5"], ["5", "5 5 5"], ["5", "5 5 5 5"], ["5", "5 5 5 5 5"], ["5", "5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5 5 5 5"], [], ["-nR YTN YTN"], ["-nR YTN"], ["-nR 3"], ["-1"], ["-1 -1"], ["-1 -1-1"], ["-1 5"], ["6"], ["5"], ["5 create foo global"], ["5 create foo"], ["5 create"], ["5"], ["5 c"]]}, {"EndTime": 1552413892.7607715, "FinalMinimizedSolution": ["10 10"], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["10 10"], "StartTime": 1552413889.2230668, "FoundSolution": true, "NumProbesMade": 15, "InputHistory": [["5"], ["5"], ["5", "5"], ["5", "5 5"], ["5", "5 5 5"], ["5", "5 5 5 5"], ["5", "5 5 5 5 5"], ["5", "5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5 5 5"], ["5", "5 5 5 5 5 5 5 5 5 5 5"], [], ["-nR YTN YTN"], ["-nR YTN"], ["-nR 3"], ["-1"], ["-1 -1"], ["-1 -1-1"], ["-1 5"], ["6"], ["5"], ["5 create foo global"], ["5 create foo"], ["5 create"], ["5"], ["5 c"], ["5"], ["5", "5 -KQ"], ["5", "5 -KQ -KQ"], ["5", "5 -KQ -KQ -KQ"], ["5", "5 -KQ -KQ -KQ -KQ"], ["5", "5 -KQ -KQ -KQ -KQ -KQ"], ["5", "5 -KQ -KQ -KQ -KQ -KQ -KQ"], ["5", "5 -KQ -KQ -KQ -KQ -KQ -KQ -KQ"], ["5", "5 -KQ -KQ -KQ -KQ -KQ -KQ -KQ -KQ"], ["5", "5 -KQ -KQ -KQ -KQ -KQ -KQ -KQ -KQ -KQ"], ["5", "5 -KQ -KQ -KQ -KQ -KQ -KQ -KQ -KQ -KQ -KQ"], ["7nz"], ["7nz 7nz"], ["7nz 10"], ["10"]]}]], [{"CorrectInputs": [[["17", "4", "5", "0.00001"], 1521479806], [["13", "4", "5", "0.00001"], 1521480044], [["23", "4", "5", "0.00001"], 1521480100], [["17", "4", "5", "0.00000001"], 1521480267], [["13", "4", "5", "0.00000001"], 1521480373], [["23", "4", "5", "0.00000001"], 1521480424]], "UniqueId": "2504e043-efb4-48d0-9a3b-e4e5089de8fd_0", "CoverageInfo": [19, 15, 4, 0, 17, "5-21"], "TimeStamp": 1521479716, "BadInput": ["17", "4", "5", "0,00001"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 4, in <module>\n    p=float(input(\"p=\"))\nValueError: could not convert string to float: '0,00001'\n", "ip": "105.155.251.218"}, [{"EndTime": 1552270181.523193, "FinalMinimizedSolution": ["17", "4", "5", "6.6"], "FinalCoverage": [19, 7, 4, 1, 57, "11-18,", "10->11"], "FinalSolution": ["17", "4", "5", "6.6"], "StartTime": 1552270180.6619744, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["17", "4", "5", "0,00001"]]}, {"EndTime": 1552270182.3879292, "FinalMinimizedSolution": ["17", "4", "5", "9.7"], "FinalCoverage": [19, 7, 4, 1, 57, "11-18,", "10->11"], "FinalSolution": ["17", "4", "5", "9.7"], "StartTime": 1552270181.5233788, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["17", "4", "5", "0,00001"], ["17", "4", "5", "0,00001"]]}, {"EndTime": 1552270183.252657, "FinalMinimizedSolution": ["17", "4", "5", "8.3"], "FinalCoverage": [19, 7, 4, 1, 57, "11-18,", "10->11"], "FinalSolution": ["17", "4", "5", "8.3"], "StartTime": 1552270182.3881326, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["17", "4", "5", "0,00001"], ["17", "4", "5", "0,00001"], ["17", "4", "5", "0,00001"]]}, {}, {"EndTime": 1552270189.0365412, "FinalMinimizedSolution": ["4", "17", "4", "5"], "FinalCoverage": [19, 7, 4, 1, 57, "11-18,", "10->11"], "FinalSolution": ["4", "17", "4", "5", "9.7"], "StartTime": 1552270188.2695405, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["17", "4", "5", "0,00001"], ["17", "4", "5", "0,00001"], ["17", "4", "5", "0,00001"], ["17", "4", "5", "0,00001"], ["17", "4", "5", "0,00001"]]}]], [{"CorrectInputs": [[["enero"], 1526196812]], "UniqueId": "7c05f621-e954-463b-ed90-e64112ffb912_0", "CoverageInfo": [7, 0, 0, 0, 100], "TimeStamp": 1526196765, "BadInput": ["2"], "ErrorType": "KeyError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 7, in <module>\n    print( 'tiene', monthsdays[m.lower()], 'd\u00edas')\nKeyError: '2'\n", "ip": "190.250.96.99"}, [{"EndTime": 1552295656.3926015, "FinalMinimizedSolution": ["enero"], "FinalCoverage": [7, 0, 0, 0, 100], "FinalSolution": ["enero"], "StartTime": 1552295653.446031, "FoundSolution": true, "NumProbesMade": 12, "InputHistory": [["2"], ["eA7", "2"], ["eA7"], ["eA7 febrero"], ["eA7 88"], ["8TZ 88"], ["2Mo 88"], [""], ["Apple", ""], ["Apple", " enero"], ["Apple", "0.2 enero"], []]}, {"EndTime": 1552295657.4531243, "FinalMinimizedSolution": ["febrero"], "FinalCoverage": [7, 0, 0, 0, 100], "FinalSolution": ["febrero"], "StartTime": 1552295656.3928378, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["2"], ["eA7", "2"], ["eA7"], ["eA7 febrero"], ["eA7 88"], ["8TZ 88"], ["2Mo 88"], [""], ["Apple", ""], ["Apple", " enero"], ["Apple", "0.2 enero"], [], ["2"], ["AH JH", "2"]]}, {"EndTime": 1552295658.2892663, "FinalMinimizedSolution": ["marzo"], "FinalCoverage": [7, 0, 0, 0, 100], "FinalSolution": ["marzo"], "StartTime": 1552295657.453373, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["2"], ["eA7", "2"], ["eA7"], ["eA7 febrero"], ["eA7 88"], ["8TZ 88"], ["2Mo 88"], [""], ["Apple", ""], ["Apple", " enero"], ["Apple", "0.2 enero"], [], ["2"], ["AH JH", "2"], ["2"]]}, {"EndTime": 1552295659.782054, "FinalMinimizedSolution": ["febrero"], "FinalCoverage": [7, 0, 0, 0, 100], "FinalSolution": ["febrero", ""], "StartTime": 1552295658.289537, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["2"], ["eA7", "2"], ["eA7"], ["eA7 febrero"], ["eA7 88"], ["8TZ 88"], ["2Mo 88"], [""], ["Apple", ""], ["Apple", " enero"], ["Apple", "0.2 enero"], [], ["2"], ["AH JH", "2"], ["2"], ["2"], ["6", "2"], ["6 v5L", "2"], ["6 v5L"]]}, {"EndTime": 1552295660.9473479, "FinalMinimizedSolution": ["abril"], "FinalCoverage": [7, 0, 0, 0, 100], "FinalSolution": ["abril", "9b5", "2"], "StartTime": 1552295659.7823417, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["2"], ["eA7", "2"], ["eA7"], ["eA7 febrero"], ["eA7 88"], ["8TZ 88"], ["2Mo 88"], [""], ["Apple", ""], ["Apple", " enero"], ["Apple", "0.2 enero"], [], ["2"], ["AH JH", "2"], ["2"], ["2"], ["6", "2"], ["6 v5L", "2"], ["6 v5L"], ["2"], ["9b5", "2"]]}]], [{"CorrectInputs": [[["3 4 2"], 1533659912]], "UniqueId": "c6b1aced-5086-43d1-99c6-4ac0918735a3_0", "CoverageInfo": [3, 2, 4, 1, 29, "2-3,", "1->2"], "TimeStamp": 1533659889, "BadInput": ["2 3"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    n ,m ,k= [int(i) for i in input().split()]\nValueError: not enough values to unpack (expected 3, got 2)\n", "ip": "195.70.214.5"}, [{"EndTime": 1552351748.3089976, "FinalMinimizedSolution": ["2 3 3"], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["2 3 3"], "StartTime": 1552351747.4456623, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["2 3"]]}, {"EndTime": 1552351749.362412, "FinalMinimizedSolution": ["2 3 6"], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["2 3 6"], "StartTime": 1552351748.309233, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["2 3"], ["2 3"], ["2 3 yzS"]]}, {"EndTime": 1552351751.1737578, "FinalMinimizedSolution": ["3 1 1"], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["3 1 1"], "StartTime": 1552351749.3625934, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["2 3"], ["2 3"], ["2 3 yzS"], ["2 3"], [""], [" "], [" hello world"], [" 3 world"], [" 3 1"]]}, {"EndTime": 1552351753.7381408, "FinalMinimizedSolution": ["10 6 8"], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["10 6 8"], "StartTime": 1552351751.173976, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["2 3"], ["2 3"], ["2 3 yzS"], ["2 3"], [""], [" "], [" hello world"], [" 3 world"], [" 3 1"], ["2 3"], ["ZvC", ""], ["1", ""], ["1", " "], ["1", "", ""], ["1", "", " "], [], ["m3u --D --D"], ["10 --D --D"], ["10 --D 8"]]}, {"EndTime": 1552351754.7913218, "FinalMinimizedSolution": ["6 3 3"], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["6 3 3"], "StartTime": 1552351753.7384362, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["2 3"], ["2 3"], ["2 3 yzS"], ["2 3"], [""], [" "], [" hello world"], [" 3 world"], [" 3 1"], ["2 3"], ["ZvC", ""], ["1", ""], ["1", " "], ["1", "", ""], ["1", "", " "], [], ["m3u --D --D"], ["10 --D --D"], ["10 --D 8"], ["2 3"], ["v8s 3 3"]]}]], [{"CorrectInputs": [[["3"], 1537114351]], "UniqueId": "6504101f-70f3-4c47-8e86-9b0e76845f72_0", "CoverageInfo": [10, 4, 4, 1, 50, "9-13,", "6->9"], "TimeStamp": 1537114297, "BadInput": ["1"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 14, in <module>\n    inicio ()\n  File \"temp2018.py\", line 8, in inicio\n    partida()\nNameError: name 'partida' is not defined\n", "ip": "94.62.64.27"}, [{"EndTime": 1552294454.7432177, "FinalMinimizedSolution": ["7"], "FinalCoverage": [10, 4, 4, 2, 57, "7-8,", "10-11,", "6->7,", "9->10"], "FinalSolution": ["7", "1"], "StartTime": 1552294453.6163368, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1"], ["-SO", "1"]]}, {"EndTime": 1552294458.461334, "FinalMinimizedSolution": ["8"], "FinalCoverage": [10, 4, 4, 2, 57, "7-8,", "10-11,", "6->7,", "9->10"], "FinalSolution": ["8", "4yA", "", "Tom Engineering", "#.#v#k###.#.", "2", "Hm6", "1"], "StartTime": 1552294454.7434106, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["1"], ["-SO", "1"], ["1"], ["1", "1"], ["1 J89", "1"], ["2,4,6,1,9", "7", "1"], ["2", "7", "1"], ["2", "7", "Hm6", "1"], ["2", "7 RVa", "Hm6", "1"], ["2", "", "Hm6", "1"], ["2", "11e", "", "Hm6", "1"], ["2", "11e", "4yA", "", "Hm6", "1"], ["2", "11e", "4yA", "", "2", "Hm6", "1"], ["2", "11e", "4yA", "", "Tom Engineering", "2", "Hm6", "1"], ["2", "11e", "4yA", "", "Tom Engineering", "#.#v#k###.#.", "2", "Hm6", "1"], ["11e", "4yA", "", "Tom Engineering", "#.#v#k###.#.", "2", "Hm6", "1"]]}, {"EndTime": 1552294459.5181715, "FinalMinimizedSolution": ["10"], "FinalCoverage": [10, 4, 4, 2, 57, "7-8,", "10-11,", "6->7,", "9->10"], "FinalSolution": ["10"], "StartTime": 1552294458.4617054, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1"], ["-SO", "1"], ["1"], ["1", "1"], ["1 J89", "1"], ["2,4,6,1,9", "7", "1"], ["2", "7", "1"], ["2", "7", "Hm6", "1"], ["2", "7 RVa", "Hm6", "1"], ["2", "", "Hm6", "1"], ["2", "11e", "", "Hm6", "1"], ["2", "11e", "4yA", "", "Hm6", "1"], ["2", "11e", "4yA", "", "2", "Hm6", "1"], ["2", "11e", "4yA", "", "Tom Engineering", "2", "Hm6", "1"], ["2", "11e", "4yA", "", "Tom Engineering", "#.#v#k###.#.", "2", "Hm6", "1"], ["11e", "4yA", "", "Tom Engineering", "#.#v#k###.#.", "2", "Hm6", "1"], ["1"], []]}, {"EndTime": 1552294461.3048508, "FinalMinimizedSolution": ["4"], "FinalCoverage": [10, 4, 4, 2, 57, "7-8,", "10-11,", "6->7,", "9->10"], "FinalSolution": ["4"], "StartTime": 1552294459.518524, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["1"], ["-SO", "1"], ["1"], ["1", "1"], ["1 J89", "1"], ["2,4,6,1,9", "7", "1"], ["2", "7", "1"], ["2", "7", "Hm6", "1"], ["2", "7 RVa", "Hm6", "1"], ["2", "", "Hm6", "1"], ["2", "11e", "", "Hm6", "1"], ["2", "11e", "4yA", "", "Hm6", "1"], ["2", "11e", "4yA", "", "2", "Hm6", "1"], ["2", "11e", "4yA", "", "Tom Engineering", "2", "Hm6", "1"], ["2", "11e", "4yA", "", "Tom Engineering", "#.#v#k###.#.", "2", "Hm6", "1"], ["11e", "4yA", "", "Tom Engineering", "#.#v#k###.#.", "2", "Hm6", "1"], ["1"], [], ["1"], ["1", "1", "1"], ["1", "1", "f4X", "1"], ["1", "1 oCz", "f4X", "1"], ["1", "1 oCz", "f4X", "1 YKJ"], ["4X8"]]}, {"EndTime": 1552294462.4154563, "FinalMinimizedSolution": ["9"], "FinalCoverage": [10, 4, 4, 2, 57, "7-8,", "10-11,", "6->7,", "9->10"], "FinalSolution": ["9", "1"], "StartTime": 1552294461.3052747, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1"], ["-SO", "1"], ["1"], ["1", "1"], ["1 J89", "1"], ["2,4,6,1,9", "7", "1"], ["2", "7", "1"], ["2", "7", "Hm6", "1"], ["2", "7 RVa", "Hm6", "1"], ["2", "", "Hm6", "1"], ["2", "11e", "", "Hm6", "1"], ["2", "11e", "4yA", "", "Hm6", "1"], ["2", "11e", "4yA", "", "2", "Hm6", "1"], ["2", "11e", "4yA", "", "Tom Engineering", "2", "Hm6", "1"], ["2", "11e", "4yA", "", "Tom Engineering", "#.#v#k###.#.", "2", "Hm6", "1"], ["11e", "4yA", "", "Tom Engineering", "#.#v#k###.#.", "2", "Hm6", "1"], ["1"], [], ["1"], ["1", "1", "1"], ["1", "1", "f4X", "1"], ["1", "1 oCz", "f4X", "1"], ["1", "1 oCz", "f4X", "1 YKJ"], ["4X8"], ["1"], ["1.2 1.3 1.5", "1"]]}]], [{"CorrectInputs": [[["7", "10", "5", "6"], 1522176148]], "UniqueId": "3f002fd6-e2c3-4977-973c-10d54dfac469_0", "CoverageInfo": [15, 14, 10, 0, 4, "2-16"], "TimeStamp": 1522176125, "BadInput": ["ggg"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    a = int(input())\nValueError: invalid literal for int() with base 10: 'ggg'\n", "ip": "213.24.135.26"}, [{"EndTime": 1552345847.7052128, "FinalMinimizedSolution": ["-1", "-1", "-1", "-1"], "FinalCoverage": [15, 0, 10, 1, 96, "5->exit"], "FinalSolution": ["-1", "-1", "-1", "-1"], "StartTime": 1552345846.0833182, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["ggg"], ["-1"], ["-1", "ggg"], ["-1", "-1"], ["-1", "-1", "-1"]]}, {"EndTime": 1552345849.5162282, "FinalMinimizedSolution": ["0", "3", "4", "4"], "FinalCoverage": [15, 0, 10, 1, 96, "5->exit"], "FinalSolution": ["0", "3", "4", "4"], "StartTime": 1552345847.705425, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["ggg"], ["-1"], ["-1", "ggg"], ["-1", "-1"], ["-1", "-1", "-1"], ["ggg"], ["0"], ["0", "\\t"], ["0", "3"], ["0", "3", "5O9"], ["0", "3", "4"]]}, {"EndTime": 1552345851.1405933, "FinalMinimizedSolution": ["7", "2", "7", "7"], "FinalCoverage": [15, 10, 10, 1, 24, "7-16,", "5->7"], "FinalSolution": ["7", "2", "7", "7"], "StartTime": 1552345849.516495, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["ggg"], ["-1"], ["-1", "ggg"], ["-1", "-1"], ["-1", "-1", "-1"], ["ggg"], ["0"], ["0", "\\t"], ["0", "3"], ["0", "3", "5O9"], ["0", "3", "4"], ["ggg"], ["7"], ["7", "UZ-"], ["7", "2"], ["7", "2", "7"]]}, {"EndTime": 1552345852.955327, "FinalMinimizedSolution": ["3", "3", "6", "7"], "FinalCoverage": [15, 0, 10, 1, 96, "5->exit"], "FinalSolution": ["3", "3", "6", "7"], "StartTime": 1552345851.1408966, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["ggg"], ["-1"], ["-1", "ggg"], ["-1", "-1"], ["-1", "-1", "-1"], ["ggg"], ["0"], ["0", "\\t"], ["0", "3"], ["0", "3", "5O9"], ["0", "3", "4"], ["ggg"], ["7"], ["7", "UZ-"], ["7", "2"], ["7", "2", "7"], ["ggg"], ["3"], ["3", "3"], ["3", "3", "H49"], ["3", "3", "6"], ["3", "3", "6", "ggg"]]}, {"EndTime": 1552345854.7679317, "FinalMinimizedSolution": ["4", "1", "9", "1"], "FinalCoverage": [15, 10, 10, 1, 24, "7-16,", "5->7"], "FinalSolution": ["4", "1", "9", "1"], "StartTime": 1552345852.9556773, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["ggg"], ["-1"], ["-1", "ggg"], ["-1", "-1"], ["-1", "-1", "-1"], ["ggg"], ["0"], ["0", "\\t"], ["0", "3"], ["0", "3", "5O9"], ["0", "3", "4"], ["ggg"], ["7"], ["7", "UZ-"], ["7", "2"], ["7", "2", "7"], ["ggg"], ["3"], ["3", "3"], ["3", "3", "H49"], ["3", "3", "6"], ["3", "3", "6", "ggg"], ["ggg"], ["4"], ["4", "ggg"], ["4", "1"], ["4", "1", "ggg"], ["4", "1", "9"]]}]], [{"CorrectInputs": [[["4 3.5 9 7", "7.4"], 1538356688]], "UniqueId": "c09d49cf-7589-4b4d-8b81-a13d37fc3ff3_0", "CoverageInfo": [25, 22, 8, 0, 9, "4-26"], "TimeStamp": 1538356530, "BadInput": ["4"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 3, in <module>\n    b = float(valores[1])\nIndexError: list index out of range\n", "ip": "170.79.171.158"}, [{"EndTime": 1552290375.0409548, "FinalMinimizedSolution": ["8.9 9.7 8.9 9.7 9.7"], "FinalCoverage": [25, 11, 8, 1, 45, "15-26,", "13->15"], "FinalSolution": ["8.9 9.7 8.9 9.7 9.7"], "StartTime": 1552290366.3351595, "FoundSolution": true, "NumProbesMade": 43, "InputHistory": [["4"], [], ["pQO"], ["6.10"], ["-xd"], ["0.7"], ["yYS", "0.7"], ["7.8", "0.7"], ["0.7", "7.8", "0.7"], ["7.8", "--O", "0.7"], ["--O", "0.7"], ["8.1", "0.7"], ["8.1"], ["8.1 O1W"], ["8.1 2.8"], ["3 1000 2.8"], [""], [" r5l"], [" 4.9"], ["a 4.9"], ["4.5 4.9"], ["7Kg 4.9"], ["-1.10 4.9"], ["-A2", ""], ["7.3", ""], ["77g"], ["1.3"], ["-02"], ["75U"], ["6.7"], ["1Qf"], ["5.10"], ["Gl8"], ["10.1"], ["KdS"], ["10.10"], ["4", "10.10"], ["4", "40D", "10.10"], ["fOL"], ["8.9"], ["8.9 lbL"], ["8.9 9.7"], ["8.9 9.7 9.7"]]}, {"EndTime": 1552290379.1846983, "FinalMinimizedSolution": ["1 2 3 4 5 1 2 3 4 5 6 7  6.2 4.1"], "FinalCoverage": [25, 10, 8, 2, 52, "14,", "17-26,", "13->14,", "15->17"], "FinalSolution": ["1 2 3 4 5 1 2 3 4 5 6 7  6.2 4.1", "2", "4.2", "frU 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], "StartTime": 1552290375.0414455, "FoundSolution": true, "NumProbesMade": 19, "InputHistory": [["4"], [], ["pQO"], ["6.10"], ["-xd"], ["0.7"], ["yYS", "0.7"], ["7.8", "0.7"], ["0.7", "7.8", "0.7"], ["7.8", "--O", "0.7"], ["--O", "0.7"], ["8.1", "0.7"], ["8.1"], ["8.1 O1W"], ["8.1 2.8"], ["3 1000 2.8"], [""], [" r5l"], [" 4.9"], ["a 4.9"], ["4.5 4.9"], ["7Kg 4.9"], ["-1.10 4.9"], ["-A2", ""], ["7.3", ""], ["77g"], ["1.3"], ["-02"], ["75U"], ["6.7"], ["1Qf"], ["5.10"], ["Gl8"], ["10.1"], ["KdS"], ["10.10"], ["4", "10.10"], ["4", "40D", "10.10"], ["fOL"], ["8.9"], ["8.9 lbL"], ["8.9 9.7"], ["8.9 9.7 9.7"], ["4"], ["i-X"], ["-1.8"], ["88o", "-1.8"], ["4.2", "-1.8"], ["s", "4.2", "-1.8"], ["6.2", "4.2", "-1.8"], ["6.2", "4.2"], ["6.2", "4.2 lU2"], ["6.2", "4.2", "lU2"], ["6.2 d6j", "4.2", "lU2"], ["6.2 4.1", "4.2", "lU2"], ["6.2 4.1", "4.2", "0.1", "lU2"], ["6.2 4.1", "4.2", "4 5 6 2 1 8 9", "0.1", "lU2"], ["6.2 4.1", "4.2", "4 5 uUN 2 1 8 9", "0.1", "lU2"], ["6.2 4.1", "4.2", "4 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["6.2 6.2 4.1", "4.2", "4 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["6.2 6.2 4.1", "2", "4.2", "4 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["6.2 6.2 4.1", "2", "4.2", "frU 5 uUN 2 1 8 9", "0.1", "frU", "lU2"]]}, {"InputHistory": [["4"], [], ["pQO"], ["6.10"], ["-xd"], ["0.7"], ["yYS", "0.7"], ["7.8", "0.7"], ["0.7", "7.8", "0.7"], ["7.8", "--O", "0.7"], ["--O", "0.7"], ["8.1", "0.7"], ["8.1"], ["8.1 O1W"], ["8.1 2.8"], ["3 1000 2.8"], [""], [" r5l"], [" 4.9"], ["a 4.9"], ["4.5 4.9"], ["7Kg 4.9"], ["-1.10 4.9"], ["-A2", ""], ["7.3", ""], ["77g"], ["1.3"], ["-02"], ["75U"], ["6.7"], ["1Qf"], ["5.10"], ["Gl8"], ["10.1"], ["KdS"], ["10.10"], ["4", "10.10"], ["4", "40D", "10.10"], ["fOL"], ["8.9"], ["8.9 lbL"], ["8.9 9.7"], ["8.9 9.7 9.7"], ["4"], ["i-X"], ["-1.8"], ["88o", "-1.8"], ["4.2", "-1.8"], ["s", "4.2", "-1.8"], ["6.2", "4.2", "-1.8"], ["6.2", "4.2"], ["6.2", "4.2 lU2"], ["6.2", "4.2", "lU2"], ["6.2 d6j", "4.2", "lU2"], ["6.2 4.1", "4.2", "lU2"], ["6.2 4.1", "4.2", "0.1", "lU2"], ["6.2 4.1", "4.2", "4 5 6 2 1 8 9", "0.1", "lU2"], ["6.2 4.1", "4.2", "4 5 uUN 2 1 8 9", "0.1", "lU2"], ["6.2 4.1", "4.2", "4 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["6.2 6.2 4.1", "4.2", "4 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["6.2 6.2 4.1", "2", "4.2", "4 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["6.2 6.2 4.1", "2", "4.2", "frU 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["4"], ["4", "4"], ["5vF", "4"], ["-1.9", "4"], ["xJn", "-1.9", "4"], ["9.8", "-1.9", "4"], ["9.8", "-1.9", "4 et6"], ["15632", "9.8", "-1.9", "4 et6"], ["aa", "15632", "9.8", "-1.9", "4 et6"], ["6.2", "15632", "9.8", "-1.9", "4 et6"], ["KjT"], ["8.8"], ["8.8", "8.8"], ["8.8", "f6Z", "8.8"], ["Cz2"], ["3.4"], ["3.4 ndt"], ["3.4 0.6"], ["3.4 0.6 0.6"], ["CR8"], ["10.0"], ["7cS", "10.0"], ["3.9", "10.0"], ["3.9"], ["z", "3.9"], ["4.4", "3.9"], ["4.4", "aaa", "3.9"], ["4.4", "aaa", "3.9 -93"], ["4.4", "3.9 -93"], ["4", "4.4", "3.9 -93"], ["4", "6N6", "4.4", "3.9 -93"], ["4", "6N6", "4.4", ""], ["4", "6N6 wgu", "4.4", ""], ["4", "6N6 wgu", "4.4 9KA", ""], ["4", "6N6 wgu", "HFk 9KA", ""], ["4", "6N6 2+4", "HFk 9KA", ""], ["", "4", "6N6 2+4", "HFk 9KA", ""], ["DP9"], ["m0m"], ["2.5"], ["300", "2.5"], ["300 8M9", "2.5"], ["300 0.1", "2.5"], ["300", "0.1", "2.5"], ["iJx"], ["10.1 YbH"], ["10.1 4.7"], ["RSQ", ""], ["8.0", ""], ["8.0"], ["y2W", "8.0"], ["1.7", "8.0"], ["1.7", "Akx", "8.0"], ["1.7", "Akx", "CMt", "8.0"], ["1.7", "Akx", "Akx", "CMt", "8.0"], ["-n8"], ["6.2"], ["U6K"], ["8.3"], ["18070023010", "8.3"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552290388.9335508, "StartTime": 1552290379.185375}, {"InputHistory": [["4"], [], ["pQO"], ["6.10"], ["-xd"], ["0.7"], ["yYS", "0.7"], ["7.8", "0.7"], ["0.7", "7.8", "0.7"], ["7.8", "--O", "0.7"], ["--O", "0.7"], ["8.1", "0.7"], ["8.1"], ["8.1 O1W"], ["8.1 2.8"], ["3 1000 2.8"], [""], [" r5l"], [" 4.9"], ["a 4.9"], ["4.5 4.9"], ["7Kg 4.9"], ["-1.10 4.9"], ["-A2", ""], ["7.3", ""], ["77g"], ["1.3"], ["-02"], ["75U"], ["6.7"], ["1Qf"], ["5.10"], ["Gl8"], ["10.1"], ["KdS"], ["10.10"], ["4", "10.10"], ["4", "40D", "10.10"], ["fOL"], ["8.9"], ["8.9 lbL"], ["8.9 9.7"], ["8.9 9.7 9.7"], ["4"], ["i-X"], ["-1.8"], ["88o", "-1.8"], ["4.2", "-1.8"], ["s", "4.2", "-1.8"], ["6.2", "4.2", "-1.8"], ["6.2", "4.2"], ["6.2", "4.2 lU2"], ["6.2", "4.2", "lU2"], ["6.2 d6j", "4.2", "lU2"], ["6.2 4.1", "4.2", "lU2"], ["6.2 4.1", "4.2", "0.1", "lU2"], ["6.2 4.1", "4.2", "4 5 6 2 1 8 9", "0.1", "lU2"], ["6.2 4.1", "4.2", "4 5 uUN 2 1 8 9", "0.1", "lU2"], ["6.2 4.1", "4.2", "4 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["6.2 6.2 4.1", "4.2", "4 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["6.2 6.2 4.1", "2", "4.2", "4 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["6.2 6.2 4.1", "2", "4.2", "frU 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["4"], ["4", "4"], ["5vF", "4"], ["-1.9", "4"], ["xJn", "-1.9", "4"], ["9.8", "-1.9", "4"], ["9.8", "-1.9", "4 et6"], ["15632", "9.8", "-1.9", "4 et6"], ["aa", "15632", "9.8", "-1.9", "4 et6"], ["6.2", "15632", "9.8", "-1.9", "4 et6"], ["KjT"], ["8.8"], ["8.8", "8.8"], ["8.8", "f6Z", "8.8"], ["Cz2"], ["3.4"], ["3.4 ndt"], ["3.4 0.6"], ["3.4 0.6 0.6"], ["CR8"], ["10.0"], ["7cS", "10.0"], ["3.9", "10.0"], ["3.9"], ["z", "3.9"], ["4.4", "3.9"], ["4.4", "aaa", "3.9"], ["4.4", "aaa", "3.9 -93"], ["4.4", "3.9 -93"], ["4", "4.4", "3.9 -93"], ["4", "6N6", "4.4", "3.9 -93"], ["4", "6N6", "4.4", ""], ["4", "6N6 wgu", "4.4", ""], ["4", "6N6 wgu", "4.4 9KA", ""], ["4", "6N6 wgu", "HFk 9KA", ""], ["4", "6N6 2+4", "HFk 9KA", ""], ["", "4", "6N6 2+4", "HFk 9KA", ""], ["DP9"], ["m0m"], ["2.5"], ["300", "2.5"], ["300 8M9", "2.5"], ["300 0.1", "2.5"], ["300", "0.1", "2.5"], ["iJx"], ["10.1 YbH"], ["10.1 4.7"], ["RSQ", ""], ["8.0", ""], ["8.0"], ["y2W", "8.0"], ["1.7", "8.0"], ["1.7", "Akx", "8.0"], ["1.7", "Akx", "CMt", "8.0"], ["1.7", "Akx", "Akx", "CMt", "8.0"], ["-n8"], ["6.2"], ["U6K"], ["8.3"], ["18070023010", "8.3"], ["4"], ["SQr"], ["10.2"], ["57.5", "10.2"], ["57.5 1Ye", "10.2"], ["57.5 -1.4", "10.2"], ["57.5 4", "10.2"], ["57.5 4", "10.2 2NJ"], ["57.5 4", ""], ["57.5 4"], ["57.5", "4"], ["1,000", "57.5", "4"], ["8.3", "57.5", "4"], ["8.3", "57.5"], ["8.3", "57.5 P61"], ["4", "8.3", "57.5 P61"], ["4 96Z", "8.3", "57.5 P61"], ["4 8.4", "8.3", "57.5 P61"], ["4 P9U", "8.3", "57.5 P61"], ["4 10.8", "8.3", "57.5 P61"], ["4 10.8", "8.3", "57.5 SwW"], ["4 D4J", "8.3", "57.5 SwW"], ["4 3.6", "8.3", "57.5 SwW"], ["8 3.6", "8.3", "57.5 SwW"], ["8", "3.6", "8.3", "57.5 SwW"], ["8", "3.6", "xyL", "8.3", "57.5 SwW"], ["20j"], ["3.7"], ["pg2"], ["7.10"], ["jgT", "7.10"], ["3.10", "7.10"], ["3.10", "Gw5", "7.10"], ["D5l", "3.10", "Gw5", "7.10"], ["3.3", "3.10", "Gw5", "7.10"], ["1", "3.3", "3.10", "Gw5", "7.10"], ["1", "3.3", "3.10", "Gw5", "lzavuph", "7.10"], ["1", "3.3", "3.10", "7.10"], ["1", "3.10", "7.10"], ["1", "3.10", "10", "7.10"], ["1", "3.10", "10", "3,5", "7.10"], ["1", "3.10", "10", "3,5"], ["1", "975", "3.10", "10", "3,5"], ["3,5", "1", "975", "3.10", "10", "3,5"], ["3,5", "1", "975", "3.10", "10", "5.4"], ["8.7", "1", "975", "3.10", "10", "5.4"], ["8.7", "1", "975", "3.10", "10", "Fbw", "5.4"], ["xC1"], ["2.8"], ["P4z"], ["0.9"], ["0.9 3tf"], ["0.9 7.5"], ["Wgj"], ["9.6"], ["1C3"], ["-1.2"], ["jcV"], ["0.0"], ["j0i"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552290399.195349, "StartTime": 1552290388.934058}, {"InputHistory": [["4"], [], ["pQO"], ["6.10"], ["-xd"], ["0.7"], ["yYS", "0.7"], ["7.8", "0.7"], ["0.7", "7.8", "0.7"], ["7.8", "--O", "0.7"], ["--O", "0.7"], ["8.1", "0.7"], ["8.1"], ["8.1 O1W"], ["8.1 2.8"], ["3 1000 2.8"], [""], [" r5l"], [" 4.9"], ["a 4.9"], ["4.5 4.9"], ["7Kg 4.9"], ["-1.10 4.9"], ["-A2", ""], ["7.3", ""], ["77g"], ["1.3"], ["-02"], ["75U"], ["6.7"], ["1Qf"], ["5.10"], ["Gl8"], ["10.1"], ["KdS"], ["10.10"], ["4", "10.10"], ["4", "40D", "10.10"], ["fOL"], ["8.9"], ["8.9 lbL"], ["8.9 9.7"], ["8.9 9.7 9.7"], ["4"], ["i-X"], ["-1.8"], ["88o", "-1.8"], ["4.2", "-1.8"], ["s", "4.2", "-1.8"], ["6.2", "4.2", "-1.8"], ["6.2", "4.2"], ["6.2", "4.2 lU2"], ["6.2", "4.2", "lU2"], ["6.2 d6j", "4.2", "lU2"], ["6.2 4.1", "4.2", "lU2"], ["6.2 4.1", "4.2", "0.1", "lU2"], ["6.2 4.1", "4.2", "4 5 6 2 1 8 9", "0.1", "lU2"], ["6.2 4.1", "4.2", "4 5 uUN 2 1 8 9", "0.1", "lU2"], ["6.2 4.1", "4.2", "4 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["6.2 6.2 4.1", "4.2", "4 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["6.2 6.2 4.1", "2", "4.2", "4 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["6.2 6.2 4.1", "2", "4.2", "frU 5 uUN 2 1 8 9", "0.1", "frU", "lU2"], ["4"], ["4", "4"], ["5vF", "4"], ["-1.9", "4"], ["xJn", "-1.9", "4"], ["9.8", "-1.9", "4"], ["9.8", "-1.9", "4 et6"], ["15632", "9.8", "-1.9", "4 et6"], ["aa", "15632", "9.8", "-1.9", "4 et6"], ["6.2", "15632", "9.8", "-1.9", "4 et6"], ["KjT"], ["8.8"], ["8.8", "8.8"], ["8.8", "f6Z", "8.8"], ["Cz2"], ["3.4"], ["3.4 ndt"], ["3.4 0.6"], ["3.4 0.6 0.6"], ["CR8"], ["10.0"], ["7cS", "10.0"], ["3.9", "10.0"], ["3.9"], ["z", "3.9"], ["4.4", "3.9"], ["4.4", "aaa", "3.9"], ["4.4", "aaa", "3.9 -93"], ["4.4", "3.9 -93"], ["4", "4.4", "3.9 -93"], ["4", "6N6", "4.4", "3.9 -93"], ["4", "6N6", "4.4", ""], ["4", "6N6 wgu", "4.4", ""], ["4", "6N6 wgu", "4.4 9KA", ""], ["4", "6N6 wgu", "HFk 9KA", ""], ["4", "6N6 2+4", "HFk 9KA", ""], ["", "4", "6N6 2+4", "HFk 9KA", ""], ["DP9"], ["m0m"], ["2.5"], ["300", "2.5"], ["300 8M9", "2.5"], ["300 0.1", "2.5"], ["300", "0.1", "2.5"], ["iJx"], ["10.1 YbH"], ["10.1 4.7"], ["RSQ", ""], ["8.0", ""], ["8.0"], ["y2W", "8.0"], ["1.7", "8.0"], ["1.7", "Akx", "8.0"], ["1.7", "Akx", "CMt", "8.0"], ["1.7", "Akx", "Akx", "CMt", "8.0"], ["-n8"], ["6.2"], ["U6K"], ["8.3"], ["18070023010", "8.3"], ["4"], ["SQr"], ["10.2"], ["57.5", "10.2"], ["57.5 1Ye", "10.2"], ["57.5 -1.4", "10.2"], ["57.5 4", "10.2"], ["57.5 4", "10.2 2NJ"], ["57.5 4", ""], ["57.5 4"], ["57.5", "4"], ["1,000", "57.5", "4"], ["8.3", "57.5", "4"], ["8.3", "57.5"], ["8.3", "57.5 P61"], ["4", "8.3", "57.5 P61"], ["4 96Z", "8.3", "57.5 P61"], ["4 8.4", "8.3", "57.5 P61"], ["4 P9U", "8.3", "57.5 P61"], ["4 10.8", "8.3", "57.5 P61"], ["4 10.8", "8.3", "57.5 SwW"], ["4 D4J", "8.3", "57.5 SwW"], ["4 3.6", "8.3", "57.5 SwW"], ["8 3.6", "8.3", "57.5 SwW"], ["8", "3.6", "8.3", "57.5 SwW"], ["8", "3.6", "xyL", "8.3", "57.5 SwW"], ["20j"], ["3.7"], ["pg2"], ["7.10"], ["jgT", "7.10"], ["3.10", "7.10"], ["3.10", "Gw5", "7.10"], ["D5l", "3.10", "Gw5", "7.10"], ["3.3", "3.10", "Gw5", "7.10"], ["1", "3.3", "3.10", "Gw5", "7.10"], ["1", "3.3", "3.10", "Gw5", "lzavuph", "7.10"], ["1", "3.3", "3.10", "7.10"], ["1", "3.10", "7.10"], ["1", "3.10", "10", "7.10"], ["1", "3.10", "10", "3,5", "7.10"], ["1", "3.10", "10", "3,5"], ["1", "975", "3.10", "10", "3,5"], ["3,5", "1", "975", "3.10", "10", "3,5"], ["3,5", "1", "975", "3.10", "10", "5.4"], ["8.7", "1", "975", "3.10", "10", "5.4"], ["8.7", "1", "975", "3.10", "10", "Fbw", "5.4"], ["xC1"], ["2.8"], ["P4z"], ["0.9"], ["0.9 3tf"], ["0.9 7.5"], ["Wgj"], ["9.6"], ["1C3"], ["-1.2"], ["jcV"], ["0.0"], ["j0i"], ["4"], ["4", "4", "4"], ["2Tp"], ["8.7"], ["D1w"], ["2.2"], ["2.2", "2.2"], ["2.2", "2.2 NQJ"], ["2.2", "8g5 NQJ"], ["P6o", "2.2", "8g5 NQJ"], ["8.8", "2.2", "8g5 NQJ"], ["8.8", "2.2", "#...v#v####. NQJ"], ["0", "8.8", "2.2", "#...v#v####. NQJ"], ["0 G1o", "8.8", "2.2", "#...v#v####. NQJ"], ["0 4.4", "8.8", "2.2", "#...v#v####. NQJ"], ["0 4.4", "8.8", "2.2", "#...v#v####. SsK"], ["0", "4.4", "8.8", "2.2", "#...v#v####. SsK"], ["0", "4.4", "8.8", "2.2", "2.2", "#...v#v####. SsK"], ["0", "4.4", "8.8", "2.2", "python", "2.2", "#...v#v####. SsK"], ["72-"], ["9.3"], ["5000", "9.3"], ["5000"], ["5000 ue1"], ["5000 -1.1"], ["5000", "-1.1"], ["5000", "5000", "-1.1"], ["5000", "-1.1", "5000", "-1.1"], ["5000", "-1.1", "5000", "-1.1", "-1.1"], ["54T", "5000", "-1.1", "5000", "-1.1", "-1.1"], ["2.3", "5000", "-1.1", "5000", "-1.1", "-1.1"], ["2.3", "O-e", "5000", "-1.1", "5000", "-1.1", "-1.1"], ["2.3", "O-e", "5000", "-1.1", "-1.1", "-1.1"], ["Dz7", "2.3", "O-e", "5000", "-1.1", "-1.1", "-1.1"], ["5.9", "2.3", "O-e", "5000", "-1.1", "-1.1", "-1.1"], ["5.9", "2.3", "O-e", "5000", "-1.1", "93d", "-1.1", "-1.1"], ["5.9", "2.3", "O-e", "5000", "-1.1", "93d", "7ID", "-1.1", "-1.1"], ["5.9", "2.3", "O-e", "5000", "93d", "7ID", "-1.1", "-1.1"], ["5.9", "2.3", "O-e", "5000", "93d", "7ID", "-1.1 D1r", "-1.1"], ["5.9", "2.3", "O-e", "2.3", "5000", "93d", "7ID", "-1.1 D1r", "-1.1"], ["5.9", "O-e", "2.3", "5000", "93d", "7ID", "-1.1 D1r", "-1.1"], ["5.9", "O-e", "2.3", "5000", "93d", "9zF", "7ID", "-1.1 D1r", "-1.1"], ["5.9", "4", "O-e", "2.3", "5000", "93d", "9zF", "7ID", "-1.1 D1r", "-1.1"], ["-Jp"], ["3", "3.7"], ["3"], ["3 SU9"], ["3 10.5"], ["3", "10.5"], ["fWP"], ["9.7"], ["ar9", "9.7"], ["8.9", "9.7"], ["8.9", "4", "9.7"], ["USQ"], ["-1.3"], ["4", "-1.3"], ["4", "-1.3 esm"], ["4", "-1.3 68"], ["4", "4", "-1.3 68"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552290409.5999656, "StartTime": 1552290399.1969392}]], [{"CorrectInputs": [[["1", "karthi", "98"], 1528207932]], "UniqueId": "41ee78fa-ca7c-4e25-e90d-da973be03355_0", "CoverageInfo": [22, 14, 4, 0, 31, "3-5,", "7-15,", "21-23"], "TimeStamp": 1528207629, "BadInput": ["11,python,100", "", "12,java,85"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 20, in <module>\n    score = int(input())\nValueError: invalid literal for int() with base 10: '12,java,85'\n", "ip": "103.98.63.22"}, [{"EndTime": 1552367987.3330734, "FinalMinimizedSolution": ["11,python,100", "", "8"], "FinalCoverage": [22, 2, 4, 2, 85, "10,", "12,", "9->10,", "11->12"], "FinalSolution": ["11,python,100", "", "8"], "StartTime": 1552367986.4619985, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["11,python,100", "", "12,java,85"]]}, {"EndTime": 1552367988.201086, "FinalMinimizedSolution": ["11,python,100", "", "2"], "FinalCoverage": [22, 2, 4, 2, 85, "10,", "12,", "9->10,", "11->12"], "FinalSolution": ["11,python,100", "", "2"], "StartTime": 1552367987.3332884, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["11,python,100", "", "12,java,85"], ["11,python,100", "", "12,java,85"]]}, {"EndTime": 1552367989.0727072, "FinalMinimizedSolution": ["11,python,100", "", "7"], "FinalCoverage": [22, 2, 4, 2, 85, "10,", "12,", "9->10,", "11->12"], "FinalSolution": ["11,python,100", "", "7"], "StartTime": 1552367988.2013137, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["11,python,100", "", "12,java,85"], ["11,python,100", "", "12,java,85"], ["11,python,100", "", "12,java,85"]]}, {"EndTime": 1552367989.9422104, "FinalMinimizedSolution": ["11,python,100", "", "6"], "FinalCoverage": [22, 2, 4, 2, 85, "10,", "12,", "9->10,", "11->12"], "FinalSolution": ["11,python,100", "", "6"], "StartTime": 1552367989.0729208, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["11,python,100", "", "12,java,85"], ["11,python,100", "", "12,java,85"], ["11,python,100", "", "12,java,85"], ["11,python,100", "", "12,java,85"]]}, {"EndTime": 1552367990.8104348, "FinalMinimizedSolution": ["11,python,100", "", "1"], "FinalCoverage": [22, 2, 4, 2, 85, "10,", "12,", "9->10,", "11->12"], "FinalSolution": ["11,python,100", "", "1"], "StartTime": 1552367989.9424388, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["11,python,100", "", "12,java,85"], ["11,python,100", "", "12,java,85"], ["11,python,100", "", "12,java,85"], ["11,python,100", "", "12,java,85"], ["11,python,100", "", "12,java,85"]]}]], [{"CorrectInputs": [[["12/13/1234"], 1536319864]], "UniqueId": "98db5ec5-385b-4a2e-b789-fd25c3b7f382_0", "CoverageInfo": [8, 4, 6, 4, 43, "4,", "6,", "8-10,", "3->4,", "5->6,", "7->8,", "7->10"], "TimeStamp": 1536319848, "BadInput": ["5/5/5555"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 7, in <module>\n    if int(date[0:1]) < 10 and int(date[3:5]) < 10:\nValueError: invalid literal for int() with base 10: '/5'\n", "ip": "129.81.135.234"}, [{"EndTime": 1552419506.1025577, "FinalMinimizedSolution": ["5/50555"], "FinalCoverage": [8, 2, 6, 3, 64, "4,", "6,", "3->4,", "5->6,", "7->10"], "FinalSolution": ["5/50555"], "StartTime": 1552419505.227089, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5/5/5555"]]}, {"EndTime": 1552419506.9731348, "FinalMinimizedSolution": ["5/54555"], "FinalCoverage": [8, 3, 6, 3, 57, "4,", "6,", "8,", "3->4,", "5->6,", "7->8"], "FinalSolution": ["5/54555"], "StartTime": 1552419506.1027353, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5/5/5555"], ["5/5/5555"]]}, {"EndTime": 1552419507.8387427, "FinalMinimizedSolution": ["5/59555"], "FinalCoverage": [8, 3, 6, 3, 57, "4,", "6,", "8,", "3->4,", "5->6,", "7->8"], "FinalSolution": ["5/59555"], "StartTime": 1552419506.9733222, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5/5/5555"], ["5/5/5555"], ["5/5/5555"]]}, {"EndTime": 1552419508.705761, "FinalMinimizedSolution": ["5/51555"], "FinalCoverage": [8, 3, 6, 3, 57, "4,", "6,", "8,", "3->4,", "5->6,", "7->8"], "FinalSolution": ["5/51555"], "StartTime": 1552419507.8389325, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5/5/5555"], ["5/5/5555"], ["5/5/5555"], ["5/5/5555"]]}, {"EndTime": 1552419509.573943, "FinalMinimizedSolution": ["5/59555 o8z"], "FinalCoverage": [8, 3, 6, 3, 57, "4,", "6,", "8,", "3->4,", "5->6,", "7->8"], "FinalSolution": ["5/59555 o8z"], "StartTime": 1552419508.7059615, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5/5/5555"], ["5/5/5555"], ["5/5/5555"], ["5/5/5555"], ["5/5/5555"]]}]], [{"CorrectInputs": [[["6 6", "...#..", ".##v#.", "#v.#.#", "#.k#.#", ".###.#", "...###"], 1527395893]], "UniqueId": "9bdef553-bd31-410f-b2c2-3ac970545d1f_0", "CoverageInfo": [37, 24, 24, 2, 34, "14-40,", "11->14,", "12->11"], "TimeStamp": 1527395695, "BadInput": ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 13, in <module>\n    matriz[i][j] = lista[i-1][j-1]\nIndexError: list assignment index out of range\n", "ip": "2804:14d:5486:a696:ccd6:9d06:d264:a703"}, [{"InputHistory": [["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", " ", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], [], ["0"], ["0", "0"], ["0", "0 #"], ["0", "0", "#"], ["0", "0", ".......#####", "#"], ["0", "0 v", ".......#####", "#"], ["3+3", "0", "0 v", ".......#####", "#"], ["0", "0", "0 v", ".......#####", "#"], ["0", "0", "0 8", ".......#####", "#"], ["k", "0", "0", "0 8", ".......#####", "#"], ["1", "0", "0", "0 8", ".......#####", "#"], ["1", "0", "0", "0 8", ".......#####", "5IF", "#"], ["1", "0", "0", "0 8", "5", ".......#####", "5IF", "#"], ["1", "0", "0", "0 8", "5", "5IF", "#"], ["1", "0 #", "0", "0 8", "5", "5IF", "#"], ["1", "0 #", "0", "0 8", "5", "5IF"], ["1", "0 #", "0", "f 8", "5", "5IF"], ["#"], ["v"], ["7"], ["9 12", "7"], ["9 12", "7", "#...v#v####."], ["9 12", "7", "#...v#v####.", "#..##k#...#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####.."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "1GI", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "varshini 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#..#v#....#.", ".###.#####..", "varshini 12"], ["f7s"], ["10"], ["VbK", "10"], ["4", "10"], ["7DY"], ["3"], ["R6h", "3"], ["4", "3"], ["4", "3 v"], ["4 H89", "3 v"], ["4 3", "3 v"], ["4 3", "3 v", "#.#v#k###.#."], ["4 3", "3 v", "#.#v#k###.#.", "9 12"], ["4 3", "3 v", "#.#v#k###.#.", "9 12", "4 3"], ["4 3", "3 4 3", "#.#v#k###.#.", "9 12", "4 3"], ["4 3", "3 4 3", "#.#v#k###.#.", "9 12", "mMY 3"], ["v", "v"], ["v", "3"], ["6", "3"], ["9jt"], ["79P"], ["4"], ["#", "4"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552288773.1757352, "StartTime": 1552288762.4206471}, {"EndTime": 1552288775.4482353, "FinalMinimizedSolution": ["-1 12"], "FinalCoverage": [37, 25, 24, 3, 31, "9-10,", "12-13,", "15-28,", "30-39,", "8->9,", "11->12,", "29->30"], "FinalSolution": ["-1 12", ".###.#####..", "#.kk#...#v#.", "k", "df rt j k", "#..k#.#.#.#", "#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], "StartTime": 1552288773.1766438, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", " ", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], [], ["0"], ["0", "0"], ["0", "0 #"], ["0", "0", "#"], ["0", "0", ".......#####", "#"], ["0", "0 v", ".......#####", "#"], ["3+3", "0", "0 v", ".......#####", "#"], ["0", "0", "0 v", ".......#####", "#"], ["0", "0", "0 8", ".......#####", "#"], ["k", "0", "0", "0 8", ".......#####", "#"], ["1", "0", "0", "0 8", ".......#####", "#"], ["1", "0", "0", "0 8", ".......#####", "5IF", "#"], ["1", "0", "0", "0 8", "5", ".......#####", "5IF", "#"], ["1", "0", "0", "0 8", "5", "5IF", "#"], ["1", "0 #", "0", "0 8", "5", "5IF", "#"], ["1", "0 #", "0", "0 8", "5", "5IF"], ["1", "0 #", "0", "f 8", "5", "5IF"], ["#"], ["v"], ["7"], ["9 12", "7"], ["9 12", "7", "#...v#v####."], ["9 12", "7", "#...v#v####.", "#..##k#...#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####.."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "1GI", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "varshini 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#..#v#....#.", ".###.#####..", "varshini 12"], ["f7s"], ["10"], ["VbK", "10"], ["4", "10"], ["7DY"], ["3"], ["R6h", "3"], ["4", "3"], ["4", "3 v"], ["4 H89", "3 v"], ["4 3", "3 v"], ["4 3", "3 v", "#.#v#k###.#."], ["4 3", "3 v", "#.#v#k###.#.", "9 12"], ["4 3", "3 v", "#.#v#k###.#.", "9 12", "4 3"], ["4 3", "3 4 3", "#.#v#k###.#.", "9 12", "4 3"], ["4 3", "3 4 3", "#.#v#k###.#.", "9 12", "mMY 3"], ["v", "v"], ["v", "3"], ["6", "3"], ["9jt"], ["79P"], ["4"], ["#", "4"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "k", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "k", "df rt j k", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "k", "df rt j k", "#..k#.#.#.#", "#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["c3,d1,hA,c5,sK,hJ 12", ".###.#####..", "#.kk#...#v#.", "k", "df rt j k", "#..k#.#.#.#", "#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"]]}, {"InputHistory": [["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", " ", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], [], ["0"], ["0", "0"], ["0", "0 #"], ["0", "0", "#"], ["0", "0", ".......#####", "#"], ["0", "0 v", ".......#####", "#"], ["3+3", "0", "0 v", ".......#####", "#"], ["0", "0", "0 v", ".......#####", "#"], ["0", "0", "0 8", ".......#####", "#"], ["k", "0", "0", "0 8", ".......#####", "#"], ["1", "0", "0", "0 8", ".......#####", "#"], ["1", "0", "0", "0 8", ".......#####", "5IF", "#"], ["1", "0", "0", "0 8", "5", ".......#####", "5IF", "#"], ["1", "0", "0", "0 8", "5", "5IF", "#"], ["1", "0 #", "0", "0 8", "5", "5IF", "#"], ["1", "0 #", "0", "0 8", "5", "5IF"], ["1", "0 #", "0", "f 8", "5", "5IF"], ["#"], ["v"], ["7"], ["9 12", "7"], ["9 12", "7", "#...v#v####."], ["9 12", "7", "#...v#v####.", "#..##k#...#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####.."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "1GI", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "varshini 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#..#v#....#.", ".###.#####..", "varshini 12"], ["f7s"], ["10"], ["VbK", "10"], ["4", "10"], ["7DY"], ["3"], ["R6h", "3"], ["4", "3"], ["4", "3 v"], ["4 H89", "3 v"], ["4 3", "3 v"], ["4 3", "3 v", "#.#v#k###.#."], ["4 3", "3 v", "#.#v#k###.#.", "9 12"], ["4 3", "3 v", "#.#v#k###.#.", "9 12", "4 3"], ["4 3", "3 4 3", "#.#v#k###.#.", "9 12", "4 3"], ["4 3", "3 4 3", "#.#v#k###.#.", "9 12", "mMY 3"], ["v", "v"], ["v", "3"], ["6", "3"], ["9jt"], ["79P"], ["4"], ["#", "4"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "k", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "k", "df rt j k", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "k", "df rt j k", "#..k#.#.#.#", "#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["c3,d1,hA,c5,sK,hJ 12", ".###.#####..", "#.kk#...#v#.", "k", "df rt j k", "#..k#.#.#.#", "#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####", "MEG"], ["9 12", ".###.#####..", "pp7", "#.kk#...#v#.", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####", "MEG"], ["9 12", ".###.#####..", "pp7", "#.kk#...#v#. t1t", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####", "MEG"], ["9 12", ".###.#####..", "pp7", "#.kk#...#v#. t1t", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", "1 -3 5 -6 -10 13 4 -8", ".###.#####..", "pp7", "#.kk#...#v#. t1t", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["#", "#"], ["#", "8"], ["2", "8"], ["3a", "2", "8"], ["3", "2", "8"], ["3", "2 v", "8"], ["3", "2 x1n", "8"], ["Lom", "3", "2 x1n", "8"], ["9", "3", "2 x1n", "8"], ["z-7"], ["6"], ["#.#v#k###.#.", "6"], ["5", "6"], ["5", "6 k"], ["5", "6 9 12"], ["#.#v#k###.#.", "5", "6 9 12"], ["1", "5", "6 9 12"], ["1", "5", "6 9 #"], ["1", "10", "5", "6 9 #"], ["1", "10", "5 Shs", "6 9 #"], ["10", "5 Shs", "6 9 #"], ["#", "10", "5 Shs", "6 9 #"], ["#", "10", "5 Shs", "6 9 7"], ["8", "10", "5 Shs", "6 9 7"], ["8", "10", "5 Shs", ""], ["8", "k", "10", "5 Shs", ""], ["4 5", "8", "k", "10", "5 Shs", ""], ["5dS"], ["-1"], ["MHC"], ["2"], ["", "2"], ["", "20"], ["", "202"], ["", "2021"], ["", "20211"], ["", "202112"], ["", "2021125"], ["", "2021125-1"], ["", "2021125-110"], ["", "2021125-1104"], ["", "2021125-11043"], ["", "2021125-110430"], ["", "2021125-1104306"], ["", "2021125-11043069"], ["", "2021125-110430694"], ["", "2021125-1104306942"], ["", "2021125-11043069426"], ["", "2021125-110430694263"], ["", "2021125-11043069426310"], ["", "2021125-110430694263100"], ["", "2021125-1104306942631000"], ["", "2021125-11043069426310005"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552288785.746456, "StartTime": 1552288775.4493136}, {"EndTime": 1552288795.5432708, "FinalMinimizedSolution": ["7 0", "4", "9 12", "#..##k#...#.", ".####.#vv.k#", "4", "#...v#v####.", "#...v#v####."], "FinalCoverage": [37, 21, 24, 2, 46, "13,", "15-28,", "31-39,", "12->13,", "30->31"], "FinalSolution": ["7 0", "4", "9 12", "#..##k#...#.", ".####.#vv.k#", "4", "#...v#v####.", "#...v#v####."], "StartTime": 1552288785.7480414, "FoundSolution": true, "NumProbesMade": 51, "InputHistory": [["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", " ", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], [], ["0"], ["0", "0"], ["0", "0 #"], ["0", "0", "#"], ["0", "0", ".......#####", "#"], ["0", "0 v", ".......#####", "#"], ["3+3", "0", "0 v", ".......#####", "#"], ["0", "0", "0 v", ".......#####", "#"], ["0", "0", "0 8", ".......#####", "#"], ["k", "0", "0", "0 8", ".......#####", "#"], ["1", "0", "0", "0 8", ".......#####", "#"], ["1", "0", "0", "0 8", ".......#####", "5IF", "#"], ["1", "0", "0", "0 8", "5", ".......#####", "5IF", "#"], ["1", "0", "0", "0 8", "5", "5IF", "#"], ["1", "0 #", "0", "0 8", "5", "5IF", "#"], ["1", "0 #", "0", "0 8", "5", "5IF"], ["1", "0 #", "0", "f 8", "5", "5IF"], ["#"], ["v"], ["7"], ["9 12", "7"], ["9 12", "7", "#...v#v####."], ["9 12", "7", "#...v#v####.", "#..##k#...#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####.."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "1GI", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "varshini 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#..#v#....#.", ".###.#####..", "varshini 12"], ["f7s"], ["10"], ["VbK", "10"], ["4", "10"], ["7DY"], ["3"], ["R6h", "3"], ["4", "3"], ["4", "3 v"], ["4 H89", "3 v"], ["4 3", "3 v"], ["4 3", "3 v", "#.#v#k###.#."], ["4 3", "3 v", "#.#v#k###.#.", "9 12"], ["4 3", "3 v", "#.#v#k###.#.", "9 12", "4 3"], ["4 3", "3 4 3", "#.#v#k###.#.", "9 12", "4 3"], ["4 3", "3 4 3", "#.#v#k###.#.", "9 12", "mMY 3"], ["v", "v"], ["v", "3"], ["6", "3"], ["9jt"], ["79P"], ["4"], ["#", "4"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "k", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "k", "df rt j k", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "k", "df rt j k", "#..k#.#.#.#", "#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["c3,d1,hA,c5,sK,hJ 12", ".###.#####..", "#.kk#...#v#.", "k", "df rt j k", "#..k#.#.#.#", "#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####", "MEG"], ["9 12", ".###.#####..", "pp7", "#.kk#...#v#.", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####", "MEG"], ["9 12", ".###.#####..", "pp7", "#.kk#...#v#. t1t", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####", "MEG"], ["9 12", ".###.#####..", "pp7", "#.kk#...#v#. t1t", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", "1 -3 5 -6 -10 13 4 -8", ".###.#####..", "pp7", "#.kk#...#v#. t1t", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["#", "#"], ["#", "8"], ["2", "8"], ["3a", "2", "8"], ["3", "2", "8"], ["3", "2 v", "8"], ["3", "2 x1n", "8"], ["Lom", "3", "2 x1n", "8"], ["9", "3", "2 x1n", "8"], ["z-7"], ["6"], ["#.#v#k###.#.", "6"], ["5", "6"], ["5", "6 k"], ["5", "6 9 12"], ["#.#v#k###.#.", "5", "6 9 12"], ["1", "5", "6 9 12"], ["1", "5", "6 9 #"], ["1", "10", "5", "6 9 #"], ["1", "10", "5 Shs", "6 9 #"], ["10", "5 Shs", "6 9 #"], ["#", "10", "5 Shs", "6 9 #"], ["#", "10", "5 Shs", "6 9 7"], ["8", "10", "5 Shs", "6 9 7"], ["8", "10", "5 Shs", ""], ["8", "k", "10", "5 Shs", ""], ["4 5", "8", "k", "10", "5 Shs", ""], ["5dS"], ["-1"], ["MHC"], ["2"], ["", "2"], ["", "20"], ["", "202"], ["", "2021"], ["", "20211"], ["", "202112"], ["", "2021125"], ["", "2021125-1"], ["", "2021125-110"], ["", "2021125-1104"], ["", "2021125-11043"], ["", "2021125-110430"], ["", "2021125-1104306"], ["", "2021125-11043069"], ["", "2021125-110430694"], ["", "2021125-1104306942"], ["", "2021125-11043069426"], ["", "2021125-110430694263"], ["", "2021125-11043069426310"], ["", "2021125-110430694263100"], ["", "2021125-1104306942631000"], ["", "2021125-11043069426310005"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "#.#v#k###.#.", "#..#v#....#. LeT", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "10", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa", "10", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 #...v#v####.", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa", "10", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 #...v#v####.", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa", "10", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "5", ".####.#vv.k#", ".......#####"], ["9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa", "10", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "5", ".####.#vv.k#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa", "10", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "5", ".####.#vv.k#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa", "10", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "5", ".####.#vv.k#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa bqn", "10", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "5", ".####.#vv.k#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa bqn", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "5", ".####.#vv.k#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa bqn", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", ".###.#####..", "5", ".####.#vv.k#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa bqn", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa bqn", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "11D", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "11D", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "11D", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "13w", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "11D", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "13w", "5 G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "11D", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "13w", "5 G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "11D", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "13w", "5 G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "11D  ", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "13w", "5", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "11D  ", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "", ".......##### bqn", "#..k#.#.#.#", "13w", "5", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "11D  ", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "", ".......##### bqn", "#..k#.#.#.#", "13w", "5", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k# #", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k# #", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k# #", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["#..#v#....#. LeT 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["#..#v#....#. LeT 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 LeT", "", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["6 LeT 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 LeT", "", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["6 LeT 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 2", "", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["6 2 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 2", "", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["6 2 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 2", "", "3+3", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["6 2 8", "9", "8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 2", "", "3+3", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["6 2 8", "9", "8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 2", "", "3+3", ".###.#####..", "5", ".####.#vv.k# 0W8", "f7P", "#", ".......#####"], ["6 2 8", "9", "8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 2", "", "3+3", ".###.#####..", "5", ".####.#vv.k# 0W8", "f7P #", "#", ".......#####"], ["6 2 8", "9", "8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "#.#v#k###.#.", "5 2", "", "3+3", ".###.#####..", "5", ".####.#vv.k# 0W8", "f7P #", "#", ".......#####"], ["6 2 8", "9", "8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "KG2", "#.#v#k###.#.", "5 2", "", "3+3", ".###.#####..", "5", ".####.#vv.k# 0W8", "f7P #", "#", ".......#####"], ["A-5"], ["v", "4"], ["7", "4"], ["7 #", "4"], ["7 0", "4"], ["7 0", "4", "9 12"], ["7 0", "4", "9 12", "#..##k#...#."], ["7 0", "4", "9 12", "#..##k#...#.", ".####.#vv.k#"], ["7 0", "4", "9 12", "#..##k#...#.", ".####.#vv.k#", "4"], ["7 0", "4", "9 12", "#..##k#...#.", ".####.#vv.k#", "4", "#...v#v####."]]}, {"InputHistory": [["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", " ", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], [], ["0"], ["0", "0"], ["0", "0 #"], ["0", "0", "#"], ["0", "0", ".......#####", "#"], ["0", "0 v", ".......#####", "#"], ["3+3", "0", "0 v", ".......#####", "#"], ["0", "0", "0 v", ".......#####", "#"], ["0", "0", "0 8", ".......#####", "#"], ["k", "0", "0", "0 8", ".......#####", "#"], ["1", "0", "0", "0 8", ".......#####", "#"], ["1", "0", "0", "0 8", ".......#####", "5IF", "#"], ["1", "0", "0", "0 8", "5", ".......#####", "5IF", "#"], ["1", "0", "0", "0 8", "5", "5IF", "#"], ["1", "0 #", "0", "0 8", "5", "5IF", "#"], ["1", "0 #", "0", "0 8", "5", "5IF"], ["1", "0 #", "0", "f 8", "5", "5IF"], ["#"], ["v"], ["7"], ["9 12", "7"], ["9 12", "7", "#...v#v####."], ["9 12", "7", "#...v#v####.", "#..##k#...#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####.."], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", ".####.#vv.k#", "1GI", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "9 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#.kk#...#v#.", "#..#v#....#.", ".###.#####..", "varshini 12"], ["9 12", "7", "#...v#v####.", "#..##k#...#.", "A", ".####.#vv.k#", "1GI", "http://ef.12d", "#.#v#k###.#.", "#..#v#....#.", ".###.#####..", "varshini 12"], ["f7s"], ["10"], ["VbK", "10"], ["4", "10"], ["7DY"], ["3"], ["R6h", "3"], ["4", "3"], ["4", "3 v"], ["4 H89", "3 v"], ["4 3", "3 v"], ["4 3", "3 v", "#.#v#k###.#."], ["4 3", "3 v", "#.#v#k###.#.", "9 12"], ["4 3", "3 v", "#.#v#k###.#.", "9 12", "4 3"], ["4 3", "3 4 3", "#.#v#k###.#.", "9 12", "4 3"], ["4 3", "3 4 3", "#.#v#k###.#.", "9 12", "mMY 3"], ["v", "v"], ["v", "3"], ["6", "3"], ["9jt"], ["79P"], ["4"], ["#", "4"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "k", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "k", "df rt j k", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "k", "df rt j k", "#..k#.#.#.#", "#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["c3,d1,hA,c5,sK,hJ 12", ".###.#####..", "#.kk#...#v#.", "k", "df rt j k", "#..k#.#.#.#", "#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####", "MEG"], ["9 12", ".###.#####..", "pp7", "#.kk#...#v#.", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####", "MEG"], ["9 12", ".###.#####..", "pp7", "#.kk#...#v#. t1t", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####", "MEG"], ["9 12", ".###.#####..", "pp7", "#.kk#...#v#. t1t", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", "1 -3 5 -6 -10 13 4 -8", ".###.#####..", "pp7", "#.kk#...#v#. t1t", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["#", "#"], ["#", "8"], ["2", "8"], ["3a", "2", "8"], ["3", "2", "8"], ["3", "2 v", "8"], ["3", "2 x1n", "8"], ["Lom", "3", "2 x1n", "8"], ["9", "3", "2 x1n", "8"], ["z-7"], ["6"], ["#.#v#k###.#.", "6"], ["5", "6"], ["5", "6 k"], ["5", "6 9 12"], ["#.#v#k###.#.", "5", "6 9 12"], ["1", "5", "6 9 12"], ["1", "5", "6 9 #"], ["1", "10", "5", "6 9 #"], ["1", "10", "5 Shs", "6 9 #"], ["10", "5 Shs", "6 9 #"], ["#", "10", "5 Shs", "6 9 #"], ["#", "10", "5 Shs", "6 9 7"], ["8", "10", "5 Shs", "6 9 7"], ["8", "10", "5 Shs", ""], ["8", "k", "10", "5 Shs", ""], ["4 5", "8", "k", "10", "5 Shs", ""], ["5dS"], ["-1"], ["MHC"], ["2"], ["", "2"], ["", "20"], ["", "202"], ["", "2021"], ["", "20211"], ["", "202112"], ["", "2021125"], ["", "2021125-1"], ["", "2021125-110"], ["", "2021125-1104"], ["", "2021125-11043"], ["", "2021125-110430"], ["", "2021125-1104306"], ["", "2021125-11043069"], ["", "2021125-110430694"], ["", "2021125-1104306942"], ["", "2021125-11043069426"], ["", "2021125-110430694263"], ["", "2021125-11043069426310"], ["", "2021125-110430694263100"], ["", "2021125-1104306942631000"], ["", "2021125-11043069426310005"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "#.#v#k###.#.", "#..#v#....#. LeT", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "10", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa", "10", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 #...v#v####.", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa", "10", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 #...v#v####.", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa", "10", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "5", ".####.#vv.k#", ".......#####"], ["9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa", "10", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "5", ".####.#vv.k#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa", "10", "#..k#.#.#.#", "#.#v#k###.#.", "#..#v#....#. LeT", "5", ".####.#vv.k#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa", "10", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "5", ".####.#vv.k#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa bqn", "10", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "5", ".####.#vv.k#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa bqn", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "5", ".####.#vv.k#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa bqn", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", ".###.#####..", "5", ".####.#vv.k#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa bqn", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", "aaaabbcaa bqn", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "11D", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "11D", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "11D", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "13w", "5", "#.#v#k###.#.", "#..#v#....#. LeT", "11D", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "13w", "5 G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "11D", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "13w", "5 G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "11D", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "13w", "5 G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "11D  ", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "#..##k#...#. t29", ".......##### bqn", "#..k#.#.#.#", "13w", "5", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "11D  ", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "", ".......##### bqn", "#..k#.#.#.#", "13w", "5", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "11D  ", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "", ".......##### bqn", "#..k#.#.#.#", "13w", "5", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k#", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", "", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k# #", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k# #", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k# #", "#", ".......#####"], ["9 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["#..#v#....#. LeT 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "#..#v#....#. LeT", "", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["#..#v#....#. LeT 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 LeT", "", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["6 LeT 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 LeT", "", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["6 LeT 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 2", "", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["6 2 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 2", "", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["6 2 8", "9 8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 2", "", "3+3", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["6 2 8", "9", "8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 2", "", "3+3", ".###.#####..", "5", ".####.#vv.k# 0W8", "#", ".......#####"], ["6 2 8", "9", "8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 2", "", "3+3", ".###.#####..", "5", ".####.#vv.k# 0W8", "f7P", "#", ".......#####"], ["6 2 8", "9", "8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "G5A", "#.#v#k###.#.", "5 2", "", "3+3", ".###.#####..", "5", ".####.#vv.k# 0W8", "f7P #", "#", ".......#####"], ["6 2 8", "9", "8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "#.#v#k###.#.", "5 2", "", "3+3", ".###.#####..", "5", ".####.#vv.k# 0W8", "f7P #", "#", ".......#####"], ["6 2 8", "9", "8", "#.kk#...#v#. #", "#..k#.#.#.#", ".......##### bqn", "#..k#.#.#.#", "5", "13w", "5", "inches", "KG2", "#.#v#k###.#.", "5 2", "", "3+3", ".###.#####..", "5", ".####.#vv.k# 0W8", "f7P #", "#", ".......#####"], ["A-5"], ["v", "4"], ["7", "4"], ["7 #", "4"], ["7 0", "4"], ["7 0", "4", "9 12"], ["7 0", "4", "9 12", "#..##k#...#."], ["7 0", "4", "9 12", "#..##k#...#.", ".####.#vv.k#"], ["7 0", "4", "9 12", "#..##k#...#.", ".####.#vv.k#", "4"], ["7 0", "4", "9 12", "#..##k#...#.", ".####.#vv.k#", "4", "#...v#v####."], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], ["9 12", ".###.#####..", "#.kk#...#v#.", "#..k#.#.#.#", "#..##k#...#.", "U9X", "#.#v#k###.#.", "#..#v#....#.", "#...v#v####.", ".####.#vv.k#", ".......#####"], [" "], [" 4"], [" 46"], [" 467"], [" 4673"], [" 46739"], [" 46739-1"], [" 46739-10"], [" 46739-105"], [" 46739-1052"], [" 46739-10523"], [" 46739-105234"], [" 46739-10523410"], [" 46739-105234108"], [" 46739-10523410810"], [" 46739-1052341081010"], [" 46739-1052341081010-1"], [" 46739-1052341081010-16"], [" 46739-1052341081010-163"], [" 46739-1052341081010-1631"], [" 46739-1052341081010-16314"], [" 46739-1052341081010-1631410"], [" 46739-1052341081010-16314109"], [" 46739-1052341081010-163141099"], [" 46739-1052341081010-1631410992"], [" 46739-1052341081010-16314109925"], [" 46739-1052341081010-16314109925-1"], [" 46739-1052341081010-16314109925-17"], [" 46739-1052341081010-16314109925-1710"], [" 46739-1052341081010-16314109925-17104"], [" 46739-1052341081010-16314109925-171048"], [" 46739-1052341081010-16314109925-171048-1"], [" 46739-1052341081010-16314109925-171048-11"], [" 46739-1052341081010-16314109925-171048-118"], [" 46739-1052341081010-16314109925-171048-1182"], [" 46739-1052341081010-16314109925-171048-11829"], [" 46739-1052341081010-16314109925-171048-11829-1"], [" 46739-1052341081010-16314109925-171048-11829-19"], [" 46739-1052341081010-16314109925-171048-11829-190"], [" 46739-1052341081010-16314109925-171048-11829-1909"], [" 46739-1052341081010-16314109925-171048-11829-19095"], [" 46739-1052341081010-16314109925-171048-11829-190954"], [" 46739-1052341081010-16314109925-171048-11829-1909543"], [" 46739-1052341081010-16314109925-171048-11829-19095437"], [" 46739-1052341081010-16314109925-171048-11829-190954375"], [" 46739-1052341081010-16314109925-171048-11829-1909543757"], [" 46739-1052341081010-16314109925-171048-11829-19095437573"], [" 46739-1052341081010-16314109925-171048-11829-190954375737"], [" 46739-1052341081010-16314109925-171048-11829-190954375737-1"], [" 46739-1052341081010-16314109925-171048-11829-190954375737-11"], [" 46739-1052341081010-16314109925-171048-11829-190954375737-112"], [" 46739-1052341081010-16314109925-171048-11829-190954375737-1123"], [" 46739-1052341081010-16314109925-171048-11829-190954375737-11234"], [" 46739-1052341081010-16314109925-171048-11829-190954375737-112344"], [" 46739-1052341081010-16314109925-171048-11829-190954375737-1123447"], [" 46739-1052341081010-16314109925-171048-11829-190954375737-11234478"], [" 46739-1052341081010-16314109925-171048-11829-190954375737-112344783"], [" 46739-1052341081010-16314109925-171048-11829-190954375737-1123447835"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552288805.7956617, "StartTime": 1552288795.5446956}]], [{"CorrectInputs": [[["1 1 1 1 1 2 2 2"], 1522786563]], "UniqueId": "5b48695b-9df0-4478-a991-9489a090fa0f_0", "CoverageInfo": [12, 1, 8, 2, 85, "12,", "6->12,", "9->7"], "TimeStamp": 1522786407, "BadInput": ["1 2 3 2 1 "], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 9, in <module>\n    if a[p]==a[i]:\nIndexError: list index out of range\n", "ip": "213.87.137.110"}, [{"EndTime": 1552416828.7171268, "FinalMinimizedSolution": [], "FinalCoverage": [12, 5, 8, 1, 50, "7-11,", "6->7"], "FinalSolution": [""], "StartTime": 1552416827.9909687, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 2 3 2 1 "]]}, {"EndTime": 1552416830.5265982, "FinalMinimizedSolution": [], "FinalCoverage": [12, 5, 8, 1, 50, "7-11,", "6->7"], "FinalSolution": [], "StartTime": 1552416828.7173, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["1 2 3 2 1 "], ["1 2 3 2 1 "], ["1 2 3 1 2 3 2 1  1 "], ["1 2 G9s 1 2 3 2 1  1 "], ["1 2 -1 1 2 3 2 1  1 "], ["1", "2", "-1", "1", "2", "3", "2", "1", "", "1", ""], ["1", "2", "-1", "1", "2", "3 1Fj", "2", "1", "", "1", ""], ["1", "2", "-1", "1", "3 1Fj", "2", "1", "", "1", ""]]}, {"EndTime": 1552416834.46363, "FinalMinimizedSolution": [], "FinalCoverage": [12, 0, 8, 1, 95, "9->7"], "FinalSolution": ["8 -1"], "StartTime": 1552416830.526891, "FoundSolution": true, "NumProbesMade": 18, "InputHistory": [["1 2 3 2 1 "], ["1 2 3 2 1 "], ["1 2 3 1 2 3 2 1  1 "], ["1 2 G9s 1 2 3 2 1  1 "], ["1 2 -1 1 2 3 2 1  1 "], ["1", "2", "-1", "1", "2", "3", "2", "1", "", "1", ""], ["1", "2", "-1", "1", "2", "3 1Fj", "2", "1", "", "1", ""], ["1", "2", "-1", "1", "3 1Fj", "2", "1", "", "1", ""], ["1 2 3 2 1 "], ["16,5", ""], ["1", ""], ["1", "end", ""], ["6wk"], ["10"], ["1 2 3 2 1 ", "10"], ["1 2 3 2 1 ", "d2L", "10"], ["h9v"], ["2"], ["gco", "2"], ["9", "2"], ["9", "a", "2"], ["8", "9", "a", "2"], ["1 2 3 2 1 ", "8", "9", "a", "2"], ["x5D"], ["8"], ["8 E2w"]]}, {"EndTime": 1552416836.075472, "FinalMinimizedSolution": [], "FinalCoverage": [12, 0, 8, 1, 95, "9->7"], "FinalSolution": ["1 0", "2", "3", "2", "M99", "1", ""], "StartTime": 1552416834.4640715, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1 2 3 2 1 "], ["1 2 3 2 1 "], ["1 2 3 1 2 3 2 1  1 "], ["1 2 G9s 1 2 3 2 1  1 "], ["1 2 -1 1 2 3 2 1  1 "], ["1", "2", "-1", "1", "2", "3", "2", "1", "", "1", ""], ["1", "2", "-1", "1", "2", "3 1Fj", "2", "1", "", "1", ""], ["1", "2", "-1", "1", "3 1Fj", "2", "1", "", "1", ""], ["1 2 3 2 1 "], ["16,5", ""], ["1", ""], ["1", "end", ""], ["6wk"], ["10"], ["1 2 3 2 1 ", "10"], ["1 2 3 2 1 ", "d2L", "10"], ["h9v"], ["2"], ["gco", "2"], ["9", "2"], ["9", "a", "2"], ["8", "9", "a", "2"], ["1 2 3 2 1 ", "8", "9", "a", "2"], ["x5D"], ["8"], ["8 E2w"], ["1 2 3 2 1 "], ["1", "2", "3", "2", "1", ""], ["1", "2", "3", "2", "M99", "1", ""], ["1 WVl", "2", "3", "2", "M99", "1", ""]]}, {"EndTime": 1552416840.4085734, "FinalMinimizedSolution": [], "FinalCoverage": [12, 0, 8, 1, 95, "9->7"], "FinalSolution": ["2 8", "2", "2", "9", "1 Z4s", "2", "Ngb", "3", "2", "233", "1", ""], "StartTime": 1552416836.0759628, "FoundSolution": true, "NumProbesMade": 17, "InputHistory": [["1 2 3 2 1 "], ["1 2 3 2 1 "], ["1 2 3 1 2 3 2 1  1 "], ["1 2 G9s 1 2 3 2 1  1 "], ["1 2 -1 1 2 3 2 1  1 "], ["1", "2", "-1", "1", "2", "3", "2", "1", "", "1", ""], ["1", "2", "-1", "1", "2", "3 1Fj", "2", "1", "", "1", ""], ["1", "2", "-1", "1", "3 1Fj", "2", "1", "", "1", ""], ["1 2 3 2 1 "], ["16,5", ""], ["1", ""], ["1", "end", ""], ["6wk"], ["10"], ["1 2 3 2 1 ", "10"], ["1 2 3 2 1 ", "d2L", "10"], ["h9v"], ["2"], ["gco", "2"], ["9", "2"], ["9", "a", "2"], ["8", "9", "a", "2"], ["1 2 3 2 1 ", "8", "9", "a", "2"], ["x5D"], ["8"], ["8 E2w"], ["1 2 3 2 1 "], ["1", "2", "3", "2", "1", ""], ["1", "2", "3", "2", "M99", "1", ""], ["1 WVl", "2", "3", "2", "M99", "1", ""], ["1 2 3 2 1 "], ["1C- 2 3 2 1 "], ["9 2 3 2 1 "], ["9", "2", "3", "2", "1", ""], ["bvK", "9", "2", "3", "2", "1", ""], ["2", "9", "2", "3", "2", "1", ""], ["2", "9", "3", "2", "1", ""], ["2", "9", "2", "1", ""], ["a", "2", "9", "2", "1", ""], ["2", "2", "9", "2", "1", ""], ["2", "2", "9", "2", "233", "1", ""], ["2", "2", "9", "1 2 3", "2", "233", "1", ""], ["2", "2", "9", "1", "2", "3", "2", "233", "1", ""], ["2", "2", "2", "9", "1", "2", "3", "2", "233", "1", ""], ["2", "2", "2", "9", "1 Z4s", "2", "3", "2", "233", "1", ""], ["2", "2", "2", "9", "1 Z4s", "2", "Ngb", "3", "2", "233", "1", ""], ["2 i4r", "2", "2", "9", "1 Z4s", "2", "Ngb", "3", "2", "233", "1", ""]]}]], [{"CorrectInputs": [[["1", "5 3 7"], 1542865594]], "UniqueId": "53b7505d-e215-45fe-d007-d4f33faeefbb_0", "CoverageInfo": [20, 1, 6, 2, 88, "10,", "9->10,", "26->exit"], "TimeStamp": 1542865505, "BadInput": ["2", "3 2 2", "5"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 27, in <module>\n    print(int(koblihy()))\n  File \"temp2018.py\", line 6, in koblihy\n    n = info[1]\nIndexError: list index out of range\n", "ip": "178.255.168.80"}, [{"EndTime": 1552368785.9188561, "FinalMinimizedSolution": ["1", "3 2 2"], "FinalCoverage": [20, 1, 6, 1, 92, "10,", "9->10"], "FinalSolution": ["1", "3 2 2"], "StartTime": 1552368782.9713113, "FoundSolution": true, "NumProbesMade": 12, "InputHistory": [["2", "3 2 2", "5"], ["2", "2,3,4,5 2 2", "5"], ["2", "4 2 2", "5"], ["2", "2", "4 2 2", "5"], ["2", "2 M-5", "4 2 2", "5"], ["2", "2 5", "4 2 2", "5"], [], ["6"], ["6", "YGr"], ["6", "5"], ["p79"], ["1"]]}, {"EndTime": 1552368793.512526, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [20, 17, 6, 1, 15, "3-23,", "27,", "26->27"], "FinalSolution": ["-1"], "StartTime": 1552368785.919171, "FoundSolution": true, "NumProbesMade": 41, "InputHistory": [["2", "3 2 2", "5"], ["2", "2,3,4,5 2 2", "5"], ["2", "4 2 2", "5"], ["2", "2", "4 2 2", "5"], ["2", "2 M-5", "4 2 2", "5"], ["2", "2 5", "4 2 2", "5"], [], ["6"], ["6", "YGr"], ["6", "5"], ["p79"], ["1"], ["2", "3 2 2", "5"], ["2", "3 2 2", "5", "5"], ["3 2 2", "2", "3 2 2", "5", "5"], ["3 2 2", "2", "2", "5", "5"], ["8", "2", "2", "5", "5"], ["8", "2", "e", "2", "5", "5"], ["rYC"], ["pawan", "6"], ["7", "6"], ["3 2 2", "6"], ["10", "6"], ["NLC"], ["10"], ["10", "3 2 2"], ["10", "3 2 2", "D6Q"], ["10", "3 2 2", "6"], ["10", "3", "2", "2"], ["15", "10", "3", "2", "2"], ["dgA"], ["9"], ["9", "3 2 2"], ["9", "3 2 2", "3 2 2"], ["9", "3 2 2", "3 2 2", "77z"], ["9", "3 2 2", "3 2 2", "10"], ["9", "3 2 2", "3", "2", "2", "10"], ["9", "3 ....** 2", "3", "2", "2", "10"], ["9", "3 0 2", "3", "2", "2", "10"], ["9", "3 0 2", "3", "3", "2", "2", "10"], ["BcS"], ["5"], ["5", "2"], ["2"], ["2", "2"], ["2", "2", "2"], ["2", "qSc", "2", "2"], ["2", "6", "2", "2"], ["2", "6", "4pA", "2", "2"], ["2", "6", "4pA", "2", "2 83d"], ["5xn"], ["thisIsATest", "2"], ["59y"]]}, {"EndTime": 1552368797.7081878, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [20, 17, 6, 1, 15, "3-23,", "27,", "26->27"], "FinalSolution": ["-1", "9"], "StartTime": 1552368793.5133042, "FoundSolution": true, "NumProbesMade": 21, "InputHistory": [["2", "3 2 2", "5"], ["2", "2,3,4,5 2 2", "5"], ["2", "4 2 2", "5"], ["2", "2", "4 2 2", "5"], ["2", "2 M-5", "4 2 2", "5"], ["2", "2 5", "4 2 2", "5"], [], ["6"], ["6", "YGr"], ["6", "5"], ["p79"], ["1"], ["2", "3 2 2", "5"], ["2", "3 2 2", "5", "5"], ["3 2 2", "2", "3 2 2", "5", "5"], ["3 2 2", "2", "2", "5", "5"], ["8", "2", "2", "5", "5"], ["8", "2", "e", "2", "5", "5"], ["rYC"], ["pawan", "6"], ["7", "6"], ["3 2 2", "6"], ["10", "6"], ["NLC"], ["10"], ["10", "3 2 2"], ["10", "3 2 2", "D6Q"], ["10", "3 2 2", "6"], ["10", "3", "2", "2"], ["15", "10", "3", "2", "2"], ["dgA"], ["9"], ["9", "3 2 2"], ["9", "3 2 2", "3 2 2"], ["9", "3 2 2", "3 2 2", "77z"], ["9", "3 2 2", "3 2 2", "10"], ["9", "3 2 2", "3", "2", "2", "10"], ["9", "3 ....** 2", "3", "2", "2", "10"], ["9", "3 0 2", "3", "2", "2", "10"], ["9", "3 0 2", "3", "3", "2", "2", "10"], ["BcS"], ["5"], ["5", "2"], ["2"], ["2", "2"], ["2", "2", "2"], ["2", "qSc", "2", "2"], ["2", "6", "2", "2"], ["2", "6", "4pA", "2", "2"], ["2", "6", "4pA", "2", "2 83d"], ["5xn"], ["thisIsATest", "2"], ["59y"], ["2", "3 2 2", "5"], ["2", "3 2 2", "2", "5"], ["2", "", "2", "5"], ["2", " JKW", "2", "5"], ["2", " 6", "2", "5"], ["2", "2 6", "2", "5"], ["2", "2 6", "320000", "2", "5"], ["2", "2 6", "320000", "2", "gUJ", "5"], ["2 WVz", "2 6", "320000", "2", "gUJ", "5"], ["5", "2 6", "320000", "2", "gUJ", "5"], ["5", "2 6", "320000", "2", "gUJ", "5 VPF"], ["5", "2 6", "320000", "p2V", "2", "gUJ", "5 VPF"], ["5", "2 6", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["5", "2 uWh", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["5", "2 1", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["5", "2", "1", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["2", "1", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["2", "1", "320000 2a4", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["7lR"], ["9la"], ["ZlH", "9"]]}, {"EndTime": 1552368798.9589133, "FinalMinimizedSolution": ["0"], "FinalCoverage": [20, 17, 6, 1, 15, "3-23,", "27,", "26->27"], "FinalSolution": ["0"], "StartTime": 1552368797.7091913, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["2", "3 2 2", "5"], ["2", "2,3,4,5 2 2", "5"], ["2", "4 2 2", "5"], ["2", "2", "4 2 2", "5"], ["2", "2 M-5", "4 2 2", "5"], ["2", "2 5", "4 2 2", "5"], [], ["6"], ["6", "YGr"], ["6", "5"], ["p79"], ["1"], ["2", "3 2 2", "5"], ["2", "3 2 2", "5", "5"], ["3 2 2", "2", "3 2 2", "5", "5"], ["3 2 2", "2", "2", "5", "5"], ["8", "2", "2", "5", "5"], ["8", "2", "e", "2", "5", "5"], ["rYC"], ["pawan", "6"], ["7", "6"], ["3 2 2", "6"], ["10", "6"], ["NLC"], ["10"], ["10", "3 2 2"], ["10", "3 2 2", "D6Q"], ["10", "3 2 2", "6"], ["10", "3", "2", "2"], ["15", "10", "3", "2", "2"], ["dgA"], ["9"], ["9", "3 2 2"], ["9", "3 2 2", "3 2 2"], ["9", "3 2 2", "3 2 2", "77z"], ["9", "3 2 2", "3 2 2", "10"], ["9", "3 2 2", "3", "2", "2", "10"], ["9", "3 ....** 2", "3", "2", "2", "10"], ["9", "3 0 2", "3", "2", "2", "10"], ["9", "3 0 2", "3", "3", "2", "2", "10"], ["BcS"], ["5"], ["5", "2"], ["2"], ["2", "2"], ["2", "2", "2"], ["2", "qSc", "2", "2"], ["2", "6", "2", "2"], ["2", "6", "4pA", "2", "2"], ["2", "6", "4pA", "2", "2 83d"], ["5xn"], ["thisIsATest", "2"], ["59y"], ["2", "3 2 2", "5"], ["2", "3 2 2", "2", "5"], ["2", "", "2", "5"], ["2", " JKW", "2", "5"], ["2", " 6", "2", "5"], ["2", "2 6", "2", "5"], ["2", "2 6", "320000", "2", "5"], ["2", "2 6", "320000", "2", "gUJ", "5"], ["2 WVz", "2 6", "320000", "2", "gUJ", "5"], ["5", "2 6", "320000", "2", "gUJ", "5"], ["5", "2 6", "320000", "2", "gUJ", "5 VPF"], ["5", "2 6", "320000", "p2V", "2", "gUJ", "5 VPF"], ["5", "2 6", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["5", "2 uWh", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["5", "2 1", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["5", "2", "1", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["2", "1", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["2", "1", "320000 2a4", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["7lR"], ["9la"], ["ZlH", "9"], ["2", "3 2 2", "5"], ["0-O"], ["0Cm"]]}, {"InputHistory": [["2", "3 2 2", "5"], ["2", "2,3,4,5 2 2", "5"], ["2", "4 2 2", "5"], ["2", "2", "4 2 2", "5"], ["2", "2 M-5", "4 2 2", "5"], ["2", "2 5", "4 2 2", "5"], [], ["6"], ["6", "YGr"], ["6", "5"], ["p79"], ["1"], ["2", "3 2 2", "5"], ["2", "3 2 2", "5", "5"], ["3 2 2", "2", "3 2 2", "5", "5"], ["3 2 2", "2", "2", "5", "5"], ["8", "2", "2", "5", "5"], ["8", "2", "e", "2", "5", "5"], ["rYC"], ["pawan", "6"], ["7", "6"], ["3 2 2", "6"], ["10", "6"], ["NLC"], ["10"], ["10", "3 2 2"], ["10", "3 2 2", "D6Q"], ["10", "3 2 2", "6"], ["10", "3", "2", "2"], ["15", "10", "3", "2", "2"], ["dgA"], ["9"], ["9", "3 2 2"], ["9", "3 2 2", "3 2 2"], ["9", "3 2 2", "3 2 2", "77z"], ["9", "3 2 2", "3 2 2", "10"], ["9", "3 2 2", "3", "2", "2", "10"], ["9", "3 ....** 2", "3", "2", "2", "10"], ["9", "3 0 2", "3", "2", "2", "10"], ["9", "3 0 2", "3", "3", "2", "2", "10"], ["BcS"], ["5"], ["5", "2"], ["2"], ["2", "2"], ["2", "2", "2"], ["2", "qSc", "2", "2"], ["2", "6", "2", "2"], ["2", "6", "4pA", "2", "2"], ["2", "6", "4pA", "2", "2 83d"], ["5xn"], ["thisIsATest", "2"], ["59y"], ["2", "3 2 2", "5"], ["2", "3 2 2", "2", "5"], ["2", "", "2", "5"], ["2", " JKW", "2", "5"], ["2", " 6", "2", "5"], ["2", "2 6", "2", "5"], ["2", "2 6", "320000", "2", "5"], ["2", "2 6", "320000", "2", "gUJ", "5"], ["2 WVz", "2 6", "320000", "2", "gUJ", "5"], ["5", "2 6", "320000", "2", "gUJ", "5"], ["5", "2 6", "320000", "2", "gUJ", "5 VPF"], ["5", "2 6", "320000", "p2V", "2", "gUJ", "5 VPF"], ["5", "2 6", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["5", "2 uWh", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["5", "2 1", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["5", "2", "1", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["2", "1", "320000", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["2", "1", "320000 2a4", "3:45", "p2V", "2", "gUJ", "5 VPF"], ["7lR"], ["9la"], ["ZlH", "9"], ["2", "3 2 2", "5"], ["0-O"], ["0Cm"], ["2", "3 2 2", "5"], ["2", "3 2 2", "5 -l5"], ["2", "3 2 2", "5 0"], ["2", "", "5 0"], ["", "5 0"], ["", "5 09"], ["", "5 092"], ["", "5 0929"], ["", "5 0929-1"], ["", "5 0929-15"], ["", "5 0929-154"], ["", "5 0929-1549"], ["", "5 0929-15495"], ["", "5 0929-154957"], ["", "5 0929-1549572"], ["", "5 0929-15495729"], ["", "5 0929-154957295"], ["", "5 0929-1549572958"], ["", "5 0929-15495729588"], ["", "5 0929-154957295882"], ["", "5 0929-154957295882-1"], ["", "5 0929-154957295882-12"], ["", "5 0929-154957295882-1210"], ["", "5 0929-154957295882-12109"], ["", "5 0929-154957295882-12109-1"], ["", "5 0929-154957295882-12109-16"], ["", "5 0929-154957295882-12109-160"], ["", "5 0929-154957295882-12109-1601"], ["", "5 0929-154957295882-12109-16016"], ["", "5 0929-154957295882-12109-160161"], ["", "5 0929-154957295882-12109-1601611"], ["", "5 0929-154957295882-12109-16016117"], ["", "5 0929-154957295882-12109-160161176"], ["", "5 0929-154957295882-12109-1601611760"], ["", "5 0929-154957295882-12109-16016117606"], ["", "5 0929-154957295882-12109-160161176060"], ["", "5 0929-154957295882-12109-1601611760608"], ["", "5 0929-154957295882-12109-16016117606082"], ["", "5 0929-154957295882-12109-160161176060823"], ["", "5 0929-154957295882-12109-1601611760608235"], ["", "5 0929-154957295882-12109-16016117606082352"], ["", "5 0929-154957295882-12109-160161176060823529"], ["", "5 0929-154957295882-12109-1601611760608235294"], ["", "5 0929-154957295882-12109-1601611760608235294-1"], ["", "5 0929-154957295882-12109-1601611760608235294-10"], ["", "5 0929-154957295882-12109-1601611760608235294-104"], ["", "5 0929-154957295882-12109-1601611760608235294-1044"], ["", "5 0929-154957295882-12109-1601611760608235294-10449"], ["", "5 0929-154957295882-12109-1601611760608235294-104493"], ["", "5 0929-154957295882-12109-1601611760608235294-1044932"], ["", "5 0929-154957295882-12109-1601611760608235294-10449326"], ["", "5 0929-154957295882-12109-1601611760608235294-1044932610"], ["", "5 0929-154957295882-12109-1601611760608235294-10449326105"], ["", "5 0929-154957295882-12109-1601611760608235294-104493261052"], ["", "5 0929-154957295882-12109-1601611760608235294-1044932610525"], ["", "5 0929-154957295882-12109-1601611760608235294-10449326105255"], ["", "5 0929-154957295882-12109-1601611760608235294-104493261052552"], ["", "5 0929-154957295882-12109-1601611760608235294-1044932610525528"], ["", "5 0929-154957295882-12109-1601611760608235294-10449326105255283"], ["", "5 0929-154957295882-12109-1601611760608235294-104493261052552836"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552368810.3148234, "StartTime": 1552368798.959902}]], [{"CorrectInputs": [[["3", "4", "5", "6"], 1536288284]], "UniqueId": "2cdfdef2-e10d-4c6f-963b-95b63cf44440_0", "CoverageInfo": [3, 2, 2, 0, 20, "2-3"], "TimeStamp": 1536288197, "BadInput": ["3 4 5 6 "], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    a,b,c,d=int(input()),int(input()),int(input()),int(input())\nValueError: invalid literal for int() with base 10: '3 4 5 6 '\n", "ip": "87.228.30.143"}, [{"EndTime": 1552279662.5224128, "FinalMinimizedSolution": ["5", "0", "0", "0"], "FinalCoverage": [3, 1, 2, 1, 60, "3,", "2->3"], "FinalSolution": ["5", "0", "0", "0"], "StartTime": 1552279660.7163563, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["3 4 5 6 "], ["5"], ["5", "dNE"], ["5", "0"], ["5", "0", "0"], ["5", "0", "0", "3 4 5 6 "]]}, {"EndTime": 1552279664.1360476, "FinalMinimizedSolution": ["7", "6", "7", "7"], "FinalCoverage": [3, 1, 2, 1, 60, "3,", "2->3"], "FinalSolution": ["7", "6", "7", "7"], "StartTime": 1552279662.5226321, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["3 4 5 6 "], ["5"], ["5", "dNE"], ["5", "0"], ["5", "0", "0"], ["5", "0", "0", "3 4 5 6 "], ["3 4 5 6 "], ["7"], ["7", "3 4 5 6 "], ["7", "6"], ["7", "6", "7"]]}, {"EndTime": 1552279665.9426272, "FinalMinimizedSolution": ["6", "1", "6", "-1"], "FinalCoverage": [3, 1, 2, 1, 60, "3,", "2->3"], "FinalSolution": ["6", "1", "6", "-1"], "StartTime": 1552279664.1363058, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["3 4 5 6 "], ["5"], ["5", "dNE"], ["5", "0"], ["5", "0", "0"], ["5", "0", "0", "3 4 5 6 "], ["3 4 5 6 "], ["7"], ["7", "3 4 5 6 "], ["7", "6"], ["7", "6", "7"], ["3 4 5 6 "], ["6"], ["6", "yGN"], ["6", "1"], ["6", "1", "6"], ["6", "1", "6", "Av5"]]}, {"EndTime": 1552279667.7480156, "FinalMinimizedSolution": ["0", "2", "0", "8"], "FinalCoverage": [3, 0, 2, 0, 100], "FinalSolution": ["0", "2", "0", "8"], "StartTime": 1552279665.9429326, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["3 4 5 6 "], ["5"], ["5", "dNE"], ["5", "0"], ["5", "0", "0"], ["5", "0", "0", "3 4 5 6 "], ["3 4 5 6 "], ["7"], ["7", "3 4 5 6 "], ["7", "6"], ["7", "6", "7"], ["3 4 5 6 "], ["6"], ["6", "yGN"], ["6", "1"], ["6", "1", "6"], ["6", "1", "6", "Av5"], ["3 4 5 6 "], ["0"], ["0", "3 4 5 6 "], ["0", "2"], ["0", "2", "0"], ["0", "2", "0", "3 4 5 6 "]]}, {"EndTime": 1552279669.549198, "FinalMinimizedSolution": ["9", "4", "4", "4"], "FinalCoverage": [3, 1, 2, 1, 60, "3,", "2->3"], "FinalSolution": ["9", "4", "4", "4"], "StartTime": 1552279667.7483895, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["3 4 5 6 "], ["5"], ["5", "dNE"], ["5", "0"], ["5", "0", "0"], ["5", "0", "0", "3 4 5 6 "], ["3 4 5 6 "], ["7"], ["7", "3 4 5 6 "], ["7", "6"], ["7", "6", "7"], ["3 4 5 6 "], ["6"], ["6", "yGN"], ["6", "1"], ["6", "1", "6"], ["6", "1", "6", "Av5"], ["3 4 5 6 "], ["0"], ["0", "3 4 5 6 "], ["0", "2"], ["0", "2", "0"], ["0", "2", "0", "3 4 5 6 "], ["3 4 5 6 "], ["7 c2C"], ["9"], ["9", "DTj"], ["9", "4"], ["9", "4", "4"]]}]], [{"CorrectInputs": [[["-50", "15"], 1536678956]], "UniqueId": "55744fd9-076b-4341-d512-ba2996449bf8_0", "CoverageInfo": [8, 1, 2, 1, 80, "7,", "6->7"], "TimeStamp": 1536678849, "BadInput": ["45", "-15"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 9, in <module>\n    z=resultat\nNameError: name 'resultat' is not defined\n", "ip": "152.77.91.220"}, [{"EndTime": 1552357867.213485, "FinalMinimizedSolution": ["-1", "45"], "FinalCoverage": [8, 1, 2, 1, 80, "9,", "6->9"], "FinalSolution": ["-1", "45", "45"], "StartTime": 1552357865.7279081, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["45", "-15"], ["45"], ["45", "45"], ["3.", "45", "45"]]}, {"EndTime": 1552357869.023138, "FinalMinimizedSolution": ["9", "45"], "FinalCoverage": [8, 1, 2, 1, 80, "9,", "6->9"], "FinalSolution": ["9", "45"], "StartTime": 1552357867.2136853, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["45", "-15"], ["45"], ["45", "45"], ["3.", "45", "45"], ["45", "-15"], ["45", "45", "-15"], ["45", "1nO", "45", "-15"], ["45", "0", "45", "-15"], [], ["9"]]}, {"EndTime": 1552357870.9407427, "FinalMinimizedSolution": ["-1", "8"], "FinalCoverage": [8, 1, 2, 1, 80, "9,", "6->9"], "FinalSolution": ["-1", "8", "-15", "-15 PDN"], "StartTime": 1552357869.0233815, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["45", "-15"], ["45"], ["45", "45"], ["3.", "45", "45"], ["45", "-15"], ["45", "45", "-15"], ["45", "1nO", "45", "-15"], ["45", "0", "45", "-15"], [], ["9"], ["45", "-15"], ["45 JW5", "-15"], ["-1", "-15"], ["-1", "-15", "-15"], ["-1", "-15", "-15 PDN"], ["-1", "8-x", "-15", "-15 PDN"]]}, {"EndTime": 1552357872.0490253, "FinalMinimizedSolution": ["2", "45"], "FinalCoverage": [8, 1, 2, 1, 80, "9,", "6->9"], "FinalSolution": ["2", "45", "-15"], "StartTime": 1552357870.941055, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["45", "-15"], ["45"], ["45", "45"], ["3.", "45", "45"], ["45", "-15"], ["45", "45", "-15"], ["45", "1nO", "45", "-15"], ["45", "0", "45", "-15"], [], ["9"], ["45", "-15"], ["45 JW5", "-15"], ["-1", "-15"], ["-1", "-15", "-15"], ["-1", "-15", "-15 PDN"], ["-1", "8-x", "-15", "-15 PDN"], ["45", "-15"], ["IEX", "45", "-15"]]}, {"EndTime": 1552357874.2908304, "FinalMinimizedSolution": ["-1", "2"], "FinalCoverage": [8, 1, 2, 1, 80, "9,", "6->9"], "FinalSolution": ["-1", "2", "2"], "StartTime": 1552357872.049385, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["45", "-15"], ["45"], ["45", "45"], ["3.", "45", "45"], ["45", "-15"], ["45", "45", "-15"], ["45", "1nO", "45", "-15"], ["45", "0", "45", "-15"], [], ["9"], ["45", "-15"], ["45 JW5", "-15"], ["-1", "-15"], ["-1", "-15", "-15"], ["-1", "-15", "-15 PDN"], ["-1", "8-x", "-15", "-15 PDN"], ["45", "-15"], ["IEX", "45", "-15"], ["45", "-15"], ["45 w68", "-15"], ["8r0"], ["2"], ["2", "-15"], ["4uw"], ["2", "2"], ["4,36", "2", "2"]]}]], [{"CorrectInputs": [[["30", "8.52"], 1540703445]], "UniqueId": "b543b13e-cb15-475c-c248-4cc4983e2de3_0", "CoverageInfo": [13, 5, 0, 0, 62, "10-15"], "TimeStamp": 1540703405, "BadInput": ["30", "$8.52"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 9, in <module>\n    rate = float(input(\"What is the hourly rate?\"))\nValueError: could not convert string to float: '$8.52'\n", "ip": "71.191.70.16"}, [{"EndTime": 1552348894.4597743, "FinalMinimizedSolution": ["30", "10.10"], "FinalCoverage": [13, 0, 0, 0, 100], "FinalSolution": ["30", "10.10"], "StartTime": 1552348893.5938604, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["30", "$8.52"]]}, {"EndTime": 1552348895.32424, "FinalMinimizedSolution": ["30", "9.0"], "FinalCoverage": [13, 0, 0, 0, 100], "FinalSolution": ["30", "9.0"], "StartTime": 1552348894.459943, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["30", "$8.52"], ["30", "$8.52"]]}, {"EndTime": 1552348896.189614, "FinalMinimizedSolution": ["30", "10.3"], "FinalCoverage": [13, 0, 0, 0, 100], "FinalSolution": ["30", "10.3"], "StartTime": 1552348895.324418, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["30", "$8.52"], ["30", "$8.52"], ["30", "$8.52"]]}, {"EndTime": 1552348897.0543623, "FinalMinimizedSolution": ["30", "0.3"], "FinalCoverage": [13, 0, 0, 0, 100], "FinalSolution": ["30", "0.3"], "StartTime": 1552348896.189798, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["30", "$8.52"], ["30", "$8.52"], ["30", "$8.52"], ["30", "$8.52"]]}, {"EndTime": 1552348897.9200046, "FinalMinimizedSolution": ["30", "7.3"], "FinalCoverage": [13, 0, 0, 0, 100], "FinalSolution": ["30", "7.3"], "StartTime": 1552348897.054574, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["30", "$8.52"], ["30", "$8.52"], ["30", "$8.52"], ["30", "$8.52"], ["30", "$8.52"]]}]], [{"CorrectInputs": [[["2", "12", "sam", "88", "22", "athi", "55"], 1533921012]], "UniqueId": "b151fc2d-5354-40b6-da1e-89bf0f0f1669_0", "CoverageInfo": [21, 5, 8, 2, 62, "10-15,", "8->10,", "19->exit"], "TimeStamp": 1533920863, "BadInput": ["2", "12", "sam", "88", "athu"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 21, in <module>\n    ro=int(input(\"Roll no: \"))\nValueError: invalid literal for int() with base 10: 'athu'\n", "ip": "117.221.186.53"}, [{"EndTime": 1552355392.4633222, "FinalMinimizedSolution": ["2", "12", "sam", "88", "6", "athu", "2"], "FinalCoverage": [21, 2, 8, 2, 86, "11,", "13,", "10->11,", "12->13"], "FinalSolution": ["2", "12", "sam", "88", "6", "athu", "2"], "StartTime": 1552355391.021362, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "6"], ["2", "12", "sam", "88", "6", "athu"], ["2", "12", "sam", "88", "6", "athu", "sam"]]}, {"EndTime": 1552355393.9018142, "FinalMinimizedSolution": ["2", "12", "sam", "88", "7", "TpH", "5"], "FinalCoverage": [21, 2, 8, 2, 86, "11,", "13,", "10->11,", "12->13"], "FinalSolution": ["2", "12", "sam", "88", "7", "TpH", "5"], "StartTime": 1552355392.4635696, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "6"], ["2", "12", "sam", "88", "6", "athu"], ["2", "12", "sam", "88", "6", "athu", "sam"], ["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "7"], ["2", "12", "sam", "88", "7", "TpH"], ["2", "12", "sam", "88", "7", "TpH", "sam"]]}, {"EndTime": 1552355395.1482463, "FinalMinimizedSolution": ["2", "12", "sam", "88", "8", "sam", "88"], "FinalCoverage": [21, 5, 8, 1, 66, "10-15,", "8->10"], "FinalSolution": ["2", "12", "sam", "88", "8", "sam", "88"], "StartTime": 1552355393.9021194, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "6"], ["2", "12", "sam", "88", "6", "athu"], ["2", "12", "sam", "88", "6", "athu", "sam"], ["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "7"], ["2", "12", "sam", "88", "7", "TpH"], ["2", "12", "sam", "88", "7", "TpH", "sam"], ["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "8"], ["2", "12", "sam", "88", "8", "sam"]]}, {"EndTime": 1552355396.3941753, "FinalMinimizedSolution": ["2", "12", "sam", "88", "10", "2", "2"], "FinalCoverage": [21, 2, 8, 2, 86, "11,", "13,", "10->11,", "12->13"], "FinalSolution": ["2", "12", "sam", "88", "10", "2", "2"], "StartTime": 1552355395.1485953, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "6"], ["2", "12", "sam", "88", "6", "athu"], ["2", "12", "sam", "88", "6", "athu", "sam"], ["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "7"], ["2", "12", "sam", "88", "7", "TpH"], ["2", "12", "sam", "88", "7", "TpH", "sam"], ["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "8"], ["2", "12", "sam", "88", "8", "sam"], ["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "10"], ["2", "12", "sam", "88", "10", "2"]]}, {"EndTime": 1552355397.8327484, "FinalMinimizedSolution": ["2", "12", "sam", "88", "4", " is A", "0"], "FinalCoverage": [21, 2, 8, 2, 86, "11,", "13,", "10->11,", "12->13"], "FinalSolution": ["2", "12", "sam", "88", "4", " is A", "0"], "StartTime": 1552355396.394563, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "6"], ["2", "12", "sam", "88", "6", "athu"], ["2", "12", "sam", "88", "6", "athu", "sam"], ["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "7"], ["2", "12", "sam", "88", "7", "TpH"], ["2", "12", "sam", "88", "7", "TpH", "sam"], ["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "8"], ["2", "12", "sam", "88", "8", "sam"], ["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "10"], ["2", "12", "sam", "88", "10", "2"], ["2", "12", "sam", "88", "athu"], ["2", "12", "sam", "88", "4"], ["2", "12", "sam", "88", "4", " is A"], ["2", "12", "sam", "88", "4", " is A", " is A"]]}]], [{"CorrectInputs": [[["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1", "classK classA"], 1529281953]], "UniqueId": "8bf424fd-9fce-40b0-b20f-58e5c0c8a20e_0", "CoverageInfo": [38, 20, 28, 2, 45, "4,", "23-42,", "3->4,", "8->5"], "TimeStamp": 1529281729, "BadInput": ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 22, in <module>\n    v = int(input())\nValueError: invalid literal for int() with base 10: 'classK classA'\n", "ip": "81.177.251.160"}, [{"EndTime": 1552320994.4327612, "FinalMinimizedSolution": ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK", "classA : classB classC classD classG classH", "-1"], "FinalCoverage": [38, 19, 28, 2, 50, "4,", "24-42,", "3->4,", "23->24"], "FinalSolution": ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK", "classA : classB classC classD classG classH", "-1"], "StartTime": 1552320986.50934, "FoundSolution": true, "NumProbesMade": 38, "InputHistory": [["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "5"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "5", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["Auz", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "5", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10 None", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "5", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], [], ["5"], ["5", "classC : classE classD classH classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "None"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "2"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2 j16", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2 j16", "classE classE : classD classF classK classL classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "", "classE classE : classD classF classK classL classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "", "classE classE : classD classF classK classL classD classF classK classL"], ["0u7"], ["10"], ["10", "10"], ["10", "10", "10"], ["10", "10", "10", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK", "classA : classB classC classD classG classH", "classL"]]}, {"EndTime": 1552321006.1737645, "FinalMinimizedSolution": ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF", "10", "-1"], "FinalCoverage": [38, 19, 28, 2, 50, "4,", "24-42,", "3->4,", "23->24"], "FinalSolution": ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF", "10", "-1"], "StartTime": 1552320994.4337099, "FoundSolution": true, "NumProbesMade": 58, "InputHistory": [["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "5"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "5", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["Auz", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "5", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10 None", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "5", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], [], ["5"], ["5", "classC : classE classD classH classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "None"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "2"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2 j16", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2 j16", "classE classE : classD classF classK classL classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "", "classE classE : classD classF classK classL classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "", "classE classE : classD classF classK classL classD classF classK classL"], ["0u7"], ["10"], ["10", "10"], ["10", "10", "10"], ["10", "10", "10", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK", "classA : classB classC classD classG classH", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC None", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC None", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "1,2", "classD", "classF", "classK", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC None", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "1,2", "classD", "classF", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["9x3"], ["3"], ["3", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "2"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "2", "classK classA"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "10", "2", "classK classA"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "10", "2", ""], ["None"], ["-1"], ["-1", "classG : classF"], ["-1", "9"], ["-1", "9", "classL"], ["m1i"], ["0"], ["0", "classB : classC classE classG classH classK classL"], ["0", "5"], ["0", "5", "classK : classH classL"], ["0", "5", "classK kHg classH classL"], ["0", "classK classA", "5", "classK kHg classH classL"], ["0", "3", "5", "classK kHg classH classL"], ["0 None", "3", "5", "classK kHg classH classL"], ["8", "3", "5", "classK kHg classH classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "classA : classB classC classD classG classH"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "classK kHg classH =1", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "", "classA : classB classC classD classG classH", "", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "", "classA", ":", "classB", "classC", "classD", "classG", "classH", "", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["0,14,5,6,8", "None"], ["10", "None"], ["10", "None", "10"], ["10", "None", "10", "classG : classF"], ["10", "None", "10", "classG : classF", "classF : classK"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF", "10"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF", "10", "classD : classG classH"]]}, {"InputHistory": [["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "5"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "5", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["Auz", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "5", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10 None", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "5", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], [], ["5"], ["5", "classC : classE classD classH classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "None"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "2"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2 j16", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2 j16", "classE classE : classD classF classK classL classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "", "classE classE : classD classF classK classL classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "", "classE classE : classD classF classK classL classD classF classK classL"], ["0u7"], ["10"], ["10", "10"], ["10", "10", "10"], ["10", "10", "10", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK", "classA : classB classC classD classG classH", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC None", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC None", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "1,2", "classD", "classF", "classK", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC None", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "1,2", "classD", "classF", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["9x3"], ["3"], ["3", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "2"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "2", "classK classA"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "10", "2", "classK classA"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "10", "2", ""], ["None"], ["-1"], ["-1", "classG : classF"], ["-1", "9"], ["-1", "9", "classL"], ["m1i"], ["0"], ["0", "classB : classC classE classG classH classK classL"], ["0", "5"], ["0", "5", "classK : classH classL"], ["0", "5", "classK kHg classH classL"], ["0", "classK classA", "5", "classK kHg classH classL"], ["0", "3", "5", "classK kHg classH classL"], ["0 None", "3", "5", "classK kHg classH classL"], ["8", "3", "5", "classK kHg classH classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "classA : classB classC classD classG classH"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "classK kHg classH =1", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "", "classA : classB classC classD classG classH", "", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "", "classA", ":", "classB", "classC", "classD", "classG", "classH", "", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["0,14,5,6,8", "None"], ["10", "None"], ["10", "None", "10"], ["10", "None", "10", "classG : classF"], ["10", "None", "10", "classG : classF", "classF : classK"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF", "10"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF", "10", "classD : classG classH"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "Q16", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "4", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "", "classL", "4", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "", "classL -96", "4", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "4", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", " KVH", "classL -96", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", " classF : classK", "classL -96", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", " classF : classK", "classL -96", "1", "classF rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", " classF : classK", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", " ik3", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", " ik3", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA", ":", "classB", "classC", "classD", "classG", "classH", "", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], [":"], ["7"], ["7", "10"], ["7", "10", "classK : classH classL"], ["7", "10", "classK : classH classL", "classF : classK"], ["7", "10", "classK : classH classL", "classF : classK", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA", "classK : classH classL"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA", "classK : classH classL", "classC : classE classD classH classK classL"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA", "classK : classH classL", "classC : classE classD classH classK classL", "10"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA", "classK : classH classL", "classC : classE classD classH classK classL", "10", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : classH classL", "classC : classE classD classH classK classL", "10", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : classH classL", "classC : classE classD classH classK classL", "0Go", "10", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : classH classL", "classC : classE classD classH classK classL", "4", "10", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : classH classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : Fin classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7", "YJP classA", "classK : Fin classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7 None", "YJP classA", "classK : Fin classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7 None", "classC : classE classD classH classK classL classA", "classK : Fin classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7 None", "classC : classE classD classH classK classL classA", "classK : Fin classL", "", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7 None", "classC : classE classD classH classK classL classA", "classK : Fin classL", "", "None", "4", "10"], ["vXf"], ["6"], ["6", "classA : classB classC classD classG classH"], ["6", "classA : classB classC classD classG classH", "classD : classG classH"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "4"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "4", "classK classA"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "=1", "4", "classK classA"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", "classK classA"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", "f classA"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["6 22f", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["-1", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["-1", "7", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["-1", "7", "classD : classG classH", "classD : classG classH", "classG PMp classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["-1", "7", "classD : classG classH", "classD : classG classH", "classG PMp classF", "6", "classB : classC classE classG classH classK classL", "10", "4", "7", ""]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552321017.3213024, "StartTime": 1552321006.175653}, {"EndTime": 1552321019.949695, "FinalMinimizedSolution": ["1", "10", "-1"], "FinalCoverage": [38, 26, 28, 4, 33, "4,", "6-11,", "20,", "24-42,", "3->4,", "5->6,", "17->20,", "23->24"], "FinalSolution": ["1", "10", "-1", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "", "classG : classF", "classH : Ir a PosiOP 4cion (18,17)", "classK : classH classL", "classL", "10", "classF : classK"], "StartTime": 1552321017.3242419, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "5"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "5", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["Auz", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "5", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10 None", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "5", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], [], ["5"], ["5", "classC : classE classD classH classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "None"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "2"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2 j16", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2 j16", "classE classE : classD classF classK classL classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "", "classE classE : classD classF classK classL classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "", "classE classE : classD classF classK classL classD classF classK classL"], ["0u7"], ["10"], ["10", "10"], ["10", "10", "10"], ["10", "10", "10", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK", "classA : classB classC classD classG classH", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC None", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC None", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "1,2", "classD", "classF", "classK", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC None", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "1,2", "classD", "classF", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["9x3"], ["3"], ["3", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "2"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "2", "classK classA"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "10", "2", "classK classA"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "10", "2", ""], ["None"], ["-1"], ["-1", "classG : classF"], ["-1", "9"], ["-1", "9", "classL"], ["m1i"], ["0"], ["0", "classB : classC classE classG classH classK classL"], ["0", "5"], ["0", "5", "classK : classH classL"], ["0", "5", "classK kHg classH classL"], ["0", "classK classA", "5", "classK kHg classH classL"], ["0", "3", "5", "classK kHg classH classL"], ["0 None", "3", "5", "classK kHg classH classL"], ["8", "3", "5", "classK kHg classH classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "classA : classB classC classD classG classH"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "classK kHg classH =1", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "", "classA : classB classC classD classG classH", "", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "", "classA", ":", "classB", "classC", "classD", "classG", "classH", "", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["0,14,5,6,8", "None"], ["10", "None"], ["10", "None", "10"], ["10", "None", "10", "classG : classF"], ["10", "None", "10", "classG : classF", "classF : classK"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF", "10"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF", "10", "classD : classG classH"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "Q16", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "4", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "", "classL", "4", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "", "classL -96", "4", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "4", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", " KVH", "classL -96", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", " classF : classK", "classL -96", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", " classF : classK", "classL -96", "1", "classF rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", " classF : classK", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", " ik3", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", " ik3", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA", ":", "classB", "classC", "classD", "classG", "classH", "", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], [":"], ["7"], ["7", "10"], ["7", "10", "classK : classH classL"], ["7", "10", "classK : classH classL", "classF : classK"], ["7", "10", "classK : classH classL", "classF : classK", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA", "classK : classH classL"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA", "classK : classH classL", "classC : classE classD classH classK classL"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA", "classK : classH classL", "classC : classE classD classH classK classL", "10"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA", "classK : classH classL", "classC : classE classD classH classK classL", "10", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : classH classL", "classC : classE classD classH classK classL", "10", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : classH classL", "classC : classE classD classH classK classL", "0Go", "10", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : classH classL", "classC : classE classD classH classK classL", "4", "10", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : classH classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : Fin classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7", "YJP classA", "classK : Fin classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7 None", "YJP classA", "classK : Fin classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7 None", "classC : classE classD classH classK classL classA", "classK : Fin classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7 None", "classC : classE classD classH classK classL classA", "classK : Fin classL", "", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7 None", "classC : classE classD classH classK classL classA", "classK : Fin classL", "", "None", "4", "10"], ["vXf"], ["6"], ["6", "classA : classB classC classD classG classH"], ["6", "classA : classB classC classD classG classH", "classD : classG classH"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "4"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "4", "classK classA"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "=1", "4", "classK classA"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", "classK classA"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", "f classA"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["6 22f", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["-1", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["-1", "7", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["-1", "7", "classD : classG classH", "classD : classG classH", "classG PMp classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["-1", "7", "classD : classG classH", "classD : classG classH", "classG PMp classF", "6", "classB : classC classE classG classH classK classL", "10", "4", "7", ""], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "10"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "10", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "classK : classH classL", "classL", "10", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "", "classG : classF", "classH : Ir a PosiOP 4cion (18,17)", "classK : classH classL", "classL", "10", "classF : classK"], ["10,1,2", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "", "classG : classF", "classH : Ir a PosiOP 4cion (18,17)", "classK : classH classL", "classL", "10", "classF : classK"], ["1", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "", "classG : classF", "classH : Ir a PosiOP 4cion (18,17)", "classK : classH classL", "classL", "10", "classF : classK"]]}, {"EndTime": 1552321020.834242, "FinalMinimizedSolution": ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "0"], "FinalCoverage": [38, 19, 28, 3, 48, "4,", "24-42,", "3->4,", "8->5,", "23->24"], "FinalSolution": ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "0"], "StartTime": 1552321019.9529045, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "5"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "5", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["Auz", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "10 : classF", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "5", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], ["7", "10 None", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "5", "classH : classL", "0.1 4 2 : classH classL", "classL", "5", "classL"], [], ["5"], ["5", "classC : classE classD classH classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "None"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "2"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2 j16", "classE : classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "2 j16", "classE classE : classD classF classK classL classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "", "classE classE : classD classF classK classL classD classF classK classL"], ["5", "classC : classE classD classH : classL", "classE : classD classF classK classL", "", "classE", ":", "classD", "classF", "classK", "classL", "classE : classD classF classK classL", "", "classE classE : classD classF classK classL classD classF classK classL"], ["0u7"], ["10"], ["10", "10"], ["10", "10", "10"], ["10", "10", "10", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK", "classA : classB classC classD classG classH"], ["10", "10", "10", "classA : classB classC classD classG classH", "classL", "10", "classL", "classB : classC classE classG classH classK classL", "classA : classB classC classD classG classH", "classF : classK", "classA : classB classC classD classG classH", "classL"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC None", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "classD", "classF", "classK", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC None", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "1,2", "classD", "classF", "classK", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["10", "classA : classB classC classD classG classH", "classB", ":", "classC None", "classE", "classG", "classH", "classK", "classL", "classC : classE classD classH classK classL", "classE", ":", "1,2", "classD", "classF", "classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL None", "1", "classL"], ["9x3"], ["3"], ["3", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "2"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "2", "classK classA"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "10", "2", "classK classA"], ["3", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "classC : classE classD classH classK classL", "10", "2", ""], ["None"], ["-1"], ["-1", "classG : classF"], ["-1", "9"], ["-1", "9", "classL"], ["m1i"], ["0"], ["0", "classB : classC classE classG classH classK classL"], ["0", "5"], ["0", "5", "classK : classH classL"], ["0", "5", "classK kHg classH classL"], ["0", "classK classA", "5", "classK kHg classH classL"], ["0", "3", "5", "classK kHg classH classL"], ["0 None", "3", "5", "classK kHg classH classL"], ["8", "3", "5", "classK kHg classH classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "classA : classB classC classD classG classH"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2"], ["8", "3", "5", "classK kHg classH classL", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "classK kHg classH =1", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "", "classA : classB classC classD classG classH", "classH : classL", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "", "classA : classB classC classD classG classH", "", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["8", "3", "5", "", "classA", ":", "classB", "classC", "classD", "classG", "classH", "", "classL", "classK kHg classH classL", "5", "2", "classK classA"], ["0,14,5,6,8", "None"], ["10", "None"], ["10", "None", "10"], ["10", "None", "10", "classG : classF"], ["10", "None", "10", "classG : classF", "classF : classK"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF", "10"], ["10", "None", "10", "classG : classF", "classF : classK", "classK classA", "classG : classF", "10", "classL", "classG : classF", "10", "classD : classG classH"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "Q16", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "4", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "", "classL", "4", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "", "classL -96", "4", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "4", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", " KVH", "classL -96", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", " classF : classK", "classL -96", "1", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", " classF : classK", "classL -96", "1", "classF rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", " classF : classK", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", " ik3", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", " ik3", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA : classB classC classD classG classH", "", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], ["10", "classA", ":", "classB", "classC", "classD", "classG", "classH", "", "classC : classE classD classH classK classL", "classE : 1 =1 classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "", "classL -96", "1", "12 9 8 rose is  a beautiful flower classK"], [":"], ["7"], ["7", "10"], ["7", "10", "classK : classH classL"], ["7", "10", "classK : classH classL", "classF : classK"], ["7", "10", "classK : classH classL", "classF : classK", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA", "classK : classH classL"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA", "classK : classH classL", "classC : classE classD classH classK classL"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA", "classK : classH classL", "classC : classE classD classH classK classL", "10"], ["7", "10", "classK : classH classL", "classF : classK", "7", "classK classA", "classK : classH classL", "classC : classE classD classH classK classL", "10", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : classH classL", "classC : classE classD classH classK classL", "10", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : classH classL", "classC : classE classD classH classK classL", "0Go", "10", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : classH classL", "classC : classE classD classH classK classL", "4", "10", "7"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : classH classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classK : classH classL", "classF : classK", "7", "YJP classA", "classK : Fin classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7", "YJP classA", "classK : Fin classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7 None", "YJP classA", "classK : Fin classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7 None", "classC : classE classD classH classK classL classA", "classK : Fin classL", "classC : classE classD classH classK classL", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7 None", "classC : classE classD classH classK classL classA", "classK : Fin classL", "", "4", "10"], ["7", "10", "classC : classE classD classH classK classL : classH classL", "classF : classK", "7 None", "classC : classE classD classH classK classL classA", "classK : Fin classL", "", "None", "4", "10"], ["vXf"], ["6"], ["6", "classA : classB classC classD classG classH"], ["6", "classA : classB classC classD classG classH", "classD : classG classH"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "4"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "4", "classK classA"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "=1", "4", "classK classA"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", "classK classA"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", "f classA"], ["6", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["6 22f", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["-1", "classA : classB classC classD classG classH", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["-1", "7", "classD : classG classH", "classD : classG classH", "classG : classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["-1", "7", "classD : classG classH", "classD : classG classH", "classG PMp classF", "6", "classB : classC classE classG classH classK classL", "10", "4", ""], ["-1", "7", "classD : classG classH", "classD : classG classH", "classG PMp classF", "6", "classB : classC classE classG classH classK classL", "10", "4", "7", ""], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "10"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "10", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "", "classG : classF", "classH : classL", "classK : classH classL", "classL", "10", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "", "classG : classF", "classH : Ir a PosiOP 4cion (18,17)", "classK : classH classL", "classL", "10", "classF : classK"], ["10,1,2", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "", "classG : classF", "classH : Ir a PosiOP 4cion (18,17)", "classK : classH classL", "classL", "10", "classF : classK"], ["1", "10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "", "classG : classF", "classH : Ir a PosiOP 4cion (18,17)", "classK : classH classL", "classL", "10", "classF : classK"], ["10", "classA : classB classC classD classG classH", "classB : classC classE classG classH classK classL", "classC : classE classD classH classK classL", "classE : classD classF classK classL", "classD : classG classH", "classF : classK", "classG : classF", "classH : classL", "classK : classH classL", "classL", "classK classA"]]}]], [{"CorrectInputs": [[["2", "7", "8.0 4.0 2.0 9.0 7.0 10.0 6.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], 1536138345]], "UniqueId": "c4d4a216-93ee-4563-c115-d63ba7ffd2ae_0", "CoverageInfo": [20, 14, 8, 0, 21, "2-12,", "15-16,", "20"], "TimeStamp": 1536138301, "BadInput": ["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 21, in <module>\n    m=le_matriz()\n  File \"temp2018.py\", line 19, in le_matriz\n    col = int(input(\"Digite o n\u00famero de colunas da matriz: \"))\nValueError: invalid literal for int() with base 10: '3.4 9.7 2.0 3.0 4.0 5.0 8.0'\n", "ip": "107.167.106.20"}, [{"EndTime": 1552345798.627636, "FinalMinimizedSolution": ["0", "0"], "FinalCoverage": [20, 9, 8, 2, 46, "4,", "6-11,", "15-16,", "3->4,", "5->6"], "FinalSolution": ["0", "0"], "StartTime": 1552345796.6243012, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2"], ["2", "2", "pcc"], ["2", "2", "-1.1"], ["2", "2", "-1.1", "-1.1"], [], ["0"]]}, {"EndTime": 1552345801.3917634, "FinalMinimizedSolution": ["2", "2", "2 4.8", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], "FinalCoverage": [20, 0, 8, 0, 100], "FinalSolution": ["2", "2", "2 4.8", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], "StartTime": 1552345798.6278646, "FoundSolution": true, "NumProbesMade": 11, "InputHistory": [["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2"], ["2", "2", "pcc"], ["2", "2", "-1.1"], ["2", "2", "-1.1", "-1.1"], [], ["0"], ["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "tuM", "2"], ["2", "6", "2"], ["2", "6", "2", "2"], ["2", "2", "6", "2", "2"], ["2", "2", "2", "2"], ["2", "2", "2"], ["2", "2", "2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2", "2", "2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2", "2", "2 72t", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2", "2", "2 4.8", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"]]}, {"EndTime": 1552345803.966424, "FinalMinimizedSolution": ["1", "2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], "FinalCoverage": [20, 0, 8, 0, 100], "FinalSolution": ["1", "2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], "StartTime": 1552345801.3921278, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2"], ["2", "2", "pcc"], ["2", "2", "-1.1"], ["2", "2", "-1.1", "-1.1"], [], ["0"], ["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "tuM", "2"], ["2", "6", "2"], ["2", "6", "2", "2"], ["2", "2", "6", "2", "2"], ["2", "2", "2", "2"], ["2", "2", "2"], ["2", "2", "2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2", "2", "2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2", "2", "2 72t", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2", "2", "2 4.8", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "7"], ["2", "7", "ZuU"], ["2", "7", "10.4"], ["2", "7", "10.4", "7"], ["uH6"], ["2"], ["otL"], ["1"], ["1", "2"]]}, {"EndTime": 1552345805.2140026, "FinalMinimizedSolution": ["2", "1", "2", "2"], "FinalCoverage": [20, 0, 8, 0, 100], "FinalSolution": ["2", "1", "2", "2"], "StartTime": 1552345803.9668713, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2"], ["2", "2", "pcc"], ["2", "2", "-1.1"], ["2", "2", "-1.1", "-1.1"], [], ["0"], ["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "tuM", "2"], ["2", "6", "2"], ["2", "6", "2", "2"], ["2", "2", "6", "2", "2"], ["2", "2", "2", "2"], ["2", "2", "2"], ["2", "2", "2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2", "2", "2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2", "2", "2 72t", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2", "2", "2 4.8", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "7"], ["2", "7", "ZuU"], ["2", "7", "10.4"], ["2", "7", "10.4", "7"], ["uH6"], ["2"], ["otL"], ["1"], ["1", "2"], ["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "1"], ["2", "1", "2"]]}, {"EndTime": 1552345813.6581137, "FinalMinimizedSolution": ["10", "-1", "8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0", "8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0"], "FinalCoverage": [20, 1, 8, 1, 93, "8,", "7->8"], "FinalSolution": ["10", "-1", "8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0", "8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0"], "StartTime": 1552345805.2144654, "FoundSolution": true, "NumProbesMade": 41, "InputHistory": [["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2"], ["2", "2", "pcc"], ["2", "2", "-1.1"], ["2", "2", "-1.1", "-1.1"], [], ["0"], ["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "tuM", "2"], ["2", "6", "2"], ["2", "6", "2", "2"], ["2", "2", "6", "2", "2"], ["2", "2", "2", "2"], ["2", "2", "2"], ["2", "2", "2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2", "2", "2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2", "2", "2 72t", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "2", "2", "2 4.8", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "7"], ["2", "7", "ZuU"], ["2", "7", "10.4"], ["2", "7", "10.4", "7"], ["uH6"], ["2"], ["otL"], ["1"], ["1", "2"], ["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "1"], ["2", "1", "2"], ["2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["2", "4"], ["2", "4", "4"], ["2", "4", "4", "2"], ["4", "4", "2"], ["4", "4", "2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["4", "4", "2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "182"], ["4", "4", "2", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "182", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["4", "4", "2", "3.4 9.7 2.0 3.0 4.0 DVT 8.0", "182", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["4", "4", "2", "3.4 9.7 2.0 3.0 4.0 3.4 8.0", "182", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["4", "4", "2", "3.4 9.7 2.0 3.0 4.0 3.4 8.0", "5 2 4", "182", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["FhR"], ["7D3"], ["4"], ["4", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["4", "5"], ["4", "5", "VEq"], ["4", "5", "6.0"], ["4", "5", "6.0", "2"], ["4", "5", "6.0", "2", "2"], ["4", "5", "6.0", "2", "2", "ClV"], ["4", "5", "6.0", "2", "2", "6.4"], ["4", "5", "6.0", "2", "2", "2", "6.4"], ["4", "5", "6.0", "2", "2 18I", "2", "6.4"], ["4", "5", "6.0", "2", "2 9.7", "2", "6.4"], ["4", "5", "6.0", "2", "2 9.7", "2", "dafsnnnjk", "6.4"], ["4", "5", "6.0", "2", "2 9.7", "2", "dafsnnnjk", "0.5", "6.4"], ["F85"], ["10"], ["10", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["10", "-1"], ["10", "-1", "Li-"], ["10", "-1", "8.0"], ["10", "-1", "8.0", "8.0"], ["10", "-1", "8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["10", "-1", "8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0"], ["10", "-1", "8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"], ["10", "-1", "8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0"], ["10", "-1", "8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0", "8.0"], ["10", "-1", "8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0", "8.0", "8.0"], ["10", "-1", "8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0", "8.0", "8.0", "8.0", "3.4 9.7 2.0 3.0 4.0 5.0 8.0"]]}]], [{"CorrectInputs": [[["5", "4", "-"], 1536718690]], "UniqueId": "9463f351-5b77-4534-ae69-d8a63a59d111_0", "CoverageInfo": [10, 9, 6, 0, 6, "2-11"], "TimeStamp": 1536718657, "BadInput": ["a"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    a = int(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e a: '))\nValueError: invalid literal for int() with base 10: 'a'\n", "ip": "95.25.67.43"}, [{"EndTime": 1552416375.1155987, "FinalMinimizedSolution": ["4", "3", "4", "-"], "FinalCoverage": [10, 2, 6, 1, 69, "10-11,", "8->10"], "FinalSolution": ["4", "3", "4", "-"], "StartTime": 1552416373.498408, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["a"], ["4"], ["4", "zVY"], ["4", "3"], ["4", "3", "4"]]}, {"InputHistory": [["a"], ["4"], ["4", "zVY"], ["4", "3"], ["4", "3", "4"], ["a"], ["7"], ["7", "-"], ["7", "7"], ["7", "7", "7"], ["7", "7", "7", "a"], ["7", "7", "7", "a", "7"], ["7", "7", "7", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a", "7", "a", "c7z"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552416385.4019403, "StartTime": 1552416375.1158307}, {"EndTime": 1552416387.213363, "FinalMinimizedSolution": ["2", "2", "0FW", "0FW", "2", "-"], "FinalCoverage": [10, 2, 6, 1, 69, "10-11,", "8->10"], "FinalSolution": ["2", "2", "0FW", "0FW", "2", "-"], "StartTime": 1552416385.4052057, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["a"], ["4"], ["4", "zVY"], ["4", "3"], ["4", "3", "4"], ["a"], ["7"], ["7", "-"], ["7", "7"], ["7", "7", "7"], ["7", "7", "7", "a"], ["7", "7", "7", "a", "7"], ["7", "7", "7", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a", "7", "a", "c7z"], ["a"], ["2"], ["2", "2"], ["2", "2", "0FW"], ["2", "2", "0FW", "0FW"], ["2", "2", "0FW", "0FW", "2"]]}, {"EndTime": 1552416389.294233, "FinalMinimizedSolution": ["5", "5", "a", "a", "5", "a", "-"], "FinalCoverage": [10, 2, 6, 1, 69, "10-11,", "8->10"], "FinalSolution": ["5", "5", "a", "a", "5", "a", "-"], "StartTime": 1552416387.2167523, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["a"], ["4"], ["4", "zVY"], ["4", "3"], ["4", "3", "4"], ["a"], ["7"], ["7", "-"], ["7", "7"], ["7", "7", "7"], ["7", "7", "7", "a"], ["7", "7", "7", "a", "7"], ["7", "7", "7", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a", "7", "a", "c7z"], ["a"], ["2"], ["2", "2"], ["2", "2", "0FW"], ["2", "2", "0FW", "0FW"], ["2", "2", "0FW", "0FW", "2"], ["a"], ["5"], ["5", "rhU"], ["5", "5"], ["5", "5", "a"], ["5", "5", "a", "a"], ["5", "5", "a", "a", "5"], ["5", "5", "a", "a", "5", "a"]]}, {"EndTime": 1552416391.4506276, "FinalMinimizedSolution": ["0", "4", "a", "4", "4", "4", "-"], "FinalCoverage": [10, 2, 6, 1, 69, "10-11,", "8->10"], "FinalSolution": ["0", "4", "a", "4", "4", "4", "-"], "StartTime": 1552416389.2977285, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["a"], ["4"], ["4", "zVY"], ["4", "3"], ["4", "3", "4"], ["a"], ["7"], ["7", "-"], ["7", "7"], ["7", "7", "7"], ["7", "7", "7", "a"], ["7", "7", "7", "a", "7"], ["7", "7", "7", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a", "7"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a", "7", "a"], ["7", "7", "7", "a", "7", "a", "a", "6Q-", "7", "a", "6Q-", "7", "6Q-", "a", "a", "c7z", "7", "a", "XqV", "a", "c7z", "a", "XqV", "a", "7", "XqV", "a", "a", "XqV", "7", "6Q-", "XqV", "XqV", "7", "a", "XqV", "a", "a", "XqV", "7", "6Q-", "a", "a", "a", "XqV", "XqV", "XqV", "7", "a", "a", "a", "7", "a", "7", "a", "7", "a", "c7z"], ["a"], ["2"], ["2", "2"], ["2", "2", "0FW"], ["2", "2", "0FW", "0FW"], ["2", "2", "0FW", "0FW", "2"], ["a"], ["5"], ["5", "rhU"], ["5", "5"], ["5", "5", "a"], ["5", "5", "a", "a"], ["5", "5", "a", "a", "5"], ["5", "5", "a", "a", "5", "a"], ["a"], ["0"], ["0", "a"], ["0", "4"], ["0", "4", "a"], ["0", "4", "a", "4"], ["0", "4", "a", "4", "4"], ["0", "4", "a", "4", "4", "4"]]}]], [{"CorrectInputs": [[["25 50", "4"], 1521139943]], "UniqueId": "41ad57d3-5531-4699-e893-43e155b042e5_0", "CoverageInfo": [5, 4, 0, 0, 20, "2-5"], "TimeStamp": 1521139852, "BadInput": ["25"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    a, b = map(int, input().split())\nValueError: not enough values to unpack (expected 2, got 1)\n", "ip": "193.169.4.21"}, [{"EndTime": 1552358420.6679938, "FinalMinimizedSolution": ["25 25", "C2R"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["25 25", "C2R"], "StartTime": 1552358419.6116738, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["25"], ["25 25"]]}, {"EndTime": 1552358421.728687, "FinalMinimizedSolution": ["25 54321", "od9"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["25 54321", "od9"], "StartTime": 1552358420.6681714, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["25"], ["25 25"], ["25"], ["25 54321"]]}, {"EndTime": 1552358425.8086925, "FinalMinimizedSolution": ["8 8", "25"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["8 8", "25"], "StartTime": 1552358421.7288792, "FoundSolution": true, "NumProbesMade": 18, "InputHistory": [["25"], ["25 25"], ["25"], ["25 54321"], ["25"], ["25", "25"], ["25", "25 25"], ["25", "25 25 25"], ["25", "25 25 25 25"], ["25", "25 25 25 25 25"], ["25", "25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25 25 25 25 25"], [], ["pyC q70 q70"], ["8 q70 q70"], ["8 q70 3"], ["8 8 3"], ["8 8"]]}, {"EndTime": 1552358427.051541, "FinalMinimizedSolution": ["25 4", "25"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["25 4", "25"], "StartTime": 1552358425.809023, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["25"], ["25 25"], ["25"], ["25 54321"], ["25"], ["25", "25"], ["25", "25 25"], ["25", "25 25 25"], ["25", "25 25 25 25"], ["25", "25 25 25 25 25"], ["25", "25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25 25 25 25 25"], [], ["pyC q70 q70"], ["8 q70 q70"], ["8 q70 3"], ["8 8 3"], ["8 8"], ["25"], ["25 25 25"], ["25 4"]]}, {"EndTime": 1552358428.4792337, "FinalMinimizedSolution": ["1 1", "1 1"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["1 1", "1 1"], "StartTime": 1552358427.0518801, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["25"], ["25 25"], ["25"], ["25 54321"], ["25"], ["25", "25"], ["25", "25 25"], ["25", "25 25 25"], ["25", "25 25 25 25"], ["25", "25 25 25 25 25"], ["25", "25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25 25 25 25"], ["25", "25 25 25 25 25 25 25 25 25 25 25"], [], ["pyC q70 q70"], ["8 q70 q70"], ["8 q70 3"], ["8 8 3"], ["8 8"], ["25"], ["25 25 25"], ["25 4"], ["25"], ["8zv"], ["1"], ["1 1"]]}]], [{"CorrectInputs": [[["500", "7", "11", "1", "0"], 1526885951]], "UniqueId": "37bbd868-9778-4a2f-995b-79e74e9bc35a_0", "CoverageInfo": [12, 9, 8, 1, 20, "4-16,", "2->exit"], "TimeStamp": 1526884743, "BadInput": ["hello"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 3, in <module>\n    entrada = int(input())\nValueError: invalid literal for int() with base 10: 'hello'\n", "ip": "177.155.32.212"}, [{"InputHistory": [["hello"], ["8"], ["8", "hello"], ["8", "2"], ["8", "2", "cny"], ["8", "2", "10"], ["8", "2", "10", "59c"], ["8", "2", "10", "10"], ["8", "2", "10", "10", "10"], ["8", "2", "10", "10", "10", "10"], ["8", "2", "10", "10", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "Wab"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "DpR"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "7xx"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10", "8", "8"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552367626.2760715, "StartTime": 1552367614.9216845}, {"InputHistory": [["hello"], ["8"], ["8", "hello"], ["8", "2"], ["8", "2", "cny"], ["8", "2", "10"], ["8", "2", "10", "59c"], ["8", "2", "10", "10"], ["8", "2", "10", "10", "10"], ["8", "2", "10", "10", "10", "10"], ["8", "2", "10", "10", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "Wab"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "DpR"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "7xx"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10", "8", "8"], ["hello"], ["6"], ["6", "oi8"], ["6", "8"], ["6", "8", "8"], ["6", "8", "8", "8"], ["6", "8", "8", "8", "Hoe"], ["6", "8", "8", "8", "2"], ["6", "8", "8", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "zz7"], ["6", "8", "8", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "hello"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "oQk"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8", "2", "2", "6"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552367637.3125987, "StartTime": 1552367626.27885}, {"InputHistory": [["hello"], ["8"], ["8", "hello"], ["8", "2"], ["8", "2", "cny"], ["8", "2", "10"], ["8", "2", "10", "59c"], ["8", "2", "10", "10"], ["8", "2", "10", "10", "10"], ["8", "2", "10", "10", "10", "10"], ["8", "2", "10", "10", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "Wab"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "DpR"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "7xx"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10", "8", "8"], ["hello"], ["6"], ["6", "oi8"], ["6", "8"], ["6", "8", "8"], ["6", "8", "8", "8"], ["6", "8", "8", "8", "Hoe"], ["6", "8", "8", "8", "2"], ["6", "8", "8", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "zz7"], ["6", "8", "8", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "hello"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "oQk"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8", "2", "2", "6"], ["hello"], ["4"], ["4", "RU3"], ["4", "8"], ["4", "8", "hello"], ["4", "8", "4"], ["4", "8", "4", "4"], ["4", "8", "4", "4", "hello"], ["4", "8", "4", "4", "9"], ["4", "8", "4", "4", "9", "hello"], ["4", "8", "4", "4", "9", "2"], ["4", "8", "4", "4", "9", "2", "hello"], ["4", "8", "4", "4", "9", "2", "3"], ["4", "8", "4", "4", "9", "2", "3", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "7B9"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "hello"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "sRh"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "hello"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4", "8"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4", "8", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4", "8", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4", "8", "4", "6", "3"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552367648.328256, "StartTime": 1552367637.318129}, {"InputHistory": [["hello"], ["8"], ["8", "hello"], ["8", "2"], ["8", "2", "cny"], ["8", "2", "10"], ["8", "2", "10", "59c"], ["8", "2", "10", "10"], ["8", "2", "10", "10", "10"], ["8", "2", "10", "10", "10", "10"], ["8", "2", "10", "10", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "Wab"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "DpR"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "7xx"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10", "8", "8"], ["hello"], ["6"], ["6", "oi8"], ["6", "8"], ["6", "8", "8"], ["6", "8", "8", "8"], ["6", "8", "8", "8", "Hoe"], ["6", "8", "8", "8", "2"], ["6", "8", "8", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "zz7"], ["6", "8", "8", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "hello"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "oQk"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8", "2", "2", "6"], ["hello"], ["4"], ["4", "RU3"], ["4", "8"], ["4", "8", "hello"], ["4", "8", "4"], ["4", "8", "4", "4"], ["4", "8", "4", "4", "hello"], ["4", "8", "4", "4", "9"], ["4", "8", "4", "4", "9", "hello"], ["4", "8", "4", "4", "9", "2"], ["4", "8", "4", "4", "9", "2", "hello"], ["4", "8", "4", "4", "9", "2", "3"], ["4", "8", "4", "4", "9", "2", "3", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "7B9"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "hello"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "sRh"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "hello"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4", "8"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4", "8", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4", "8", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4", "8", "4", "6", "3"], ["hello"], ["-1"], ["-1", "-1"], ["-1", "-1", "31c"], ["-1", "-1", "2"], ["-1", "-1", "2", "hello"], ["-1", "-1", "2", "9"], ["-1", "-1", "2", "9", "2"], ["-1", "-1", "2", "9", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "t9U"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "hello"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "hello"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "Fyf"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1", "2", "-1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1", "2", "-1", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1", "2", "-1", "-1", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1", "2", "-1", "-1", "2", "2", "-1"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552367659.3579047, "StartTime": 1552367648.336302}, {"EndTime": 1552367660.4211757, "FinalMinimizedSolution": ["0"], "FinalCoverage": [12, 6, 8, 3, 45, "5-10,", "16,", "2->exit,", "4->5,", "11->16"], "FinalSolution": ["0"], "StartTime": 1552367659.3690674, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["hello"], ["8"], ["8", "hello"], ["8", "2"], ["8", "2", "cny"], ["8", "2", "10"], ["8", "2", "10", "59c"], ["8", "2", "10", "10"], ["8", "2", "10", "10", "10"], ["8", "2", "10", "10", "10", "10"], ["8", "2", "10", "10", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "Wab"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "DpR"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "7xx"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "hello"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10", "8"], ["8", "2", "10", "10", "10", "10", "2", "10", "10", "2", "2", "10", "2", "10", "2", "10", "5", "10", "10", "10", "2", "2", "1", "8", "2", "2", "2", "10", "2", "2", "2", "8", "8", "10", "10", "2", "2", "2", "8", "10", "2", "7", "7", "8", "2", "9", "10", "10", "8", "8"], ["hello"], ["6"], ["6", "oi8"], ["6", "8"], ["6", "8", "8"], ["6", "8", "8", "8"], ["6", "8", "8", "8", "Hoe"], ["6", "8", "8", "8", "2"], ["6", "8", "8", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "zz7"], ["6", "8", "8", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "hello"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "oQk"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8", "2", "2"], ["6", "8", "8", "8", "2", "8", "2", "8", "2", "2", "8", "2", "8", "2", "2", "2", "6", "2", "8", "8", "8", "2", "8", "2", "8", "8", "8", "6", "2", "2", "2", "2", "2", "8", "8", "3", "2", "2", "8", "2", "2", "2", "8", "2", "2", "2", "2", "2", "2", "8", "8", "2", "2", "6"], ["hello"], ["4"], ["4", "RU3"], ["4", "8"], ["4", "8", "hello"], ["4", "8", "4"], ["4", "8", "4", "4"], ["4", "8", "4", "4", "hello"], ["4", "8", "4", "4", "9"], ["4", "8", "4", "4", "9", "hello"], ["4", "8", "4", "4", "9", "2"], ["4", "8", "4", "4", "9", "2", "hello"], ["4", "8", "4", "4", "9", "2", "3"], ["4", "8", "4", "4", "9", "2", "3", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "7B9"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "hello"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "sRh"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "hello"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4", "8"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4", "8", "4"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4", "8", "4", "6"], ["4", "8", "4", "4", "9", "2", "3", "4", "4", "2", "4", "6", "4", "4", "4", "4", "4", "4", "4", "3", "3", "9", "4", "6", "8", "4", "4", "4", "2", "4", "6", "4", "4", "4", "6", "8", "3", "8", "3", "6", "2", "6", "6", "4", "4", "4", "8", "4", "6", "3"], ["hello"], ["-1"], ["-1", "-1"], ["-1", "-1", "31c"], ["-1", "-1", "2"], ["-1", "-1", "2", "hello"], ["-1", "-1", "2", "9"], ["-1", "-1", "2", "9", "2"], ["-1", "-1", "2", "9", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "t9U"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "hello"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "hello"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "Fyf"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1", "2", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1", "2", "-1", "-1"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1", "2", "-1", "-1", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1", "2", "-1", "-1", "2", "2"], ["-1", "-1", "2", "9", "2", "-1", "-1", "9", "2", "2", "9", "2", "-1", "2", "3", "-1", "2", "2", "-1", "2", "-1", "2", "-1", "4", "1", "-1", "2", "2", "2", "2", "1", "2", "2", "-1", "-1", "3", "-1", "-1", "2", "2", "-1", "-1", "2", "-1", "2", "-1", "-1", "2", "-1", "-1", "2", "2", "-1"], ["hello"], ["4 GcN"]]}]], [{"CorrectInputs": [[["1", "4", "4"], 1538605393]], "UniqueId": "d2db681a-7384-4b3b-d158-89528797342b_0", "CoverageInfo": [13, 2, 4, 2, 76, "6,", "10,", "5->6,", "7->10"], "TimeStamp": 1538605373, "BadInput": ["1", "2", "4"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 15, in <module>\n    print(rac_eq_2nd_deg(a, b, c))\n  File \"temp2018.py\", line 8, in rac_eq_2nd_deg\n    return (min(r1,r2), max(r1,r2))\nTypeError: unorderable types: complex() < complex()\n", "ip": "164.15.244.57"}, [{"EndTime": 1552279048.5592391, "FinalMinimizedSolution": ["1", "4", "2"], "FinalCoverage": [13, 2, 4, 2, 76, "6,", "10,", "5->6,", "7->10"], "FinalSolution": ["1", "4", "2"], "StartTime": 1552279041.991642, "FoundSolution": true, "NumProbesMade": 32, "InputHistory": [["1", "2", "4"], ["1", "2", "1,2,3", "4"], ["1", "2", "7", "4"], [], ["9"], ["9", "9"], ["9", "9", "9"], ["9", "cQr", "9"], ["9", "0", "9"], ["9", "0"], ["9", "0", "1"], ["V8e"], ["Ug6"], ["10"], ["10", "2"], ["10", "2", "10"], ["8p4"], ["0"], ["0", "2"], ["0", "2", "0"], ["0", "4", "2", "0"], ["0", "4", "2"], ["0", "4 jau", "2"], ["0", "1", "2"], ["2"], ["2", "1"], ["2", "1", "1"], ["1", "1"], ["1", "1", "1"], ["I8w"], ["1"], ["1", "4"]]}, {"EndTime": 1552279049.4834156, "FinalMinimizedSolution": ["1", "4213", "2"], "FinalCoverage": [13, 2, 4, 2, 76, "6,", "10,", "5->6,", "7->10"], "FinalSolution": ["1", "4213", "2", "4"], "StartTime": 1552279048.5596895, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1", "2", "4"], ["1", "2", "1,2,3", "4"], ["1", "2", "7", "4"], [], ["9"], ["9", "9"], ["9", "9", "9"], ["9", "cQr", "9"], ["9", "0", "9"], ["9", "0"], ["9", "0", "1"], ["V8e"], ["Ug6"], ["10"], ["10", "2"], ["10", "2", "10"], ["8p4"], ["0"], ["0", "2"], ["0", "2", "0"], ["0", "4", "2", "0"], ["0", "4", "2"], ["0", "4 jau", "2"], ["0", "1", "2"], ["2"], ["2", "1"], ["2", "1", "1"], ["1", "1"], ["1", "1", "1"], ["I8w"], ["1"], ["1", "4"], ["1", "2", "4"]]}, {"EndTime": 1552279055.6062691, "FinalMinimizedSolution": ["4", "5", "1"], "FinalCoverage": [13, 2, 4, 2, 76, "6,", "10,", "5->6,", "7->10"], "FinalSolution": ["4", "5", "1", "4", "4", "1"], "StartTime": 1552279049.483874, "FoundSolution": true, "NumProbesMade": 28, "InputHistory": [["1", "2", "4"], ["1", "2", "1,2,3", "4"], ["1", "2", "7", "4"], [], ["9"], ["9", "9"], ["9", "9", "9"], ["9", "cQr", "9"], ["9", "0", "9"], ["9", "0"], ["9", "0", "1"], ["V8e"], ["Ug6"], ["10"], ["10", "2"], ["10", "2", "10"], ["8p4"], ["0"], ["0", "2"], ["0", "2", "0"], ["0", "4", "2", "0"], ["0", "4", "2"], ["0", "4 jau", "2"], ["0", "1", "2"], ["2"], ["2", "1"], ["2", "1", "1"], ["1", "1"], ["1", "1", "1"], ["I8w"], ["1"], ["1", "4"], ["1", "2", "4"], ["1", "2", "4"], ["500", "1", "2", "4"], ["500", "1 6C1", "2", "4"], ["500", "-1", "2", "4"], ["D0P"], ["0 33R"], ["2 11", "0"], ["10", "0"], ["10", "0", "1"], ["10", "0", "4", "1"], ["P-x"], ["4"], ["4", "1"], ["4", "1", "1"], ["4", "0", "1", "1"], ["4", "1", "\u0441\u044b\u043d", "1"], ["4", "1", "8", "1"], ["Chw"], ["10 3w8"], ["5"], ["5", "4"], ["5", "4", "1"], ["5", "7Xc", "4", "1"], ["5", "2", "4", "1"], ["5", "2", "4", "4", "1"], ["5", "5", "2", "4", "4", "1"], ["5", "2 Svg", "4", "4", "1"], ["5", "1", "4", "4", "1"]]}, {"EndTime": 1552279057.9822707, "FinalMinimizedSolution": ["2", "4", "1"], "FinalCoverage": [13, 2, 4, 2, 76, "6,", "10,", "5->6,", "7->10"], "FinalSolution": ["2", "4", "1"], "StartTime": 1552279055.606979, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["1", "2", "4"], ["1", "2", "1,2,3", "4"], ["1", "2", "7", "4"], [], ["9"], ["9", "9"], ["9", "9", "9"], ["9", "cQr", "9"], ["9", "0", "9"], ["9", "0"], ["9", "0", "1"], ["V8e"], ["Ug6"], ["10"], ["10", "2"], ["10", "2", "10"], ["8p4"], ["0"], ["0", "2"], ["0", "2", "0"], ["0", "4", "2", "0"], ["0", "4", "2"], ["0", "4 jau", "2"], ["0", "1", "2"], ["2"], ["2", "1"], ["2", "1", "1"], ["1", "1"], ["1", "1", "1"], ["I8w"], ["1"], ["1", "4"], ["1", "2", "4"], ["1", "2", "4"], ["500", "1", "2", "4"], ["500", "1 6C1", "2", "4"], ["500", "-1", "2", "4"], ["D0P"], ["0 33R"], ["2 11", "0"], ["10", "0"], ["10", "0", "1"], ["10", "0", "4", "1"], ["P-x"], ["4"], ["4", "1"], ["4", "1", "1"], ["4", "0", "1", "1"], ["4", "1", "\u0441\u044b\u043d", "1"], ["4", "1", "8", "1"], ["Chw"], ["10 3w8"], ["5"], ["5", "4"], ["5", "4", "1"], ["5", "7Xc", "4", "1"], ["5", "2", "4", "1"], ["5", "2", "4", "4", "1"], ["5", "5", "2", "4", "4", "1"], ["5", "2 Svg", "4", "4", "1"], ["5", "1", "4", "4", "1"], ["1", "2", "4"], ["1", "2", "4", "4"], ["1", "2", "4", "ubS", "4"], ["1", "2", "4", "ubS", "4 dkk"], ["2", "4", "ubS", "4 dkk"], ["2", "4", "7", "4 dkk"], ["-N1"], ["5 7JH"], ["2", "4"]]}, {"EndTime": 1552279059.1427774, "FinalMinimizedSolution": ["1", "2", "1"], "FinalCoverage": [13, 3, 4, 1, 65, "7-10,", "5->7"], "FinalSolution": ["1", "2", "1", "4", "4"], "StartTime": 1552279057.9830647, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "2", "4"], ["1", "2", "1,2,3", "4"], ["1", "2", "7", "4"], [], ["9"], ["9", "9"], ["9", "9", "9"], ["9", "cQr", "9"], ["9", "0", "9"], ["9", "0"], ["9", "0", "1"], ["V8e"], ["Ug6"], ["10"], ["10", "2"], ["10", "2", "10"], ["8p4"], ["0"], ["0", "2"], ["0", "2", "0"], ["0", "4", "2", "0"], ["0", "4", "2"], ["0", "4 jau", "2"], ["0", "1", "2"], ["2"], ["2", "1"], ["2", "1", "1"], ["1", "1"], ["1", "1", "1"], ["I8w"], ["1"], ["1", "4"], ["1", "2", "4"], ["1", "2", "4"], ["500", "1", "2", "4"], ["500", "1 6C1", "2", "4"], ["500", "-1", "2", "4"], ["D0P"], ["0 33R"], ["2 11", "0"], ["10", "0"], ["10", "0", "1"], ["10", "0", "4", "1"], ["P-x"], ["4"], ["4", "1"], ["4", "1", "1"], ["4", "0", "1", "1"], ["4", "1", "\u0441\u044b\u043d", "1"], ["4", "1", "8", "1"], ["Chw"], ["10 3w8"], ["5"], ["5", "4"], ["5", "4", "1"], ["5", "7Xc", "4", "1"], ["5", "2", "4", "1"], ["5", "2", "4", "4", "1"], ["5", "5", "2", "4", "4", "1"], ["5", "2 Svg", "4", "4", "1"], ["5", "1", "4", "4", "1"], ["1", "2", "4"], ["1", "2", "4", "4"], ["1", "2", "4", "ubS", "4"], ["1", "2", "4", "ubS", "4 dkk"], ["2", "4", "ubS", "4 dkk"], ["2", "4", "7", "4 dkk"], ["-N1"], ["5 7JH"], ["2", "4"], ["1", "2", "4"], ["1", "2", "Rq4", "4"]]}]], [{"CorrectInputs": [[["-1"], 1543035670]], "UniqueId": "7f0f7c19-3e9e-44ab-ed20-4e1b4f28d14f_0", "CoverageInfo": [9, 8, 6, 0, 7, "3-11"], "TimeStamp": 1543035652, "BadInput": ["- 1"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    x = int(input())\nValueError: invalid literal for int() with base 10: '- 1'\n", "ip": "178.57.114.8"}, [{"EndTime": 1552358512.1801293, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [9, 3, 6, 2, 53, "5,", "8-9,", "4->5,", "6->8"], "FinalSolution": ["-1"], "StartTime": 1552358511.3174355, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["- 1"]]}, {"EndTime": 1552358513.0453584, "FinalMinimizedSolution": ["4"], "FinalCoverage": [9, 3, 6, 3, 60, "5,", "7,", "9,", "4->5,", "6->7,", "8->9"], "FinalSolution": ["4"], "StartTime": 1552358512.1802926, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["- 1"], ["- 1"]]}, {"EndTime": 1552358513.9102154, "FinalMinimizedSolution": ["1"], "FinalCoverage": [9, 3, 6, 2, 53, "5,", "8-9,", "4->5,", "6->8"], "FinalSolution": ["1"], "StartTime": 1552358513.0455272, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["- 1"], ["- 1"], ["- 1"]]}, {"EndTime": 1552358514.7754607, "FinalMinimizedSolution": ["8"], "FinalCoverage": [9, 3, 6, 3, 60, "5,", "7,", "9,", "4->5,", "6->7,", "8->9"], "FinalSolution": ["8"], "StartTime": 1552358513.910388, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["- 1"], ["- 1"], ["- 1"], ["- 1"]]}, {"EndTime": 1552358515.8827446, "FinalMinimizedSolution": ["5"], "FinalCoverage": [9, 3, 6, 3, 60, "5,", "7,", "9,", "4->5,", "6->7,", "8->9"], "FinalSolution": ["5", "4"], "StartTime": 1552358514.7756462, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["- 1"], ["- 1"], ["- 1"], ["- 1"], ["- 1"], ["Cvo", "4"]]}]], [{"CorrectInputs": [[["3 2", "1", "4 0", "1", "2 3", "1", "4 5", "2"], 1526607625]], "UniqueId": "17a89cf2-7afa-4a65-cc09-4f80f338e973_0", "CoverageInfo": [37, 16, 12, 2, 47, "12-17,", "28-38,", "9->12,", "27->28"], "TimeStamp": 1526607571, "BadInput": ["3 2", "1", "4 0", "2 3"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 23, in <module>\n    x=int(input())\nValueError: invalid literal for int() with base 10: '2 3'\n", "ip": "200.17.137.72"}, [{}, {}, {}, {"EndTime": 1552274303.2127442, "FinalMinimizedSolution": ["3 2", "1", "4 0", "2"], "FinalCoverage": [37, 9, 12, 2, 65, "12-17,", "35-38,", "9->12,", "33->35"], "FinalSolution": ["3 2", "1", "4 0", "2"], "StartTime": 1552274302.52497, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3 2", "1", "4 0", "2 3"], ["3 2", "1", "4 0", "2 3"], ["3 2", "1", "4 0", "2 3"], ["3 2", "1", "4 0", "3 2", "7"], ["3 2", "1", "4 0", "2 3"]]}, {}]], [{"CorrectInputs": [[["5 ", "elephant ", " dog", "cat", "bird", "ant"], 1540317480]], "UniqueId": "3a475572-4e5b-44bb-d8a9-8b8d31654ea3_0", "CoverageInfo": [21, 20, 14, 0, 3, "2-21"], "TimeStamp": 1540317355, "BadInput": ["5 elephant dog cat bird ant            "], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    n=int(input())\nValueError: invalid literal for int() with base 10: '5 elephant dog cat bird ant            '\n", "ip": "184.22.107.147"}, [{"EndTime": 1552340433.274823, "FinalMinimizedSolution": ["4", "abcdefghijklmnopqrstuvwxyz", "5 elephant dog cat bird ant            ", "4", "4"], "FinalCoverage": [21, 4, 14, 1, 86, "16-19,", "15->16"], "FinalSolution": ["4", "abcdefghijklmnopqrstuvwxyz", "5 elephant dog cat bird ant            ", "4", "4"], "StartTime": 1552340431.6408284, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["5 elephant dog cat bird ant            "], ["4"], ["4", "abcdefghijklmnopqrstuvwxyz"], ["4", "abcdefghijklmnopqrstuvwxyz", "5 elephant dog cat bird ant            "], ["4", "abcdefghijklmnopqrstuvwxyz", "5 elephant dog cat bird ant            ", "4"]]}, {"EndTime": 1552340435.4854357, "FinalMinimizedSolution": ["7", "7", "7", "7", "2PA", "5 elephant dog cat bird ant            ", "abcdefghijklmnopqrstuvwxyz", "7"], "FinalCoverage": [21, 4, 14, 1, 86, "16-19,", "15->16"], "FinalSolution": ["7", "7", "7", "7", "2PA", "5 elephant dog cat bird ant            ", "abcdefghijklmnopqrstuvwxyz", "7"], "StartTime": 1552340433.275031, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["5 elephant dog cat bird ant            "], ["4"], ["4", "abcdefghijklmnopqrstuvwxyz"], ["4", "abcdefghijklmnopqrstuvwxyz", "5 elephant dog cat bird ant            "], ["4", "abcdefghijklmnopqrstuvwxyz", "5 elephant dog cat bird ant            ", "4"], ["5 elephant dog cat bird ant            "], ["7"], ["7", "7"], ["7", "7", "7"], ["7", "7", "7", "7"], ["7", "7", "7", "7", "2PA"], ["7", "7", "7", "7", "2PA", "5 elephant dog cat bird ant            "], ["7", "7", "7", "7", "2PA", "5 elephant dog cat bird ant            ", "abcdefghijklmnopqrstuvwxyz"]]}, {"EndTime": 1552340438.0733423, "FinalMinimizedSolution": ["9", "9", "9", "9", "0PD", "9", "FUd", "abcdefghijklmnopqrstuvwxyz", "9", "9"], "FinalCoverage": [21, 4, 14, 1, 86, "16-19,", "15->16"], "FinalSolution": ["9", "9", "9", "9", "0PD", "9", "FUd", "abcdefghijklmnopqrstuvwxyz", "9", "9"], "StartTime": 1552340435.4857535, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["5 elephant dog cat bird ant            "], ["4"], ["4", "abcdefghijklmnopqrstuvwxyz"], ["4", "abcdefghijklmnopqrstuvwxyz", "5 elephant dog cat bird ant            "], ["4", "abcdefghijklmnopqrstuvwxyz", "5 elephant dog cat bird ant            ", "4"], ["5 elephant dog cat bird ant            "], ["7"], ["7", "7"], ["7", "7", "7"], ["7", "7", "7", "7"], ["7", "7", "7", "7", "2PA"], ["7", "7", "7", "7", "2PA", "5 elephant dog cat bird ant            "], ["7", "7", "7", "7", "2PA", "5 elephant dog cat bird ant            ", "abcdefghijklmnopqrstuvwxyz"], ["5 elephant dog cat bird ant            "], ["9"], ["9", "9"], ["9", "9", "9"], ["9", "9", "9", "9"], ["9", "9", "9", "9", "0PD"], ["9", "9", "9", "9", "0PD", "9"], ["9", "9", "9", "9", "0PD", "9", "FUd"], ["9", "9", "9", "9", "0PD", "9", "FUd", "abcdefghijklmnopqrstuvwxyz"], ["9", "9", "9", "9", "0PD", "9", "FUd", "abcdefghijklmnopqrstuvwxyz", "9"]]}, {"EndTime": 1552340438.9462907, "FinalMinimizedSolution": ["0"], "FinalCoverage": [21, 14, 14, 2, 26, "4-5,", "9-20,", "3->4,", "8->9"], "FinalSolution": ["0"], "StartTime": 1552340438.0737932, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5 elephant dog cat bird ant            "], ["4"], ["4", "abcdefghijklmnopqrstuvwxyz"], ["4", "abcdefghijklmnopqrstuvwxyz", "5 elephant dog cat bird ant            "], ["4", "abcdefghijklmnopqrstuvwxyz", "5 elephant dog cat bird ant            ", "4"], ["5 elephant dog cat bird ant            "], ["7"], ["7", "7"], ["7", "7", "7"], ["7", "7", "7", "7"], ["7", "7", "7", "7", "2PA"], ["7", "7", "7", "7", "2PA", "5 elephant dog cat bird ant            "], ["7", "7", "7", "7", "2PA", "5 elephant dog cat bird ant            ", "abcdefghijklmnopqrstuvwxyz"], ["5 elephant dog cat bird ant            "], ["9"], ["9", "9"], ["9", "9", "9"], ["9", "9", "9", "9"], ["9", "9", "9", "9", "0PD"], ["9", "9", "9", "9", "0PD", "9"], ["9", "9", "9", "9", "0PD", "9", "FUd"], ["9", "9", "9", "9", "0PD", "9", "FUd", "abcdefghijklmnopqrstuvwxyz"], ["9", "9", "9", "9", "0PD", "9", "FUd", "abcdefghijklmnopqrstuvwxyz", "9"], ["5 elephant dog cat bird ant            "]]}, {"EndTime": 1552340440.0125475, "FinalMinimizedSolution": ["1", "1"], "FinalCoverage": [21, 12, 14, 1, 34, "9-20,", "8->9"], "FinalSolution": ["1", "1"], "StartTime": 1552340438.9467, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["5 elephant dog cat bird ant            "], ["4"], ["4", "abcdefghijklmnopqrstuvwxyz"], ["4", "abcdefghijklmnopqrstuvwxyz", "5 elephant dog cat bird ant            "], ["4", "abcdefghijklmnopqrstuvwxyz", "5 elephant dog cat bird ant            ", "4"], ["5 elephant dog cat bird ant            "], ["7"], ["7", "7"], ["7", "7", "7"], ["7", "7", "7", "7"], ["7", "7", "7", "7", "2PA"], ["7", "7", "7", "7", "2PA", "5 elephant dog cat bird ant            "], ["7", "7", "7", "7", "2PA", "5 elephant dog cat bird ant            ", "abcdefghijklmnopqrstuvwxyz"], ["5 elephant dog cat bird ant            "], ["9"], ["9", "9"], ["9", "9", "9"], ["9", "9", "9", "9"], ["9", "9", "9", "9", "0PD"], ["9", "9", "9", "9", "0PD", "9"], ["9", "9", "9", "9", "0PD", "9", "FUd"], ["9", "9", "9", "9", "0PD", "9", "FUd", "abcdefghijklmnopqrstuvwxyz"], ["9", "9", "9", "9", "0PD", "9", "FUd", "abcdefghijklmnopqrstuvwxyz", "9"], ["5 elephant dog cat bird ant            "], ["5 elephant dog cat bird ant            "], ["1"]]}]], [{"CorrectInputs": [[["0", "1"], 1526945702]], "UniqueId": "a3e727a0-bbda-45de-e4ce-431e05ff7b3c_0", "CoverageInfo": [63, 0, 2, 1, 98, "37->exit"], "TimeStamp": 1526945674, "BadInput": ["10", "1"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 42, in <module>\n    OMU2.append(sqrt(XU2[i]**2+YU2[i]**2+ZU2[i]**2))\nIndexError: list index out of range\n", "ip": "212.17.76.142"}, [{"EndTime": 1552295303.1161726, "FinalMinimizedSolution": ["0", "0"], "FinalCoverage": [63, 0, 2, 0, 100], "FinalSolution": ["0", "0"], "StartTime": 1552295297.3599794, "FoundSolution": true, "NumProbesMade": 32, "InputHistory": [["10", "1"], ["10", "1 n-t"], ["10", "-1"], ["10", "-1 0y-"], ["10", "10"], ["iG-", "10", "10"], ["8", "10", "10"], ["8", "10 X-6", "10"], ["8", "2", "10"], ["8", "2", "2", "10"], [], ["10"], ["ehR"], ["6"], ["6", "pK5"], ["6", "5"], ["5"], ["5", "5"], ["4cY", "5", "5"], ["4", "5", "5"], ["4", "5", "9", "5"], ["4", "5", "2w0", "9", "5"], ["4", "5", "viki", "2w0", "9", "5"], ["5", "4", "5", "viki", "2w0", "9", "5"], ["5", "SrH", "4", "5", "viki", "2w0", "9", "5"], ["5", "4", "4", "5", "viki", "2w0", "9", "5"], ["28g", "5", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "54E", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "54E", "4", "76N", "4", "5", "viki", "2w0", "9", "5"], ["h-a"], ["0"]]}, {"EndTime": 1552295304.5796373, "FinalMinimizedSolution": ["0", "1"], "FinalCoverage": [63, 0, 2, 0, 100], "FinalSolution": ["0", "1"], "StartTime": 1552295303.1170778, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["10", "1"], ["10", "1 n-t"], ["10", "-1"], ["10", "-1 0y-"], ["10", "10"], ["iG-", "10", "10"], ["8", "10", "10"], ["8", "10 X-6", "10"], ["8", "2", "10"], ["8", "2", "2", "10"], [], ["10"], ["ehR"], ["6"], ["6", "pK5"], ["6", "5"], ["5"], ["5", "5"], ["4cY", "5", "5"], ["4", "5", "5"], ["4", "5", "9", "5"], ["4", "5", "2w0", "9", "5"], ["4", "5", "viki", "2w0", "9", "5"], ["5", "4", "5", "viki", "2w0", "9", "5"], ["5", "SrH", "4", "5", "viki", "2w0", "9", "5"], ["5", "4", "4", "5", "viki", "2w0", "9", "5"], ["28g", "5", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "54E", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "54E", "4", "76N", "4", "5", "viki", "2w0", "9", "5"], ["h-a"], ["0"], ["10", "1"], ["10 Hom", "1"], ["5", "1"], ["5 88-", "1"]]}, {"EndTime": 1552295307.5795965, "FinalMinimizedSolution": ["-1", "2"], "FinalCoverage": [63, 34, 2, 1, 46, "39-89,", "37->39"], "FinalSolution": ["-1", "2", "5"], "StartTime": 1552295304.5801675, "FoundSolution": true, "NumProbesMade": 12, "InputHistory": [["10", "1"], ["10", "1 n-t"], ["10", "-1"], ["10", "-1 0y-"], ["10", "10"], ["iG-", "10", "10"], ["8", "10", "10"], ["8", "10 X-6", "10"], ["8", "2", "10"], ["8", "2", "2", "10"], [], ["10"], ["ehR"], ["6"], ["6", "pK5"], ["6", "5"], ["5"], ["5", "5"], ["4cY", "5", "5"], ["4", "5", "5"], ["4", "5", "9", "5"], ["4", "5", "2w0", "9", "5"], ["4", "5", "viki", "2w0", "9", "5"], ["5", "4", "5", "viki", "2w0", "9", "5"], ["5", "SrH", "4", "5", "viki", "2w0", "9", "5"], ["5", "4", "4", "5", "viki", "2w0", "9", "5"], ["28g", "5", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "54E", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "54E", "4", "76N", "4", "5", "viki", "2w0", "9", "5"], ["h-a"], ["0"], ["10", "1"], ["10 Hom", "1"], ["5", "1"], ["5 88-", "1"], ["10", "1"], ["10 wuh", "1"], ["1", "1"], ["1", "1", "1"], ["1", "1", "10", "1"], ["92Y"], ["9"], ["9", "10"], ["FKl"], ["5", "39.5", "5"], ["5", "2", "5"], ["5 oE9", "2", "5"]]}, {"EndTime": 1552295308.9682143, "FinalMinimizedSolution": ["0", "20"], "FinalCoverage": [63, 0, 2, 0, 100], "FinalSolution": ["0", "20", "10", "1"], "StartTime": 1552295307.5802221, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["10", "1"], ["10", "1 n-t"], ["10", "-1"], ["10", "-1 0y-"], ["10", "10"], ["iG-", "10", "10"], ["8", "10", "10"], ["8", "10 X-6", "10"], ["8", "2", "10"], ["8", "2", "2", "10"], [], ["10"], ["ehR"], ["6"], ["6", "pK5"], ["6", "5"], ["5"], ["5", "5"], ["4cY", "5", "5"], ["4", "5", "5"], ["4", "5", "9", "5"], ["4", "5", "2w0", "9", "5"], ["4", "5", "viki", "2w0", "9", "5"], ["5", "4", "5", "viki", "2w0", "9", "5"], ["5", "SrH", "4", "5", "viki", "2w0", "9", "5"], ["5", "4", "4", "5", "viki", "2w0", "9", "5"], ["28g", "5", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "54E", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "54E", "4", "76N", "4", "5", "viki", "2w0", "9", "5"], ["h-a"], ["0"], ["10", "1"], ["10 Hom", "1"], ["5", "1"], ["5 88-", "1"], ["10", "1"], ["10 wuh", "1"], ["1", "1"], ["1", "1", "1"], ["1", "1", "10", "1"], ["92Y"], ["9"], ["9", "10"], ["FKl"], ["5", "39.5", "5"], ["5", "2", "5"], ["5 oE9", "2", "5"], ["10", "1"], ["20", "10", "1"], ["BtC", "20", "10", "1"]]}, {"EndTime": 1552295314.8300781, "FinalMinimizedSolution": ["0", "5"], "FinalCoverage": [63, 0, 2, 0, 100], "FinalSolution": ["0", "5"], "StartTime": 1552295308.9688966, "FoundSolution": true, "NumProbesMade": 27, "InputHistory": [["10", "1"], ["10", "1 n-t"], ["10", "-1"], ["10", "-1 0y-"], ["10", "10"], ["iG-", "10", "10"], ["8", "10", "10"], ["8", "10 X-6", "10"], ["8", "2", "10"], ["8", "2", "2", "10"], [], ["10"], ["ehR"], ["6"], ["6", "pK5"], ["6", "5"], ["5"], ["5", "5"], ["4cY", "5", "5"], ["4", "5", "5"], ["4", "5", "9", "5"], ["4", "5", "2w0", "9", "5"], ["4", "5", "viki", "2w0", "9", "5"], ["5", "4", "5", "viki", "2w0", "9", "5"], ["5", "SrH", "4", "5", "viki", "2w0", "9", "5"], ["5", "4", "4", "5", "viki", "2w0", "9", "5"], ["28g", "5", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "54E", "4", "4", "5", "viki", "2w0", "9", "5"], ["7", "5", "54E", "4", "76N", "4", "5", "viki", "2w0", "9", "5"], ["h-a"], ["0"], ["10", "1"], ["10 Hom", "1"], ["5", "1"], ["5 88-", "1"], ["10", "1"], ["10 wuh", "1"], ["1", "1"], ["1", "1", "1"], ["1", "1", "10", "1"], ["92Y"], ["9"], ["9", "10"], ["FKl"], ["5", "39.5", "5"], ["5", "2", "5"], ["5 oE9", "2", "5"], ["10", "1"], ["20", "10", "1"], ["BtC", "20", "10", "1"], ["10", "1"], ["1"], ["1", "fdgdfg", "1"], ["1", "9", "1"], ["8pB"], ["6Rr"], ["10", "6"], ["wA7", "10", "6"], ["3", "10", "6"], ["-vN"], ["r4P"], ["8"], ["8", "10"], ["8", "1", "10"], ["8", "1 T80", "10"], ["8", "8", "2", "10"], ["10z"], ["7"], ["7", "YU6"], ["7", "9"], ["pgZ"], ["yw8", "7"], ["10", "7"], ["occ", "10"], ["4", "10"], ["g5h"], ["ngI", "5"]]}]], [{"CorrectInputs": [[["1", "11 01"], 1533608533]], "UniqueId": "89cb6120-e00b-4ee4-a930-1a9887912100_0", "CoverageInfo": [30, 26, 20, 1, 10, "5-30,", "3->exit"], "TimeStamp": 1533608489, "BadInput": ["1", "11"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 4, in <module>\n    (e,d) = list(input('').split(' '))\nValueError: not enough values to unpack (expected 2, got 1)\n", "ip": "14.139.38.156"}, [{"EndTime": 1552278122.0543032, "FinalMinimizedSolution": ["1", "11 11"], "FinalCoverage": [30, 4, 20, 2, 80, "14-15,", "17-18,", "13->14,", "16->17"], "FinalSolution": ["1", "11 11"], "StartTime": 1552278121.1862864, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1", "11"]]}, {"EndTime": 1552278123.1121116, "FinalMinimizedSolution": ["1", "11 1"], "FinalCoverage": [30, 3, 20, 1, 84, "16-18,", "13->16"], "FinalSolution": ["1", "11 1"], "StartTime": 1552278122.0544798, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "11"], ["1", "11"], ["1", "11 11 11"]]}, {"EndTime": 1552278127.6982462, "FinalMinimizedSolution": ["8", "1 1", "8 8", "1 1", "1 1", "1 1", "1 1", "1 1", "1 1"], "FinalCoverage": [30, 4, 20, 2, 80, "14-15,", "17-18,", "13->14,", "16->17"], "FinalSolution": ["8", "1 1", "8 8", "1 1", "1 1", "1 1", "1 1", "1 1", "1 1"], "StartTime": 1552278123.112324, "FoundSolution": true, "NumProbesMade": 22, "InputHistory": [["1", "11"], ["1", "11"], ["1", "11 11 11"], ["1", "11"], ["8", "1", "11 11"], ["8", "1", "11 11 11"], ["8", "1", "11 11 11 11"], ["8", "1", "11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11 11 11 11 11"], ["8", "1"], ["8", "1 1"], ["8", "1 1", "8"], ["8", "1 1", "8 8"], ["8", "1 1", "8 8", "1 1"], ["8", "1 1", "8 8", "1 1", "1"], ["8", "1 1", "8 8", "1 1", "1 1"], ["8", "1 1", "8 8", "1 1", "1 1", "1"], ["8", "1 1", "8 8", "1 1", "1 1", "1 1"], ["8", "1 1", "8 8", "1 1", "1 1", "1 1", "1 1"], ["8", "1 1", "8 8", "1 1", "1 1", "1 1", "1 1", "1 1"]]}, {"EndTime": 1552278128.5665739, "FinalMinimizedSolution": ["1", "11 4"], "FinalCoverage": [30, 3, 20, 1, 84, "16-18,", "13->16"], "FinalSolution": ["1", "11 4"], "StartTime": 1552278127.6987238, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1", "11"], ["1", "11"], ["1", "11 11 11"], ["1", "11"], ["8", "1", "11 11"], ["8", "1", "11 11 11"], ["8", "1", "11 11 11 11"], ["8", "1", "11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11 11 11 11 11"], ["8", "1"], ["8", "1 1"], ["8", "1 1", "8"], ["8", "1 1", "8 8"], ["8", "1 1", "8 8", "1 1"], ["8", "1 1", "8 8", "1 1", "1"], ["8", "1 1", "8 8", "1 1", "1 1"], ["8", "1 1", "8 8", "1 1", "1 1", "1"], ["8", "1 1", "8 8", "1 1", "1 1", "1 1"], ["8", "1 1", "8 8", "1 1", "1 1", "1 1", "1 1"], ["8", "1 1", "8 8", "1 1", "1 1", "1 1", "1 1", "1 1"], ["1", "11"]]}, {"EndTime": 1552278130.3766026, "FinalMinimizedSolution": ["3", "3 3", " ", " "], "FinalCoverage": [30, 5, 20, 3, 76, "14-15,", "17-18,", "25,", "13->14,", "16->17,", "24->25"], "FinalSolution": ["3", "3 3", " ", " "], "StartTime": 1552278128.567032, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["1", "11"], ["1", "11"], ["1", "11 11 11"], ["1", "11"], ["8", "1", "11 11"], ["8", "1", "11 11 11"], ["8", "1", "11 11 11 11"], ["8", "1", "11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11 11 11 11"], ["8", "1", "11 11 11 11 11 11 11 11 11 11 11"], ["8", "1"], ["8", "1 1"], ["8", "1 1", "8"], ["8", "1 1", "8 8"], ["8", "1 1", "8 8", "1 1"], ["8", "1 1", "8 8", "1 1", "1"], ["8", "1 1", "8 8", "1 1", "1 1"], ["8", "1 1", "8 8", "1 1", "1 1", "1"], ["8", "1 1", "8 8", "1 1", "1 1", "1 1"], ["8", "1 1", "8 8", "1 1", "1 1", "1 1", "1 1"], ["8", "1 1", "8 8", "1 1", "1 1", "1 1", "1 1", "1 1"], ["1", "11"], ["1", "11"], [], ["3"], ["3", "3"], ["3", "3 3"], ["3", "3 3", " "]]}]], [{"CorrectInputs": [[["5", "2", "6"], 1542849572], [["6", "5", "2"], 1542849626], [["9", "2", "3"], 1542849654], [["2", "3", "7"], 1542850552]], "UniqueId": "90e4f2c5-9b61-4399-910f-d524e683323e_0", "CoverageInfo": [10, 3, 0, 0, 70, "8-10"], "TimeStamp": 1542849511, "BadInput": ["2", "4", "2"], "ErrorType": "ZeroDivisionError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 7, in <module>\n    x=deltax/delta\nZeroDivisionError: division by zero\n", "ip": "62.231.66.91"}, [{"EndTime": 1552418431.8945837, "FinalMinimizedSolution": ["1", "4", "2"], "FinalCoverage": [10, 0, 0, 0, 100], "FinalSolution": ["1", "4", "2"], "StartTime": 1552418430.841925, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["2", "4", "2"], ["2 FlF", "4", "2"]]}, {"EndTime": 1552418433.1362383, "FinalMinimizedSolution": ["4", "2", "2"], "FinalCoverage": [10, 0, 0, 0, 100], "FinalSolution": ["4", "2", "2"], "StartTime": 1552418431.8947794, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["2", "4", "2"], ["2 FlF", "4", "2"], ["2", "4", "2"], ["2", "4 fna", "2"], ["4", "2"]]}, {"EndTime": 1552418434.051622, "FinalMinimizedSolution": ["2", "4", "4"], "FinalCoverage": [10, 0, 0, 0, 100], "FinalSolution": ["2", "4", "4", "2"], "StartTime": 1552418433.1364758, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["2", "4", "2"], ["2 FlF", "4", "2"], ["2", "4", "2"], ["2", "4 fna", "2"], ["4", "2"], ["2", "4", "2"]]}, {"EndTime": 1552418435.2975004, "FinalMinimizedSolution": ["2", "2", "8"], "FinalCoverage": [10, 0, 0, 0, 100], "FinalSolution": ["2", "2", "8"], "StartTime": 1552418434.05186, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["2", "4", "2"], ["2 FlF", "4", "2"], ["2", "4", "2"], ["2", "4 fna", "2"], ["4", "2"], ["2", "4", "2"], ["2", "4", "2"], ["2", "2"], ["2", "2", "ZX6"]]}, {"EndTime": 1552418436.7256734, "FinalMinimizedSolution": ["7", "2", "2"], "FinalCoverage": [10, 0, 0, 0, 100], "FinalSolution": ["7", "2", "2"], "StartTime": 1552418435.2977731, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["2", "4", "2"], ["2 FlF", "4", "2"], ["2", "4", "2"], ["2", "4 fna", "2"], ["4", "2"], ["2", "4", "2"], ["2", "4", "2"], ["2", "2"], ["2", "2", "ZX6"], ["2", "4", "2"], [], ["7"], ["7", "2"]]}]], [{"CorrectInputs": [[["1 0 1 0 1 0 1 0"], 1531799013]], "UniqueId": "971e2f83-8263-4d00-d02d-c40ddf39b20a_0", "CoverageInfo": [16, 8, 4, 2, 50, "8-17,", "4->17,", "20->exit"], "TimeStamp": 1531798919, "BadInput": ["1"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 21, in <module>\n    main()\n  File \"temp2018.py\", line 7, in main\n    num2 = int(entrada.split()[1])\nIndexError: list index out of range\n", "ip": "138.255.247.121"}, [{"EndTime": 1552359470.5358152, "FinalMinimizedSolution": ["3 1 1 1 1 1 2 2 2"], "FinalCoverage": [16, 0, 4, 1, 95, "20->exit"], "FinalSolution": ["3 1 1 1 1 1 2 2 2"], "StartTime": 1552359460.5659661, "FoundSolution": true, "NumProbesMade": 49, "InputHistory": [["1"], [], ["__main__"], ["-1"], ["__main__", "__main__"], ["__main__", "8"], ["8", "8"], ["__main__", "8", "8"], ["7", "8", "8"], ["1JD"], ["8xX"], ["6"], ["jy", "6"], ["3", "6"], ["__main__", "__main__ __main__"], ["__main__", "__main__ 5"], ["__main__", "9 5"], ["9", "9 5"], ["__main__", "9", "9 5"], ["8", "9", "9 5"], ["9 pX0", "9 5"], ["9 -1", "9 5"], ["9 -1", "9 11"], ["9 a a a", "9 11"], ["9 a a 5", "9 11"], ["9 a 2 5", "9 11"], ["9 2 2 5", "9 11"], ["9 __main__ 2 5", "9 11"], ["9 8 2 5", "9 11"], ["9 8 2 5", "9 1"], ["9 8 2 5", "23,43 1"], ["zQe 8 2 5", "23,43 1"], ["0 8 2 5", "23,43 1"], ["0 8 2 5", ""], ["", ""], [" K8e", ""], [" 7", ""], ["I26", "", ""], ["5", "", ""], ["lIY"], ["hSN"], ["8"], ["0Su"], ["0"], ["__main__", "0"], ["1", "0"], ["__main__ CC2"], ["3 CC2"], ["3 9"]]}, {"InputHistory": [["1"], [], ["__main__"], ["-1"], ["__main__", "__main__"], ["__main__", "8"], ["8", "8"], ["__main__", "8", "8"], ["7", "8", "8"], ["1JD"], ["8xX"], ["6"], ["jy", "6"], ["3", "6"], ["__main__", "__main__ __main__"], ["__main__", "__main__ 5"], ["__main__", "9 5"], ["9", "9 5"], ["__main__", "9", "9 5"], ["8", "9", "9 5"], ["9 pX0", "9 5"], ["9 -1", "9 5"], ["9 -1", "9 11"], ["9 a a a", "9 11"], ["9 a a 5", "9 11"], ["9 a 2 5", "9 11"], ["9 2 2 5", "9 11"], ["9 __main__ 2 5", "9 11"], ["9 8 2 5", "9 11"], ["9 8 2 5", "9 1"], ["9 8 2 5", "23,43 1"], ["zQe 8 2 5", "23,43 1"], ["0 8 2 5", "23,43 1"], ["0 8 2 5", ""], ["", ""], [" K8e", ""], [" 7", ""], ["I26", "", ""], ["5", "", ""], ["lIY"], ["hSN"], ["8"], ["0Su"], ["0"], ["__main__", "0"], ["1", "0"], ["__main__ CC2"], ["3 CC2"], ["3 9"], ["1"], ["1 __main__"], ["1 10"], ["1", "10"], ["__main__ __main__"], ["__main__ 3"], ["2 3"], ["2", "3"], ["2", "3 __main__"], ["Mjl", "2", "3 __main__"], ["1", "2", "3 __main__"], ["1", "3 __main__"], ["rkU"], ["5"], ["5", "5"], ["5 zg9"], ["5 3"], ["5 23"], ["5 \u3042\u3042\u3042"], ["5 6"], ["ADD R0 1 6"], ["8 R0 1 6"], ["8 4 1 6"], ["8 4 1 create foo global"], ["8 4 1 1 foo global"], ["8 4 1 1 3 global"], ["8 4 1 1 3 10"], ["8 4 1 5 3 10"], ["8", "4", "1", "5", "3", "10"], ["8", "1", "5", "3", "10"], ["8", "5", "3", "10"], ["8", "5", "3", "__main__", "10"], ["56o"], ["__main__ 7Aq"], ["0 7Aq"], ["0 0"], ["1234222234554 0"], ["1234222234554 333"], ["1234222234554", "333"], ["333"], ["4", "333"], ["333", "4", "333"], ["333", "4"], ["4"], ["4 __main__"], ["4 9"], ["4 Cja"], ["4 0"], ["4 0 0"], [""], ["4zB", ""], ["5", ""], ["5 __main__", ""], ["5 7", ""], ["5 7", "1", ""], ["5 7", "Nrs", "1", ""], ["5 7", "10", "Nrs", "1", ""], ["5 7", "10", "Nrs", ""], ["5 7", "10", "Nrs"], ["5 5 7", "10", "Nrs"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552359481.9000986, "StartTime": 1552359470.5363553}, {"InputHistory": [["1"], [], ["__main__"], ["-1"], ["__main__", "__main__"], ["__main__", "8"], ["8", "8"], ["__main__", "8", "8"], ["7", "8", "8"], ["1JD"], ["8xX"], ["6"], ["jy", "6"], ["3", "6"], ["__main__", "__main__ __main__"], ["__main__", "__main__ 5"], ["__main__", "9 5"], ["9", "9 5"], ["__main__", "9", "9 5"], ["8", "9", "9 5"], ["9 pX0", "9 5"], ["9 -1", "9 5"], ["9 -1", "9 11"], ["9 a a a", "9 11"], ["9 a a 5", "9 11"], ["9 a 2 5", "9 11"], ["9 2 2 5", "9 11"], ["9 __main__ 2 5", "9 11"], ["9 8 2 5", "9 11"], ["9 8 2 5", "9 1"], ["9 8 2 5", "23,43 1"], ["zQe 8 2 5", "23,43 1"], ["0 8 2 5", "23,43 1"], ["0 8 2 5", ""], ["", ""], [" K8e", ""], [" 7", ""], ["I26", "", ""], ["5", "", ""], ["lIY"], ["hSN"], ["8"], ["0Su"], ["0"], ["__main__", "0"], ["1", "0"], ["__main__ CC2"], ["3 CC2"], ["3 9"], ["1"], ["1 __main__"], ["1 10"], ["1", "10"], ["__main__ __main__"], ["__main__ 3"], ["2 3"], ["2", "3"], ["2", "3 __main__"], ["Mjl", "2", "3 __main__"], ["1", "2", "3 __main__"], ["1", "3 __main__"], ["rkU"], ["5"], ["5", "5"], ["5 zg9"], ["5 3"], ["5 23"], ["5 \u3042\u3042\u3042"], ["5 6"], ["ADD R0 1 6"], ["8 R0 1 6"], ["8 4 1 6"], ["8 4 1 create foo global"], ["8 4 1 1 foo global"], ["8 4 1 1 3 global"], ["8 4 1 1 3 10"], ["8 4 1 5 3 10"], ["8", "4", "1", "5", "3", "10"], ["8", "1", "5", "3", "10"], ["8", "5", "3", "10"], ["8", "5", "3", "__main__", "10"], ["56o"], ["__main__ 7Aq"], ["0 7Aq"], ["0 0"], ["1234222234554 0"], ["1234222234554 333"], ["1234222234554", "333"], ["333"], ["4", "333"], ["333", "4", "333"], ["333", "4"], ["4"], ["4 __main__"], ["4 9"], ["4 Cja"], ["4 0"], ["4 0 0"], [""], ["4zB", ""], ["5", ""], ["5 __main__", ""], ["5 7", ""], ["5 7", "1", ""], ["5 7", "Nrs", "1", ""], ["5 7", "10", "Nrs", "1", ""], ["5 7", "10", "Nrs", ""], ["5 7", "10", "Nrs"], ["5 5 7", "10", "Nrs"], ["1"], ["1 pSp"], ["1 3"], ["9iK"], ["Hf3", "__main__", "0"], ["7", "__main__", "0"], ["__main__", "7", "__main__", "0"], ["__main__", "7", "-1", "0"], ["3", "7", "-1", "0"], ["3", "7", "li", "-1", "0"], ["3", "7", "li", "-1", "3", "0"], ["3", "7", "eNG", "li", "-1", "3", "0"], ["lcW"], ["__main__ e-D"], ["7 e-D"], ["7 -1"], ["7", "-1"], ["__main__ __main__", "__main__"], ["__main__ __main__", "-1"], ["__main__ 8", "-1"], ["3 8", "-1"], ["3", "8", "-1"], ["3", "6rR", "8", "-1"], ["3", "6rR", "8", "Num nov authored", "-1"], ["3", "6rR", "Num nov authored", "-1"], ["6rR", "Num nov authored", "-1"], ["8", "Num nov authored", "-1"], ["8", "Num nov authored"], ["8", "Num", "nov", "authored"], ["8", "nov", "authored"], ["8", "__main__", "nov", "authored"], ["8", "__main__", "8", "nov", "authored"], ["8", "8", "nov", "authored"], ["__main__ R1-"], ["6 R1-"], ["6 8"], ["6 6 8"], ["1", ""], ["OSv"], ["2xg"], ["7", "1"], ["3Ed", "7", "1"], ["10", "7", "1"], ["10", "7", "January", "1"], ["10", "7", "January __main__", "1"], ["10", "7", "January __main__", "HeI", "1"], ["10", "January __main__", "HeI", "1"], ["10 c--", "January __main__", "HeI", "1"], ["10 5", "January __main__", "HeI", "1"], ["__main__ 5", "January __main__", "HeI", "1"], ["__main__ 5", "January 2", "HeI", "1"], ["4 5", "January 2", "HeI", "1"], ["4 5", "January 2", "HeI GMD", "1"], ["4 5", "January 2", "HeI GMD", "UKu", "1"], ["4 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "1"], ["30- 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "1"], ["8 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "1"], ["8 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "22 55 87 33", "1"], ["8 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "22 55 1 33", "1"], ["8 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "22 55 1 __main__", "1"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552359491.9770274, "StartTime": 1552359481.9010036}, {"EndTime": 1552359502.5593033, "FinalMinimizedSolution": ["4 8 0 3 4 2 0 3"], "FinalCoverage": [16, 0, 4, 1, 95, "20->exit"], "FinalSolution": ["4 8 0 3 4 2 0 3", ""], "StartTime": 1552359491.9785314, "FoundSolution": true, "NumProbesMade": 52, "InputHistory": [["1"], [], ["__main__"], ["-1"], ["__main__", "__main__"], ["__main__", "8"], ["8", "8"], ["__main__", "8", "8"], ["7", "8", "8"], ["1JD"], ["8xX"], ["6"], ["jy", "6"], ["3", "6"], ["__main__", "__main__ __main__"], ["__main__", "__main__ 5"], ["__main__", "9 5"], ["9", "9 5"], ["__main__", "9", "9 5"], ["8", "9", "9 5"], ["9 pX0", "9 5"], ["9 -1", "9 5"], ["9 -1", "9 11"], ["9 a a a", "9 11"], ["9 a a 5", "9 11"], ["9 a 2 5", "9 11"], ["9 2 2 5", "9 11"], ["9 __main__ 2 5", "9 11"], ["9 8 2 5", "9 11"], ["9 8 2 5", "9 1"], ["9 8 2 5", "23,43 1"], ["zQe 8 2 5", "23,43 1"], ["0 8 2 5", "23,43 1"], ["0 8 2 5", ""], ["", ""], [" K8e", ""], [" 7", ""], ["I26", "", ""], ["5", "", ""], ["lIY"], ["hSN"], ["8"], ["0Su"], ["0"], ["__main__", "0"], ["1", "0"], ["__main__ CC2"], ["3 CC2"], ["3 9"], ["1"], ["1 __main__"], ["1 10"], ["1", "10"], ["__main__ __main__"], ["__main__ 3"], ["2 3"], ["2", "3"], ["2", "3 __main__"], ["Mjl", "2", "3 __main__"], ["1", "2", "3 __main__"], ["1", "3 __main__"], ["rkU"], ["5"], ["5", "5"], ["5 zg9"], ["5 3"], ["5 23"], ["5 \u3042\u3042\u3042"], ["5 6"], ["ADD R0 1 6"], ["8 R0 1 6"], ["8 4 1 6"], ["8 4 1 create foo global"], ["8 4 1 1 foo global"], ["8 4 1 1 3 global"], ["8 4 1 1 3 10"], ["8 4 1 5 3 10"], ["8", "4", "1", "5", "3", "10"], ["8", "1", "5", "3", "10"], ["8", "5", "3", "10"], ["8", "5", "3", "__main__", "10"], ["56o"], ["__main__ 7Aq"], ["0 7Aq"], ["0 0"], ["1234222234554 0"], ["1234222234554 333"], ["1234222234554", "333"], ["333"], ["4", "333"], ["333", "4", "333"], ["333", "4"], ["4"], ["4 __main__"], ["4 9"], ["4 Cja"], ["4 0"], ["4 0 0"], [""], ["4zB", ""], ["5", ""], ["5 __main__", ""], ["5 7", ""], ["5 7", "1", ""], ["5 7", "Nrs", "1", ""], ["5 7", "10", "Nrs", "1", ""], ["5 7", "10", "Nrs", ""], ["5 7", "10", "Nrs"], ["5 5 7", "10", "Nrs"], ["1"], ["1 pSp"], ["1 3"], ["9iK"], ["Hf3", "__main__", "0"], ["7", "__main__", "0"], ["__main__", "7", "__main__", "0"], ["__main__", "7", "-1", "0"], ["3", "7", "-1", "0"], ["3", "7", "li", "-1", "0"], ["3", "7", "li", "-1", "3", "0"], ["3", "7", "eNG", "li", "-1", "3", "0"], ["lcW"], ["__main__ e-D"], ["7 e-D"], ["7 -1"], ["7", "-1"], ["__main__ __main__", "__main__"], ["__main__ __main__", "-1"], ["__main__ 8", "-1"], ["3 8", "-1"], ["3", "8", "-1"], ["3", "6rR", "8", "-1"], ["3", "6rR", "8", "Num nov authored", "-1"], ["3", "6rR", "Num nov authored", "-1"], ["6rR", "Num nov authored", "-1"], ["8", "Num nov authored", "-1"], ["8", "Num nov authored"], ["8", "Num", "nov", "authored"], ["8", "nov", "authored"], ["8", "__main__", "nov", "authored"], ["8", "__main__", "8", "nov", "authored"], ["8", "8", "nov", "authored"], ["__main__ R1-"], ["6 R1-"], ["6 8"], ["6 6 8"], ["1", ""], ["OSv"], ["2xg"], ["7", "1"], ["3Ed", "7", "1"], ["10", "7", "1"], ["10", "7", "January", "1"], ["10", "7", "January __main__", "1"], ["10", "7", "January __main__", "HeI", "1"], ["10", "January __main__", "HeI", "1"], ["10 c--", "January __main__", "HeI", "1"], ["10 5", "January __main__", "HeI", "1"], ["__main__ 5", "January __main__", "HeI", "1"], ["__main__ 5", "January 2", "HeI", "1"], ["4 5", "January 2", "HeI", "1"], ["4 5", "January 2", "HeI GMD", "1"], ["4 5", "January 2", "HeI GMD", "UKu", "1"], ["4 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "1"], ["30- 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "1"], ["8 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "1"], ["8 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "22 55 87 33", "1"], ["8 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "22 55 1 33", "1"], ["8 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "22 55 1 __main__", "1"], ["1"], ["Z19", "__main__"], ["7", "__main__"], ["6", "7", "__main__"], ["d5i"], ["9"], ["x*x/2", "9"], ["-1", "9"], ["co", "-1", "9"], ["10", "-1", "9"], ["10", "-1", "10", "9"], ["10 __main__", "-1", "10", "9"], ["10 7", "-1", "10", "9"], ["10 7", "-1", "10", "djt", "9"], ["10 5", "-1", "10", "djt", "9"], ["10 5", "3b2", "-1", "10", "djt", "9"], ["10 5", "3b2", "-1", "10 -eM", "djt", "9"], ["10 5", "3b2", "-1", "10 -eM", "djt __main__", "9"], ["10 5", "3b2", "-1", "10", "-eM", "djt __main__", "9"], ["__main__ 5", "3b2", "-1", "10", "-eM", "djt __main__", "9"], ["__main__ 5", "3b2", "-1", "10", "-eM", "djt 9", "9"], ["10 5", "3b2", "-1", "10", "-eM", "djt 9", "9"], ["10 5", "3b2", "-1", "10", "1 2 34 5 6 1 6 1", "-eM", "djt 9", "9"], ["13s"], ["y : a b", "0"], ["9 : a b", "0"], ["9 8 a b", "0"], ["9 8 5 b", "0"], ["9 8 5 6", "0"], ["9 8 5 __main__", "0"], ["9 8 5 3", "0"], ["9 8 5 3", "0 L2X"], ["9 8 5 3", "__main__ L2X"], ["9 8 5 3", "__main__ L2X L2X"], ["4 8 5 3", "__main__ L2X L2X"], ["4 8 5 3", "__main__ L2X 4 8 5 3"], ["4", "8", "5", "3", "__main__ L2X 4 8 5 3"], ["5", "4", "8", "5", "3", "__main__ L2X 4 8 5 3"], ["5", "4", "5", "3", "__main__ L2X 4 8 5 3"], ["5", "5", "4", "5", "3", "__main__ L2X 4 8 5 3"], ["5", "5", "4 __main__", "5", "3", "__main__ L2X 4 8 5 3"], ["Hnh"], ["__main__", "5"], ["-1", "5"], ["6Eu"], ["7"], ["__main__ xEb"], ["6 xEb"], ["6 -1"], ["6 T"], ["6 5"], ["6 5 5"]]}, {"EndTime": 1552359510.4449937, "FinalMinimizedSolution": ["7 5 8 2 7 8 8 2 4"], "FinalCoverage": [16, 0, 4, 1, 95, "20->exit"], "FinalSolution": ["7 5 8 2 7 8 8 2 4"], "StartTime": 1552359502.561559, "FoundSolution": true, "NumProbesMade": 38, "InputHistory": [["1"], [], ["__main__"], ["-1"], ["__main__", "__main__"], ["__main__", "8"], ["8", "8"], ["__main__", "8", "8"], ["7", "8", "8"], ["1JD"], ["8xX"], ["6"], ["jy", "6"], ["3", "6"], ["__main__", "__main__ __main__"], ["__main__", "__main__ 5"], ["__main__", "9 5"], ["9", "9 5"], ["__main__", "9", "9 5"], ["8", "9", "9 5"], ["9 pX0", "9 5"], ["9 -1", "9 5"], ["9 -1", "9 11"], ["9 a a a", "9 11"], ["9 a a 5", "9 11"], ["9 a 2 5", "9 11"], ["9 2 2 5", "9 11"], ["9 __main__ 2 5", "9 11"], ["9 8 2 5", "9 11"], ["9 8 2 5", "9 1"], ["9 8 2 5", "23,43 1"], ["zQe 8 2 5", "23,43 1"], ["0 8 2 5", "23,43 1"], ["0 8 2 5", ""], ["", ""], [" K8e", ""], [" 7", ""], ["I26", "", ""], ["5", "", ""], ["lIY"], ["hSN"], ["8"], ["0Su"], ["0"], ["__main__", "0"], ["1", "0"], ["__main__ CC2"], ["3 CC2"], ["3 9"], ["1"], ["1 __main__"], ["1 10"], ["1", "10"], ["__main__ __main__"], ["__main__ 3"], ["2 3"], ["2", "3"], ["2", "3 __main__"], ["Mjl", "2", "3 __main__"], ["1", "2", "3 __main__"], ["1", "3 __main__"], ["rkU"], ["5"], ["5", "5"], ["5 zg9"], ["5 3"], ["5 23"], ["5 \u3042\u3042\u3042"], ["5 6"], ["ADD R0 1 6"], ["8 R0 1 6"], ["8 4 1 6"], ["8 4 1 create foo global"], ["8 4 1 1 foo global"], ["8 4 1 1 3 global"], ["8 4 1 1 3 10"], ["8 4 1 5 3 10"], ["8", "4", "1", "5", "3", "10"], ["8", "1", "5", "3", "10"], ["8", "5", "3", "10"], ["8", "5", "3", "__main__", "10"], ["56o"], ["__main__ 7Aq"], ["0 7Aq"], ["0 0"], ["1234222234554 0"], ["1234222234554 333"], ["1234222234554", "333"], ["333"], ["4", "333"], ["333", "4", "333"], ["333", "4"], ["4"], ["4 __main__"], ["4 9"], ["4 Cja"], ["4 0"], ["4 0 0"], [""], ["4zB", ""], ["5", ""], ["5 __main__", ""], ["5 7", ""], ["5 7", "1", ""], ["5 7", "Nrs", "1", ""], ["5 7", "10", "Nrs", "1", ""], ["5 7", "10", "Nrs", ""], ["5 7", "10", "Nrs"], ["5 5 7", "10", "Nrs"], ["1"], ["1 pSp"], ["1 3"], ["9iK"], ["Hf3", "__main__", "0"], ["7", "__main__", "0"], ["__main__", "7", "__main__", "0"], ["__main__", "7", "-1", "0"], ["3", "7", "-1", "0"], ["3", "7", "li", "-1", "0"], ["3", "7", "li", "-1", "3", "0"], ["3", "7", "eNG", "li", "-1", "3", "0"], ["lcW"], ["__main__ e-D"], ["7 e-D"], ["7 -1"], ["7", "-1"], ["__main__ __main__", "__main__"], ["__main__ __main__", "-1"], ["__main__ 8", "-1"], ["3 8", "-1"], ["3", "8", "-1"], ["3", "6rR", "8", "-1"], ["3", "6rR", "8", "Num nov authored", "-1"], ["3", "6rR", "Num nov authored", "-1"], ["6rR", "Num nov authored", "-1"], ["8", "Num nov authored", "-1"], ["8", "Num nov authored"], ["8", "Num", "nov", "authored"], ["8", "nov", "authored"], ["8", "__main__", "nov", "authored"], ["8", "__main__", "8", "nov", "authored"], ["8", "8", "nov", "authored"], ["__main__ R1-"], ["6 R1-"], ["6 8"], ["6 6 8"], ["1", ""], ["OSv"], ["2xg"], ["7", "1"], ["3Ed", "7", "1"], ["10", "7", "1"], ["10", "7", "January", "1"], ["10", "7", "January __main__", "1"], ["10", "7", "January __main__", "HeI", "1"], ["10", "January __main__", "HeI", "1"], ["10 c--", "January __main__", "HeI", "1"], ["10 5", "January __main__", "HeI", "1"], ["__main__ 5", "January __main__", "HeI", "1"], ["__main__ 5", "January 2", "HeI", "1"], ["4 5", "January 2", "HeI", "1"], ["4 5", "January 2", "HeI GMD", "1"], ["4 5", "January 2", "HeI GMD", "UKu", "1"], ["4 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "1"], ["30- 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "1"], ["8 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "1"], ["8 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "22 55 87 33", "1"], ["8 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "22 55 1 33", "1"], ["8 5", "January 2", "HeI GMD", "UKu", "22 55 87 33", "22 55 1 __main__", "1"], ["1"], ["Z19", "__main__"], ["7", "__main__"], ["6", "7", "__main__"], ["d5i"], ["9"], ["x*x/2", "9"], ["-1", "9"], ["co", "-1", "9"], ["10", "-1", "9"], ["10", "-1", "10", "9"], ["10 __main__", "-1", "10", "9"], ["10 7", "-1", "10", "9"], ["10 7", "-1", "10", "djt", "9"], ["10 5", "-1", "10", "djt", "9"], ["10 5", "3b2", "-1", "10", "djt", "9"], ["10 5", "3b2", "-1", "10 -eM", "djt", "9"], ["10 5", "3b2", "-1", "10 -eM", "djt __main__", "9"], ["10 5", "3b2", "-1", "10", "-eM", "djt __main__", "9"], ["__main__ 5", "3b2", "-1", "10", "-eM", "djt __main__", "9"], ["__main__ 5", "3b2", "-1", "10", "-eM", "djt 9", "9"], ["10 5", "3b2", "-1", "10", "-eM", "djt 9", "9"], ["10 5", "3b2", "-1", "10", "1 2 34 5 6 1 6 1", "-eM", "djt 9", "9"], ["13s"], ["y : a b", "0"], ["9 : a b", "0"], ["9 8 a b", "0"], ["9 8 5 b", "0"], ["9 8 5 6", "0"], ["9 8 5 __main__", "0"], ["9 8 5 3", "0"], ["9 8 5 3", "0 L2X"], ["9 8 5 3", "__main__ L2X"], ["9 8 5 3", "__main__ L2X L2X"], ["4 8 5 3", "__main__ L2X L2X"], ["4 8 5 3", "__main__ L2X 4 8 5 3"], ["4", "8", "5", "3", "__main__ L2X 4 8 5 3"], ["5", "4", "8", "5", "3", "__main__ L2X 4 8 5 3"], ["5", "4", "5", "3", "__main__ L2X 4 8 5 3"], ["5", "5", "4", "5", "3", "__main__ L2X 4 8 5 3"], ["5", "5", "4 __main__", "5", "3", "__main__ L2X 4 8 5 3"], ["Hnh"], ["__main__", "5"], ["-1", "5"], ["6Eu"], ["7"], ["__main__ xEb"], ["6 xEb"], ["6 -1"], ["6 T"], ["6 5"], ["6 5 5"], ["1"], ["dj3"], ["__main__", "9"], ["9", "9"], ["9", "5", "9"], ["9 __main__", "5", "9"], ["9 -1", "5", "9"], ["9 -1", "9"], ["Efe"], ["2"], ["__main__", "2"], ["4", "2"], ["4", "__main__", "2"], ["4", "__main__ __main__", "2"], ["-1+22-3+4-5+123", "4", "__main__ __main__", "2"], ["5", "4", "__main__ __main__", "2"], ["4", "__main__ __main__"], ["4", "ABC __main__"], ["24", "4", "ABC __main__"], ["__main__", "24", "4", "ABC __main__"], ["__main__", "24", "4", "ABC 5"], ["5", "24", "4", "ABC 5"], ["5", "24", "4", "ABC 1"], ["5", "d13", "24", "4", "ABC 1"], ["5", "d13 __main__", "24", "4", "ABC 1"], ["d13 __main__", "24", "4", "ABC 1"], ["8 __main__", "24", "4", "ABC 1"], ["8 2", "24", "4", "ABC 1"], ["8 2", "4", "ABC 1"], ["8 2", "4", "5 1"], ["__main__ ef4"], ["1 ef4"], ["1 8"], ["__main__ 8"], ["3 8"], ["1", "8"], ["__main__ 1"], ["7 1"]]}]], [{"CorrectInputs": [[["3 7"], 1530747249]], "UniqueId": "a27edc6c-6a92-4199-e264-86b71fc50d3c_0", "CoverageInfo": [8, 7, 2, 0, 10, "2-8"], "TimeStamp": 1530747024, "BadInput": ["3"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    a,b=input().split()\nValueError: not enough values to unpack (expected 2, got 1)\n", "ip": "95.131.147.1"}, [{"EndTime": 1552297588.527449, "FinalMinimizedSolution": ["3 3"], "FinalCoverage": [8, 0, 2, 0, 100], "FinalSolution": ["3 3"], "StartTime": 1552297587.6615024, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3"]]}, {"EndTime": 1552297589.580262, "FinalMinimizedSolution": ["3 2"], "FinalCoverage": [8, 2, 2, 1, 70, "6-7,", "5->6"], "FinalSolution": ["3 2"], "StartTime": 1552297588.5276034, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["3"], ["3"], ["3 K-T"]]}, {"EndTime": 1552297590.6341884, "FinalMinimizedSolution": ["3 7"], "FinalCoverage": [8, 0, 2, 0, 100], "FinalSolution": ["3 7"], "StartTime": 1552297589.580432, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["3"], ["3"], ["3 K-T"], ["3"], ["3 n1r"]]}, {"EndTime": 1552297598.0212955, "FinalMinimizedSolution": ["1 10"], "FinalCoverage": [8, 0, 2, 0, 100], "FinalSolution": ["1 10"], "StartTime": 1552297590.6343708, "FoundSolution": true, "NumProbesMade": 38, "InputHistory": [["3"], ["3"], ["3 K-T"], ["3"], ["3 n1r"], ["3"], ["3 3 3"], ["3", "3", "3"], ["3", "3", "3 3"], ["3", "3", "3 3 3"], ["3", "3", "3 3 3 3"], ["3", "3", "3 3 3 3 3"], ["3", "3", "3 3 3 3 3 3"], ["3", "3", "3 3 3 3 3 3 3"], ["3", "3", "3 3 3 3 3 3 3 3"], ["3", "3", "3 3 3 3 3 3 3 3 3"], ["3", "3", "3 3 3 3 3 3 3 3 3 3"], ["3", "3", "3 3 3 3 3 3 3 3 3 3 3"], ["3", "3"], ["3", "3 3"], ["3", "3 3 3"], ["3", "3 3 3 3"], ["3", "3 3 3 3 3"], ["3", "3 3 3 3 3 3"], ["3", "3 3 3 3 3 3 3"], ["3", "3 3 3 3 3 3 3 3"], ["3", "3 3 3 3 3 3 3 3 3"], ["3", "3 3 3 3 3 3 3 3 3 3"], ["3", "3 3 3 3 3 3 3 3 3 3 3"], ["WHE", "3"], ["WHE", "3 3"], ["WHE", "3 3 3"], ["WHE", "3 3 3 3"], ["WHE", "3 3 3 3 3"], ["WHE", "3 3 3 3 3 3"], ["WHE", "3 3 3 3 3 3 3"], ["WHE", "3 3 3 3 3 3 3 3"], ["WHE", "3 3 3 3 3 3 3 3 3"], ["WHE", "3 3 3 3 3 3 3 3 3 3"], ["WHE", "3 3 3 3 3 3 3 3 3 3 3"], ["WHE"], ["WHE WHE"], ["WHE 10"]]}, {"EndTime": 1552297603.79519, "FinalMinimizedSolution": ["-1 0"], "FinalCoverage": [8, 0, 2, 0, 100], "FinalSolution": ["-1 0"], "StartTime": 1552297598.0217867, "FoundSolution": true, "NumProbesMade": 27, "InputHistory": [["3"], ["3"], ["3 K-T"], ["3"], ["3 n1r"], ["3"], ["3 3 3"], ["3", "3", "3"], ["3", "3", "3 3"], ["3", "3", "3 3 3"], ["3", "3", "3 3 3 3"], ["3", "3", "3 3 3 3 3"], ["3", "3", "3 3 3 3 3 3"], ["3", "3", "3 3 3 3 3 3 3"], ["3", "3", "3 3 3 3 3 3 3 3"], ["3", "3", "3 3 3 3 3 3 3 3 3"], ["3", "3", "3 3 3 3 3 3 3 3 3 3"], ["3", "3", "3 3 3 3 3 3 3 3 3 3 3"], ["3", "3"], ["3", "3 3"], ["3", "3 3 3"], ["3", "3 3 3 3"], ["3", "3 3 3 3 3"], ["3", "3 3 3 3 3 3"], ["3", "3 3 3 3 3 3 3"], ["3", "3 3 3 3 3 3 3 3"], ["3", "3 3 3 3 3 3 3 3 3"], ["3", "3 3 3 3 3 3 3 3 3 3"], ["3", "3 3 3 3 3 3 3 3 3 3 3"], ["WHE", "3"], ["WHE", "3 3"], ["WHE", "3 3 3"], ["WHE", "3 3 3 3"], ["WHE", "3 3 3 3 3"], ["WHE", "3 3 3 3 3 3"], ["WHE", "3 3 3 3 3 3 3"], ["WHE", "3 3 3 3 3 3 3 3"], ["WHE", "3 3 3 3 3 3 3 3 3"], ["WHE", "3 3 3 3 3 3 3 3 3 3"], ["WHE", "3 3 3 3 3 3 3 3 3 3 3"], ["WHE"], ["WHE WHE"], ["WHE 10"], ["3"], ["3 b5q"], ["3", "7"], ["3", "7 7"], ["3", "7 7 7"], ["3", "7 7 7 7"], ["3", "7 7 7 7 7"], ["3", "7 7 7 7 7 7"], ["3", "7 7 7 7 7 7 7"], ["3", "7 7 7 7 7 7 7 7"], ["3", "7 7 7 7 7 7 7 7 7"], ["3", "7 7 7 7 7 7 7 7 7 7"], ["3", "7 7 7 7 7 7 7 7 7 7 7"], ["1+1", "3"], ["1+1", "3 3"], ["1+1", "3 3 3"], ["1+1", "3 3 3 3"], ["1+1", "3 3 3 3 3"], ["1+1", "3 3 3 3 3 3"], ["1+1", "3 3 3 3 3 3 3"], ["1+1", "3 3 3 3 3 3 3 3"], ["1+1", "3 3 3 3 3 3 3 3 3"], ["1+1", "3 3 3 3 3 3 3 3 3 3"], ["1+1", "3 3 3 3 3 3 3 3 3 3 3"], ["1+1"], ["1+1 1+1"], ["1+1 0"]]}]], [{"CorrectInputs": [[["1", "5 7", "0 1", "0 4", "1 2", "1 3", "1 4", "2 3", "3 4"], 1534766721]], "UniqueId": "c9b5099f-7f34-4d7d-c851-7971899a7a61_0", "CoverageInfo": [22, 18, 16, 0, 11, "21-25,", "28-30,", "34-46"], "TimeStamp": 1534766592, "BadInput": ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 33, in <module>\n    t = int(input())\nValueError: invalid literal for int() with base 10: '1 9\\t5 7 10\\t0 1 11\\t0 4 12\\t1 2 13\\t1 3 14\\t1 4 15\\t2 3 16\\t3 4'\n", "ip": "221.219.155.249"}, [{"InputHistory": [["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n'' 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 -1\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 -1\n4 it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552343148.070642, "StartTime": 1552343136.7282717}, {"InputHistory": [["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n'' 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 -1\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 -1\n4 it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["9"], ["9", "3W5"], ["9", "0"], [], ["6"], ["6", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["6", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "10", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "10", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "8"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "10", "1", "8"], ["9", "10", "1", "8"], ["9", "10", "1", "EUe", "8"], ["9", "t6M", "10", "1", "EUe", "8"], ["9", "6", "10", "1", "EUe", "8"], ["9", "6", "10", "EUe", "8"], ["9", "0,\",-1", "6", "10", "EUe", "8"], ["9", "3", "6", "10", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "7\n0", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "7\n0", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "EUe", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "EUe", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "''", "XwP GNh", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "8"], ["'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 try 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 5 breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 5 breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\nand it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\n1d it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 2 adjacency list\n1d it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 2 adjacency list\n1d it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-4-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552343159.4334874, "StartTime": 1552343148.0714617}, {"EndTime": 1552343160.6323566, "FinalMinimizedSolution": ["-1"], "FinalCoverage": null, "FinalSolution": ["-1"], "StartTime": 1552343159.4362009, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n'' 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 -1\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 -1\n4 it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["9"], ["9", "3W5"], ["9", "0"], [], ["6"], ["6", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["6", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "10", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "10", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "8"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "10", "1", "8"], ["9", "10", "1", "8"], ["9", "10", "1", "EUe", "8"], ["9", "t6M", "10", "1", "EUe", "8"], ["9", "6", "10", "1", "EUe", "8"], ["9", "6", "10", "EUe", "8"], ["9", "0,\",-1", "6", "10", "EUe", "8"], ["9", "3", "6", "10", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "7\n0", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "7\n0", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "EUe", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "EUe", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "''", "XwP GNh", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "8"], ["'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 try 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 5 breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 5 breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\nand it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\n1d it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 2 adjacency list\n1d it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 2 adjacency list\n1d it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-4-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["3"], ["3", "FHx"], ["3", "8"], ["3", "10", "8"], [""]]}, {"InputHistory": [["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n'' 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 -1\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 -1\n4 it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["9"], ["9", "3W5"], ["9", "0"], [], ["6"], ["6", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["6", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "10", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "10", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "8"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "10", "1", "8"], ["9", "10", "1", "8"], ["9", "10", "1", "EUe", "8"], ["9", "t6M", "10", "1", "EUe", "8"], ["9", "6", "10", "1", "EUe", "8"], ["9", "6", "10", "EUe", "8"], ["9", "0,\",-1", "6", "10", "EUe", "8"], ["9", "3", "6", "10", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "7\n0", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "7\n0", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "EUe", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "EUe", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "''", "XwP GNh", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "8"], ["'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 try 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 5 breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 5 breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\nand it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\n1d it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 2 adjacency list\n1d it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 2 adjacency list\n1d it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-4-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["3"], ["3", "FHx"], ["3", "8"], ["3", "10", "8"], [""], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["33 59", "3"], ["1", "3"], ["1"], ["1", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["1", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "XWS"], ["1", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 cpb"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 2"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 2", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 2", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "ozl"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 2", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "4"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 2", "", "4"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 2", "", "4 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "", "", "4 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "", "", "4 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "", "", "4 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2", "-1", "0", "", "1", "11\t0", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2", "-1", "0", "", "1", "11\t0", "0", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4 eDi", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4 eDi", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", ""], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "n1W", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4 eDi", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", ""], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0 ZT9", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "n1W", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4 eDi", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", ""], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0 ZT9", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "11\t0", "2", "13\t1", "3", "n1W", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4 eDi", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", ""], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0 ZT9", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "11\t0", "0", "7Ps", "4", "12\t1", "11\t0", "2", "13\t1", "3", "n1W", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4 eDi", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", ""], ["d2-", ""], ["4", ""], ["Q3X"], ["2"], ["2", "2"], ["3gZ", "2"], ["6", "2"], ["2", "6", "2"], ["2", "6", "VWT", "2"], ["2", "6", "VWT", "2 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 3 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 3 2 on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 3 2 on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My questi0 is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 3 2 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My questi0 is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 3 2 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My questi0 is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.6.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 3 2 3 5 to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My questi0 is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.6.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552343172.0000584, "StartTime": 1552343160.6351528}, {"EndTime": 1552343172.8722198, "FinalMinimizedSolution": ["0"], "FinalCoverage": [22, 17, 16, 1, 16, "21-25,", "28-30,", "35-46,", "34->35"], "FinalSolution": ["0"], "StartTime": 1552343172.0040197, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n'' 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try to implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 to try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try to implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 to try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 try 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 try -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 implement breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 implement an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 implement breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 implement an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first and depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how can 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\nand it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 an adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first and depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how can 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\nand it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 an adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 adjacency list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-adjacency-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 adjacency list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 list\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-list/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 list\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 -1\n8d it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["5", "1 9\t5 7 10\t0 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 11\t0 3 \n8 10 7 8 3 5 0 7 -1 3 8 9 -1\n4 it actually worked out. My questi6 is how c3 10 use my data\nstructure 5 10 breath first 7d depth first search for it.\nlink: https://practice.10.org/problems/print-4-5/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n8 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "5 \n7 1 8 0 10 0 -1 3 3 4 1 6 8\n2d it actually worked out. My questi1 is how c6 3 use my data\nstructure 8 5 breath first 9d depth first search for it.\nlink: https://practice.5.org/problems/print-3-10/0\n\nA good input string 8 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["9"], ["9", "3W5"], ["9", "0"], [], ["6"], ["6", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["6", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "10", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "10", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "8"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "10", "1", "8"], ["9", "10", "1", "8"], ["9", "10", "1", "EUe", "8"], ["9", "t6M", "10", "1", "EUe", "8"], ["9", "6", "10", "1", "EUe", "8"], ["9", "6", "10", "EUe", "8"], ["9", "0,\",-1", "6", "10", "EUe", "8"], ["9", "3", "6", "10", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "7\n0", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "7\n0", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "EUe", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "EUe", "8"], ["9", "EUe", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "10", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "''", "XwP", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "8"], ["9", "0", "3", "6", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my 10 to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "''", "XwP GNh", "\nProblem:", "So", "I", "was", "on", "geeksforgeeks", "to", "try", "to", "implement", "an", "adjacency", "list\nand", "it", "actually '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "worked", "out.", "My 8kN", "question", "is", "how", "can", "I", "use", "my", "data\nstructure", "to", "implement '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I -100000 my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "breath", "first", "and", "depth", "first", "search", "for", "4", "it.\nlink:", "https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA", "good", "input", "string", "to", "use", "is:\n1\n5", "1\n0", "4\n1", "2\n1", "3\n1", "4\n2", "3\n3 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "4\n''", "5", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "8"], ["'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try to implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 to try 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 try 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 implement breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 implement an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 5 breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 5 breath first and depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\nand it actually worked out. My questi8 is how can 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\nand it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 an adjacency list\n1d it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 2 adjacency list\n1d it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-adjacency-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["2\n8 6 5 7 7 5 8 1 6 6 2 adjacency list\n1d it actually worked out. My questi8 is how c3 5 use my data\nstructure 1 5 breath first 6d depth first search for it.\nlink: https://practice.2.org/problems/print-4-list/0\n\nA good input string 7 use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["3"], ["3", "FHx"], ["3", "8"], ["3", "10", "8"], [""], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["33 59", "3"], ["1", "3"], ["1"], ["1", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["1", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "XWS"], ["1", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "6"], ["1", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 cpb"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 2"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 2", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 2", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "ozl"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 2", "1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4", "4"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 2", "", "4"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "6 2", "", "4 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "", "", "4 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "", "", "4 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "", "", "4 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 15\t2 3 16\t3 4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2", "-1", "0", "", "1", "11\t0", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2", "-1", "0", "", "1", "11\t0", "0", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4 eDi", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", "4 1 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1"], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4 eDi", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", ""], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "n1W", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4 eDi", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", ""], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0 ZT9", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "2", "13\t1", "3", "n1W", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4 eDi", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", ""], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0 ZT9", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "11\t0", "0", "7Ps", "4", "12\t1", "11\t0", "2", "13\t1", "3", "n1W", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4 eDi", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", ""], ["1", "1 9\t5 7 2 -1 0  1 11\t0 4 12\t1 2 13\t1 3 2 4 1 3 16\t3 4", "1", "9\t5", "7", "2 4 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "-1", "0 ZT9", " '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''", "1", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "11\t0", "0", "7Ps", "4", "12\t1", "11\t0", "2", "13\t1", "3", "n1W", "1", "3", "2", "4", "15\t2 8XN", "3", "16\t3", "4 eDi", "9 \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n-1", "", "", ""], ["d2-", ""], ["4", ""], ["Q3X"], ["2"], ["2", "2"], ["3gZ", "2"], ["6", "2"], ["2", "6", "2"], ["2", "6", "VWT", "2"], ["2", "6", "VWT", "2 '' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked out. My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["'' \nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\nProblem: So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 So I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can I use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 I was on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 3 was on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 3 2 on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My question is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 3 2 on geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My questi0 is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 3 2 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My questi0 is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.geeksforgeeks.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 3 2 3 geeksforgeeks to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My questi0 is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.6.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["3\n9 9 3 2 3 5 to try to implement an adjacency list\nand it actually worked 1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4 My questi0 is how can 7 use my data\nstructure to implement breath first and depth first search for it.\nlink: https://practice.6.org/problems/print-adjacency-list/0\n\nA good input string to use is:\n1\n5 7\n0 1\n0 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''"], ["1 9\t5 7 10\t0 1 11\t0 4 12\t1 2 13\t1 3 14\t1 4 15\t2 3 16\t3 4"]]}]], [{"CorrectInputs": [[["3.3 3.3 3.3"], 1541695040]], "UniqueId": "9b61e6b2-f89c-4d31-ce0a-ccd850645f1f_0", "CoverageInfo": [5, 1, 2, 1, 71, "6,", "3->6"], "TimeStamp": 1541695019, "BadInput": ["3.3 3.3 3.3 "], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 4, in <module>\n    numerot[i] = float(numerot[i])\nValueError: could not convert string to float: \n", "ip": "143.51.113.181"}, [{"EndTime": 1552358443.0511117, "FinalMinimizedSolution": ["1 2 3"], "FinalCoverage": [5, 0, 2, 0, 100], "FinalSolution": ["1 2 3", "2", "0.7 3.3 3.3 3.3    ", "", "", "", "  ", "$9.95", "2"], "StartTime": 1552358436.4620266, "FoundSolution": true, "NumProbesMade": 29, "InputHistory": [["3.3 3.3 3.3 "], ["6.8"], ["3.3 3.3 3.3 ", "6.8"], ["4.8", "6.8"], ["4.8", "6.8", "6.8"], ["4.8", "6.8  ", "6.8"], ["4.8", "", "6.8"], ["4.8", "", "", "6.8"], [], ["2.3"], [" ", "2.3"], ["0.7", "2.3"], ["2", "0.7", "2.3"], ["2", "0.7", "2.3", "2.3"], ["2", "0.7  ", "2.3", "2.3"], ["2", "0.7  ", "0.7  ", "2.3", "2.3"], ["2", "0.7  ", "0.7  ", "2.3"], ["2", "0.7  0.7  ", "0.7  ", "2.3"], ["2", "0.7  0.7  ", "0.7", "", "", "2.3"], ["2", "0.7  0.7  ", "0.7", "", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "0.7", "", " 2 3 4", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", " 2 3 4", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", " ", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", " ", "$9.95", "2", "2.3"], ["2", "0.7 3.3 3.3 3.3  0.7  ", "", "", "", " ", "$9.95", "2", "2.3"], ["2", "0.7 3.3 3.3 3.3  0.7  ", "", "", "", " ", "$9.95", "2"], ["2", "0.7 3.3 3.3 3.3    ", "", "", "", " ", "$9.95", "2"], ["2", "0.7 3.3 3.3 3.3    ", "", "", "", "  ", "$9.95", "2"]]}, {"EndTime": 1552358447.8542335, "FinalMinimizedSolution": ["1.0 6.4 5.3"], "FinalCoverage": [5, 0, 2, 0, 100], "FinalSolution": ["1.0 6.4 5.3", "10.1", "5.9", "3.0"], "StartTime": 1552358443.0516508, "FoundSolution": true, "NumProbesMade": 21, "InputHistory": [["3.3 3.3 3.3 "], ["6.8"], ["3.3 3.3 3.3 ", "6.8"], ["4.8", "6.8"], ["4.8", "6.8", "6.8"], ["4.8", "6.8  ", "6.8"], ["4.8", "", "6.8"], ["4.8", "", "", "6.8"], [], ["2.3"], [" ", "2.3"], ["0.7", "2.3"], ["2", "0.7", "2.3"], ["2", "0.7", "2.3", "2.3"], ["2", "0.7  ", "2.3", "2.3"], ["2", "0.7  ", "0.7  ", "2.3", "2.3"], ["2", "0.7  ", "0.7  ", "2.3"], ["2", "0.7  0.7  ", "0.7  ", "2.3"], ["2", "0.7  0.7  ", "0.7", "", "", "2.3"], ["2", "0.7  0.7  ", "0.7", "", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "0.7", "", " 2 3 4", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", " 2 3 4", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", " ", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", " ", "$9.95", "2", "2.3"], ["2", "0.7 3.3 3.3 3.3  0.7  ", "", "", "", " ", "$9.95", "2", "2.3"], ["2", "0.7 3.3 3.3 3.3  0.7  ", "", "", "", " ", "$9.95", "2"], ["2", "0.7 3.3 3.3 3.3    ", "", "", "", " ", "$9.95", "2"], ["2", "0.7 3.3 3.3 3.3    ", "", "", "", "  ", "$9.95", "2"], ["3.3 3.3 3.3 "], ["9.9"], ["9.9 t2T"], ["9.9 4.9"], ["9.9 3.3 3.3 3.3 "], ["-1.1"], [" "], ["-1.7"], ["3.3 3.3 3.3 ", "-1.7"], ["9.2", "-1.7"], ["9.2", " ", "-1.7"], ["9.2  ", " ", "-1.7"], ["9.2  ", "-1.4", "-1.7"], ["9.2  ", "3.0", "-1.7"], ["5.9", "3.0", "-1.7"], ["1Zu", "5.9", "3.0", "-1.7"], ["10.1", "5.9", "3.0", "-1.7"], ["10.1", "5.9", "3.0"], ["create foo global", "10.1", "5.9", "3.0"], ["1.0 foo global", "10.1", "5.9", "3.0"], ["1.0 6.4 global", "10.1", "5.9", "3.0"]]}, {"EndTime": 1552358450.9061139, "FinalMinimizedSolution": ["41 234 643 23"], "FinalCoverage": [5, 0, 2, 0, 100], "FinalSolution": ["41 234 643 23", "1.6", "5.9"], "StartTime": 1552358447.854942, "FoundSolution": true, "NumProbesMade": 12, "InputHistory": [["3.3 3.3 3.3 "], ["6.8"], ["3.3 3.3 3.3 ", "6.8"], ["4.8", "6.8"], ["4.8", "6.8", "6.8"], ["4.8", "6.8  ", "6.8"], ["4.8", "", "6.8"], ["4.8", "", "", "6.8"], [], ["2.3"], [" ", "2.3"], ["0.7", "2.3"], ["2", "0.7", "2.3"], ["2", "0.7", "2.3", "2.3"], ["2", "0.7  ", "2.3", "2.3"], ["2", "0.7  ", "0.7  ", "2.3", "2.3"], ["2", "0.7  ", "0.7  ", "2.3"], ["2", "0.7  0.7  ", "0.7  ", "2.3"], ["2", "0.7  0.7  ", "0.7", "", "", "2.3"], ["2", "0.7  0.7  ", "0.7", "", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "0.7", "", " 2 3 4", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", " 2 3 4", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", " ", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", " ", "$9.95", "2", "2.3"], ["2", "0.7 3.3 3.3 3.3  0.7  ", "", "", "", " ", "$9.95", "2", "2.3"], ["2", "0.7 3.3 3.3 3.3  0.7  ", "", "", "", " ", "$9.95", "2"], ["2", "0.7 3.3 3.3 3.3    ", "", "", "", " ", "$9.95", "2"], ["2", "0.7 3.3 3.3 3.3    ", "", "", "", "  ", "$9.95", "2"], ["3.3 3.3 3.3 "], ["9.9"], ["9.9 t2T"], ["9.9 4.9"], ["9.9 3.3 3.3 3.3 "], ["-1.1"], [" "], ["-1.7"], ["3.3 3.3 3.3 ", "-1.7"], ["9.2", "-1.7"], ["9.2", " ", "-1.7"], ["9.2  ", " ", "-1.7"], ["9.2  ", "-1.4", "-1.7"], ["9.2  ", "3.0", "-1.7"], ["5.9", "3.0", "-1.7"], ["1Zu", "5.9", "3.0", "-1.7"], ["10.1", "5.9", "3.0", "-1.7"], ["10.1", "5.9", "3.0"], ["create foo global", "10.1", "5.9", "3.0"], ["1.0 foo global", "10.1", "5.9", "3.0"], ["1.0 6.4 global", "10.1", "5.9", "3.0"], ["3.3 3.3 3.3 "], ["1.7"], ["1.7 iX1"], ["1.7 8.5"], ["1.7  "], ["8.4"], ["m1n"], ["10.1"], ["  "], ["5.9"], ["3.3 3.3 3.3 ", "5.9"], ["1.6", "5.9"]]}, {"EndTime": 1552358455.281454, "FinalMinimizedSolution": ["0 7 -1"], "FinalCoverage": [5, 0, 2, 0, 100], "FinalSolution": ["0 7 -1", "8.7", ""], "StartTime": 1552358450.9068942, "FoundSolution": true, "NumProbesMade": 19, "InputHistory": [["3.3 3.3 3.3 "], ["6.8"], ["3.3 3.3 3.3 ", "6.8"], ["4.8", "6.8"], ["4.8", "6.8", "6.8"], ["4.8", "6.8  ", "6.8"], ["4.8", "", "6.8"], ["4.8", "", "", "6.8"], [], ["2.3"], [" ", "2.3"], ["0.7", "2.3"], ["2", "0.7", "2.3"], ["2", "0.7", "2.3", "2.3"], ["2", "0.7  ", "2.3", "2.3"], ["2", "0.7  ", "0.7  ", "2.3", "2.3"], ["2", "0.7  ", "0.7  ", "2.3"], ["2", "0.7  0.7  ", "0.7  ", "2.3"], ["2", "0.7  0.7  ", "0.7", "", "", "2.3"], ["2", "0.7  0.7  ", "0.7", "", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "0.7", "", " 2 3 4", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", " 2 3 4", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", " ", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", " ", "$9.95", "2", "2.3"], ["2", "0.7 3.3 3.3 3.3  0.7  ", "", "", "", " ", "$9.95", "2", "2.3"], ["2", "0.7 3.3 3.3 3.3  0.7  ", "", "", "", " ", "$9.95", "2"], ["2", "0.7 3.3 3.3 3.3    ", "", "", "", " ", "$9.95", "2"], ["2", "0.7 3.3 3.3 3.3    ", "", "", "", "  ", "$9.95", "2"], ["3.3 3.3 3.3 "], ["9.9"], ["9.9 t2T"], ["9.9 4.9"], ["9.9 3.3 3.3 3.3 "], ["-1.1"], [" "], ["-1.7"], ["3.3 3.3 3.3 ", "-1.7"], ["9.2", "-1.7"], ["9.2", " ", "-1.7"], ["9.2  ", " ", "-1.7"], ["9.2  ", "-1.4", "-1.7"], ["9.2  ", "3.0", "-1.7"], ["5.9", "3.0", "-1.7"], ["1Zu", "5.9", "3.0", "-1.7"], ["10.1", "5.9", "3.0", "-1.7"], ["10.1", "5.9", "3.0"], ["create foo global", "10.1", "5.9", "3.0"], ["1.0 foo global", "10.1", "5.9", "3.0"], ["1.0 6.4 global", "10.1", "5.9", "3.0"], ["3.3 3.3 3.3 "], ["1.7"], ["1.7 iX1"], ["1.7 8.5"], ["1.7  "], ["8.4"], ["m1n"], ["10.1"], ["  "], ["5.9"], ["3.3 3.3 3.3 ", "5.9"], ["1.6", "5.9"], ["3.3 3.3 3.3 "], ["0.7"], [" ", "0.7"], ["-1.5", "0.7"], ["CWx"], ["7.8"], ["3.3 3.3 3.3 ", "7.8"], ["3.4", "7.8"], ["7.8", "3.4", "7.8"], ["7.8", "7.8"], [" ", "7.8", "7.8"], [" ", "10.5", "7.8"], [" ", "8.10", "7.8"], ["2.4", "8.10", "7.8"], [" ", "2.4", "8.10", "7.8"], ["4.5", "2.4", "8.10", "7.8"], ["4.5", "2.4", "8.10", "56", "7.8"], ["", ""], ["8.7", ""]]}, {"EndTime": 1552358458.8404143, "FinalMinimizedSolution": ["8.7 6.0 -1.8 2.4"], "FinalCoverage": [5, 0, 2, 0, 100], "FinalSolution": ["8.7 6.0 -1.8 2.4", ""], "StartTime": 1552358455.2823873, "FoundSolution": true, "NumProbesMade": 15, "InputHistory": [["3.3 3.3 3.3 "], ["6.8"], ["3.3 3.3 3.3 ", "6.8"], ["4.8", "6.8"], ["4.8", "6.8", "6.8"], ["4.8", "6.8  ", "6.8"], ["4.8", "", "6.8"], ["4.8", "", "", "6.8"], [], ["2.3"], [" ", "2.3"], ["0.7", "2.3"], ["2", "0.7", "2.3"], ["2", "0.7", "2.3", "2.3"], ["2", "0.7  ", "2.3", "2.3"], ["2", "0.7  ", "0.7  ", "2.3", "2.3"], ["2", "0.7  ", "0.7  ", "2.3"], ["2", "0.7  0.7  ", "0.7  ", "2.3"], ["2", "0.7  0.7  ", "0.7", "", "", "2.3"], ["2", "0.7  0.7  ", "0.7", "", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "0.7", "", " 2 3 4", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", " 2 3 4", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", " ", "$9.95", "2.3"], ["2", "0.7  0.7  ", "", "", "", " ", "$9.95", "2", "2.3"], ["2", "0.7 3.3 3.3 3.3  0.7  ", "", "", "", " ", "$9.95", "2", "2.3"], ["2", "0.7 3.3 3.3 3.3  0.7  ", "", "", "", " ", "$9.95", "2"], ["2", "0.7 3.3 3.3 3.3    ", "", "", "", " ", "$9.95", "2"], ["2", "0.7 3.3 3.3 3.3    ", "", "", "", "  ", "$9.95", "2"], ["3.3 3.3 3.3 "], ["9.9"], ["9.9 t2T"], ["9.9 4.9"], ["9.9 3.3 3.3 3.3 "], ["-1.1"], [" "], ["-1.7"], ["3.3 3.3 3.3 ", "-1.7"], ["9.2", "-1.7"], ["9.2", " ", "-1.7"], ["9.2  ", " ", "-1.7"], ["9.2  ", "-1.4", "-1.7"], ["9.2  ", "3.0", "-1.7"], ["5.9", "3.0", "-1.7"], ["1Zu", "5.9", "3.0", "-1.7"], ["10.1", "5.9", "3.0", "-1.7"], ["10.1", "5.9", "3.0"], ["create foo global", "10.1", "5.9", "3.0"], ["1.0 foo global", "10.1", "5.9", "3.0"], ["1.0 6.4 global", "10.1", "5.9", "3.0"], ["3.3 3.3 3.3 "], ["1.7"], ["1.7 iX1"], ["1.7 8.5"], ["1.7  "], ["8.4"], ["m1n"], ["10.1"], ["  "], ["5.9"], ["3.3 3.3 3.3 ", "5.9"], ["1.6", "5.9"], ["3.3 3.3 3.3 "], ["0.7"], [" ", "0.7"], ["-1.5", "0.7"], ["CWx"], ["7.8"], ["3.3 3.3 3.3 ", "7.8"], ["3.4", "7.8"], ["7.8", "3.4", "7.8"], ["7.8", "7.8"], [" ", "7.8", "7.8"], [" ", "10.5", "7.8"], [" ", "8.10", "7.8"], ["2.4", "8.10", "7.8"], [" ", "2.4", "8.10", "7.8"], ["4.5", "2.4", "8.10", "7.8"], ["4.5", "2.4", "8.10", "56", "7.8"], ["", ""], ["8.7", ""], ["3.3 3.3 3.3 "], [""], ["10.3"], [" 123.5"], ["0.2"], ["3.3 3.3 3.3 ", "0.2"], ["3.3 3.3 3.3 ", "3.6"], ["3.3 3.3 3.3 ", "-1.9"], ["3.7", "-1.9"], ["3.7", " ", "-1.9"], ["3.7", "3.7", " ", "-1.9"], ["Osro roxre osri caftide", ""], ["8.7 roxre osri caftide", ""], ["8.7 6.0 osri caftide", ""], ["8.7 6.0 -1.8 caftide", ""]]}]], [{"CorrectInputs": [[["5 6 7 8"], 1525090658]], "UniqueId": "db27e7f8-0db8-432f-afb4-849765a3055e_0", "CoverageInfo": [3, 1, 2, 1, 60, "4,", "3->4"], "TimeStamp": 1525090618, "BadInput": ["5, 6, 7, 8"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 3, in <module>\n    mynums = [int(i) for i in s.split()]\n  File \"temp2018.py\", line 3, in <listcomp>\n    mynums = [int(i) for i in s.split()]\nValueError: invalid literal for int() with base 10: '5,'\n", "ip": "217.33.240.50"}, [{"EndTime": 1552281646.1641757, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 2, 0, 100], "FinalSolution": ["10 10 4 8"], "StartTime": 1552281645.0653887, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["5, 6, 7, 8"], ["10 6, 7, 8"], ["10 10 7, 8"]]}, {"EndTime": 1552281647.2654855, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 2, 0, 100], "FinalSolution": ["4 -1 4 8"], "StartTime": 1552281646.1643572, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["5, 6, 7, 8"], ["10 6, 7, 8"], ["10 10 7, 8"], ["5, 6, 7, 8"], ["4 6, 7, 8"], ["4 -1 7, 8"]]}, {"EndTime": 1552281648.344448, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 2, 0, 100], "FinalSolution": ["2 0 6 8"], "StartTime": 1552281647.265685, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["5, 6, 7, 8"], ["10 6, 7, 8"], ["10 10 7, 8"], ["5, 6, 7, 8"], ["4 6, 7, 8"], ["4 -1 7, 8"], ["5, 6, 7, 8"], ["2 6, 7, 8"], ["2 0 7, 8"]]}, {"EndTime": 1552281649.4457304, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 2, 0, 100], "FinalSolution": ["6 -1 -1 8"], "StartTime": 1552281648.3446627, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["5, 6, 7, 8"], ["10 6, 7, 8"], ["10 10 7, 8"], ["5, 6, 7, 8"], ["4 6, 7, 8"], ["4 -1 7, 8"], ["5, 6, 7, 8"], ["2 6, 7, 8"], ["2 0 7, 8"], ["5, 6, 7, 8"], ["6 6, 7, 8"], ["6 -1 7, 8"]]}, {"EndTime": 1552281650.546787, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 2, 0, 100], "FinalSolution": ["1 2 8 8"], "StartTime": 1552281649.445965, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["5, 6, 7, 8"], ["10 6, 7, 8"], ["10 10 7, 8"], ["5, 6, 7, 8"], ["4 6, 7, 8"], ["4 -1 7, 8"], ["5, 6, 7, 8"], ["2 6, 7, 8"], ["2 0 7, 8"], ["5, 6, 7, 8"], ["6 6, 7, 8"], ["6 -1 7, 8"], ["5, 6, 7, 8"], ["1 6, 7, 8"], ["1 2 7, 8"]]}]], [{"CorrectInputs": [[["2 3", "2 2", "3 3", "5 5", "6 6"], 1531759888]], "UniqueId": "f8329dd4-f931-4837-910c-5b5493616215_0", "CoverageInfo": [11, 8, 6, 1, 24, "4-11,", "2->exit"], "TimeStamp": 1531759697, "BadInput": ["2"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 3, in <module>\n    a,b = input().split()\nValueError: not enough values to unpack (expected 2, got 1)\n", "ip": "89.19.96.214"}, [{"EndTime": 1552342479.4583712, "FinalMinimizedSolution": ["2 2", "2 2", "2 2", "2 2", "2 2"], "FinalCoverage": [11, 2, 6, 2, 76, "7,", "9,", "6->7,", "8->9"], "FinalSolution": ["2 2", "2 2", "2 2", "2 2", "2 2"], "StartTime": 1552342477.8268003, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["2"], ["2 2"], ["2 2", "2 2"], ["2 2", "2 2", "2 2"], ["2 2", "2 2", "2 2", "2 2"]]}, {"EndTime": 1552342482.7934556, "FinalMinimizedSolution": ["10 2", "2 2", "8 8", "7 -1", "2 2"], "FinalCoverage": [11, 2, 6, 2, 76, "7,", "9,", "6->7,", "8->9"], "FinalSolution": ["10 2", "2 2", "8 8", "7 -1", "2 2"], "StartTime": 1552342479.4585953, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["2"], ["2 2"], ["2 2", "2 2"], ["2 2", "2 2", "2 2"], ["2 2", "2 2", "2 2", "2 2"], ["2"], ["2 tailored"], ["5.4 2"], ["10 2"], ["10 2", "2"], ["10 2", "2 2"], ["10 2", "2 2", "zGG"], ["10 2", "2 2", "zGG zGG"], ["10 2", "2 2", "zGG 8"], ["10 2", "2 2", "8 8"], ["10 2", "2 2", "8 8", "EO3"], ["10 2", "2 2", "8 8", "EO3 EO3"], ["10 2", "2 2", "8 8", "EO3 -1"], ["10 2", "2 2", "8 8", "7 -1"]]}, {"EndTime": 1552342487.2680304, "FinalMinimizedSolution": ["2 4", "2 4", "2 4", "4 8", "2 4"], "FinalCoverage": [11, 2, 6, 2, 76, "7,", "9,", "6->7,", "8->9"], "FinalSolution": ["2 4", "2 4", "2 4", "4 8", "2 4"], "StartTime": 1552342482.7937975, "FoundSolution": true, "NumProbesMade": 20, "InputHistory": [["2"], ["2 2"], ["2 2", "2 2"], ["2 2", "2 2", "2 2"], ["2 2", "2 2", "2 2", "2 2"], ["2"], ["2 tailored"], ["5.4 2"], ["10 2"], ["10 2", "2"], ["10 2", "2 2"], ["10 2", "2 2", "zGG"], ["10 2", "2 2", "zGG zGG"], ["10 2", "2 2", "zGG 8"], ["10 2", "2 2", "8 8"], ["10 2", "2 2", "8 8", "EO3"], ["10 2", "2 2", "8 8", "EO3 EO3"], ["10 2", "2 2", "8 8", "EO3 -1"], ["10 2", "2 2", "8 8", "7 -1"], ["2"], ["2", "2"], ["2", "2 2"], ["2", "2 2 2"], ["2", "2 2 2 2"], ["2", "2 2 2 2 2"], ["2", "2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2 2 2"], ["2 K76"], ["2 4"], ["2 4", "2 4"], ["2 4", "2 4", "2 4"], ["2 4", "2 4", "2 4", "GOo"], ["2 4", "2 4", "2 4", "GOo GOo"], ["2 4", "2 4", "2 4", "GOo 8"], ["2 4", "2 4", "2 4", "4 8"]]}, {"EndTime": 1552342490.0421333, "FinalMinimizedSolution": ["2 56234523485723854755454545478690", "2 2", "0 9", "2 2", "2 2", "2 56234523485723854755454545478690"], "FinalCoverage": [11, 2, 6, 2, 76, "7,", "9,", "6->7,", "8->9"], "FinalSolution": ["2 56234523485723854755454545478690", "2 2", "0 9", "2 2", "2 2", "2 56234523485723854755454545478690"], "StartTime": 1552342487.268563, "FoundSolution": true, "NumProbesMade": 11, "InputHistory": [["2"], ["2 2"], ["2 2", "2 2"], ["2 2", "2 2", "2 2"], ["2 2", "2 2", "2 2", "2 2"], ["2"], ["2 tailored"], ["5.4 2"], ["10 2"], ["10 2", "2"], ["10 2", "2 2"], ["10 2", "2 2", "zGG"], ["10 2", "2 2", "zGG zGG"], ["10 2", "2 2", "zGG 8"], ["10 2", "2 2", "8 8"], ["10 2", "2 2", "8 8", "EO3"], ["10 2", "2 2", "8 8", "EO3 EO3"], ["10 2", "2 2", "8 8", "EO3 -1"], ["10 2", "2 2", "8 8", "7 -1"], ["2"], ["2", "2"], ["2", "2 2"], ["2", "2 2 2"], ["2", "2 2 2 2"], ["2", "2 2 2 2 2"], ["2", "2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2 2 2"], ["2 K76"], ["2 4"], ["2 4", "2 4"], ["2 4", "2 4", "2 4"], ["2 4", "2 4", "2 4", "GOo"], ["2 4", "2 4", "2 4", "GOo GOo"], ["2 4", "2 4", "2 4", "GOo 8"], ["2 4", "2 4", "2 4", "4 8"], ["2"], ["2 56234523485723854755454545478690 78690"], ["2 56234523485723854755454545478690"], ["2 56234523485723854755454545478690", "2"], ["2 56234523485723854755454545478690", "2 2"], ["2 56234523485723854755454545478690", "2 2", "h49"], ["2 56234523485723854755454545478690", "2 2", "h49 h49"], ["2 56234523485723854755454545478690", "2 2", "h49 9"], ["2 56234523485723854755454545478690", "2 2", "0 9"], ["2 56234523485723854755454545478690", "2 2", "0 9", "2 2"], ["2 56234523485723854755454545478690", "2 2", "0 9", "2 2", "2 2"]]}, {"EndTime": 1552342497.3732722, "FinalMinimizedSolution": ["0 7", "0 7", "0 7", "0 7", "4 3", "0 7", "4 3", "7 -1", "2 2", "0 7", "0 7", "0 7", "7 -1"], "FinalCoverage": [11, 2, 6, 2, 76, "7,", "9,", "6->7,", "8->9"], "FinalSolution": ["0 7", "0 7", "0 7", "0 7", "4 3", "0 7", "4 3", "7 -1", "2 2", "0 7", "0 7", "0 7", "7 -1"], "StartTime": 1552342490.042768, "FoundSolution": true, "NumProbesMade": 35, "InputHistory": [["2"], ["2 2"], ["2 2", "2 2"], ["2 2", "2 2", "2 2"], ["2 2", "2 2", "2 2", "2 2"], ["2"], ["2 tailored"], ["5.4 2"], ["10 2"], ["10 2", "2"], ["10 2", "2 2"], ["10 2", "2 2", "zGG"], ["10 2", "2 2", "zGG zGG"], ["10 2", "2 2", "zGG 8"], ["10 2", "2 2", "8 8"], ["10 2", "2 2", "8 8", "EO3"], ["10 2", "2 2", "8 8", "EO3 EO3"], ["10 2", "2 2", "8 8", "EO3 -1"], ["10 2", "2 2", "8 8", "7 -1"], ["2"], ["2", "2"], ["2", "2 2"], ["2", "2 2 2"], ["2", "2 2 2 2"], ["2", "2 2 2 2 2"], ["2", "2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2 2"], ["2", "2 2 2 2 2 2 2 2 2 2 2"], ["2 K76"], ["2 4"], ["2 4", "2 4"], ["2 4", "2 4", "2 4"], ["2 4", "2 4", "2 4", "GOo"], ["2 4", "2 4", "2 4", "GOo GOo"], ["2 4", "2 4", "2 4", "GOo 8"], ["2 4", "2 4", "2 4", "4 8"], ["2"], ["2 56234523485723854755454545478690 78690"], ["2 56234523485723854755454545478690"], ["2 56234523485723854755454545478690", "2"], ["2 56234523485723854755454545478690", "2 2"], ["2 56234523485723854755454545478690", "2 2", "h49"], ["2 56234523485723854755454545478690", "2 2", "h49 h49"], ["2 56234523485723854755454545478690", "2 2", "h49 9"], ["2 56234523485723854755454545478690", "2 2", "0 9"], ["2 56234523485723854755454545478690", "2 2", "0 9", "2 2"], ["2 56234523485723854755454545478690", "2 2", "0 9", "2 2", "2 2"], ["2"], ["2", "4"], ["2", "4 4"], ["2", "4 4 4"], ["2", "4 4 4 4"], ["2", "4 4 4 4 4"], ["2", "4 4 4 4 4 4"], ["2", "4 4 4 4 4 4 4"], ["2", "4 4 4 4 4 4 4 4"], ["2", "4 4 4 4 4 4 4 4 4"], ["2", "4 4 4 4 4 4 4 4 4 4"], ["2", "4 4 4 4 4 4 4 4 4 4 4"], [], ["kur 6TD 6TD"], ["kur 6TD"], ["0 6TD"], ["0 7"], ["0 7", "0 7"], ["0 7", "0 7", "0 7"], ["0 7", "0 7", "0 7", "0 7"], ["0 7", "0 7", "0 7", "0 7", "TXu"], ["0 7", "0 7", "0 7", "0 7", "TXu TXu"], ["0 7", "0 7", "0 7", "0 7", "TXu 3"], ["0 7", "0 7", "0 7", "0 7", "4 3"], ["0 7", "0 7", "0 7", "0 7", "4 3", "0 7"], ["0 7", "0 7", "0 7", "0 7", "4 3", "0 7", "4 3"], ["0 7", "0 7", "0 7", "0 7", "4 3", "0 7", "4 3", "uGl"], ["0 7", "0 7", "0 7", "0 7", "4 3", "0 7", "4 3", "uGl uGl"], ["0 7", "0 7", "0 7", "0 7", "4 3", "0 7", "4 3", "uGl -1"], ["0 7", "0 7", "0 7", "0 7", "4 3", "0 7", "4 3", "7 -1"], ["0 7", "0 7", "0 7", "0 7", "4 3", "0 7", "4 3", "7 -1", "2"], ["0 7", "0 7", "0 7", "0 7", "4 3", "0 7", "4 3", "7 -1", "2 2"], ["0 7", "0 7", "0 7", "0 7", "4 3", "0 7", "4 3", "7 -1", "2 2", "0 7"], ["0 7", "0 7", "0 7", "0 7", "4 3", "0 7", "4 3", "7 -1", "2 2", "0 7", "0 7"], ["0 7", "0 7", "0 7", "0 7", "4 3", "0 7", "4 3", "7 -1", "2 2", "0 7", "0 7", "0 7"]]}]], [{"CorrectInputs": [[["1"], 1523170903], [["13"], 1523170923]], "UniqueId": "c756583e-dad6-4142-fe00-ee3690e2bc8e_0", "CoverageInfo": [6, 1, 4, 3, 60, "6,", "3->exit,", "5->3,", "5->6"], "TimeStamp": 1523170877, "BadInput": ["0"], "ErrorType": "ZeroDivisionError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 5, in <module>\n    if (CONTADOR%N==2):\nZeroDivisionError: integer division or modulo by zero\n", "ip": "189.79.188.96"}, [{"EndTime": 1552416018.9257302, "FinalMinimizedSolution": ["6"], "FinalCoverage": [6, 0, 4, 0, 100], "FinalSolution": ["6"], "StartTime": 1552416017.8437114, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0"], []]}, {"EndTime": 1552416020.020019, "FinalMinimizedSolution": ["3"], "FinalCoverage": [6, 0, 4, 0, 100], "FinalSolution": ["3"], "StartTime": 1552416018.9259064, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0"], [], ["0"], ["m87"]]}, {"EndTime": 1552416021.5321276, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [6, 1, 4, 1, 80, "6,", "5->6"], "FinalSolution": ["-1", "0"], "StartTime": 1552416020.02022, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["0"], [], ["0"], ["m87"], ["0"], ["0", "0"], ["q5H"], ["AuW", "0"]]}, {"EndTime": 1552416022.671756, "FinalMinimizedSolution": ["9"], "FinalCoverage": [6, 0, 4, 0, 100], "FinalSolution": ["9", "0"], "StartTime": 1552416021.5323603, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0"], [], ["0"], ["m87"], ["0"], ["0", "0"], ["q5H"], ["AuW", "0"], ["0"], ["JU5", "0"]]}, {"EndTime": 1552416023.6407442, "FinalMinimizedSolution": ["3"], "FinalCoverage": [6, 0, 4, 0, 100], "FinalSolution": ["3", "0"], "StartTime": 1552416022.6720083, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["0"], [], ["0"], ["m87"], ["0"], ["0", "0"], ["q5H"], ["AuW", "0"], ["0"], ["JU5", "0"], ["0"]]}]], [{"CorrectInputs": [[["5 16 3 12", "150"], 1536940306]], "UniqueId": "439e4b38-e236-4e95-fca4-bbef262aadff_0", "CoverageInfo": [21, 19, 6, 0, 15, "3-22"], "TimeStamp": 1536940277, "BadInput": ["5 16 3 12", "`150"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 2, in <module>\n    n=int(input())\nValueError: invalid literal for int() with base 10: '`150'\n", "ip": "117.209.181.221"}, [{"EndTime": 1552352484.5183995, "FinalMinimizedSolution": ["5 16 3 12", "8"], "FinalCoverage": null, "FinalSolution": ["5 16 3 12", "8"], "StartTime": 1552352484.267706, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5 16 3 12", "`150"]]}, {"EndTime": 1552352485.7661188, "FinalMinimizedSolution": ["5 16 3 12", "9"], "FinalCoverage": [21, 5, 6, 2, 74, "12,", "19-22,", "11->12,", "13->19"], "FinalSolution": ["5 16 3 12", "9"], "StartTime": 1552352484.5185323, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["5 16 3 12", "`150"], ["5 16 3 12", "`150"], ["5 16 3 12"], ["5 16 3 12", "5 16 3 12"]]}, {"EndTime": 1552352486.0187166, "FinalMinimizedSolution": ["5 16 3 12", "3"], "FinalCoverage": null, "FinalSolution": ["5 16 3 12", "3"], "StartTime": 1552352485.7663136, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5 16 3 12", "`150"], ["5 16 3 12", "`150"], ["5 16 3 12"], ["5 16 3 12", "5 16 3 12"], ["5 16 3 12", "`150"]]}, {"EndTime": 1552352486.5123148, "FinalMinimizedSolution": ["5 16 3 12", "9"], "FinalCoverage": null, "FinalSolution": ["5 16 3 12", "9", "9"], "StartTime": 1552352486.0188973, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["5 16 3 12", "`150"], ["5 16 3 12", "`150"], ["5 16 3 12"], ["5 16 3 12", "5 16 3 12"], ["5 16 3 12", "`150"], ["5 16 3 12", "`150"], ["5 16 3 12", "Not Paid", "9"]]}, {"EndTime": 1552352487.3794994, "FinalMinimizedSolution": ["5 16 3 12", "5"], "FinalCoverage": [21, 5, 6, 2, 74, "12,", "19-22,", "11->12,", "13->19"], "FinalSolution": ["5 16 3 12", "5"], "StartTime": 1552352486.5124927, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5 16 3 12", "`150"], ["5 16 3 12", "`150"], ["5 16 3 12"], ["5 16 3 12", "5 16 3 12"], ["5 16 3 12", "`150"], ["5 16 3 12", "`150"], ["5 16 3 12", "Not Paid", "9"], ["5 16 3 12", "`150"]]}]], [{"CorrectInputs": [[["3"], 1524371198]], "UniqueId": "7cee5a42-ae0d-4986-ec0b-492d92d2edf4_0", "CoverageInfo": [3, 2, 0, 0, 33, "2-3"], "TimeStamp": 1524371173, "BadInput": ["teu cu"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    R = float(input())\nValueError: could not convert string to float: 'teu cu'\n", "ip": "200.33.135.188"}, [{"EndTime": 1552361429.8167315, "FinalMinimizedSolution": ["-1.7"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["-1.7"], "StartTime": 1552361428.9552813, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["teu cu"]]}, {"EndTime": 1552361430.6809664, "FinalMinimizedSolution": ["6.10"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["6.10"], "StartTime": 1552361429.8168912, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["teu cu"], ["teu cu"]]}, {"EndTime": 1552361431.5446877, "FinalMinimizedSolution": ["-1.1"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["-1.1"], "StartTime": 1552361430.6811755, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["teu cu"], ["teu cu"], ["teu cu"]]}, {"EndTime": 1552361432.4070404, "FinalMinimizedSolution": ["2.2"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["2.2"], "StartTime": 1552361431.5448813, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["teu cu"], ["teu cu"], ["teu cu"], ["teu cu"]]}, {"EndTime": 1552361433.2728333, "FinalMinimizedSolution": ["5.0"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["5.0"], "StartTime": 1552361432.4072428, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["teu cu"], ["teu cu"], ["teu cu"], ["teu cu"], ["teu cu"]]}]], [{"CorrectInputs": [[["0 3 10", "0 -6 2"], 1534983346]], "UniqueId": "908a57d2-38f7-4c9d-d287-b6703ac01a4b_0", "CoverageInfo": [10, 9, 8, 1, 11, "2-12,", "1->2"], "TimeStamp": 1534983282, "BadInput": ["0"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    a1,b1,c1=(int(e) for e in input().split())\nValueError: not enough values to unpack (expected 3, got 1)\n", "ip": "161.200.188.116"}, [{"EndTime": 1552417545.9788144, "FinalMinimizedSolution": ["7 7 7", "7 7 7"], "FinalCoverage": [10, 2, 8, 2, 78, "6,", "9,", "5->6,", "8->9"], "FinalSolution": ["7 7 7", "7 7 7"], "StartTime": 1552417538.898264, "FoundSolution": true, "NumProbesMade": 34, "InputHistory": [["0"], ["0 0"], ["0 0 0"], ["0 0 0", "0 0 0"], ["", "0 0 0"], ["", "0 0 0 0"], ["", "0 0 0 0 0"], ["", "0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0 0 0"], [""], [" "], ["-5 0 "], ["-5 0 0"], ["-5 0 0", "-5 0 0"], ["-5 0 0", "-5 5 3 0"], ["-5 0 0", "-5 5 3"], ["-5 0 0", "0 5 3"], ["", "0 5 3"], ["", "0 5 3 3"], ["", "0 5 3 3 3"], ["", "0 5 3 3 3 3"], ["", "0 5 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3 3 3"], [" one solution"], [" 7 solution"], [" 7 7"], ["7 7 7"]]}, {"EndTime": 1552417546.605304, "FinalMinimizedSolution": ["0 4 4", "0 4 4"], "FinalCoverage": null, "FinalSolution": ["0 4 4", "0 4 4"], "StartTime": 1552417545.9792783, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["0"], ["0 0"], ["0 0 0"], ["0 0 0", "0 0 0"], ["", "0 0 0"], ["", "0 0 0 0"], ["", "0 0 0 0 0"], ["", "0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0 0 0"], [""], [" "], ["-5 0 "], ["-5 0 0"], ["-5 0 0", "-5 0 0"], ["-5 0 0", "-5 5 3 0"], ["-5 0 0", "-5 5 3"], ["-5 0 0", "0 5 3"], ["", "0 5 3"], ["", "0 5 3 3"], ["", "0 5 3 3 3"], ["", "0 5 3 3 3 3"], ["", "0 5 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3 3 3"], [" one solution"], [" 7 solution"], [" 7 7"], ["7 7 7"], ["0"], ["0 4"], ["0 4 4"]]}, {"EndTime": 1552417557.9798331, "FinalMinimizedSolution": ["4 4 4", "1 3 3"], "FinalCoverage": [10, 3, 8, 1, 67, "8-11,", "5->8"], "FinalSolution": ["4 4 4", "1 3 3"], "StartTime": 1552417546.6057217, "FoundSolution": true, "NumProbesMade": 57, "InputHistory": [["0"], ["0 0"], ["0 0 0"], ["0 0 0", "0 0 0"], ["", "0 0 0"], ["", "0 0 0 0"], ["", "0 0 0 0 0"], ["", "0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0 0 0"], [""], [" "], ["-5 0 "], ["-5 0 0"], ["-5 0 0", "-5 0 0"], ["-5 0 0", "-5 5 3 0"], ["-5 0 0", "-5 5 3"], ["-5 0 0", "0 5 3"], ["", "0 5 3"], ["", "0 5 3 3"], ["", "0 5 3 3 3"], ["", "0 5 3 3 3 3"], ["", "0 5 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3 3 3"], [" one solution"], [" 7 solution"], [" 7 7"], ["7 7 7"], ["0"], ["0 4"], ["0 4 4"], ["0"], ["A=1", ""], ["4", ""], ["4", " "], ["4", "t "], ["4", "t t"], ["4", "t t t"], ["4", "t t t t"], ["4", "t t t t t"], ["4", "t t t t t t"], ["4", "t t t t t t t"], ["4", "t t t t t t t t"], ["4", "t t t t t t t t t"], ["4", "t t t t t t t t t t"], ["4", "t t t t t t t t t t t"], ["4"], ["4 4"], ["4 4 4"], ["4 4 4", "0"], ["4 4 4", "0 0"], ["4 4 4", "0 0 0"], ["4 4 4", "0", "0", "0"], ["4 4 4", "0", "0", "0 0"], ["4 4 4", "0", "0", "0 0 0"], ["4 4 4", "0", "0", "0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0"], ["4 4 4", "0", "0 0"], ["4 4 4", "0", "0 0 0"], ["4 4 4", "0", "0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "one solution", "0"], ["4 4 4", "1 solution", "0"], ["4 4 4", "1 3", "0"], ["4 4 4", "1 3", "0 0"], ["4 4 4", "1 3", "0 0 0"], ["4 4 4", "1 3", "0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "1 3"]]}, {"EndTime": 1552417563.371194, "FinalMinimizedSolution": ["-1 9 6", "-1 9 6"], "FinalCoverage": [10, 2, 8, 2, 78, "6,", "9,", "5->6,", "8->9"], "FinalSolution": ["-1 9 6", "-1 9 6"], "StartTime": 1552417557.980832, "FoundSolution": true, "NumProbesMade": 25, "InputHistory": [["0"], ["0 0"], ["0 0 0"], ["0 0 0", "0 0 0"], ["", "0 0 0"], ["", "0 0 0 0"], ["", "0 0 0 0 0"], ["", "0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0 0 0"], [""], [" "], ["-5 0 "], ["-5 0 0"], ["-5 0 0", "-5 0 0"], ["-5 0 0", "-5 5 3 0"], ["-5 0 0", "-5 5 3"], ["-5 0 0", "0 5 3"], ["", "0 5 3"], ["", "0 5 3 3"], ["", "0 5 3 3 3"], ["", "0 5 3 3 3 3"], ["", "0 5 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3 3 3"], [" one solution"], [" 7 solution"], [" 7 7"], ["7 7 7"], ["0"], ["0 4"], ["0 4 4"], ["0"], ["A=1", ""], ["4", ""], ["4", " "], ["4", "t "], ["4", "t t"], ["4", "t t t"], ["4", "t t t t"], ["4", "t t t t t"], ["4", "t t t t t t"], ["4", "t t t t t t t"], ["4", "t t t t t t t t"], ["4", "t t t t t t t t t"], ["4", "t t t t t t t t t t"], ["4", "t t t t t t t t t t t"], ["4"], ["4 4"], ["4 4 4"], ["4 4 4", "0"], ["4 4 4", "0 0"], ["4 4 4", "0 0 0"], ["4 4 4", "0", "0", "0"], ["4 4 4", "0", "0", "0 0"], ["4 4 4", "0", "0", "0 0 0"], ["4 4 4", "0", "0", "0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0"], ["4 4 4", "0", "0 0"], ["4 4 4", "0", "0 0 0"], ["4 4 4", "0", "0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "one solution", "0"], ["4 4 4", "1 solution", "0"], ["4 4 4", "1 3", "0"], ["4 4 4", "1 3", "0 0"], ["4 4 4", "1 3", "0 0 0"], ["4 4 4", "1 3", "0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "1 3"], ["0"], ["0 11"], ["0 11 11"], ["0 11 11", "0"], ["0 11 11", "0 0"], ["0 11 11", "0 0 0"], ["0 404error 11", "0 0 0"], ["0 1 11", "0 0 0"], ["", ""], ["", " "], ["", " many solution"], ["", "many solution solution"], ["", "many solution solution solution"], ["", "many solution solution solution solution"], ["", "many solution solution solution solution solution"], ["", "many solution solution solution solution solution solution"], ["", "many solution solution solution solution solution solution solution"], ["", "many solution solution solution solution solution solution solution solution"], ["", "many solution solution solution solution solution solution solution solution solution"], ["", "many solution solution solution solution solution solution solution solution solution solution"], [], ["Xn7 kG0 kG0"], ["-1 kG0 kG0"], ["-1 kG0 6"], ["-1 9 6"]]}, {"EndTime": 1552417565.3704598, "FinalMinimizedSolution": ["0 6 7", "2 6 6"], "FinalCoverage": [10, 3, 8, 1, 67, "8-11,", "5->8"], "FinalSolution": ["0 6 7", "2 6 6"], "StartTime": 1552417563.3723462, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["0"], ["0 0"], ["0 0 0"], ["0 0 0", "0 0 0"], ["", "0 0 0"], ["", "0 0 0 0"], ["", "0 0 0 0 0"], ["", "0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0 0"], ["", "0 0 0 0 0 0 0 0 0 0 0"], [""], [" "], ["-5 0 "], ["-5 0 0"], ["-5 0 0", "-5 0 0"], ["-5 0 0", "-5 5 3 0"], ["-5 0 0", "-5 5 3"], ["-5 0 0", "0 5 3"], ["", "0 5 3"], ["", "0 5 3 3"], ["", "0 5 3 3 3"], ["", "0 5 3 3 3 3"], ["", "0 5 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3 3"], ["", "0 5 3 3 3 3 3 3 3 3 3"], [" one solution"], [" 7 solution"], [" 7 7"], ["7 7 7"], ["0"], ["0 4"], ["0 4 4"], ["0"], ["A=1", ""], ["4", ""], ["4", " "], ["4", "t "], ["4", "t t"], ["4", "t t t"], ["4", "t t t t"], ["4", "t t t t t"], ["4", "t t t t t t"], ["4", "t t t t t t t"], ["4", "t t t t t t t t"], ["4", "t t t t t t t t t"], ["4", "t t t t t t t t t t"], ["4", "t t t t t t t t t t t"], ["4"], ["4 4"], ["4 4 4"], ["4 4 4", "0"], ["4 4 4", "0 0"], ["4 4 4", "0 0 0"], ["4 4 4", "0", "0", "0"], ["4 4 4", "0", "0", "0 0"], ["4 4 4", "0", "0", "0 0 0"], ["4 4 4", "0", "0", "0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0", "0 0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0"], ["4 4 4", "0", "0 0"], ["4 4 4", "0", "0 0 0"], ["4 4 4", "0", "0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "0", "0 0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "one solution", "0"], ["4 4 4", "1 solution", "0"], ["4 4 4", "1 3", "0"], ["4 4 4", "1 3", "0 0"], ["4 4 4", "1 3", "0 0 0"], ["4 4 4", "1 3", "0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "1 3", "0 0 0 0 0 0 0 0 0 0 0"], ["4 4 4", "1 3"], ["0"], ["0 11"], ["0 11 11"], ["0 11 11", "0"], ["0 11 11", "0 0"], ["0 11 11", "0 0 0"], ["0 404error 11", "0 0 0"], ["0 1 11", "0 0 0"], ["", ""], ["", " "], ["", " many solution"], ["", "many solution solution"], ["", "many solution solution solution"], ["", "many solution solution solution solution"], ["", "many solution solution solution solution solution"], ["", "many solution solution solution solution solution solution"], ["", "many solution solution solution solution solution solution solution"], ["", "many solution solution solution solution solution solution solution solution"], ["", "many solution solution solution solution solution solution solution solution solution"], ["", "many solution solution solution solution solution solution solution solution solution solution"], [], ["Xn7 kG0 kG0"], ["-1 kG0 kG0"], ["-1 kG0 6"], ["-1 9 6"], ["0"], ["0 one solution"], ["0 6 solution"], ["0 6 7"], ["0 6 7", "many solution"], ["0 6 7", "2 solution"], ["0 6 7", "2 6"]]}]], [{"CorrectInputs": [[["8", "6", "1", "4", "2", "4"], 1519925914]], "UniqueId": "ff9275be-ffc6-4ecf-f54d-276cb89573a8_0", "CoverageInfo": [11, 3, 4, 2, 67, "9-11,", "8->9,", "8->10"], "TimeStamp": 1519925346, "BadInput": ["5", "2", "4", "8", "67", "5"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 7, in <module>\n    print(l[num])\nIndexError: list index out of range\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"temp2018.py\", line 8, in <module>\n    except valueerror:\nNameError: name 'valueerror' is not defined\n", "ip": "210.212.249.130"}, [{"InputHistory": [["5", "2", "4", "8", "67", "5"], ["H1F", "5", "2", "4", "8", "67", "5"], ["H1F", "5 XdQ", "2", "4", "8", "67", "5"], [], ["uzs"], ["uzs P3R"], ["uzs 2 2 2 2 2"], ["67 2 2 2 2 2"], ["67 b 2 2 2 2"], ["67 a59 2 2 2 2"], ["67 a59 45,102 2 2 2"], ["67 a59 45,102 2 2 3"], ["67 5 45,102 2 2 3"], ["67 5 45,102 2 7x8 3"], ["67 AXN 45,102 2 7x8 3"], ["67 AXN 45,102 0,7 7x8 3"], [""], ["boY"], ["wvI"], ["1z8"], ["fHJ"], ["5", "fHJ"], ["5", "1Bo", "fHJ"], ["5", "1Bo", "fHJ z6p"], ["5", "1Bo", "fHJ", "z6p"], ["10", "5", "1Bo", "fHJ", "z6p"], ["10", "5", "1Bo 0T8", "fHJ", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "fHJ", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "1 2 3 4", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo 0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "1 0T8 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "20", "z6p"], ["cyg"], ["lqD", "cyg"], ["67", "lqD", "cyg"], ["67", "lqD 346", "cyg"], ["67", "lqD", "346", "cyg"], ["5Sj"], ["8q-"], ["5", "8q-"], ["5", "tSL", "8q-"], ["tSL", "8q-"], ["4", "8q-"], ["4 GHN", "8q-"], ["4 GHN", "9dy", "8q-"], ["4 GHN", "9dy", "OA1", "8q-"], ["4 GHN", "9dy", "OA1", "zNU", "8q-"], ["4 GHN", "5", "9dy", "OA1", "zNU", "8q-"], ["4 GHN", "5", "9dy", "OA1", "zNU", "8q- I2F"], ["4 GHN", "5", "9dy", "OA1", "zNU", ""], ["4 GHN", "5", "9dy", "OA1", ""], ["4 GHN", "5", "9dy", "", "OA1", ""], ["4 GHN", "5", "9dy", "", "OA1", "10, 5", ""], ["4 GHN", "5", "9dy", "OA1", "10, 5", ""]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552266723.334779, "StartTime": 1552266712.8048232}, {"InputHistory": [["5", "2", "4", "8", "67", "5"], ["H1F", "5", "2", "4", "8", "67", "5"], ["H1F", "5 XdQ", "2", "4", "8", "67", "5"], [], ["uzs"], ["uzs P3R"], ["uzs 2 2 2 2 2"], ["67 2 2 2 2 2"], ["67 b 2 2 2 2"], ["67 a59 2 2 2 2"], ["67 a59 45,102 2 2 2"], ["67 a59 45,102 2 2 3"], ["67 5 45,102 2 2 3"], ["67 5 45,102 2 7x8 3"], ["67 AXN 45,102 2 7x8 3"], ["67 AXN 45,102 0,7 7x8 3"], [""], ["boY"], ["wvI"], ["1z8"], ["fHJ"], ["5", "fHJ"], ["5", "1Bo", "fHJ"], ["5", "1Bo", "fHJ z6p"], ["5", "1Bo", "fHJ", "z6p"], ["10", "5", "1Bo", "fHJ", "z6p"], ["10", "5", "1Bo 0T8", "fHJ", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "fHJ", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "1 2 3 4", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo 0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "1 0T8 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "20", "z6p"], ["cyg"], ["lqD", "cyg"], ["67", "lqD", "cyg"], ["67", "lqD 346", "cyg"], ["67", "lqD", "346", "cyg"], ["5Sj"], ["8q-"], ["5", "8q-"], ["5", "tSL", "8q-"], ["tSL", "8q-"], ["4", "8q-"], ["4 GHN", "8q-"], ["4 GHN", "9dy", "8q-"], ["4 GHN", "9dy", "OA1", "8q-"], ["4 GHN", "9dy", "OA1", "zNU", "8q-"], ["4 GHN", "5", "9dy", "OA1", "zNU", "8q-"], ["4 GHN", "5", "9dy", "OA1", "zNU", "8q- I2F"], ["4 GHN", "5", "9dy", "OA1", "zNU", ""], ["4 GHN", "5", "9dy", "OA1", ""], ["4 GHN", "5", "9dy", "", "OA1", ""], ["4 GHN", "5", "9dy", "", "OA1", "10, 5", ""], ["4 GHN", "5", "9dy", "OA1", "10, 5", ""], ["5", "2", "4", "8", "67", "5"], ["5", "1S0", "2", "4", "8", "67", "5"], ["X5V"], ["4", "X5V"], ["4 PuZ", "X5V"], ["", "X5V"], ["9ls"], ["9ls 3Kx"], ["20 3Kx"], ["8 3Kx"], ["8 2"], ["8", "2"], ["8", "8", "2"], ["8", "2", "2"], ["8", "2", "2 7 6", "2"], ["8", "ut2", "2", "2 7 6", "2"], ["8", "ut2", "2", "2 7 6", "Ud2", "2"], ["8", "ut2", "2 u96", "2 7 6", "Ud2", "2"], ["8", "ut2", "2 u96", "L03 7 6", "Ud2", "2"], ["8", "ut2", "2 u96", "", "Ud2", "2"], ["8", "ut2", "2 u96", "", "Ud2", "", "2"], ["8", "ut2", " u96", "", "Ud2", "", "2"], ["8", "ut2", " u96", "", "nGv", "Ud2", "", "2"], ["8", "ut2", " u96", "a", "", "nGv", "Ud2", "", "2"], ["8", "ut2", " u96", "9BI", "a", "", "nGv", "Ud2", "", "2"], ["v0W"], ["2 7 6", "v0W"], ["2 7 6", "v0W PtN"], ["2 7 6", "y PtN"], ["2 7 6", "y 7"], ["Q63 7 6", "y 7"], ["Q63 7 6", "y 2"], ["Q63 7 6", "y zR7"], ["Q63 7 6", "KXw zR7"], ["Q63 7 zCR", "KXw zR7"], ["Q63 7 zCR", ""], ["Q63 7 ", ""], ["Q63 i1u ", ""], ["Q63 i1u ", "i", ""], ["Q63 i1u ", "24,28,496", "i", ""], ["Q63 i1u ", "24,28,496", "i", "sGj", ""], ["rBJ"], ["5", "rBJ"], ["5 35h", "rBJ"], ["5 35h", "8", "rBJ"], ["5 35h", "9 5 2", "8", "rBJ"], ["Iz9"], ["11cm", "Iz9"], ["11cm"], ["11cm", "11cm"], ["pp", "11cm", "11cm"], ["2", "pp", "11cm", "11cm"], ["2", "pp", "11cm", "11cm 4k7"], ["kFz", "2", "pp", "11cm", "11cm 4k7"], ["kFz", "D62", "2", "pp", "11cm", "11cm 4k7"], ["kFz", "2", "D62", "2", "pp", "11cm", "11cm 4k7"], ["kFz", "2", "D62", "2", "11cm", "11cm 4k7"], ["kFz", "IHT", "2", "D62", "2", "11cm", "11cm 4k7"], ["kFz", "IHT", "2", "D62", "2", "11cm 504", "11cm 4k7"], ["kFz", "IHT", "67", "2", "D62", "2", "11cm 504", "11cm 4k7"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552266734.6326735, "StartTime": 1552266723.335567}, {"EndTime": 1552266736.0302248, "FinalMinimizedSolution": ["5", "8", "2", "4", "8", "2"], "FinalCoverage": [11, 4, 4, 0, 60, "8-11"], "FinalSolution": ["5", "8", "2", "4", "8", "2", "b38", "67", "5"], "StartTime": 1552266734.6341174, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["5", "2", "4", "8", "67", "5"], ["H1F", "5", "2", "4", "8", "67", "5"], ["H1F", "5 XdQ", "2", "4", "8", "67", "5"], [], ["uzs"], ["uzs P3R"], ["uzs 2 2 2 2 2"], ["67 2 2 2 2 2"], ["67 b 2 2 2 2"], ["67 a59 2 2 2 2"], ["67 a59 45,102 2 2 2"], ["67 a59 45,102 2 2 3"], ["67 5 45,102 2 2 3"], ["67 5 45,102 2 7x8 3"], ["67 AXN 45,102 2 7x8 3"], ["67 AXN 45,102 0,7 7x8 3"], [""], ["boY"], ["wvI"], ["1z8"], ["fHJ"], ["5", "fHJ"], ["5", "1Bo", "fHJ"], ["5", "1Bo", "fHJ z6p"], ["5", "1Bo", "fHJ", "z6p"], ["10", "5", "1Bo", "fHJ", "z6p"], ["10", "5", "1Bo 0T8", "fHJ", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "fHJ", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "1 2 3 4", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo 0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "1 0T8 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "20", "z6p"], ["cyg"], ["lqD", "cyg"], ["67", "lqD", "cyg"], ["67", "lqD 346", "cyg"], ["67", "lqD", "346", "cyg"], ["5Sj"], ["8q-"], ["5", "8q-"], ["5", "tSL", "8q-"], ["tSL", "8q-"], ["4", "8q-"], ["4 GHN", "8q-"], ["4 GHN", "9dy", "8q-"], ["4 GHN", "9dy", "OA1", "8q-"], ["4 GHN", "9dy", "OA1", "zNU", "8q-"], ["4 GHN", "5", "9dy", "OA1", "zNU", "8q-"], ["4 GHN", "5", "9dy", "OA1", "zNU", "8q- I2F"], ["4 GHN", "5", "9dy", "OA1", "zNU", ""], ["4 GHN", "5", "9dy", "OA1", ""], ["4 GHN", "5", "9dy", "", "OA1", ""], ["4 GHN", "5", "9dy", "", "OA1", "10, 5", ""], ["4 GHN", "5", "9dy", "OA1", "10, 5", ""], ["5", "2", "4", "8", "67", "5"], ["5", "1S0", "2", "4", "8", "67", "5"], ["X5V"], ["4", "X5V"], ["4 PuZ", "X5V"], ["", "X5V"], ["9ls"], ["9ls 3Kx"], ["20 3Kx"], ["8 3Kx"], ["8 2"], ["8", "2"], ["8", "8", "2"], ["8", "2", "2"], ["8", "2", "2 7 6", "2"], ["8", "ut2", "2", "2 7 6", "2"], ["8", "ut2", "2", "2 7 6", "Ud2", "2"], ["8", "ut2", "2 u96", "2 7 6", "Ud2", "2"], ["8", "ut2", "2 u96", "L03 7 6", "Ud2", "2"], ["8", "ut2", "2 u96", "", "Ud2", "2"], ["8", "ut2", "2 u96", "", "Ud2", "", "2"], ["8", "ut2", " u96", "", "Ud2", "", "2"], ["8", "ut2", " u96", "", "nGv", "Ud2", "", "2"], ["8", "ut2", " u96", "a", "", "nGv", "Ud2", "", "2"], ["8", "ut2", " u96", "9BI", "a", "", "nGv", "Ud2", "", "2"], ["v0W"], ["2 7 6", "v0W"], ["2 7 6", "v0W PtN"], ["2 7 6", "y PtN"], ["2 7 6", "y 7"], ["Q63 7 6", "y 7"], ["Q63 7 6", "y 2"], ["Q63 7 6", "y zR7"], ["Q63 7 6", "KXw zR7"], ["Q63 7 zCR", "KXw zR7"], ["Q63 7 zCR", ""], ["Q63 7 ", ""], ["Q63 i1u ", ""], ["Q63 i1u ", "i", ""], ["Q63 i1u ", "24,28,496", "i", ""], ["Q63 i1u ", "24,28,496", "i", "sGj", ""], ["rBJ"], ["5", "rBJ"], ["5 35h", "rBJ"], ["5 35h", "8", "rBJ"], ["5 35h", "9 5 2", "8", "rBJ"], ["Iz9"], ["11cm", "Iz9"], ["11cm"], ["11cm", "11cm"], ["pp", "11cm", "11cm"], ["2", "pp", "11cm", "11cm"], ["2", "pp", "11cm", "11cm 4k7"], ["kFz", "2", "pp", "11cm", "11cm 4k7"], ["kFz", "D62", "2", "pp", "11cm", "11cm 4k7"], ["kFz", "2", "D62", "2", "pp", "11cm", "11cm 4k7"], ["kFz", "2", "D62", "2", "11cm", "11cm 4k7"], ["kFz", "IHT", "2", "D62", "2", "11cm", "11cm 4k7"], ["kFz", "IHT", "2", "D62", "2", "11cm 504", "11cm 4k7"], ["kFz", "IHT", "67", "2", "D62", "2", "11cm 504", "11cm 4k7"], ["5", "2", "4", "8", "67", "5"], ["5", "2", "4", "8", "b38", "67", "5"], ["5", "8", "2", "4", "8", "b38", "67", "5"]]}, {"InputHistory": [["5", "2", "4", "8", "67", "5"], ["H1F", "5", "2", "4", "8", "67", "5"], ["H1F", "5 XdQ", "2", "4", "8", "67", "5"], [], ["uzs"], ["uzs P3R"], ["uzs 2 2 2 2 2"], ["67 2 2 2 2 2"], ["67 b 2 2 2 2"], ["67 a59 2 2 2 2"], ["67 a59 45,102 2 2 2"], ["67 a59 45,102 2 2 3"], ["67 5 45,102 2 2 3"], ["67 5 45,102 2 7x8 3"], ["67 AXN 45,102 2 7x8 3"], ["67 AXN 45,102 0,7 7x8 3"], [""], ["boY"], ["wvI"], ["1z8"], ["fHJ"], ["5", "fHJ"], ["5", "1Bo", "fHJ"], ["5", "1Bo", "fHJ z6p"], ["5", "1Bo", "fHJ", "z6p"], ["10", "5", "1Bo", "fHJ", "z6p"], ["10", "5", "1Bo 0T8", "fHJ", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "fHJ", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "1 2 3 4", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo 0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "1 0T8 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "20", "z6p"], ["cyg"], ["lqD", "cyg"], ["67", "lqD", "cyg"], ["67", "lqD 346", "cyg"], ["67", "lqD", "346", "cyg"], ["5Sj"], ["8q-"], ["5", "8q-"], ["5", "tSL", "8q-"], ["tSL", "8q-"], ["4", "8q-"], ["4 GHN", "8q-"], ["4 GHN", "9dy", "8q-"], ["4 GHN", "9dy", "OA1", "8q-"], ["4 GHN", "9dy", "OA1", "zNU", "8q-"], ["4 GHN", "5", "9dy", "OA1", "zNU", "8q-"], ["4 GHN", "5", "9dy", "OA1", "zNU", "8q- I2F"], ["4 GHN", "5", "9dy", "OA1", "zNU", ""], ["4 GHN", "5", "9dy", "OA1", ""], ["4 GHN", "5", "9dy", "", "OA1", ""], ["4 GHN", "5", "9dy", "", "OA1", "10, 5", ""], ["4 GHN", "5", "9dy", "OA1", "10, 5", ""], ["5", "2", "4", "8", "67", "5"], ["5", "1S0", "2", "4", "8", "67", "5"], ["X5V"], ["4", "X5V"], ["4 PuZ", "X5V"], ["", "X5V"], ["9ls"], ["9ls 3Kx"], ["20 3Kx"], ["8 3Kx"], ["8 2"], ["8", "2"], ["8", "8", "2"], ["8", "2", "2"], ["8", "2", "2 7 6", "2"], ["8", "ut2", "2", "2 7 6", "2"], ["8", "ut2", "2", "2 7 6", "Ud2", "2"], ["8", "ut2", "2 u96", "2 7 6", "Ud2", "2"], ["8", "ut2", "2 u96", "L03 7 6", "Ud2", "2"], ["8", "ut2", "2 u96", "", "Ud2", "2"], ["8", "ut2", "2 u96", "", "Ud2", "", "2"], ["8", "ut2", " u96", "", "Ud2", "", "2"], ["8", "ut2", " u96", "", "nGv", "Ud2", "", "2"], ["8", "ut2", " u96", "a", "", "nGv", "Ud2", "", "2"], ["8", "ut2", " u96", "9BI", "a", "", "nGv", "Ud2", "", "2"], ["v0W"], ["2 7 6", "v0W"], ["2 7 6", "v0W PtN"], ["2 7 6", "y PtN"], ["2 7 6", "y 7"], ["Q63 7 6", "y 7"], ["Q63 7 6", "y 2"], ["Q63 7 6", "y zR7"], ["Q63 7 6", "KXw zR7"], ["Q63 7 zCR", "KXw zR7"], ["Q63 7 zCR", ""], ["Q63 7 ", ""], ["Q63 i1u ", ""], ["Q63 i1u ", "i", ""], ["Q63 i1u ", "24,28,496", "i", ""], ["Q63 i1u ", "24,28,496", "i", "sGj", ""], ["rBJ"], ["5", "rBJ"], ["5 35h", "rBJ"], ["5 35h", "8", "rBJ"], ["5 35h", "9 5 2", "8", "rBJ"], ["Iz9"], ["11cm", "Iz9"], ["11cm"], ["11cm", "11cm"], ["pp", "11cm", "11cm"], ["2", "pp", "11cm", "11cm"], ["2", "pp", "11cm", "11cm 4k7"], ["kFz", "2", "pp", "11cm", "11cm 4k7"], ["kFz", "D62", "2", "pp", "11cm", "11cm 4k7"], ["kFz", "2", "D62", "2", "pp", "11cm", "11cm 4k7"], ["kFz", "2", "D62", "2", "11cm", "11cm 4k7"], ["kFz", "IHT", "2", "D62", "2", "11cm", "11cm 4k7"], ["kFz", "IHT", "2", "D62", "2", "11cm 504", "11cm 4k7"], ["kFz", "IHT", "67", "2", "D62", "2", "11cm 504", "11cm 4k7"], ["5", "2", "4", "8", "67", "5"], ["5", "2", "4", "8", "b38", "67", "5"], ["5", "8", "2", "4", "8", "b38", "67", "5"], ["5", "2", "4", "8", "67", "5"], ["5", "2", "4", "8", "5"], ["Uuw"], ["5", "Uuw"], ["5", "0", "Uuw"], ["J-1", "5", "0", "Uuw"], ["J-1", "J-1", "5", "0", "Uuw"], ["J-1", "8", "J-1", "5", "0", "Uuw"], ["2", "J-1", "8", "J-1", "5", "0", "Uuw"], ["2", "J-1", "8", "J-1", "J-1", "5", "0", "Uuw"], ["2", "J-1", "8 EaG", "J-1", "5", "0", "Uuw"], ["3tj"], ["abcdef", "3tj"], ["abcdef"], ["1,95", "abcdef"], ["11cm", "1,95", "abcdef"], ["11cm", "1,95", "1,95", "abcdef"], ["11cm", "1,95", "1,95", "6", "abcdef"], ["11cm", "1,95 Jc6", "1,95", "6", "abcdef"], ["11cm", "1,95 Jc6", "1,95", "6 h2E", "abcdef"], ["11cm", "1,95 Jc6", "WLC", "1,95", "6 h2E", "abcdef"], ["11cm", "1,95 Jc6", "WLC", "6 h2E", "abcdef"], ["11cm", "1,95 Jc6", "WLC", "6 h2E", "n45", "abcdef"], ["11cm", "1,95 Jc6", "WLC co4", "6 h2E", "n45", "abcdef"], ["11cm", "1,95 Jc6", "", "6 h2E", "n45", "abcdef"], ["11cm", "1,95 Jc6", "", "6 qAF", "n45", "abcdef"], ["11cm", "1,95 Jc6", "", "6 qAF", "67", "n45", "abcdef"], ["11cm", "1,95 Jc6", "", "6 qAF", "67", "abcdef"], ["UXM"], ["5", "UXM"], ["5", "UXM 6g9"], ["5", "67 6g9"], ["p4-"], ["Wna", "p4-"], ["fA3"], ["4", "fA3"], ["5", "4", "fA3"], ["5", "4 sod", "fA3"], ["G3H"], ["80i"], ["1", "80i"], ["1", "Q4h", "80i"], ["Q4h", "80i"], ["Q4h", "8", "80i"], ["Q4h", "8", "4", "80i"], ["H7w"], ["57I"], ["8", "57I"], ["8 V4F", "57I"], ["8", "V4F", "57I"], ["8", "V4F"], ["8", "SPY CODER", "V4F"], ["8 3qN", "SPY CODER", "V4F"], ["8", "3qN", "SPY CODER", "V4F"], ["8", "3qN QDj", "SPY CODER", "V4F"], ["8", "3qN LEon", "SPY CODER", "V4F"], ["8", "3qN LEon", "SPY CODER", "V4F w-y"], ["8", "3qN LEon", "SPY CODER", "- w-y"], ["8", "3qN LEon", "SPY CODER", "-", "w-y"], ["8", "3qN LEon", "SPY bz6", "-", "w-y"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552266746.834082, "StartTime": 1552266736.0317829}, {"InputHistory": [["5", "2", "4", "8", "67", "5"], ["H1F", "5", "2", "4", "8", "67", "5"], ["H1F", "5 XdQ", "2", "4", "8", "67", "5"], [], ["uzs"], ["uzs P3R"], ["uzs 2 2 2 2 2"], ["67 2 2 2 2 2"], ["67 b 2 2 2 2"], ["67 a59 2 2 2 2"], ["67 a59 45,102 2 2 2"], ["67 a59 45,102 2 2 3"], ["67 5 45,102 2 2 3"], ["67 5 45,102 2 7x8 3"], ["67 AXN 45,102 2 7x8 3"], ["67 AXN 45,102 0,7 7x8 3"], [""], ["boY"], ["wvI"], ["1z8"], ["fHJ"], ["5", "fHJ"], ["5", "1Bo", "fHJ"], ["5", "1Bo", "fHJ z6p"], ["5", "1Bo", "fHJ", "z6p"], ["10", "5", "1Bo", "fHJ", "z6p"], ["10", "5", "1Bo 0T8", "fHJ", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "fHJ", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "1 2 3 4", "z6p"], ["10", "epecfapaed", "5", "1Bo 0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo 0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "1 2 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "1 0T8 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "1Bo", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "z6p"], ["10", "10", "z6p", "epecfapaed", "5", "0T8", "ATGCATGCATGCATCGTAGCATGC 0T8 3 -GV", "20", "z6p"], ["cyg"], ["lqD", "cyg"], ["67", "lqD", "cyg"], ["67", "lqD 346", "cyg"], ["67", "lqD", "346", "cyg"], ["5Sj"], ["8q-"], ["5", "8q-"], ["5", "tSL", "8q-"], ["tSL", "8q-"], ["4", "8q-"], ["4 GHN", "8q-"], ["4 GHN", "9dy", "8q-"], ["4 GHN", "9dy", "OA1", "8q-"], ["4 GHN", "9dy", "OA1", "zNU", "8q-"], ["4 GHN", "5", "9dy", "OA1", "zNU", "8q-"], ["4 GHN", "5", "9dy", "OA1", "zNU", "8q- I2F"], ["4 GHN", "5", "9dy", "OA1", "zNU", ""], ["4 GHN", "5", "9dy", "OA1", ""], ["4 GHN", "5", "9dy", "", "OA1", ""], ["4 GHN", "5", "9dy", "", "OA1", "10, 5", ""], ["4 GHN", "5", "9dy", "OA1", "10, 5", ""], ["5", "2", "4", "8", "67", "5"], ["5", "1S0", "2", "4", "8", "67", "5"], ["X5V"], ["4", "X5V"], ["4 PuZ", "X5V"], ["", "X5V"], ["9ls"], ["9ls 3Kx"], ["20 3Kx"], ["8 3Kx"], ["8 2"], ["8", "2"], ["8", "8", "2"], ["8", "2", "2"], ["8", "2", "2 7 6", "2"], ["8", "ut2", "2", "2 7 6", "2"], ["8", "ut2", "2", "2 7 6", "Ud2", "2"], ["8", "ut2", "2 u96", "2 7 6", "Ud2", "2"], ["8", "ut2", "2 u96", "L03 7 6", "Ud2", "2"], ["8", "ut2", "2 u96", "", "Ud2", "2"], ["8", "ut2", "2 u96", "", "Ud2", "", "2"], ["8", "ut2", " u96", "", "Ud2", "", "2"], ["8", "ut2", " u96", "", "nGv", "Ud2", "", "2"], ["8", "ut2", " u96", "a", "", "nGv", "Ud2", "", "2"], ["8", "ut2", " u96", "9BI", "a", "", "nGv", "Ud2", "", "2"], ["v0W"], ["2 7 6", "v0W"], ["2 7 6", "v0W PtN"], ["2 7 6", "y PtN"], ["2 7 6", "y 7"], ["Q63 7 6", "y 7"], ["Q63 7 6", "y 2"], ["Q63 7 6", "y zR7"], ["Q63 7 6", "KXw zR7"], ["Q63 7 zCR", "KXw zR7"], ["Q63 7 zCR", ""], ["Q63 7 ", ""], ["Q63 i1u ", ""], ["Q63 i1u ", "i", ""], ["Q63 i1u ", "24,28,496", "i", ""], ["Q63 i1u ", "24,28,496", "i", "sGj", ""], ["rBJ"], ["5", "rBJ"], ["5 35h", "rBJ"], ["5 35h", "8", "rBJ"], ["5 35h", "9 5 2", "8", "rBJ"], ["Iz9"], ["11cm", "Iz9"], ["11cm"], ["11cm", "11cm"], ["pp", "11cm", "11cm"], ["2", "pp", "11cm", "11cm"], ["2", "pp", "11cm", "11cm 4k7"], ["kFz", "2", "pp", "11cm", "11cm 4k7"], ["kFz", "D62", "2", "pp", "11cm", "11cm 4k7"], ["kFz", "2", "D62", "2", "pp", "11cm", "11cm 4k7"], ["kFz", "2", "D62", "2", "11cm", "11cm 4k7"], ["kFz", "IHT", "2", "D62", "2", "11cm", "11cm 4k7"], ["kFz", "IHT", "2", "D62", "2", "11cm 504", "11cm 4k7"], ["kFz", "IHT", "67", "2", "D62", "2", "11cm 504", "11cm 4k7"], ["5", "2", "4", "8", "67", "5"], ["5", "2", "4", "8", "b38", "67", "5"], ["5", "8", "2", "4", "8", "b38", "67", "5"], ["5", "2", "4", "8", "67", "5"], ["5", "2", "4", "8", "5"], ["Uuw"], ["5", "Uuw"], ["5", "0", "Uuw"], ["J-1", "5", "0", "Uuw"], ["J-1", "J-1", "5", "0", "Uuw"], ["J-1", "8", "J-1", "5", "0", "Uuw"], ["2", "J-1", "8", "J-1", "5", "0", "Uuw"], ["2", "J-1", "8", "J-1", "J-1", "5", "0", "Uuw"], ["2", "J-1", "8 EaG", "J-1", "5", "0", "Uuw"], ["3tj"], ["abcdef", "3tj"], ["abcdef"], ["1,95", "abcdef"], ["11cm", "1,95", "abcdef"], ["11cm", "1,95", "1,95", "abcdef"], ["11cm", "1,95", "1,95", "6", "abcdef"], ["11cm", "1,95 Jc6", "1,95", "6", "abcdef"], ["11cm", "1,95 Jc6", "1,95", "6 h2E", "abcdef"], ["11cm", "1,95 Jc6", "WLC", "1,95", "6 h2E", "abcdef"], ["11cm", "1,95 Jc6", "WLC", "6 h2E", "abcdef"], ["11cm", "1,95 Jc6", "WLC", "6 h2E", "n45", "abcdef"], ["11cm", "1,95 Jc6", "WLC co4", "6 h2E", "n45", "abcdef"], ["11cm", "1,95 Jc6", "", "6 h2E", "n45", "abcdef"], ["11cm", "1,95 Jc6", "", "6 qAF", "n45", "abcdef"], ["11cm", "1,95 Jc6", "", "6 qAF", "67", "n45", "abcdef"], ["11cm", "1,95 Jc6", "", "6 qAF", "67", "abcdef"], ["UXM"], ["5", "UXM"], ["5", "UXM 6g9"], ["5", "67 6g9"], ["p4-"], ["Wna", "p4-"], ["fA3"], ["4", "fA3"], ["5", "4", "fA3"], ["5", "4 sod", "fA3"], ["G3H"], ["80i"], ["1", "80i"], ["1", "Q4h", "80i"], ["Q4h", "80i"], ["Q4h", "8", "80i"], ["Q4h", "8", "4", "80i"], ["H7w"], ["57I"], ["8", "57I"], ["8 V4F", "57I"], ["8", "V4F", "57I"], ["8", "V4F"], ["8", "SPY CODER", "V4F"], ["8 3qN", "SPY CODER", "V4F"], ["8", "3qN", "SPY CODER", "V4F"], ["8", "3qN QDj", "SPY CODER", "V4F"], ["8", "3qN LEon", "SPY CODER", "V4F"], ["8", "3qN LEon", "SPY CODER", "V4F w-y"], ["8", "3qN LEon", "SPY CODER", "- w-y"], ["8", "3qN LEon", "SPY CODER", "-", "w-y"], ["8", "3qN LEon", "SPY bz6", "-", "w-y"], ["5", "2", "4", "8", "67", "5"], ["5", "2 dh2", "4", "8", "67", "5"], ["5", "2 dh2", "5", "4", "8", "67", "5"], ["2", "5", "2 dh2", "5", "4", "8", "67", "5"], ["2", "5", "2 dh2", "5", "4", "3 4 5", "8", "67", "5"], ["2", "5", "2 dh2", "5", "4", "3 4 5", "8", "2 dh2", "67", "5"], ["2", "5", "2 dh2", "5", "4", "8 4 5", "8", "2 dh2", "67", "5"], ["2", "5", "2 dh2", "5", "4", "8", "4", "5", "8", "2 dh2", "67", "5"], ["2", "5", "2 dh2", "5", "4", "8", "4", "5 e3k", "8", "2 dh2", "67", "5"], ["5", "2 dh2", "5", "4", "8", "4", "5 e3k", "8", "2 dh2", "67", "5"], ["5", "2 dh2", "5", "4", "5", "8", "4", "5 e3k", "8", "2 dh2", "67", "5"], ["YBy"], ["YbF", "YBy"], ["a4g"], ["2", "a4g"], ["2", "8", "a4g"], ["2", "10", "8", "a4g"], ["2 R3D", "10", "8", "a4g"], ["", "10", "8", "a4g"], ["p5I", "", "10", "8", "a4g"], ["p5I", "", "10", "a4g", "8", "a4g"], ["p5I", "", "10", "a4g", "a4g"], ["p5I", "", "10", "a4g", "a4g", "a4g"], ["p5I", " 8ly", "10", "a4g", "a4g", "a4g"], ["p5I", " 8ly", "10", "a4g", "a4g"], ["p5I", " 8ly", "10 O9S", "a4g", "a4g"], ["A : C B", "p5I", " 8ly", "10 O9S", "a4g", "a4g"], ["A : C B", "7 7 7", "p5I", " 8ly", "10 O9S", "a4g", "a4g"], ["A : C B", "7 7 7", "p5I", " 8ly", "10 3", "a4g", "a4g"], ["A : C B", "7 7 7", "p5I", " 8ly", "", "a4g", "a4g"], ["A : C B", "7 7 7", "p5I", " 8ly", "", "a4g", "N1k", "a4g"], ["A : C B", "7 7 7", "p5I", " 8ly", " A1G", "a4g", "N1k", "a4g"], ["A : C B", "7 7 7", "p5I", " 8ly", " A1G", "a4g", "E A ", "N1k", "a4g"], ["A : C B", "7 7 7", "p5I", "OM1 8ly", " A1G", "a4g", "E A ", "N1k", "a4g"], ["A : C B", "7 7 7", "p5I", "OM1 a4g", " A1G", "a4g", "E A ", "N1k", "a4g"], ["A : C B", "7 7 7", "p5I", "OM1 a4g", "", "a4g", "E A ", "N1k", "a4g"], ["A : C B", "7 7 7", "p5I uBS", "OM1 a4g", "", "a4g", "E A ", "N1k", "a4g"], ["A : C B", "7 7 7", "p5I uBS", "2 a4g", "", "a4g", "E A ", "N1k", "a4g"], ["A : C B", "7 8 7", "p5I uBS", "2 a4g", "", "a4g", "E A ", "N1k", "a4g"], ["A : C B", "7 0hg 7", "p5I uBS", "2 a4g", "", "a4g", "E A ", "N1k", "a4g"], ["A : 5 B", "7 0hg 7", "p5I uBS", "2 a4g", "", "a4g", "E A ", "N1k", "a4g"], ["A : 5 B", "7 0hg 7", "p5I uBS", "N1k a4g", "", "a4g", "E A ", "N1k", "a4g"], ["A : 5 B", "7 0hg 7", "p5I uBS", "N1k a4g", "+", "", "a4g", "E A ", "N1k", "a4g"], ["A : 5 B", "7 0hg 7", "p5I uBS", "N1k a4g", "WU6", "+", "", "a4g", "E A ", "N1k", "a4g"], ["A : 5 B", "7 0hg 7", "p5I uBS", "N1k a4g", "WU6", "+", "", "a4g", "3TR A ", "N1k", "a4g"], ["A : 5 B", "7 0hg 7", "p5I uBS", "N1k a4g", "WU6", "+", " qq5", "a4g", "3TR A ", "N1k", "a4g"], ["A : 5 B", "7 0hg 7", "p5I uBS", "N1k a4g", "WU6", "+", " qq5", "3TR A ", "N1k", "a4g"], ["A : 5 B", "7 0hg 7", "p5I uBS", "N1k a4g", "WU6", "+", " qq5", "3TR A ", "a4g"], ["A : 5 B", "7 0hg 7", "p5I ii7", "N1k a4g", "WU6", "+", " qq5", "3TR A ", "a4g"], ["A : 5 B", "7 0hg 7", "p5I ii7", "N1k a4g", "WU6", "+", " qq5", "3TR", "A", "", "a4g"], ["A : 5 B", "7 0hg 7", "p5I A : 5 B", "N1k a4g", "WU6", "+", " qq5", "3TR", "A", "", "a4g"], ["A : 5 B", "7 0hg 7", "p5I A : 5 B", "N1k a4g", "WU6", "+", " qq5", "3 4 5", "3TR", "A", "", "a4g"], ["Eb7"], ["Hello_World!", "Eb7"], ["Hello_World!", "D0l", "Eb7"], ["6gK"], ["Xhb"], ["AlL"], ["LA9"], ["2", "LA9"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552266758.1353915, "StartTime": 1552266746.836165}]], [{"CorrectInputs": [[["3", "\u0417\u0435\u043d\u0438\u0442;3;\u0421\u043f\u0430\u0440\u0442\u0430\u043a;1", "\u0417\u0435\u043d\u0438\u0442;3;\u0421\u043f\u0430\u0440\u0442\u0430\u043a;1", "\u0417\u0435\u043d\u0438\u0442;3;\u0421\u043f\u0430\u0440\u0442\u0430\u043a;1"], 1522290036]], "UniqueId": "99e06d80-b284-4e95-f823-52cb63ac06ba_0", "CoverageInfo": [36, 32, 12, 1, 10, "7-45,", "4->44"], "TimeStamp": 1522290000, "BadInput": ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 5, in <module>\n    c1, s1, c2, s2 = input().split(';')\nValueError: not enough values to unpack (expected 4, got 1)\n", "ip": "46.151.87.85"}, [{"EndTime": 1552346243.2144907, "FinalMinimizedSolution": ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], "FinalCoverage": [36, 11, 12, 3, 67, "11-12,", "24-33,", "7->10,", "10->11,", "17->24"], "FinalSolution": ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], "StartTime": 1552346241.960536, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"]]}, {"EndTime": 1552346246.5563, "FinalMinimizedSolution": ["1", "1;1;1;1"], "FinalCoverage": [36, 11, 12, 3, 67, "11-12,", "24-33,", "7->10,", "10->11,", "17->24"], "FinalSolution": ["1", "1;1;1;1"], "StartTime": 1552346243.2146823, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1"], ["1", "1;1"], ["1", "1;1;1"]]}, {"EndTime": 1552346254.0715063, "FinalMinimizedSolution": ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10", "Hlk;Hlk;Hlk;Hlk"], "FinalCoverage": [36, 11, 12, 2, 69, "11-12,", "24-33,", "10->11,", "17->24"], "FinalSolution": ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10", "Hlk;Hlk;Hlk;Hlk"], "StartTime": 1552346246.5566375, "FoundSolution": true, "NumProbesMade": 36, "InputHistory": [["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1"], ["1", "1;1"], ["1", "1;1;1"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], [], ["10"], ["10", "1"], ["10", "1;1"], ["10", "1;1;1"], ["10", "1;1;1;1"], ["10", "1;1;1;1", "1"], ["10", "1;1;1;1", "1;1"], ["10", "1;1;1;1", "1;1;1"], ["10", "1;1;1;1", "1;1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10"], ["10", "1;1;1;1", "1;1;1;1", "10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10", "Hlk"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10", "Hlk;Hlk"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10", "Hlk;Hlk;Hlk"]]}, {"EndTime": 1552346258.1731951, "FinalMinimizedSolution": ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;"], "FinalCoverage": [36, 11, 12, 2, 69, "11-12,", "24-33,", "10->11,", "17->24"], "FinalSolution": ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;"], "StartTime": 1552346254.0723364, "FoundSolution": true, "NumProbesMade": 18, "InputHistory": [["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1"], ["1", "1;1"], ["1", "1;1;1"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], [], ["10"], ["10", "1"], ["10", "1;1"], ["10", "1;1;1"], ["10", "1;1;1;1"], ["10", "1;1;1;1", "1"], ["10", "1;1;1;1", "1;1"], ["10", "1;1;1;1", "1;1;1"], ["10", "1;1;1;1", "1;1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10"], ["10", "1;1;1;1", "1;1;1;1", "10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10", "Hlk"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10", "Hlk;Hlk"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10", "Hlk;Hlk;Hlk"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"]]}, {"EndTime": 1552346259.4303815, "FinalMinimizedSolution": ["1", ":;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], "FinalCoverage": [36, 9, 12, 3, 71, "24-33,", "7->10,", "10->14,", "17->24"], "FinalSolution": ["1", ":;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], "StartTime": 1552346258.1741939, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "1"], ["1", "1;1"], ["1", "1;1;1"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], [], ["10"], ["10", "1"], ["10", "1;1"], ["10", "1;1;1"], ["10", "1;1;1;1"], ["10", "1;1;1;1", "1"], ["10", "1;1;1;1", "1;1"], ["10", "1;1;1;1", "1;1;1"], ["10", "1;1;1;1", "1;1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10"], ["10", "1;1;1;1", "1;1;1;1", "10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10", "Hlk"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10", "Hlk;Hlk"], ["10", "1;1;1;1", "1;1;1;1", "10;10;10;10", "10;10;10;10", "10;10;10;10", "1;1;1;1", "10;10;10;10", "1;1;1;1", "10;10;10;10", "Hlk;Hlk;Hlk"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["5", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6", ";;;", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", "\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", ":;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"], ["1", ":;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6;\u0417\u0435\u043d\u0438\u0442:2 2 0 0 6"]]}]], [{"CorrectInputs": [[["3", "1 2 3", "3", "4 5 6"], 1534886800]], "UniqueId": "1cf2ccf8-2833-410f-d029-c630d1819bd1_0", "CoverageInfo": [8, 4, 0, 0, 50, "5-8"], "TimeStamp": 1534886754, "BadInput": ["3", "1 2 3", "4 5 6"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 4, in <module>\n    m=int(input())\nValueError: invalid literal for int() with base 10: '4 5 6'\n", "ip": "43.225.26.106"}, [{"EndTime": 1552363979.6820657, "FinalMinimizedSolution": ["3", "1 2 3", "8", "3"], "FinalCoverage": [8, 0, 0, 0, 100], "FinalSolution": ["3", "1 2 3", "8", "3"], "StartTime": 1552363978.6293633, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["3", "1 2 3", "4 5 6"], ["3", "1 2 3", "8"]]}, {"EndTime": 1552363981.3078918, "FinalMinimizedSolution": ["5", "3", "3", "3"], "FinalCoverage": [8, 0, 0, 0, 100], "FinalSolution": ["5", "3", "3", "3"], "StartTime": 1552363979.6822722, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["3", "1 2 3", "4 5 6"], ["3", "1 2 3", "8"], ["3", "1 2 3", "4 5 6"], [], ["5"], ["5", "3"], ["5", "3", "3"]]}, {"EndTime": 1552363982.5524154, "FinalMinimizedSolution": ["3", "1 2 3", "6", "8"], "FinalCoverage": [8, 0, 0, 0, 100], "FinalSolution": ["3", "1 2 3", "6", "8"], "StartTime": 1552363981.3081512, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["3", "1 2 3", "4 5 6"], ["3", "1 2 3", "8"], ["3", "1 2 3", "4 5 6"], [], ["5"], ["5", "3"], ["5", "3", "3"], ["3", "1 2 3", "4 5 6"], ["3", "1 2 3", "6"], ["3", "1 2 3", "6", "bAm"]]}, {"EndTime": 1552363983.6111274, "FinalMinimizedSolution": ["3", "1 2 3", "9", "3"], "FinalCoverage": [8, 0, 0, 0, 100], "FinalSolution": ["3", "1 2 3", "9", "3"], "StartTime": 1552363982.5527132, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["3", "1 2 3", "4 5 6"], ["3", "1 2 3", "8"], ["3", "1 2 3", "4 5 6"], [], ["5"], ["5", "3"], ["5", "3", "3"], ["3", "1 2 3", "4 5 6"], ["3", "1 2 3", "6"], ["3", "1 2 3", "6", "bAm"], ["3", "1 2 3", "4 5 6"], ["3", "1 2 3", "9"]]}, {"EndTime": 1552363984.5293376, "FinalMinimizedSolution": ["3", "1", "2", "3"], "FinalCoverage": [8, 0, 0, 0, 100], "FinalSolution": ["3", "1", "2", "3", "6"], "StartTime": 1552363983.6114395, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3", "1 2 3", "4 5 6"], ["3", "1 2 3", "8"], ["3", "1 2 3", "4 5 6"], [], ["5"], ["5", "3"], ["5", "3", "3"], ["3", "1 2 3", "4 5 6"], ["3", "1 2 3", "6"], ["3", "1 2 3", "6", "bAm"], ["3", "1 2 3", "4 5 6"], ["3", "1 2 3", "9"], ["3", "1 2 3", "4 5 6"]]}]], [{"CorrectInputs": [[["1", "2", "3"], 1534481278]], "UniqueId": "01fe64f7-a5ac-4c3f-c1ef-d6901477cbc7_0", "CoverageInfo": [4, 2, 0, 0, 50, "3-6"], "TimeStamp": 1534481255, "BadInput": ["1", "2,3"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 2, in <module>\n    y = int(input())\nValueError: invalid literal for int() with base 10: '2,3'\n", "ip": "177.206.239.165"}, [{"EndTime": 1552321535.2916121, "FinalMinimizedSolution": ["1", "8", "1"], "FinalCoverage": [4, 0, 0, 0, 100], "FinalSolution": ["1", "8", "1"], "StartTime": 1552321534.2328534, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "2,3"], ["1", "8"]]}, {"EndTime": 1552321536.3476293, "FinalMinimizedSolution": ["1", "1", "1"], "FinalCoverage": [4, 0, 0, 0, 100], "FinalSolution": ["1", "1", "1"], "StartTime": 1552321535.291792, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "2,3"], ["1", "8"], ["1", "2,3"], ["1", "1"]]}, {"EndTime": 1552321537.4033463, "FinalMinimizedSolution": ["7", "1", "1"], "FinalCoverage": [4, 0, 0, 0, 100], "FinalSolution": ["7", "1", "1"], "StartTime": 1552321536.3478274, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "2,3"], ["1", "8"], ["1", "2,3"], ["1", "1"], ["1", "2,3"], ["2,3", "1", "1"]]}, {"EndTime": 1552321538.4612887, "FinalMinimizedSolution": ["1", "-1", "-1"], "FinalCoverage": [4, 0, 0, 0, 100], "FinalSolution": ["1", "-1", "-1"], "StartTime": 1552321537.4035594, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "2,3"], ["1", "8"], ["1", "2,3"], ["1", "1"], ["1", "2,3"], ["2,3", "1", "1"], ["1", "2,3"], ["1", "-1"]]}, {"EndTime": 1552321539.7106845, "FinalMinimizedSolution": ["1", "-1", "6"], "FinalCoverage": [4, 0, 0, 0, 100], "FinalSolution": ["1", "-1", "6"], "StartTime": 1552321538.4615142, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["1", "2,3"], ["1", "8"], ["1", "2,3"], ["1", "1"], ["1", "2,3"], ["2,3", "1", "1"], ["1", "2,3"], ["1", "-1"], ["1", "2,3"], ["1", "a7a", "-1"], ["1", "-1", "-1 G4d"]]}]], [{"CorrectInputs": [[["1", "Laura", "2", "Alice", "10", "Margot", "13"], 1535644180]], "UniqueId": "b52ecab5-8b18-431c-d27c-19a59cfa5dab_0", "CoverageInfo": [34, 27, 8, 0, 17, "3-4,", "7-13,", "16-25,", "30-38"], "TimeStamp": 1535644136, "BadInput": ["la"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 29, in <module>\n    x = int(input(\"Combien ? \"))\nValueError: invalid literal for int() with base 10: 'la'\n", "ip": "2a02:a03f:53c0:2600:453f:589b:bb5c:2bf"}, [{"InputHistory": [["la"], ["8"], ["8", "la"], ["8", "la", "la"], ["8", "la", "2"], ["8", "la", "2", "2"], ["8", "la", "2", "2", "2"], ["8", "la", "2", "2", "2", "2"], ["8", "la", "2", "2", "2", "2", "2"], ["la", "2", "2", "2", "2", "2"], ["5", "2", "2", "2", "2", "2"], ["5", "2", "2", "2", "2", "2", "5"], ["5", "2", "5 5 -5 -5", "2", "2", "2", "2", "5"], ["5", "2", "5", "2", "2", "2", "2", "5"], ["5", "2", "5", "2", "2", "2", "2", "5", "69d"], ["5", "2", "5", "2", "2", "2", "2", "5", "9"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "vcI"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5", "lje"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "2", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "2 5c5", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "-1", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "2 363", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "1", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "1", "4", "5", "-1", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "4", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCCCCCCiiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "4", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "6"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "5", "6"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "5", "8"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "9", "8"], [], ["6"], ["6", "G99"], ["6", "G99", "6"], ["6", "G99", "6", "6"], ["6", "G99", "6", "6", "la"], ["6", "G99", "6", "6", "9"], ["6", "G99", "6", "6", "9", "G99"], ["6", "G99", "6", "6", "9", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6"], ["6", "G99", "6", "6", "9", "G99", "6", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99", "3"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552364937.1898592, "StartTime": 1552364925.8929162}, {"EndTime": 1552364938.2552269, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [34, 24, 8, 1, 26, "3-4,", "7-13,", "16-25,", "32-37,", "31->32"], "FinalSolution": ["-1"], "StartTime": 1552364937.1911554, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["la"], ["8"], ["8", "la"], ["8", "la", "la"], ["8", "la", "2"], ["8", "la", "2", "2"], ["8", "la", "2", "2", "2"], ["8", "la", "2", "2", "2", "2"], ["8", "la", "2", "2", "2", "2", "2"], ["la", "2", "2", "2", "2", "2"], ["5", "2", "2", "2", "2", "2"], ["5", "2", "2", "2", "2", "2", "5"], ["5", "2", "5 5 -5 -5", "2", "2", "2", "2", "5"], ["5", "2", "5", "2", "2", "2", "2", "5"], ["5", "2", "5", "2", "2", "2", "2", "5", "69d"], ["5", "2", "5", "2", "2", "2", "2", "5", "9"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "vcI"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5", "lje"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "2", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "2 5c5", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "-1", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "2 363", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "1", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "1", "4", "5", "-1", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "4", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCCCCCCiiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "4", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "6"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "5", "6"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "5", "8"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "9", "8"], [], ["6"], ["6", "G99"], ["6", "G99", "6"], ["6", "G99", "6", "6"], ["6", "G99", "6", "6", "la"], ["6", "G99", "6", "6", "9"], ["6", "G99", "6", "6", "9", "G99"], ["6", "G99", "6", "6", "9", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6"], ["6", "G99", "6", "6", "9", "G99", "6", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99", "3"], ["la"], ["hsv"]]}, {"InputHistory": [["la"], ["8"], ["8", "la"], ["8", "la", "la"], ["8", "la", "2"], ["8", "la", "2", "2"], ["8", "la", "2", "2", "2"], ["8", "la", "2", "2", "2", "2"], ["8", "la", "2", "2", "2", "2", "2"], ["la", "2", "2", "2", "2", "2"], ["5", "2", "2", "2", "2", "2"], ["5", "2", "2", "2", "2", "2", "5"], ["5", "2", "5 5 -5 -5", "2", "2", "2", "2", "5"], ["5", "2", "5", "2", "2", "2", "2", "5"], ["5", "2", "5", "2", "2", "2", "2", "5", "69d"], ["5", "2", "5", "2", "2", "2", "2", "5", "9"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "vcI"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5", "lje"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "2", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "2 5c5", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "-1", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "2 363", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "1", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "1", "4", "5", "-1", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "4", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCCCCCCiiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "4", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "6"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "5", "6"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "5", "8"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "9", "8"], [], ["6"], ["6", "G99"], ["6", "G99", "6"], ["6", "G99", "6", "6"], ["6", "G99", "6", "6", "la"], ["6", "G99", "6", "6", "9"], ["6", "G99", "6", "6", "9", "G99"], ["6", "G99", "6", "6", "9", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6"], ["6", "G99", "6", "6", "9", "G99", "6", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99", "3"], ["la"], ["hsv"], ["la"], ["dR-", "8"], ["4", "8"], ["4", "8", "la"], ["4", "8", "4"], ["4", "8", "4", "4"], ["4", "8", "4", "4", "4"], ["4", "8", "4", "4", "4", "4"], ["4", "8", "4", "4", "4", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "la"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "la"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "g-Q"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "s60"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "MJh"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10", "8", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10", "8", "0", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10", "8", "0", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "PE8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "xT7", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "LeN", "9", "4", "4", "8", "8", "8", "0", "8", "8", "xT7", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "xT7", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0", "PE8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0", "0", "g-Q"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0", "0", "g-Q", "PE8"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552364948.4139261, "StartTime": 1552364938.2566192}, {"EndTime": 1552364955.1651754, "FinalMinimizedSolution": ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10", "3", "1", "3", "10", "3"], "FinalCoverage": [34, 0, 8, 0, 100], "FinalSolution": ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10", "3", "1", "3", "10", "3"], "StartTime": 1552364948.417952, "FoundSolution": true, "NumProbesMade": 32, "InputHistory": [["la"], ["8"], ["8", "la"], ["8", "la", "la"], ["8", "la", "2"], ["8", "la", "2", "2"], ["8", "la", "2", "2", "2"], ["8", "la", "2", "2", "2", "2"], ["8", "la", "2", "2", "2", "2", "2"], ["la", "2", "2", "2", "2", "2"], ["5", "2", "2", "2", "2", "2"], ["5", "2", "2", "2", "2", "2", "5"], ["5", "2", "5 5 -5 -5", "2", "2", "2", "2", "5"], ["5", "2", "5", "2", "2", "2", "2", "5"], ["5", "2", "5", "2", "2", "2", "2", "5", "69d"], ["5", "2", "5", "2", "2", "2", "2", "5", "9"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "vcI"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5", "lje"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "2", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "2 5c5", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "-1", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "2 363", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "1", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "1", "4", "5", "-1", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "4", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCCCCCCiiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "4", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "6"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "5", "6"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "5", "8"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "9", "8"], [], ["6"], ["6", "G99"], ["6", "G99", "6"], ["6", "G99", "6", "6"], ["6", "G99", "6", "6", "la"], ["6", "G99", "6", "6", "9"], ["6", "G99", "6", "6", "9", "G99"], ["6", "G99", "6", "6", "9", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6"], ["6", "G99", "6", "6", "9", "G99", "6", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99", "3"], ["la"], ["hsv"], ["la"], ["dR-", "8"], ["4", "8"], ["4", "8", "la"], ["4", "8", "4"], ["4", "8", "4", "4"], ["4", "8", "4", "4", "4"], ["4", "8", "4", "4", "4", "4"], ["4", "8", "4", "4", "4", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "la"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "la"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "g-Q"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "s60"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "MJh"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10", "8", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10", "8", "0", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10", "8", "0", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "PE8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "xT7", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "LeN", "9", "4", "4", "8", "8", "8", "0", "8", "8", "xT7", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "xT7", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0", "PE8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0", "0", "g-Q"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0", "0", "g-Q", "PE8"], ["la"], ["1"], ["1", "1"], ["1", "1", "1"], ["1", "1", "1", "Elu"], ["1", "1", "1", "Elu", "1"], ["1", "1", "1", "Xh4", "Elu", "1"], ["1", "1", "1", "Xh4", "4", "1"], ["1", "1", "1", "-Hl", "Xh4", "4", "1"], ["1", "1", "1", "-Hl", "0", "4", "1"], ["1", "-Hl", "1", "1", "-Hl", "0", "4", "1"], ["1", "-Hl", "1", "1", "1", "0", "4", "1"], ["1", "-Hl", "1", "1", "0", "4", "1"], ["1", "-Hl", "1 481", "1", "0", "4", "1"], ["1", "-Hl", "10", "1", "0", "4", "1"], ["1", "-Hl", "10", "1", "0", "4", "1", "la"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "la"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10", "3"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10", "3", "1"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10", "3", "1", "3"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10", "3", "1", "3", "10"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10", "3", "1", "3", "10", "la"]]}, {"InputHistory": [["la"], ["8"], ["8", "la"], ["8", "la", "la"], ["8", "la", "2"], ["8", "la", "2", "2"], ["8", "la", "2", "2", "2"], ["8", "la", "2", "2", "2", "2"], ["8", "la", "2", "2", "2", "2", "2"], ["la", "2", "2", "2", "2", "2"], ["5", "2", "2", "2", "2", "2"], ["5", "2", "2", "2", "2", "2", "5"], ["5", "2", "5 5 -5 -5", "2", "2", "2", "2", "5"], ["5", "2", "5", "2", "2", "2", "2", "5"], ["5", "2", "5", "2", "2", "2", "2", "5", "69d"], ["5", "2", "5", "2", "2", "2", "2", "5", "9"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "vcI"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5", "lje"], ["5", "2", "5", "2", "2", "2", "2", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "2", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "2 5c5", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "9", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "Wbk", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "-1", "3", "5", "1"], ["5", "2", "5", "2", "2", "2 363", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "2 363", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "1", "4", "5", "-1", "3", "5", "1", "5"], ["5", "2", "5", "2", "1", "4", "5", "-1", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "4", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCCCCCCiiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "4", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["5", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "2"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "5", "1", "5", "6"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "5", "6"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "5", "8"], ["8", "2", "5", "2", "1", "10", "5", "-1", "fffffffffffffffVVVVVVVVVVVVVVVXXXXKKKKKKKKKfffffffffffffffffffAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVVVVVYYYYYYYYYYYYmmmmmmmmmmmhhhhhhhhhhhhhepXXXXXXXXdddddddddDDDDDDDDDDDDDDDDDDvvvvviiiiiwwwwwwwwwwwwCCC10iiiiiittttttttttttteeeeeeejjjjjjjjjjjjjjjrrrrrrUUUUUUUUzzzzzzzzzzYYY", "3", "6", "1", "9", "8"], [], ["6"], ["6", "G99"], ["6", "G99", "6"], ["6", "G99", "6", "6"], ["6", "G99", "6", "6", "la"], ["6", "G99", "6", "6", "9"], ["6", "G99", "6", "6", "9", "G99"], ["6", "G99", "6", "6", "9", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6"], ["6", "G99", "6", "6", "9", "G99", "6", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99", "G99"], ["6", "G99", "6", "6", "9", "G99", "6", "G99", "1", "G99", "3", "6", "9", "G99", "3"], ["la"], ["hsv"], ["la"], ["dR-", "8"], ["4", "8"], ["4", "8", "la"], ["4", "8", "4"], ["4", "8", "4", "4"], ["4", "8", "4", "4", "4"], ["4", "8", "4", "4", "4", "4"], ["4", "8", "4", "4", "4", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "la"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "la"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "g-Q"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "s60"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "MJh"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10", "8", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10", "8", "0", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "4", "4", "4", "4", "10", "8", "0", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "PE8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "9", "4", "4", "8", "8", "8", "0", "8", "8", "xT7", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "LeN", "9", "4", "4", "8", "8", "8", "0", "8", "8", "xT7", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "xT7", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0", "PE8"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0", "0"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0", "0", "g-Q"], ["4", "8", "4", "4", "4", "4", "4", "s60", "8", "g-Q", "8", "9", "4", "4", "8", "8", "8", "0", "8", "8", "2", "4", "10", "0", "8", "PE8", "4", "4", "6", "8", "4", "G7z", "6", "4", "4", "4", "4", "10", "8", "0", "4", "4", "-1", "8", "8", "0", "0", "g-Q", "PE8"], ["la"], ["1"], ["1", "1"], ["1", "1", "1"], ["1", "1", "1", "Elu"], ["1", "1", "1", "Elu", "1"], ["1", "1", "1", "Xh4", "Elu", "1"], ["1", "1", "1", "Xh4", "4", "1"], ["1", "1", "1", "-Hl", "Xh4", "4", "1"], ["1", "1", "1", "-Hl", "0", "4", "1"], ["1", "-Hl", "1", "1", "-Hl", "0", "4", "1"], ["1", "-Hl", "1", "1", "1", "0", "4", "1"], ["1", "-Hl", "1", "1", "0", "4", "1"], ["1", "-Hl", "1 481", "1", "0", "4", "1"], ["1", "-Hl", "10", "1", "0", "4", "1"], ["1", "-Hl", "10", "1", "0", "4", "1", "la"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "la"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10", "3"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10", "3", "1"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10", "3", "1", "3"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10", "3", "1", "3", "10"], ["1", "-Hl", "10", "1", "0", "4", "1", "la", "1", "la", "1", "1", "3", "0", "3", "la", "10", "10", "3", "1", "3", "10", "la"], ["la"], ["2"], ["2", "la"], ["2", "la", "2"], ["2", "la", "2", "la"], ["2", "la", "2", "la", "la"], ["2", "la", "2", "la", "3"], ["2", "la", "2", "la", "3", "3"], ["2", "la", "2", "la", "3", "3", "la"], ["2", "la", "2", "la", "3", "3", "8"], ["2", "la", "2", "la", "3", "3", "8", "la"], ["2", "la", "2", "la", "3", "3", "8", "la", "la"], ["2", "la", "2", "la", "3", "3", "8", "la", "8"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "la"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "lq8"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5", "3", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5", "3", "3", "la"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5", "3", "3", "la", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5", "3", "3", "la", "3", "la"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5", "3", "3", "la", "3", "la", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5", "3", "3", "la", "3", "la", "3", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5", "3", "3", "la", "3", "la", "3", "3", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5", "3", "3", "la", "3", "la", "3", "3", "3", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5", "3", "3", "la", "3", "la", "3", "3", "3", "3", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5", "3", "3", "la", "3", "la", "3", "3", "1,27", "3", "3", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5", "3", "3", "la", "3", "la", "3", "3", "9", "3", "3", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3", "5", "3", "3", "la", "3", "la", "3", "3", "9", "3", "3", "3", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3.6", "3", "5", "3", "3", "la", "3", "la", "3", "3", "9", "3", "3", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3.6", "3", "5", "3", "3", "la", "3", "7", "3", "3", "9", "3", "3", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3.6", "3", "5", "3", "3", "3", "3", "7", "3", "3", "9", "3", "3", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3.6", "3", "5", "3", "3", "3", "3", "7", "3", "3", "9", "3", "3 S0R", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3.6", "3 cTI", "5", "3", "3", "3", "3", "7", "3", "3", "9", "3", "3 S0R", "3"], ["2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3.6", "-1", "5", "3", "3", "3", "3", "7", "3", "3", "9", "3", "3 S0R", "3"], ["3", "2", "la", "2", "la", "3", "3", "8", "la", "8", "3", "3", "bcr", "4", "3.6", "-1", "5", "3", "3", "3", "3", "7", "3", "3", "9", "3", "3 S0R", "3"], ["3", "2", "la", "2", "la", "3", "3", "8", "10", "8", "3", "3", "bcr", "4", "3.6", "-1", "5", "3", "3", "3", "3", "7", "3", "3", "9", "3", "3 S0R", "3"], ["3", "2", "la", "2", "6", "3", "3", "8", "10", "8", "3", "3", "bcr", "4", "3.6", "-1", "5", "3", "3", "3", "3", "7", "3", "3", "9", "3", "3 S0R", "3"], ["3", "2", "6", "2", "6", "3", "3", "8", "10", "8", "3", "3", "bcr", "4", "3.6", "-1", "5", "3", "3", "3", "3", "7", "3", "3", "9", "3", "3 S0R", "3"], ["3", "2", "6", "2", "6", "3", "3", "8", "10", "8", "3", "3", "8", "4", "3.6", "-1", "5", "3", "3", "3", "3", "7", "3", "3", "9", "3", "3 S0R", "3"], ["3", "2", "6", "2", "6", "3", "3", "8", "10", "8", "3", "3", "8", "4", "0", "-1", "5", "3", "3", "3", "3", "7", "3", "3", "9", "3", "3 S0R", "3"], ["3", "2", "6", "2", "6", "3", "3", "8", "10", "8", "3", "3", "8", "4", "0", "-1", "5", "3", "3", "3", "3", "7", "3", "3", "9", "3", "0", "3"], ["TLO"], ["5"], ["5", "la"], ["5", "la", "0Oh"], ["5", "la", "6"], ["5", "la", "6", "la"], ["5", "la", "6", "la", "5"], ["5", "la", "6", "la", "5", "la"], ["5", "la", "6", "la", "5", "la", "6"], ["5", "la", "6", "la", "5", "la", "6", "la"], ["5", "la", "6", "la", "5", "la", "6", "la", "6"], ["5", "la", "6", "la", "5", "la", "6", "la", "6", "Xu0"], ["5", "la", "6", "la", "5", "la", "6", "la", "6", "Xu0", "6"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552364966.0014205, "StartTime": 1552364955.1700764}]], [{"CorrectInputs": [[["Harry", "Harry", "Computer Science"], 1538369189]], "UniqueId": "9eaaa209-f777-4243-ace8-0874ae898cf2_0", "CoverageInfo": [24, 6, 12, 4, 67, "12-13,", "24-27,", "11->12,", "21->exit,", "23->24,", "23->26"], "TimeStamp": 1538369128, "BadInput": ["H", "H", "H"], "ErrorType": "KeyError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 31, in <module>\n    main()\n  File \"temp2018.py\", line 5, in main\n    add(d)\n  File \"temp2018.py\", line 23, in add\n    if key == d[name1] and value == d[major]:\nKeyError: 'H'\n", "ip": "2620:10a:3042:8011:74bf:e473:f810:5b78"}, [{"EndTime": 1552415310.6542792, "FinalMinimizedSolution": ["H", "Harry", "H"], "FinalCoverage": [24, 4, 12, 2, 83, "12-13,", "24-25,", "11->12,", "23->24"], "FinalSolution": ["H", "Harry", "H"], "StartTime": 1552415309.2229657, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["H", "H", "H"], ["H", "H"], ["H", "VP2", "H", "H"], ["H"]]}, {"EndTime": 1552415315.2634273, "FinalMinimizedSolution": ["5,5", "Ron", "English"], "FinalCoverage": [24, 4, 12, 2, 83, "12-13,", "24-25,", "11->12,", "23->24"], "FinalSolution": ["5,5", "Ron", "English", "H", "English", "Harry IHh"], "StartTime": 1552415310.6545014, "FoundSolution": true, "NumProbesMade": 20, "InputHistory": [["H", "H", "H"], ["H", "H"], ["H", "VP2", "H", "H"], ["H"], ["H", "H", "H"], ["H", "H", "H 15l"], ["H", "H", "English 15l"], ["H", "H 097", "English 15l"], ["English", "H", "H 097", "English 15l"], ["English", "H", "H", "097", "English 15l"], ["English", "H", "H Harry", "097", "English 15l"], [], ["English"], ["English", "Computer Science"], ["English", "Computer Science", "H"], ["English", "English Science", "H"], ["English", "", "H"], ["English", "H"], ["English", "H", "Harry"], ["1,5", "English", "H", "Harry"], ["1,5", "English", "H", "English", "Harry"], ["1,5 Ron", "English", "H", "English", "Harry"], ["5,5 Ron", "English", "H", "English", "Harry"], ["5,5 Ron", "English", "H", "English", "Harry IHh"]]}, {"EndTime": 1552415325.1998503, "FinalMinimizedSolution": ["English", "Ron", "H"], "FinalCoverage": null, "FinalSolution": ["English", "Ron", "H", "H"], "StartTime": 1552415315.2638764, "FoundSolution": true, "NumProbesMade": 52, "InputHistory": [["H", "H", "H"], ["H", "H"], ["H", "VP2", "H", "H"], ["H"], ["H", "H", "H"], ["H", "H", "H 15l"], ["H", "H", "English 15l"], ["H", "H 097", "English 15l"], ["English", "H", "H 097", "English 15l"], ["English", "H", "H", "097", "English 15l"], ["English", "H", "H Harry", "097", "English 15l"], [], ["English"], ["English", "Computer Science"], ["English", "Computer Science", "H"], ["English", "English Science", "H"], ["English", "", "H"], ["English", "H"], ["English", "H", "Harry"], ["1,5", "English", "H", "Harry"], ["1,5", "English", "H", "English", "Harry"], ["1,5 Ron", "English", "H", "English", "Harry"], ["5,5 Ron", "English", "H", "English", "Harry"], ["5,5 Ron", "English", "H", "English", "Harry IHh"], ["H", "H", "H"], ["H", "B : A", "H", "H"], ["B : A", "H", "H"], ["B iGj A", "H", "H"], ["B iGj A", "H"], ["B H A", "H", "H"], ["B H A", "Mathematics", "H", "H"], ["B H A", "Mathematics", "55", "H", "H"], ["B", "H", "A", "Mathematics", "55", "H", "H"], ["B", "H", "A", "Mathematics Harry", "55", "H", "H"], ["B", "H Computer Science", "A", "Mathematics Harry", "55", "H", "H"], ["099"], ["099", "Y6I"], ["099", "Y6I", "099"], ["bpN"], ["bpN", "Mathematics"], ["bpN", "Mathematics", "H"], ["55 60", "bpN", "Mathematics", "H"], ["55 60", "bpN", "Mathematics", "H Harry"], ["55 60", "bpN", "Mathematics", "H", "Harry"], ["88K"], ["88K", "88K"], ["88K", "88K", "H"], ["Ron", "88K", "88K", "H"], ["Ron", "88K", "88K", "88K", "H"], ["Ron", "88K", "88K", "88K", "H", "H"], ["Ron", "88K", "88K", "88K", "Computer Science", "H", "H"], ["Ron", "88K", "88K", "88K", "Computer Science", "Harry", "H", "H"], ["Ron", "88K", "-27", "88K", "88K", "Computer Science", "Harry", "H", "H"], ["Ron", "88K", "-27", "88K", "3", "88K", "Computer Science", "Harry", "H", "H"], ["Ron", "88K", "-27", "88K", "88K", "Computer Science", "Harry", "(2;-3)", "H", "H"], ["Ron", "88K 1Tc", "-27", "88K", "88K", "Computer Science", "Harry", "(2;-3)", "H", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "88K", "88K", "Computer Science", "Harry", "(2;-3)", "H", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "m2K", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "m2K", "English", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "3", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "m2K", "English", "H"], ["Ron", "88K 1Tc", "Ron", "3", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "m2K", "English", "H"], ["Ron", "88K 1Tc", "Ron", "3", "88K", "uui", "88K", "Computer Science", "Harry", "Mathematics", "(2;-3)", "H", "m2K", "English", "H"], ["Mathematics"], ["Mathematics", "H"], ["Mathematics", "H", "H"], ["Mathematics", "Mathematics", "H", "H"], ["Hermione", "Mathematics", "Mathematics", "H", "H"], ["Hermione", "Mathematics", "Mathematics", "H", "H 4o4"], ["Ron"], ["Ron", "English"], ["Ron", "English", "2Q3"], ["Ron", "2Q3"], ["Ron", "2Q3", "H"], ["Ron", "H"], ["Ron", "H", "H"]]}, {"EndTime": 1552415328.4371538, "FinalMinimizedSolution": ["kXw", "Hermione", "Science"], "FinalCoverage": [24, 4, 12, 2, 83, "12-13,", "24-25,", "11->12,", "23->24"], "FinalSolution": ["kXw", "Hermione", "Science", "hello hi", "H"], "StartTime": 1552415325.200933, "FoundSolution": true, "NumProbesMade": 13, "InputHistory": [["H", "H", "H"], ["H", "H"], ["H", "VP2", "H", "H"], ["H"], ["H", "H", "H"], ["H", "H", "H 15l"], ["H", "H", "English 15l"], ["H", "H 097", "English 15l"], ["English", "H", "H 097", "English 15l"], ["English", "H", "H", "097", "English 15l"], ["English", "H", "H Harry", "097", "English 15l"], [], ["English"], ["English", "Computer Science"], ["English", "Computer Science", "H"], ["English", "English Science", "H"], ["English", "", "H"], ["English", "H"], ["English", "H", "Harry"], ["1,5", "English", "H", "Harry"], ["1,5", "English", "H", "English", "Harry"], ["1,5 Ron", "English", "H", "English", "Harry"], ["5,5 Ron", "English", "H", "English", "Harry"], ["5,5 Ron", "English", "H", "English", "Harry IHh"], ["H", "H", "H"], ["H", "B : A", "H", "H"], ["B : A", "H", "H"], ["B iGj A", "H", "H"], ["B iGj A", "H"], ["B H A", "H", "H"], ["B H A", "Mathematics", "H", "H"], ["B H A", "Mathematics", "55", "H", "H"], ["B", "H", "A", "Mathematics", "55", "H", "H"], ["B", "H", "A", "Mathematics Harry", "55", "H", "H"], ["B", "H Computer Science", "A", "Mathematics Harry", "55", "H", "H"], ["099"], ["099", "Y6I"], ["099", "Y6I", "099"], ["bpN"], ["bpN", "Mathematics"], ["bpN", "Mathematics", "H"], ["55 60", "bpN", "Mathematics", "H"], ["55 60", "bpN", "Mathematics", "H Harry"], ["55 60", "bpN", "Mathematics", "H", "Harry"], ["88K"], ["88K", "88K"], ["88K", "88K", "H"], ["Ron", "88K", "88K", "H"], ["Ron", "88K", "88K", "88K", "H"], ["Ron", "88K", "88K", "88K", "H", "H"], ["Ron", "88K", "88K", "88K", "Computer Science", "H", "H"], ["Ron", "88K", "88K", "88K", "Computer Science", "Harry", "H", "H"], ["Ron", "88K", "-27", "88K", "88K", "Computer Science", "Harry", "H", "H"], ["Ron", "88K", "-27", "88K", "3", "88K", "Computer Science", "Harry", "H", "H"], ["Ron", "88K", "-27", "88K", "88K", "Computer Science", "Harry", "(2;-3)", "H", "H"], ["Ron", "88K 1Tc", "-27", "88K", "88K", "Computer Science", "Harry", "(2;-3)", "H", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "88K", "88K", "Computer Science", "Harry", "(2;-3)", "H", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "m2K", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "m2K", "English", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "3", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "m2K", "English", "H"], ["Ron", "88K 1Tc", "Ron", "3", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "m2K", "English", "H"], ["Ron", "88K 1Tc", "Ron", "3", "88K", "uui", "88K", "Computer Science", "Harry", "Mathematics", "(2;-3)", "H", "m2K", "English", "H"], ["Mathematics"], ["Mathematics", "H"], ["Mathematics", "H", "H"], ["Mathematics", "Mathematics", "H", "H"], ["Hermione", "Mathematics", "Mathematics", "H", "H"], ["Hermione", "Mathematics", "Mathematics", "H", "H 4o4"], ["Ron"], ["Ron", "English"], ["Ron", "English", "2Q3"], ["Ron", "2Q3"], ["Ron", "2Q3", "H"], ["Ron", "H"], ["Ron", "H", "H"], ["H", "H", "H"], ["H", "H", "H", "H"], ["H", "H", "H", "Hermione", "H"], ["H", "H", "4", "H", "Hermione", "H"], ["Hermione", "H", "H", "4", "H", "Hermione", "H"], ["kXw"], ["kXw", "kXw"], ["kXw", "kXw", "Computer Science"], ["kXw", "kXw", "Computer", "Science"], ["kXw", "kXw", "Science"], ["kXw", "Science"], ["kXw", "Science", "H"], ["kXw", "Science", "hello hi", "H"]]}, {"EndTime": 1552415331.758132, "FinalMinimizedSolution": ["Ets", "Hermione", "H"], "FinalCoverage": [24, 4, 12, 2, 83, "12-13,", "24-25,", "11->12,", "23->24"], "FinalSolution": ["Ets", "Hermione", "H"], "StartTime": 1552415328.4384065, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["H", "H", "H"], ["H", "H"], ["H", "VP2", "H", "H"], ["H"], ["H", "H", "H"], ["H", "H", "H 15l"], ["H", "H", "English 15l"], ["H", "H 097", "English 15l"], ["English", "H", "H 097", "English 15l"], ["English", "H", "H", "097", "English 15l"], ["English", "H", "H Harry", "097", "English 15l"], [], ["English"], ["English", "Computer Science"], ["English", "Computer Science", "H"], ["English", "English Science", "H"], ["English", "", "H"], ["English", "H"], ["English", "H", "Harry"], ["1,5", "English", "H", "Harry"], ["1,5", "English", "H", "English", "Harry"], ["1,5 Ron", "English", "H", "English", "Harry"], ["5,5 Ron", "English", "H", "English", "Harry"], ["5,5 Ron", "English", "H", "English", "Harry IHh"], ["H", "H", "H"], ["H", "B : A", "H", "H"], ["B : A", "H", "H"], ["B iGj A", "H", "H"], ["B iGj A", "H"], ["B H A", "H", "H"], ["B H A", "Mathematics", "H", "H"], ["B H A", "Mathematics", "55", "H", "H"], ["B", "H", "A", "Mathematics", "55", "H", "H"], ["B", "H", "A", "Mathematics Harry", "55", "H", "H"], ["B", "H Computer Science", "A", "Mathematics Harry", "55", "H", "H"], ["099"], ["099", "Y6I"], ["099", "Y6I", "099"], ["bpN"], ["bpN", "Mathematics"], ["bpN", "Mathematics", "H"], ["55 60", "bpN", "Mathematics", "H"], ["55 60", "bpN", "Mathematics", "H Harry"], ["55 60", "bpN", "Mathematics", "H", "Harry"], ["88K"], ["88K", "88K"], ["88K", "88K", "H"], ["Ron", "88K", "88K", "H"], ["Ron", "88K", "88K", "88K", "H"], ["Ron", "88K", "88K", "88K", "H", "H"], ["Ron", "88K", "88K", "88K", "Computer Science", "H", "H"], ["Ron", "88K", "88K", "88K", "Computer Science", "Harry", "H", "H"], ["Ron", "88K", "-27", "88K", "88K", "Computer Science", "Harry", "H", "H"], ["Ron", "88K", "-27", "88K", "3", "88K", "Computer Science", "Harry", "H", "H"], ["Ron", "88K", "-27", "88K", "88K", "Computer Science", "Harry", "(2;-3)", "H", "H"], ["Ron", "88K 1Tc", "-27", "88K", "88K", "Computer Science", "Harry", "(2;-3)", "H", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "88K", "88K", "Computer Science", "Harry", "(2;-3)", "H", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "m2K", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "m2K", "English", "H"], ["Ron", "88K 1Tc", "Ron", "-27", "3", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "m2K", "English", "H"], ["Ron", "88K 1Tc", "Ron", "3", "88K", "uui", "88K", "Computer Science", "Harry", "(2;-3)", "H", "m2K", "English", "H"], ["Ron", "88K 1Tc", "Ron", "3", "88K", "uui", "88K", "Computer Science", "Harry", "Mathematics", "(2;-3)", "H", "m2K", "English", "H"], ["Mathematics"], ["Mathematics", "H"], ["Mathematics", "H", "H"], ["Mathematics", "Mathematics", "H", "H"], ["Hermione", "Mathematics", "Mathematics", "H", "H"], ["Hermione", "Mathematics", "Mathematics", "H", "H 4o4"], ["Ron"], ["Ron", "English"], ["Ron", "English", "2Q3"], ["Ron", "2Q3"], ["Ron", "2Q3", "H"], ["Ron", "H"], ["Ron", "H", "H"], ["H", "H", "H"], ["H", "H", "H", "H"], ["H", "H", "H", "Hermione", "H"], ["H", "H", "4", "H", "Hermione", "H"], ["Hermione", "H", "H", "4", "H", "Hermione", "H"], ["kXw"], ["kXw", "kXw"], ["kXw", "kXw", "Computer Science"], ["kXw", "kXw", "Computer", "Science"], ["kXw", "kXw", "Science"], ["kXw", "Science"], ["kXw", "Science", "H"], ["kXw", "Science", "hello hi", "H"], ["H", "H", "H"], ["English", "H", "H", "H"], ["English", "H", "H", "English", "H"], ["English", "H", "H", "2", "English", "H"], ["English", "H", "H", "H", "2", "English", "H"], ["English", "H Ron", "H", "H", "2", "English", "H"], ["English", "H Ron", "H", "H", "2", "4", "English", "H"], ["k9h3n7", "English", "H Ron", "H", "H", "2", "4", "English", "H"], ["k9h3n7", "H Ron", "H", "H", "2", "4", "English", "H"], ["wa1"], ["wa1", "wa1"], ["wa1", "wa1", "wa1"], ["Ets"], ["Ets", "Hermione"]]}]], [{"CorrectInputs": [[["Jo\u00e3o", "10", "57"], 1521672439]], "UniqueId": "e3653b31-6cf9-412c-84fa-85cc6f79d45a_0", "CoverageInfo": [6, 4, 0, 0, 33, "4-7"], "TimeStamp": 1521672208, "BadInput": ["sad", "as"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 3, in <module>\n    b=int(input(\"Digite quantos cigarros voc\u00ea fuma por dia:\"))\nValueError: invalid literal for int() with base 10: 'as'\n", "ip": "2804:14d:8082:21b3:d84e:85c2:a9fd:e9c5"}, [{"EndTime": 1552365399.2105393, "FinalMinimizedSolution": ["sad", "1", "6"], "FinalCoverage": null, "FinalSolution": ["sad", "1", "6"], "StartTime": 1552365398.5814884, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["sad", "as"], ["sad", "1"], ["sad", "1", "LK9"]]}, {"EndTime": 1552365399.6481733, "FinalMinimizedSolution": ["sad", "3", "3"], "FinalCoverage": null, "FinalSolution": ["sad", "3", "3"], "StartTime": 1552365399.2107065, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["sad", "as"], ["sad", "1"], ["sad", "1", "LK9"], ["sad", "as"], ["sad", "3"]]}, {"EndTime": 1552365400.0864656, "FinalMinimizedSolution": ["sad", "9", "9"], "FinalCoverage": null, "FinalSolution": ["sad", "9", "9"], "StartTime": 1552365399.6483636, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["sad", "as"], ["sad", "1"], ["sad", "1", "LK9"], ["sad", "as"], ["sad", "3"], ["sad", "as"], ["sad", "9"]]}, {"EndTime": 1552365401.1377037, "FinalMinimizedSolution": ["sad", "2", "2"], "FinalCoverage": [6, 0, 0, 0, 100], "FinalSolution": ["sad", "2", "2"], "StartTime": 1552365400.0866697, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["sad", "as"], ["sad", "1"], ["sad", "1", "LK9"], ["sad", "as"], ["sad", "3"], ["sad", "as"], ["sad", "9"], ["sad", "as"], ["sad", "2"]]}, {"EndTime": 1552365402.1893938, "FinalMinimizedSolution": ["sad", "4", "4"], "FinalCoverage": [6, 0, 0, 0, 100], "FinalSolution": ["sad", "4", "4"], "StartTime": 1552365401.1379738, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["sad", "as"], ["sad", "1"], ["sad", "1", "LK9"], ["sad", "as"], ["sad", "3"], ["sad", "as"], ["sad", "9"], ["sad", "as"], ["sad", "2"], ["sad", "as"], ["sad", "4"]]}]], [{"CorrectInputs": [[["2", "10 C", "5 R"], 1540271675]], "UniqueId": "addfeb3a-c6c8-4c6d-fc27-4b9c58d38360_0", "CoverageInfo": [19, 18, 8, 0, 4, "2-20"], "TimeStamp": 1540271490, "BadInput": ["rato"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    N=int(input())\nValueError: invalid literal for int() with base 10: 'rato'\n", "ip": "187.34.73.3"}, [{"EndTime": 1552320840.7686517, "FinalMinimizedSolution": ["5", "5 5", "5 5", "8 -1", "5 5", "4 6"], "FinalCoverage": [19, 3, 8, 3, 78, "8,", "10,", "12,", "7->8,", "9->10,", "11->12"], "FinalSolution": ["5", "5 5", "5 5", "8 -1", "5 5", "4 6"], "StartTime": 1552320837.4295254, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["rato"], ["5"], ["5", "5"], ["5", "5 5"], ["5", "5 5", "5"], ["5", "5 5", "5 5"], ["5", "5 5", "5 5", "e-f"], ["5", "5 5", "5 5", "e-f e-f"], ["5", "5 5", "5 5", "e-f -1"], ["5", "5 5", "5 5", "8 -1"], ["5", "5 5", "5 5", "8 -1", "5 5"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato rato"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato 6"]]}, {"EndTime": 1552320845.06018, "FinalMinimizedSolution": ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "9 9", "7 7"], "FinalCoverage": [19, 3, 8, 3, 78, "8,", "10,", "12,", "7->8,", "9->10,", "11->12"], "FinalSolution": ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "9 9", "7 7"], "StartTime": 1552320840.7689817, "FoundSolution": true, "NumProbesMade": 19, "InputHistory": [["rato"], ["5"], ["5", "5"], ["5", "5 5"], ["5", "5 5", "5"], ["5", "5 5", "5 5"], ["5", "5 5", "5 5", "e-f"], ["5", "5 5", "5 5", "e-f e-f"], ["5", "5 5", "5 5", "e-f -1"], ["5", "5 5", "5 5", "8 -1"], ["5", "5 5", "5 5", "8 -1", "5 5"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato rato"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato 6"], ["rato"], ["7"], ["7", "7"], ["7", "7 7"], ["7", "7 7", "rato"], ["7", "7 7", "rato rato"], ["7", "7 7", "rato 2"], ["7", "7 7", "10 2"], ["7", "7 7", "10 2", "7"], ["7", "7 7", "10 2", "7 7"], ["7", "7 7", "10 2", "7 7", "7"], ["7", "7 7", "10 2", "7 7", "7 7"], ["7", "7 7", "10 2", "7 7", "7 7", "7"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "%"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "% %"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "% 9"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "9 9"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "9 9", "7"]]}, {"EndTime": 1552320847.4520743, "FinalMinimizedSolution": ["3", "3 3", "3 3", "7 6"], "FinalCoverage": [19, 3, 8, 3, 78, "8,", "10,", "12,", "7->8,", "9->10,", "11->12"], "FinalSolution": ["3", "3 3", "3 3", "7 6"], "StartTime": 1552320845.0607266, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["rato"], ["5"], ["5", "5"], ["5", "5 5"], ["5", "5 5", "5"], ["5", "5 5", "5 5"], ["5", "5 5", "5 5", "e-f"], ["5", "5 5", "5 5", "e-f e-f"], ["5", "5 5", "5 5", "e-f -1"], ["5", "5 5", "5 5", "8 -1"], ["5", "5 5", "5 5", "8 -1", "5 5"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato rato"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato 6"], ["rato"], ["7"], ["7", "7"], ["7", "7 7"], ["7", "7 7", "rato"], ["7", "7 7", "rato rato"], ["7", "7 7", "rato 2"], ["7", "7 7", "10 2"], ["7", "7 7", "10 2", "7"], ["7", "7 7", "10 2", "7 7"], ["7", "7 7", "10 2", "7 7", "7"], ["7", "7 7", "10 2", "7 7", "7 7"], ["7", "7 7", "10 2", "7 7", "7 7", "7"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "%"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "% %"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "% 9"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "9 9"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "9 9", "7"], ["rato"], ["3"], ["3", "3"], ["3", "3 3"], ["3", "3 3", "3"], ["3", "3 3", "3 3"], ["3", "3 3", "3 3", "rato"], ["3", "3 3", "3 3", "rato rato"], ["3", "3 3", "3 3", "rato 6"]]}, {"EndTime": 1552320850.2321508, "FinalMinimizedSolution": ["4", "6 1", "6 1", "2 8", "6 1"], "FinalCoverage": [19, 3, 8, 3, 78, "8,", "10,", "12,", "7->8,", "9->10,", "11->12"], "FinalSolution": ["4", "6 1", "6 1", "2 8", "6 1"], "StartTime": 1552320847.4526913, "FoundSolution": true, "NumProbesMade": 11, "InputHistory": [["rato"], ["5"], ["5", "5"], ["5", "5 5"], ["5", "5 5", "5"], ["5", "5 5", "5 5"], ["5", "5 5", "5 5", "e-f"], ["5", "5 5", "5 5", "e-f e-f"], ["5", "5 5", "5 5", "e-f -1"], ["5", "5 5", "5 5", "8 -1"], ["5", "5 5", "5 5", "8 -1", "5 5"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato rato"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato 6"], ["rato"], ["7"], ["7", "7"], ["7", "7 7"], ["7", "7 7", "rato"], ["7", "7 7", "rato rato"], ["7", "7 7", "rato 2"], ["7", "7 7", "10 2"], ["7", "7 7", "10 2", "7"], ["7", "7 7", "10 2", "7 7"], ["7", "7 7", "10 2", "7 7", "7"], ["7", "7 7", "10 2", "7 7", "7 7"], ["7", "7 7", "10 2", "7 7", "7 7", "7"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "%"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "% %"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "% 9"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "9 9"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "9 9", "7"], ["rato"], ["3"], ["3", "3"], ["3", "3 3"], ["3", "3 3", "3"], ["3", "3 3", "3 3"], ["3", "3 3", "3 3", "rato"], ["3", "3 3", "3 3", "rato rato"], ["3", "3 3", "3 3", "rato 6"], ["rato"], ["4"], ["4", "rato"], ["4", "rato rato"], ["4", "rato 1"], ["4", "6 1"], ["4", "6 1", "6 1"], ["4", "6 1", "6 1", "rato"], ["4", "6 1", "6 1", "rato rato"], ["4", "6 1", "6 1", "rato 8"], ["4", "6 1", "6 1", "2 8"]]}, {"EndTime": 1552320855.0971725, "FinalMinimizedSolution": ["6", "3 5", "8 8", "1 5", "1 7", "1 5", "7 2"], "FinalCoverage": [19, 3, 8, 3, 78, "8,", "10,", "12,", "7->8,", "9->10,", "11->12"], "FinalSolution": ["6", "3 5", "8 8", "1 5", "1 7", "1 5", "7 2"], "StartTime": 1552320850.23286, "FoundSolution": true, "NumProbesMade": 22, "InputHistory": [["rato"], ["5"], ["5", "5"], ["5", "5 5"], ["5", "5 5", "5"], ["5", "5 5", "5 5"], ["5", "5 5", "5 5", "e-f"], ["5", "5 5", "5 5", "e-f e-f"], ["5", "5 5", "5 5", "e-f -1"], ["5", "5 5", "5 5", "8 -1"], ["5", "5 5", "5 5", "8 -1", "5 5"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato rato"], ["5", "5 5", "5 5", "8 -1", "5 5", "rato 6"], ["rato"], ["7"], ["7", "7"], ["7", "7 7"], ["7", "7 7", "rato"], ["7", "7 7", "rato rato"], ["7", "7 7", "rato 2"], ["7", "7 7", "10 2"], ["7", "7 7", "10 2", "7"], ["7", "7 7", "10 2", "7 7"], ["7", "7 7", "10 2", "7 7", "7"], ["7", "7 7", "10 2", "7 7", "7 7"], ["7", "7 7", "10 2", "7 7", "7 7", "7"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "%"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "% %"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "% 9"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "9 9"], ["7", "7 7", "10 2", "7 7", "7 7", "7 7", "9 9", "7"], ["rato"], ["3"], ["3", "3"], ["3", "3 3"], ["3", "3 3", "3"], ["3", "3 3", "3 3"], ["3", "3 3", "3 3", "rato"], ["3", "3 3", "3 3", "rato rato"], ["3", "3 3", "3 3", "rato 6"], ["rato"], ["4"], ["4", "rato"], ["4", "rato rato"], ["4", "rato 1"], ["4", "6 1"], ["4", "6 1", "6 1"], ["4", "6 1", "6 1", "rato"], ["4", "6 1", "6 1", "rato rato"], ["4", "6 1", "6 1", "rato 8"], ["4", "6 1", "6 1", "2 8"], ["rato"], ["6"], ["6", "rato"], ["6", "rato rato"], ["6", "rato 5"], ["6", "3 5"], ["6", "3 5", "kk5"], ["6", "3 5", "kk5 kk5"], ["6", "3 5", "kk5 8"], ["6", "3 5", "8 8"], ["6", "3 5", "8 8", "0T1"], ["6", "3 5", "8 8", "0T1 0T1"], ["6", "3 5", "8 8", "0T1 5"], ["6", "3 5", "8 8", "1 5"], ["6", "3 5", "8 8", "1 5", "rato"], ["6", "3 5", "8 8", "1 5", "rato rato"], ["6", "3 5", "8 8", "1 5", "rato 7"], ["6", "3 5", "8 8", "1 5", "1 7"], ["6", "3 5", "8 8", "1 5", "1 7", "1 5"], ["6", "3 5", "8 8", "1 5", "1 7", "1 5", "rato"], ["6", "3 5", "8 8", "1 5", "1 7", "1 5", "rato rato"], ["6", "3 5", "8 8", "1 5", "1 7", "1 5", "rato 2"]]}]], [{"CorrectInputs": [[["8", "-1 2 4 -3 5 2 -5 2"], 1538992598]], "UniqueId": "f766ec42-b389-4740-f7a0-4cba6238d84c_0", "CoverageInfo": [10, 6, 4, 1, 36, "5-10,", "3->5"], "TimeStamp": 1538992556, "BadInput": ["10", "-1 2 4 -3 5 2 -5 2"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 4, in <module>\n    a[i]=int(a[i])\nIndexError: list index out of range\n", "ip": "2001:ee0:4b7a:7ea0:6915:cc51:dd5d:c370"}, [{"EndTime": 1552292041.9882402, "FinalMinimizedSolution": ["0", "10"], "FinalCoverage": [10, 3, 4, 2, 64, "4,", "8-9,", "3->4,", "7->8"], "FinalSolution": ["0", "10"], "StartTime": 1552292040.7456741, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["10", "-1 2 4 -3 5 2 -5 2"], ["-1 2 4 -3 5 2 -5 2"], ["0"]]}, {"EndTime": 1552292043.42539, "FinalMinimizedSolution": ["-1", "10"], "FinalCoverage": [10, 3, 4, 2, 64, "4,", "8-9,", "3->4,", "7->8"], "FinalSolution": ["-1", "10"], "StartTime": 1552292041.9884226, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["10", "-1 2 4 -3 5 2 -5 2"], ["-1 2 4 -3 5 2 -5 2"], ["0"], ["10", "-1 2 4 -3 5 2 -5 2"], ["10", "-1", "2", "4", "-3", "5", "2", "-5", "2"], [], ["-1"]]}, {"EndTime": 1552292044.2933736, "FinalMinimizedSolution": ["10", "-1 -1 2 4 -3 5 2 -5 2 4 -3 5 2 -5 2"], "FinalCoverage": [10, 0, 4, 0, 100], "FinalSolution": ["10", "-1 -1 2 4 -3 5 2 -5 2 4 -3 5 2 -5 2"], "StartTime": 1552292043.4256096, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["10", "-1 2 4 -3 5 2 -5 2"], ["-1 2 4 -3 5 2 -5 2"], ["0"], ["10", "-1 2 4 -3 5 2 -5 2"], ["10", "-1", "2", "4", "-3", "5", "2", "-5", "2"], [], ["-1"], ["10", "-1 2 4 -3 5 2 -5 2"]]}, {"EndTime": 1552292045.5463774, "FinalMinimizedSolution": ["2", "-1 2 4 -3 5 2 -5 2"], "FinalCoverage": [10, 0, 4, 0, 100], "FinalSolution": ["2", "-1 2 4 -3 5 2 -5 2"], "StartTime": 1552292044.2936318, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["10", "-1 2 4 -3 5 2 -5 2"], ["-1 2 4 -3 5 2 -5 2"], ["0"], ["10", "-1 2 4 -3 5 2 -5 2"], ["10", "-1", "2", "4", "-3", "5", "2", "-5", "2"], [], ["-1"], ["10", "-1 2 4 -3 5 2 -5 2"], ["10", "-1 2 4 -3 5 2 -5 2"], ["2XR"], ["2"]]}, {"EndTime": 1552292047.3646894, "FinalMinimizedSolution": ["4", "-1 2 4 -3 5 2 -5 2"], "FinalCoverage": [10, 0, 4, 0, 100], "FinalSolution": ["4", "-1 2 4 -3 5 2 -5 2"], "StartTime": 1552292045.5466554, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["10", "-1 2 4 -3 5 2 -5 2"], ["-1 2 4 -3 5 2 -5 2"], ["0"], ["10", "-1 2 4 -3 5 2 -5 2"], ["10", "-1", "2", "4", "-3", "5", "2", "-5", "2"], [], ["-1"], ["10", "-1 2 4 -3 5 2 -5 2"], ["10", "-1 2 4 -3 5 2 -5 2"], ["2XR"], ["2"], ["10", "-1 2 4 -3 5 2 -5 2"], ["8Fr"], ["7"], ["7", "7"], ["GaE"], ["4"]]}]], [{"CorrectInputs": [[["4", "4", "1 2 3 4", "5 6 7 8", "9 10 11 12", "13 14 15 16"], 1520124415]], "UniqueId": "d7ce47fb-2a72-4645-8432-17db442c650d_0", "CoverageInfo": [27, 18, 18, 2, 33, "12-34,", "7->12,", "9->7"], "TimeStamp": 1520124275, "BadInput": ["4", "4", "1"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 10, in <module>\n    a[i][j]=int(k[j])\nIndexError: list index out of range\n", "ip": "223.181.228.163"}, [{"InputHistory": [["4", "4", "1"], ["4", "4", "abcd", "1"], ["4", "4", "-1", "1"], [], ["-1"], ["-1", "-1"], ["-1", "YRg", "-1"], ["-1", "0", "-1"], ["3sY"], ["10"], ["10", "R85"], ["10", "1"], ["10", "1", "1"], ["10", "1", "1", "4"], ["10", "1", "1", "4", "4"], ["10", "1", "1", "4", "4", "1"], ["10", "1", "1", "4", "4", "1", "1"], ["10", "1", "1", "4", "4", "1", "1", "1"], ["10", "1", "1", "4", "4", "1", "1", "1", "4"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["10 zgJ", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "TH0", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "TH0", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "5E3", "1", "4"], ["mmv"], ["5"], ["5", "Tne"], ["5", "1"], ["5", "1", "4"], ["5", "1", "4", "4"], ["5", "1", "4", "4", "4"], ["5", "1", "4", "4", "4", "4"], ["5", "1", "4", "4", "4", "4", "1"], ["q5K", "5", "1", "4", "4", "4", "4", "1"], ["4", "5", "1", "4", "4", "4", "4", "1"], ["4", "5", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "Spock lagarto", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "3 lagarto", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "3 9", "1", "4", "4", "4", "4", "1 dh0"], ["b4s"], ["6", "5"], ["6", "5", "4"], ["6", "vedu", "5", "4"], ["6", "1", "5", "4"], ["6", "1", "5", "4", "6"], ["6", "1", "5", "4", "6", "4"], ["6", "1", "5", "4", "6", "4", "4"], ["6", "1", "5", "4", "6", "4", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4", "1"], ["6", "1", "5", "4", "6 q9V", "1", "4", "4", "1"], ["6", "K4E", "1", "5", "4", "6 q9V", "1", "4", "4", "1"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552421341.3359125, "StartTime": 1552421331.9093554}, {"EndTime": 1552421350.5245988, "FinalMinimizedSolution": ["1", "1", "1"], "FinalCoverage": [27, 6, 18, 4, 78, "18,", "21,", "25-26,", "30-31,", "17->18,", "20->21,", "24->25,", "29->30"], "FinalSolution": ["1", "1", "1"], "StartTime": 1552421341.3368566, "FoundSolution": true, "NumProbesMade": 55, "InputHistory": [["4", "4", "1"], ["4", "4", "abcd", "1"], ["4", "4", "-1", "1"], [], ["-1"], ["-1", "-1"], ["-1", "YRg", "-1"], ["-1", "0", "-1"], ["3sY"], ["10"], ["10", "R85"], ["10", "1"], ["10", "1", "1"], ["10", "1", "1", "4"], ["10", "1", "1", "4", "4"], ["10", "1", "1", "4", "4", "1"], ["10", "1", "1", "4", "4", "1", "1"], ["10", "1", "1", "4", "4", "1", "1", "1"], ["10", "1", "1", "4", "4", "1", "1", "1", "4"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["10 zgJ", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "TH0", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "TH0", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "5E3", "1", "4"], ["mmv"], ["5"], ["5", "Tne"], ["5", "1"], ["5", "1", "4"], ["5", "1", "4", "4"], ["5", "1", "4", "4", "4"], ["5", "1", "4", "4", "4", "4"], ["5", "1", "4", "4", "4", "4", "1"], ["q5K", "5", "1", "4", "4", "4", "4", "1"], ["4", "5", "1", "4", "4", "4", "4", "1"], ["4", "5", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "Spock lagarto", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "3 lagarto", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "3 9", "1", "4", "4", "4", "4", "1 dh0"], ["b4s"], ["6", "5"], ["6", "5", "4"], ["6", "vedu", "5", "4"], ["6", "1", "5", "4"], ["6", "1", "5", "4", "6"], ["6", "1", "5", "4", "6", "4"], ["6", "1", "5", "4", "6", "4", "4"], ["6", "1", "5", "4", "6", "4", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4", "1"], ["6", "1", "5", "4", "6 q9V", "1", "4", "4", "1"], ["6", "K4E", "1", "5", "4", "6 q9V", "1", "4", "4", "1"], ["4", "4", "1"], ["4", "1 2", "4", "1"], ["4", "4", "4", "1"], ["4 00s", "4", "4", "1"], ["8", "4", "4", "1"], ["8", "4", "4"], ["SnZ"], ["6"], ["6", "4"], ["6", "4", "6"], ["6", "4 O8a", "6"], ["6", "8", "6"], ["6", "5 4", "8", "6"], ["6", "1", "8", "6"], ["6", "1", "8", "6", "37J"], ["6", "1", "8", "6", "4"], ["6", "1", "8", "6", "4", "8"], ["6", "1", "8", "6", "4", "8", "8"], ["6", "1", "8", "6", "4", "8", "8", "8"], ["6", "1", "8", "ef8", "6", "4", "8", "8", "8"], ["6", "1", "8", "5", "6", "4", "8", "8", "8"], ["6", "1", "8", "5", "6", "4", "8", "g4p", "8", "8"], ["6", "1", "8", "5", "6", "4", "8", "-1", "8", "8"], ["6", "1", "8", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "W13", "8", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "3", "8", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "q5f", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "4", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "1", "4", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "20", "1", "1", "4", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "20", "1", "1", "4", "C28", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "20", "1", "1", "4", "C28", "urk", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["Mw2"], ["4"], ["4", "4"], ["4", "4", "4"], ["5L5"], ["5 a3A"], ["3"], ["3", "4"], ["3", "4", "4"], ["4-9"], ["7"], ["7", "4"], ["7", "4", "4"], ["4", "7", "4", "4"], ["4", "7", "07A", "4", "4"], ["4", "7", "5", "4", "4"], ["4", "7", "5", "4", "4", "4"], ["4", "7", "5", "4", "4 LpN", "4"], ["bYj"], ["1"], ["1", "EoP"], ["1", "1"]]}, {"InputHistory": [["4", "4", "1"], ["4", "4", "abcd", "1"], ["4", "4", "-1", "1"], [], ["-1"], ["-1", "-1"], ["-1", "YRg", "-1"], ["-1", "0", "-1"], ["3sY"], ["10"], ["10", "R85"], ["10", "1"], ["10", "1", "1"], ["10", "1", "1", "4"], ["10", "1", "1", "4", "4"], ["10", "1", "1", "4", "4", "1"], ["10", "1", "1", "4", "4", "1", "1"], ["10", "1", "1", "4", "4", "1", "1", "1"], ["10", "1", "1", "4", "4", "1", "1", "1", "4"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["10 zgJ", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "TH0", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "TH0", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "5E3", "1", "4"], ["mmv"], ["5"], ["5", "Tne"], ["5", "1"], ["5", "1", "4"], ["5", "1", "4", "4"], ["5", "1", "4", "4", "4"], ["5", "1", "4", "4", "4", "4"], ["5", "1", "4", "4", "4", "4", "1"], ["q5K", "5", "1", "4", "4", "4", "4", "1"], ["4", "5", "1", "4", "4", "4", "4", "1"], ["4", "5", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "Spock lagarto", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "3 lagarto", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "3 9", "1", "4", "4", "4", "4", "1 dh0"], ["b4s"], ["6", "5"], ["6", "5", "4"], ["6", "vedu", "5", "4"], ["6", "1", "5", "4"], ["6", "1", "5", "4", "6"], ["6", "1", "5", "4", "6", "4"], ["6", "1", "5", "4", "6", "4", "4"], ["6", "1", "5", "4", "6", "4", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4", "1"], ["6", "1", "5", "4", "6 q9V", "1", "4", "4", "1"], ["6", "K4E", "1", "5", "4", "6 q9V", "1", "4", "4", "1"], ["4", "4", "1"], ["4", "1 2", "4", "1"], ["4", "4", "4", "1"], ["4 00s", "4", "4", "1"], ["8", "4", "4", "1"], ["8", "4", "4"], ["SnZ"], ["6"], ["6", "4"], ["6", "4", "6"], ["6", "4 O8a", "6"], ["6", "8", "6"], ["6", "5 4", "8", "6"], ["6", "1", "8", "6"], ["6", "1", "8", "6", "37J"], ["6", "1", "8", "6", "4"], ["6", "1", "8", "6", "4", "8"], ["6", "1", "8", "6", "4", "8", "8"], ["6", "1", "8", "6", "4", "8", "8", "8"], ["6", "1", "8", "ef8", "6", "4", "8", "8", "8"], ["6", "1", "8", "5", "6", "4", "8", "8", "8"], ["6", "1", "8", "5", "6", "4", "8", "g4p", "8", "8"], ["6", "1", "8", "5", "6", "4", "8", "-1", "8", "8"], ["6", "1", "8", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "W13", "8", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "3", "8", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "q5f", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "4", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "1", "4", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "20", "1", "1", "4", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "20", "1", "1", "4", "C28", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "20", "1", "1", "4", "C28", "urk", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["Mw2"], ["4"], ["4", "4"], ["4", "4", "4"], ["5L5"], ["5 a3A"], ["3"], ["3", "4"], ["3", "4", "4"], ["4-9"], ["7"], ["7", "4"], ["7", "4", "4"], ["4", "7", "4", "4"], ["4", "7", "07A", "4", "4"], ["4", "7", "5", "4", "4"], ["4", "7", "5", "4", "4", "4"], ["4", "7", "5", "4", "4 LpN", "4"], ["bYj"], ["1"], ["1", "EoP"], ["1", "1"], ["4", "4", "1"], ["6vr"], ["mWV"], ["3 WL2"], ["4", "10"], ["4", "10", "10"], ["4 8eH", "10", "10"], ["-1", "10", "10"], ["-1", "10", "-1", "10"], ["QUL"], ["o23", "6"], ["3", "6"], ["3", "6", "zv6"], ["3", "6", "9"], ["3", "gj", "6", "9"], ["3", "3", "6", "9"], ["2,3", "3", "3", "6", "9"], ["9", "3", "3", "6", "9"], ["6Bc", "9", "3", "3", "6", "9"], ["-1", "9", "3", "3", "6", "9"], ["Ws2"], ["0"], ["0", "4"], ["m38"], ["7", "7"], ["7", "7", "4"], ["-E2"], ["kjV", "10"], ["5", "10"], ["5", "10", "4"], ["5", "end", "10", "4"], ["5", "-1", "10", "4"], ["5", "-1", "10", "4", "4"], ["5", "-1", "10", "4", "4", "5"], ["5", "-1", "10", "4", "4", "5", "4"], ["5", "-1", "10", "4", "4", "10", "5"], ["U0j", "5", "-1", "10", "4", "4", "10", "5"], ["7", "5", "-1", "10", "4", "4", "10", "5"], ["7", "5 qw0", "-1", "10", "4", "4", "10", "5"], ["7", "7", "-1", "10", "4", "4", "10", "5"], ["7", "7", "-1", "10", "7bu", "4", "4", "10", "5"], ["7", "7", "-1", "10", "Hqz", "7bu", "4", "4", "10", "5"], ["7", "7", "5", "-1", "10", "Hqz", "7bu", "4", "4", "10", "5"], ["7", "5", "-1", "10", "Hqz", "7bu", "4", "4", "10", "5"], ["7", "5", "-1", "10", "Hqz", "7bu", "4", "4", "10", "3", "5"], ["dGo"], ["n+1", "7"], ["-1", "7"], ["7", "-1", "7"], ["7", "-1", "7", "4"], ["7", "-1", "7", "4", "-1"], ["7", "-1", "7", "4", "-1", "1"], ["7", "-1", "7", "4", "-1", "1", "-1"], ["7", "-1", "7", "4", "-1", "1", "-1", "1"], ["7", "-1", "7", "4", "-1", "1", "-1", "1", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "4", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "5 8 2 7 8 8 2 4", "4", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "5 8 2 7 8 8 2 4", "4", "4", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "5 8 2 7 8 8 2 4", "18", "4", "4", "4"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552421359.724441, "StartTime": 1552421350.5263069}, {"InputHistory": [["4", "4", "1"], ["4", "4", "abcd", "1"], ["4", "4", "-1", "1"], [], ["-1"], ["-1", "-1"], ["-1", "YRg", "-1"], ["-1", "0", "-1"], ["3sY"], ["10"], ["10", "R85"], ["10", "1"], ["10", "1", "1"], ["10", "1", "1", "4"], ["10", "1", "1", "4", "4"], ["10", "1", "1", "4", "4", "1"], ["10", "1", "1", "4", "4", "1", "1"], ["10", "1", "1", "4", "4", "1", "1", "1"], ["10", "1", "1", "4", "4", "1", "1", "1", "4"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["10 zgJ", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "TH0", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "TH0", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "5E3", "1", "4"], ["mmv"], ["5"], ["5", "Tne"], ["5", "1"], ["5", "1", "4"], ["5", "1", "4", "4"], ["5", "1", "4", "4", "4"], ["5", "1", "4", "4", "4", "4"], ["5", "1", "4", "4", "4", "4", "1"], ["q5K", "5", "1", "4", "4", "4", "4", "1"], ["4", "5", "1", "4", "4", "4", "4", "1"], ["4", "5", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "Spock lagarto", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "3 lagarto", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "3 9", "1", "4", "4", "4", "4", "1 dh0"], ["b4s"], ["6", "5"], ["6", "5", "4"], ["6", "vedu", "5", "4"], ["6", "1", "5", "4"], ["6", "1", "5", "4", "6"], ["6", "1", "5", "4", "6", "4"], ["6", "1", "5", "4", "6", "4", "4"], ["6", "1", "5", "4", "6", "4", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4", "1"], ["6", "1", "5", "4", "6 q9V", "1", "4", "4", "1"], ["6", "K4E", "1", "5", "4", "6 q9V", "1", "4", "4", "1"], ["4", "4", "1"], ["4", "1 2", "4", "1"], ["4", "4", "4", "1"], ["4 00s", "4", "4", "1"], ["8", "4", "4", "1"], ["8", "4", "4"], ["SnZ"], ["6"], ["6", "4"], ["6", "4", "6"], ["6", "4 O8a", "6"], ["6", "8", "6"], ["6", "5 4", "8", "6"], ["6", "1", "8", "6"], ["6", "1", "8", "6", "37J"], ["6", "1", "8", "6", "4"], ["6", "1", "8", "6", "4", "8"], ["6", "1", "8", "6", "4", "8", "8"], ["6", "1", "8", "6", "4", "8", "8", "8"], ["6", "1", "8", "ef8", "6", "4", "8", "8", "8"], ["6", "1", "8", "5", "6", "4", "8", "8", "8"], ["6", "1", "8", "5", "6", "4", "8", "g4p", "8", "8"], ["6", "1", "8", "5", "6", "4", "8", "-1", "8", "8"], ["6", "1", "8", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "W13", "8", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "3", "8", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "q5f", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "4", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "1", "4", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "20", "1", "1", "4", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "20", "1", "1", "4", "C28", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "20", "1", "1", "4", "C28", "urk", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["Mw2"], ["4"], ["4", "4"], ["4", "4", "4"], ["5L5"], ["5 a3A"], ["3"], ["3", "4"], ["3", "4", "4"], ["4-9"], ["7"], ["7", "4"], ["7", "4", "4"], ["4", "7", "4", "4"], ["4", "7", "07A", "4", "4"], ["4", "7", "5", "4", "4"], ["4", "7", "5", "4", "4", "4"], ["4", "7", "5", "4", "4 LpN", "4"], ["bYj"], ["1"], ["1", "EoP"], ["1", "1"], ["4", "4", "1"], ["6vr"], ["mWV"], ["3 WL2"], ["4", "10"], ["4", "10", "10"], ["4 8eH", "10", "10"], ["-1", "10", "10"], ["-1", "10", "-1", "10"], ["QUL"], ["o23", "6"], ["3", "6"], ["3", "6", "zv6"], ["3", "6", "9"], ["3", "gj", "6", "9"], ["3", "3", "6", "9"], ["2,3", "3", "3", "6", "9"], ["9", "3", "3", "6", "9"], ["6Bc", "9", "3", "3", "6", "9"], ["-1", "9", "3", "3", "6", "9"], ["Ws2"], ["0"], ["0", "4"], ["m38"], ["7", "7"], ["7", "7", "4"], ["-E2"], ["kjV", "10"], ["5", "10"], ["5", "10", "4"], ["5", "end", "10", "4"], ["5", "-1", "10", "4"], ["5", "-1", "10", "4", "4"], ["5", "-1", "10", "4", "4", "5"], ["5", "-1", "10", "4", "4", "5", "4"], ["5", "-1", "10", "4", "4", "10", "5"], ["U0j", "5", "-1", "10", "4", "4", "10", "5"], ["7", "5", "-1", "10", "4", "4", "10", "5"], ["7", "5 qw0", "-1", "10", "4", "4", "10", "5"], ["7", "7", "-1", "10", "4", "4", "10", "5"], ["7", "7", "-1", "10", "7bu", "4", "4", "10", "5"], ["7", "7", "-1", "10", "Hqz", "7bu", "4", "4", "10", "5"], ["7", "7", "5", "-1", "10", "Hqz", "7bu", "4", "4", "10", "5"], ["7", "5", "-1", "10", "Hqz", "7bu", "4", "4", "10", "5"], ["7", "5", "-1", "10", "Hqz", "7bu", "4", "4", "10", "3", "5"], ["dGo"], ["n+1", "7"], ["-1", "7"], ["7", "-1", "7"], ["7", "-1", "7", "4"], ["7", "-1", "7", "4", "-1"], ["7", "-1", "7", "4", "-1", "1"], ["7", "-1", "7", "4", "-1", "1", "-1"], ["7", "-1", "7", "4", "-1", "1", "-1", "1"], ["7", "-1", "7", "4", "-1", "1", "-1", "1", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "4", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "5 8 2 7 8 8 2 4", "4", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "5 8 2 7 8 8 2 4", "4", "4", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "5 8 2 7 8 8 2 4", "18", "4", "4", "4"], ["4", "4", "1"], ["4 yv8", "4", "1"], ["9", "4", "1"], ["9", "4", "0 2 4 6 ", "1"], ["9", "4", "0 2 4 6 4", "1"], ["1", "9", "4", "0 2 4 6 4", "1"], ["1", "9", "4", "0 2 4 6 4", "67", "1"], ["1", "9", "4", "", "67", "1"], ["AUy"], ["Ld5"], ["4", "1"], ["4", "1", "4"], ["4", "1", "4", "-TK"], ["4", "1", "4", "4"], ["4", "1", "4", "4", "4"], ["4", "1", "4", "4", "4", "4"], ["4", "&", "1", "4", "4", "4", "4"], ["4", "2", "1", "4", "4", "4", "4"], ["4", "2", "1", "-BU", "4", "4", "4", "4"], ["4", "2", "1", "-BU", "4", "4", "4"], ["4", "2", "1", "-BU", "2Pi", "4", "4", "4"], ["4", "2", "1", "-BU", "MYQ", "2Pi", "4", "4", "4"], ["4", "2", "1", "1,2,3,4,5,6,7,8,9,9", "-BU", "MYQ", "2Pi", "4", "4", "4"], ["4", "2", "1", "1,2,3,4,5,6,7,8,9,9", "-BU", "MYQ", "2Pi", "4", "4", "4 Wtz"], ["1", "4", "2", "1", "1,2,3,4,5,6,7,8,9,9", "-BU", "MYQ", "2Pi", "4", "4", "4 Wtz"], ["1", "4", "2", "1", "1,2,3,4,5,6,7,8,9,9", "2", "-BU", "MYQ", "2Pi", "4", "4", "4 Wtz"], ["1", "4", "2", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2", "-BU", "MYQ", "2Pi", "4", "4", "4 Wtz"], ["1", "4", "2", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2", "-BU", "MYQ", "lsdhfk", "2Pi", "4", "4", "4 Wtz"], ["1", "4", "2", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "lsdhfk", "2Pi", "4", "4", "4 Wtz"], ["1", "4", "2", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "lsdhfk", "2Pi", "4", "4 z5u", "4 Wtz"], ["1", "4", "2", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "lsdhfk", "4", "4 z5u", "4 Wtz"], ["1", "4", "2", "5qx", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "lsdhfk", "4", "4 z5u", "4 Wtz"], ["1", "4", "2", "5qx", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "lsdhfk", "4", "4 z5u", ""], ["1", "4", "2", "5qx", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "lsdhfk", "4", "4 k p y t h o", ""], ["1", "4", "2", "5qx", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "8,5", "lsdhfk", "4", "4 k p y t h o", ""], ["uAK"], ["8"], ["8", "1"], ["8", "1", "4"], ["8", "1", "4", "7kQ"], ["8", "1", "4", "7"], ["8", "1", "4", "7", "1"], ["8", "1", "4", "7", "1", "1"], ["8", "1", "4", "7", "1", "1", "8"], ["8", "1", "4", "7", "1", "1", "8", "y2B"], ["8", "1", "4", "7", "1", "1", "8", "3"], ["8", "1", "4", "7", "1", "1", "8", "3", "1"], ["8", "1", "4", "7", "1", "1", "8", "3", "1", "4"], ["8", "1", "4", "7", "1", "1", "8", "mhm", "3", "1", "4"], ["8", "1", "4", "7", "1", "1", "8", "0", "3", "1", "4"], ["8", "1", "4", "7", "1", "8", "1", "8", "0", "3", "1", "4"], ["8", "1", "4", "7", "1", "8", "1", "8", "0", "3 5-k", "1", "4"], ["8", "1", "7", "1", "8", "1", "8", "0", "3 5-k", "1", "4"], ["8", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "3 5-k", "1", "4"], ["8", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "3 5-k", "A : D", "1", "4"], ["8", "7", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "3 5-k", "A : D", "1", "4"], ["8", "7", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "", "A : D", "1", "4"], ["8", "7", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "", "A : D", "1", "1 2 3 *  + =", "4"], ["poco", "8", "7", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "", "A : D", "1", "1 2 3 *  + =", "4"], ["7", "8", "7", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "", "A : D", "1", "1 2 3 *  + =", "4"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552421368.9148738, "StartTime": 1552421359.7267842}, {"InputHistory": [["4", "4", "1"], ["4", "4", "abcd", "1"], ["4", "4", "-1", "1"], [], ["-1"], ["-1", "-1"], ["-1", "YRg", "-1"], ["-1", "0", "-1"], ["3sY"], ["10"], ["10", "R85"], ["10", "1"], ["10", "1", "1"], ["10", "1", "1", "4"], ["10", "1", "1", "4", "4"], ["10", "1", "1", "4", "4", "1"], ["10", "1", "1", "4", "4", "1", "1"], ["10", "1", "1", "4", "4", "1", "1", "1"], ["10", "1", "1", "4", "4", "1", "1", "1", "4"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1"], ["10", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["10 zgJ", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "1", "4", "4", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "TH0", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "4", "5E3", "1", "4"], ["2", "1", "1", "4", "4", "1", "TH0", "1", "6", "ff3", "1.0, 2.0, 2.0, 4.0, 4.0, 5.0", "1", "4", "ky1", "5E3", "1", "4"], ["mmv"], ["5"], ["5", "Tne"], ["5", "1"], ["5", "1", "4"], ["5", "1", "4", "4"], ["5", "1", "4", "4", "4"], ["5", "1", "4", "4", "4", "4"], ["5", "1", "4", "4", "4", "4", "1"], ["q5K", "5", "1", "4", "4", "4", "4", "1"], ["4", "5", "1", "4", "4", "4", "4", "1"], ["4", "5", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "Spock lagarto", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "3 lagarto", "1", "4", "4", "4", "4", "1 dh0"], ["4", "5", "3 9", "1", "4", "4", "4", "4", "1 dh0"], ["b4s"], ["6", "5"], ["6", "5", "4"], ["6", "vedu", "5", "4"], ["6", "1", "5", "4"], ["6", "1", "5", "4", "6"], ["6", "1", "5", "4", "6", "4"], ["6", "1", "5", "4", "6", "4", "4"], ["6", "1", "5", "4", "6", "4", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4"], ["6", "1", "5", "4", "6 q9V", "4", "4", "1"], ["6", "1", "5", "4", "6 q9V", "1", "4", "4", "1"], ["6", "K4E", "1", "5", "4", "6 q9V", "1", "4", "4", "1"], ["4", "4", "1"], ["4", "1 2", "4", "1"], ["4", "4", "4", "1"], ["4 00s", "4", "4", "1"], ["8", "4", "4", "1"], ["8", "4", "4"], ["SnZ"], ["6"], ["6", "4"], ["6", "4", "6"], ["6", "4 O8a", "6"], ["6", "8", "6"], ["6", "5 4", "8", "6"], ["6", "1", "8", "6"], ["6", "1", "8", "6", "37J"], ["6", "1", "8", "6", "4"], ["6", "1", "8", "6", "4", "8"], ["6", "1", "8", "6", "4", "8", "8"], ["6", "1", "8", "6", "4", "8", "8", "8"], ["6", "1", "8", "ef8", "6", "4", "8", "8", "8"], ["6", "1", "8", "5", "6", "4", "8", "8", "8"], ["6", "1", "8", "5", "6", "4", "8", "g4p", "8", "8"], ["6", "1", "8", "5", "6", "4", "8", "-1", "8", "8"], ["6", "1", "8", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "W13", "8", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "3", "8", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "q5f", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "4", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "1", "1", "4", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "20", "1", "1", "4", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "20", "1", "1", "4", "C28", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["6", "20", "1", "1", "4", "C28", "urk", "3", "8", "6", "5", "6", "4", "8 G18", "-1", "8", "8"], ["Mw2"], ["4"], ["4", "4"], ["4", "4", "4"], ["5L5"], ["5 a3A"], ["3"], ["3", "4"], ["3", "4", "4"], ["4-9"], ["7"], ["7", "4"], ["7", "4", "4"], ["4", "7", "4", "4"], ["4", "7", "07A", "4", "4"], ["4", "7", "5", "4", "4"], ["4", "7", "5", "4", "4", "4"], ["4", "7", "5", "4", "4 LpN", "4"], ["bYj"], ["1"], ["1", "EoP"], ["1", "1"], ["4", "4", "1"], ["6vr"], ["mWV"], ["3 WL2"], ["4", "10"], ["4", "10", "10"], ["4 8eH", "10", "10"], ["-1", "10", "10"], ["-1", "10", "-1", "10"], ["QUL"], ["o23", "6"], ["3", "6"], ["3", "6", "zv6"], ["3", "6", "9"], ["3", "gj", "6", "9"], ["3", "3", "6", "9"], ["2,3", "3", "3", "6", "9"], ["9", "3", "3", "6", "9"], ["6Bc", "9", "3", "3", "6", "9"], ["-1", "9", "3", "3", "6", "9"], ["Ws2"], ["0"], ["0", "4"], ["m38"], ["7", "7"], ["7", "7", "4"], ["-E2"], ["kjV", "10"], ["5", "10"], ["5", "10", "4"], ["5", "end", "10", "4"], ["5", "-1", "10", "4"], ["5", "-1", "10", "4", "4"], ["5", "-1", "10", "4", "4", "5"], ["5", "-1", "10", "4", "4", "5", "4"], ["5", "-1", "10", "4", "4", "10", "5"], ["U0j", "5", "-1", "10", "4", "4", "10", "5"], ["7", "5", "-1", "10", "4", "4", "10", "5"], ["7", "5 qw0", "-1", "10", "4", "4", "10", "5"], ["7", "7", "-1", "10", "4", "4", "10", "5"], ["7", "7", "-1", "10", "7bu", "4", "4", "10", "5"], ["7", "7", "-1", "10", "Hqz", "7bu", "4", "4", "10", "5"], ["7", "7", "5", "-1", "10", "Hqz", "7bu", "4", "4", "10", "5"], ["7", "5", "-1", "10", "Hqz", "7bu", "4", "4", "10", "5"], ["7", "5", "-1", "10", "Hqz", "7bu", "4", "4", "10", "3", "5"], ["dGo"], ["n+1", "7"], ["-1", "7"], ["7", "-1", "7"], ["7", "-1", "7", "4"], ["7", "-1", "7", "4", "-1"], ["7", "-1", "7", "4", "-1", "1"], ["7", "-1", "7", "4", "-1", "1", "-1"], ["7", "-1", "7", "4", "-1", "1", "-1", "1"], ["7", "-1", "7", "4", "-1", "1", "-1", "1", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "4", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "5 8 2 7 8 8 2 4", "4", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "5 8 2 7 8 8 2 4", "4", "4", "4"], ["7", "-1", "7", "4", "-1", "1", "-1", "5 8 2 7 8 8 2 4", "18", "4", "4", "4"], ["4", "4", "1"], ["4 yv8", "4", "1"], ["9", "4", "1"], ["9", "4", "0 2 4 6 ", "1"], ["9", "4", "0 2 4 6 4", "1"], ["1", "9", "4", "0 2 4 6 4", "1"], ["1", "9", "4", "0 2 4 6 4", "67", "1"], ["1", "9", "4", "", "67", "1"], ["AUy"], ["Ld5"], ["4", "1"], ["4", "1", "4"], ["4", "1", "4", "-TK"], ["4", "1", "4", "4"], ["4", "1", "4", "4", "4"], ["4", "1", "4", "4", "4", "4"], ["4", "&", "1", "4", "4", "4", "4"], ["4", "2", "1", "4", "4", "4", "4"], ["4", "2", "1", "-BU", "4", "4", "4", "4"], ["4", "2", "1", "-BU", "4", "4", "4"], ["4", "2", "1", "-BU", "2Pi", "4", "4", "4"], ["4", "2", "1", "-BU", "MYQ", "2Pi", "4", "4", "4"], ["4", "2", "1", "1,2,3,4,5,6,7,8,9,9", "-BU", "MYQ", "2Pi", "4", "4", "4"], ["4", "2", "1", "1,2,3,4,5,6,7,8,9,9", "-BU", "MYQ", "2Pi", "4", "4", "4 Wtz"], ["1", "4", "2", "1", "1,2,3,4,5,6,7,8,9,9", "-BU", "MYQ", "2Pi", "4", "4", "4 Wtz"], ["1", "4", "2", "1", "1,2,3,4,5,6,7,8,9,9", "2", "-BU", "MYQ", "2Pi", "4", "4", "4 Wtz"], ["1", "4", "2", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2", "-BU", "MYQ", "2Pi", "4", "4", "4 Wtz"], ["1", "4", "2", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2", "-BU", "MYQ", "lsdhfk", "2Pi", "4", "4", "4 Wtz"], ["1", "4", "2", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "lsdhfk", "2Pi", "4", "4", "4 Wtz"], ["1", "4", "2", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "lsdhfk", "2Pi", "4", "4 z5u", "4 Wtz"], ["1", "4", "2", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "lsdhfk", "4", "4 z5u", "4 Wtz"], ["1", "4", "2", "5qx", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "lsdhfk", "4", "4 z5u", "4 Wtz"], ["1", "4", "2", "5qx", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "lsdhfk", "4", "4 z5u", ""], ["1", "4", "2", "5qx", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "lsdhfk", "4", "4 k p y t h o", ""], ["1", "4", "2", "5qx", "5qx", "1", "1,2,3,4,5,6,7,8,9,9", "2 hWN", "-BU", "MYQ", "8,5", "lsdhfk", "4", "4 k p y t h o", ""], ["uAK"], ["8"], ["8", "1"], ["8", "1", "4"], ["8", "1", "4", "7kQ"], ["8", "1", "4", "7"], ["8", "1", "4", "7", "1"], ["8", "1", "4", "7", "1", "1"], ["8", "1", "4", "7", "1", "1", "8"], ["8", "1", "4", "7", "1", "1", "8", "y2B"], ["8", "1", "4", "7", "1", "1", "8", "3"], ["8", "1", "4", "7", "1", "1", "8", "3", "1"], ["8", "1", "4", "7", "1", "1", "8", "3", "1", "4"], ["8", "1", "4", "7", "1", "1", "8", "mhm", "3", "1", "4"], ["8", "1", "4", "7", "1", "1", "8", "0", "3", "1", "4"], ["8", "1", "4", "7", "1", "8", "1", "8", "0", "3", "1", "4"], ["8", "1", "4", "7", "1", "8", "1", "8", "0", "3 5-k", "1", "4"], ["8", "1", "7", "1", "8", "1", "8", "0", "3 5-k", "1", "4"], ["8", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "3 5-k", "1", "4"], ["8", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "3 5-k", "A : D", "1", "4"], ["8", "7", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "3 5-k", "A : D", "1", "4"], ["8", "7", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "", "A : D", "1", "4"], ["8", "7", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "", "A : D", "1", "1 2 3 *  + =", "4"], ["poco", "8", "7", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "", "A : D", "1", "1 2 3 *  + =", "4"], ["7", "8", "7", "1", "7", "1", "79 64 13 8 38 29 58 20 56 17", "8", "1", "8", "0", "", "A : D", "1", "1 2 3 *  + =", "4"], ["4", "4", "1"], ["16k"], ["3 6Fl"], ["T1f"], ["7", "67K", "7"], ["7", "9", "7"], ["iPR"], ["joO"], ["Wheresoever you go, go with all your heart", "4"], ["AaN"], ["JSQ"], ["-1", "-1 uU5"], ["-1", "1"], ["0M7"], ["7L1"], ["pT5"], ["5hO"], ["RSr"], ["1", "5"], ["1", "5", "4"], ["vV0"], ["4", "0"], ["4", "0", "lk8"], ["4", "0", "lk8", "4"], ["4", "0", "lk8", "4", "1"], ["4", "0", "lk8", "4", "1", "1"], ["1 2 3 4 5 6 7 8 9 10 11 12 13 14 15", "4", "0", "lk8", "4", "1", "1"], ["9", "4", "0", "lk8", "4", "1", "1"], ["9", "4", "4", "0", "lk8", "4", "1", "1"], ["9", "4", "4", "B ; D E", "0", "lk8", "4", "1", "1"], ["9", "4", "4", "B ; D E", "six", "0", "lk8", "4", "1", "1"], ["9", "4", "4", "B ; D E", "six", "0", "lk8", "4 8co", "1", "1"], ["9", "4", "4", "B ; D E", "six", "0", "lk8", "4", "8co", "1", "1"], ["9", "4", "4", "B ; D E", "six", "0", "lk8", "4", "8co", "1", "ehx", "1"], ["9", "4", "4", "B ; D E", "six", "0", "lk8", "4", "8co", "1 HhT", "ehx", "1"], ["9", "4", "4", "B ; D E", "1", "six", "0", "lk8", "4", "8co", "1 HhT", "ehx", "1"], ["Ozz"], ["4,2", "3"], ["7", "3"], ["7", "3", "4"], ["7", "3", " [10,5,4,3,9,8]", "4"], ["7", "3", " 9", "4"], ["50", "7", "3", " 9", "4"], ["50", "7 0e5", "3", " 9", "4"], ["50", "3", "3", " 9", "4"], ["nPd"], ["8BK"], ["9"], ["9", "-u1"], ["9", "10"], ["9", "10", "18w"], ["9", "10", "2"], ["I9C"], ["yBH"], ["793"], ["793", "1"], ["793", "1", "1"], ["793", "1", "1", "793"], ["793", "1", "1", "793", "4"], ["793", "1", "1", "793", "4", "1"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552421378.3846004, "StartTime": 1552421368.9184008}]], [{"CorrectInputs": [[["1", "2", "1 0", "1 1"], 1529181983]], "UniqueId": "5e203b9b-921c-4c8e-f745-a76e4533d0b9_0", "CoverageInfo": [18, 5, 16, 2, 68, "13,", "15-19,", "3->15,", "12->13"], "TimeStamp": 1529181918, "BadInput": ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 4, in <module>\n    n=int(input())\nValueError: invalid literal for int() with base 10: '1 0'\n", "ip": "183.157.162.33"}, [{"InputHistory": [["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "X1c 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "9O0", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 1", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 57G", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 57G", "5", "0", "1", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], [], ["6"], ["6", "iZ4"], ["6", "6"], ["6", "6", "1 0"], ["6", "6", "1 0", "1 0"], ["6", "6", "1 0", "1 0", "6"], ["6", "6", "1 0", "1 0", "6", "6"], ["6", "6", "1 0", "1 0", "6", "6", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "6", "0 0 1", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 j2-", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 7", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "Q0p", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "1"], ["2", "6", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "1"], ["2", "6", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "6 62G", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "6", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "6", "-459.67", "Pbn", "0", "0", "A73", "1 p1j"], ["9vI"], ["3"], ["3", "3"], ["3", "3", "3"], ["3", "3", "3", "3"], ["3", "3", "3", "3", "1 0"], ["3", "3", "3", "3", "1 0", "3"], ["3", "3", "3", "3", "1 0", "3", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0", "1 0", "3"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552292427.8394527, "StartTime": 1552292416.9431977}, {"EndTime": 1552292430.1003041, "FinalMinimizedSolution": ["2", "-1", "3", "1 1 1", "0 1 1", "0 0 1"], "FinalCoverage": [18, 2, 16, 2, 88, "13,", "19,", "12->13,", "16->19"], "FinalSolution": ["2", "-1", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "0", "4"], "StartTime": 1552292427.8409088, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "X1c 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "9O0", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 1", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 57G", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 57G", "5", "0", "1", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], [], ["6"], ["6", "iZ4"], ["6", "6"], ["6", "6", "1 0"], ["6", "6", "1 0", "1 0"], ["6", "6", "1 0", "1 0", "6"], ["6", "6", "1 0", "1 0", "6", "6"], ["6", "6", "1 0", "1 0", "6", "6", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "6", "0 0 1", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 j2-", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 7", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "Q0p", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "1"], ["2", "6", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "1"], ["2", "6", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "6 62G", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "6", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "6", "-459.67", "Pbn", "0", "0", "A73", "1 p1j"], ["9vI"], ["3"], ["3", "3"], ["3", "3", "3"], ["3", "3", "3", "3"], ["3", "3", "3", "3", "1 0"], ["3", "3", "3", "3", "1 0", "3"], ["3", "3", "3", "3", "1 0", "3", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0", "1 0", "3"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "CSN"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "0", "4"], ["2", "0C7", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "0", "4"]]}, {"EndTime": 1552292432.8213239, "FinalMinimizedSolution": ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1", "6"], "FinalCoverage": [18, 2, 16, 2, 88, "13,", "19,", "12->13,", "16->19"], "FinalSolution": ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1", "6", "0 1 1", "1 0", "1 0", "0 1 1", "0 0 1", "1 1 1"], "StartTime": 1552292430.1020567, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "X1c 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "9O0", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 1", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 57G", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 57G", "5", "0", "1", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], [], ["6"], ["6", "iZ4"], ["6", "6"], ["6", "6", "1 0"], ["6", "6", "1 0", "1 0"], ["6", "6", "1 0", "1 0", "6"], ["6", "6", "1 0", "1 0", "6", "6"], ["6", "6", "1 0", "1 0", "6", "6", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "6", "0 0 1", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 j2-", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 7", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "Q0p", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "1"], ["2", "6", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "1"], ["2", "6", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "6 62G", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "6", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "6", "-459.67", "Pbn", "0", "0", "A73", "1 p1j"], ["9vI"], ["3"], ["3", "3"], ["3", "3", "3"], ["3", "3", "3", "3"], ["3", "3", "3", "3", "1 0"], ["3", "3", "3", "3", "1 0", "3"], ["3", "3", "3", "3", "1 0", "3", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0", "1 0", "3"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "CSN"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "0", "4"], ["2", "0C7", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "0", "4"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0", "1 0", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0", "1 0", "0 1 1", "0 0 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0", "1 0", "0 1 1", "0 0 1", "1 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "3UW", "6", "0 1 1", "1 0", "1 0", "0 1 1", "0 0 1", "1 1 1"]]}, {"EndTime": 1552292433.8998446, "FinalMinimizedSolution": ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1", "0 1 1"], "FinalCoverage": [18, 2, 16, 2, 88, "13,", "19,", "12->13,", "16->19"], "FinalSolution": ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1", "0 1 1"], "StartTime": 1552292432.823229, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "X1c 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "9O0", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 1", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 57G", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 57G", "5", "0", "1", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], [], ["6"], ["6", "iZ4"], ["6", "6"], ["6", "6", "1 0"], ["6", "6", "1 0", "1 0"], ["6", "6", "1 0", "1 0", "6"], ["6", "6", "1 0", "1 0", "6", "6"], ["6", "6", "1 0", "1 0", "6", "6", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "6", "0 0 1", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 j2-", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 7", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "Q0p", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "1"], ["2", "6", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "1"], ["2", "6", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "6 62G", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "6", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "6", "-459.67", "Pbn", "0", "0", "A73", "1 p1j"], ["9vI"], ["3"], ["3", "3"], ["3", "3", "3"], ["3", "3", "3", "3"], ["3", "3", "3", "3", "1 0"], ["3", "3", "3", "3", "1 0", "3"], ["3", "3", "3", "3", "1 0", "3", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0", "1 0", "3"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "CSN"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "0", "4"], ["2", "0C7", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "0", "4"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0", "1 0", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0", "1 0", "0 1 1", "0 0 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0", "1 0", "0 1 1", "0 0 1", "1 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "3UW", "6", "0 1 1", "1 0", "1 0", "0 1 1", "0 0 1", "1 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1"]]}, {"EndTime": 1552292438.9383235, "FinalMinimizedSolution": ["0"], "FinalCoverage": [18, 14, 16, 2, 18, "4-14,", "16-19,", "3->4,", "15->16"], "FinalSolution": ["0"], "StartTime": 1552292433.901804, "FoundSolution": true, "NumProbesMade": 23, "InputHistory": [["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "X1c 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0 1 1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "9O0", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0 0 1", "7", "0 1 1", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 1", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 57G", "5", "0", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], ["2", "7", "3", "1 1 1", "-1 1 1", "0", "0", "1", "7", "0 1 57G", "5", "0", "1", "1", "1", "2", "3", "0 0 1", "0 0 1", "2"], [], ["6"], ["6", "iZ4"], ["6", "6"], ["6", "6", "1 0"], ["6", "6", "1 0", "1 0"], ["6", "6", "1 0", "1 0", "6"], ["6", "6", "1 0", "1 0", "6", "6"], ["6", "6", "1 0", "1 0", "6", "6", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "6", "0 0 1", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0 0 1"], ["6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 0", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 j2-", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 7", "1 0", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "Q0p", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0 0 1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "5", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "0", "0", "1"], ["2", "6", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "1"], ["2", "6", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "1"], ["2", "6", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "6 62G", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1"], ["2", "7", "1 1 1", "8", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "6", "Pbn", "0", "0", "A73", "1 p1j"], ["2", "7", "1 1 1", "8", "0", "6", "1 7", "1 0", "0", "0", "K6I", "1", ".5", "6", "6", "0 0 1", "6", "-459.67", "Pbn", "0", "0", "A73", "1 p1j"], ["9vI"], ["3"], ["3", "3"], ["3", "3", "3"], ["3", "3", "3", "3"], ["3", "3", "3", "3", "1 0"], ["3", "3", "3", "3", "1 0", "3"], ["3", "3", "3", "3", "1 0", "3", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0", "1 0"], ["3", "3", "3", "3", "1 0", "3", "1 0", "1 0", "1 0", "3"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "CSN"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "0", "4"], ["2", "0C7", "3", "1 1 1", "0 1 1", "0 0 1", "4", "2", "0 1 1", "0", "4"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0", "1 0", "0 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0", "1 0", "0 1 1", "0 0 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "6", "0 1 1", "1 0", "1 0", "0 1 1", "0 0 1", "1 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "3UW", "6", "0 1 1", "1 0", "1 0", "0 1 1", "0 0 1", "1 1 1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1"], ["2", "3", "1 1 1", "0 1 1", "0 0 1", "1 0"], ["Atg"], ["5"], ["5", "1 1 1"], ["5", "5"], ["5", "5", "E0i"], ["5", "5", "4"], ["5", "5", "4", "0 1 1"], ["5", "5", "4", "0 1 1", "0 1 1"], ["5", "5", "4", "0 1 1", "0 1 1", "2"], ["5", "5", "4", "0 1 1", "0 1 1", "2", "5"], ["5", "5", "00u", "4", "0 1 1", "0 1 1", "2", "5"], ["5", "5", "-1", "4", "0 1 1", "0 1 1", "2", "5"], ["5", "5", "-1", "W7P", "4", "0 1 1", "0 1 1", "2", "5"], ["5", "5", "-1", "9", "4", "0 1 1", "0 1 1", "2", "5"], ["5", "5", "-1", "9", "4", "0 1 1", "0 1 1", "2", "qE7", "5"], ["5", "5", "-1", "9", "4", "0 1 1", "0 1 1", "2", "qE7", "5 6Tb"], ["5", "5", "-1", "9", "4", "0 1 1", "0", "1", "1", "2", "qE7", "5 6Tb"], ["5", "5 Nnz", "-1", "9", "4", "0 1 1", "0", "1", "1", "2", "qE7", "5 6Tb"], ["5", "4", "-1", "9", "4", "0 1 1", "0", "1", "1", "2", "qE7", "5 6Tb"], ["5", "4", "-1", "9", "4", "0 1 1", "0", "1", "1", "2", "5 6Tb"], ["1-w"], ["6 n26"]]}]], [{"CorrectInputs": [[["1 2 3", "1 1 1 1 1"], 1542914572]], "UniqueId": "72f116f8-d729-4fe7-a66c-f2fc3fad50d0_0", "CoverageInfo": [9, 1, 4, 2, 77, "8,", "5->8,", "6->5"], "TimeStamp": 1542914404, "BadInput": ["1 1 1 1 1", "1 2 3"], "ErrorType": "AttributeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 10, in <module>\n    print(common(lst1, lst2))\n  File \"temp2018.py\", line 7, in common\n    a=a.append(i)\nAttributeError: 'NoneType' object has no attribute 'append'\n", "ip": "110.93.199.66"}, [{"EndTime": 1552416935.2749357, "FinalMinimizedSolution": ["1", "1"], "FinalCoverage": [9, 0, 4, 1, 92, "6->5"], "FinalSolution": ["1", "1", "1", "1", "1", "1 2 3"], "StartTime": 1552416934.2005522, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 1 1 1 1", "1 2 3"]]}, {"EndTime": 1552416936.514233, "FinalMinimizedSolution": ["", "1 1 1 1 1 1 3"], "FinalCoverage": [9, 2, 4, 1, 62, "6-7,", "5->6"], "FinalSolution": ["", "1 1 1 1 1 1 3"], "StartTime": 1552416935.2751222, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["1 1 1 1 1", "1 2 3"], ["1 1 1 1 1", "1 2 3"], ["1 1 1 1 1", "1 1 1 1 1 1 3"], ["1 1 1 1 1 1 1 1 1 3 1", "1 1 1 1 1 1 3"]]}, {"EndTime": 1552416938.322514, "FinalMinimizedSolution": ["", "1 1MX 1 1 1 1 1 1 1 1 1"], "FinalCoverage": [9, 2, 4, 1, 62, "6-7,", "5->6"], "FinalSolution": ["", "1 1MX 1 1 1 1 1 1 1 1 1"], "StartTime": 1552416936.5144472, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["1 1 1 1 1", "1 2 3"], ["1 1 1 1 1", "1 2 3"], ["1 1 1 1 1", "1 1 1 1 1 1 3"], ["1 1 1 1 1 1 1 1 1 3 1", "1 1 1 1 1 1 3"], ["1 1 1 1 1", "1 2 3"], ["1 1 1 1 1", "1 v 3"], ["1 1 1 1 1", "1 783 3"], ["1 1 1 1 1", "1 1MX 3"], ["1 1 1 1 1", "1 1MX 1 1 1 1 1"], ["1 1 1 1 1", "1 1MX 1 1 1 1 1 1 1 1 1"]]}, {"EndTime": 1552416940.632109, "FinalMinimizedSolution": ["1 1 1 1 1 1 4aR 10n 10n", "qr8"], "FinalCoverage": [9, 1, 4, 1, 85, "7,", "6->7"], "FinalSolution": ["1 1 1 1 1 1 4aR 10n 10n", "qr8", "1", "1", "1", "1", "2", "3"], "StartTime": 1552416938.3227837, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["1 1 1 1 1", "1 2 3"], ["1 1 1 1 1", "1 2 3"], ["1 1 1 1 1", "1 1 1 1 1 1 3"], ["1 1 1 1 1 1 1 1 1 3 1", "1 1 1 1 1 1 3"], ["1 1 1 1 1", "1 2 3"], ["1 1 1 1 1", "1 v 3"], ["1 1 1 1 1", "1 783 3"], ["1 1 1 1 1", "1 1MX 3"], ["1 1 1 1 1", "1 1MX 1 1 1 1 1"], ["1 1 1 1 1", "1 1MX 1 1 1 1 1 1 1 1 1"], ["1 1 1 1 1", "1 2 3"], ["1 1 1 4aR 1", "1 2 3"], ["1 1 1 4aR -5", "1 2 3"], ["1 1 1 4aR -5", "1 1 1 1 1 2 3"], ["1 1 1 4aR 10n", "1 1 1 1 1 2 3"], ["1 1 1 4aR 10n", "qr8 1 1 1 1 2 3"], ["1 1 1 1 1 1 4aR 10n 10n", "qr8 1 1 1 1 2 3"]]}, {"EndTime": 1552416941.706985, "FinalMinimizedSolution": ["1", "1"], "FinalCoverage": [9, 0, 4, 1, 92, "6->5"], "FinalSolution": ["1", "1", "1", "1", "1", "1 1 1 1 1 1 3"], "StartTime": 1552416940.6324725, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 1 1 1 1", "1 2 3"], ["1 1 1 1 1", "1 2 3"], ["1 1 1 1 1", "1 1 1 1 1 1 3"], ["1 1 1 1 1 1 1 1 1 3 1", "1 1 1 1 1 1 3"], ["1 1 1 1 1", "1 2 3"], ["1 1 1 1 1", "1 v 3"], ["1 1 1 1 1", "1 783 3"], ["1 1 1 1 1", "1 1MX 3"], ["1 1 1 1 1", "1 1MX 1 1 1 1 1"], ["1 1 1 1 1", "1 1MX 1 1 1 1 1 1 1 1 1"], ["1 1 1 1 1", "1 2 3"], ["1 1 1 4aR 1", "1 2 3"], ["1 1 1 4aR -5", "1 2 3"], ["1 1 1 4aR -5", "1 1 1 1 1 2 3"], ["1 1 1 4aR 10n", "1 1 1 1 1 2 3"], ["1 1 1 4aR 10n", "qr8 1 1 1 1 2 3"], ["1 1 1 1 1 1 4aR 10n 10n", "qr8 1 1 1 1 2 3"], ["1 1 1 1 1", "1 2 3"]]}]], [{"CorrectInputs": [[["f"], 1535600219]], "UniqueId": "10fde46f-f03d-4cc7-e6de-1b97475f4ebc_0", "CoverageInfo": [16, 0, 10, 2, 92, "2->exit,", "3->exit"], "TimeStamp": 1535599980, "BadInput": ["aaabbcdd"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    while (s[i] == s[i+1]) or (i == (len(s)-1)):\nIndexError: string index out of range\n", "ip": "95.161.249.158"}, [{"EndTime": 1552268215.178104, "FinalMinimizedSolution": [], "FinalCoverage": [16, 14, 10, 1, 12, "3-16,", "2->3"], "FinalSolution": [], "StartTime": 1552268214.5036318, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["aaabbcdd"]]}, {"EndTime": 1552268215.9067628, "FinalMinimizedSolution": [], "FinalCoverage": [16, 14, 10, 1, 12, "3-16,", "2->3"], "FinalSolution": ["6Lx"], "StartTime": 1552268215.1782682, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["aaabbcdd"], ["aaabbcdd"]]}, {"EndTime": 1552268216.6349835, "FinalMinimizedSolution": [], "FinalCoverage": [16, 14, 10, 1, 12, "3-16,", "2->3"], "FinalSolution": ["vX6"], "StartTime": 1552268215.906942, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["aaabbcdd"], ["aaabbcdd"], ["aaabbcdd"]]}, {"EndTime": 1552268217.3647132, "FinalMinimizedSolution": [], "FinalCoverage": [16, 14, 10, 1, 12, "3-16,", "2->3"], "FinalSolution": ["34H"], "StartTime": 1552268216.6351547, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["aaabbcdd"], ["aaabbcdd"], ["aaabbcdd"], ["aaabbcdd"]]}, {"EndTime": 1552268218.144938, "FinalMinimizedSolution": [], "FinalCoverage": [16, 14, 10, 1, 12, "3-16,", "2->3"], "FinalSolution": ["3", "aaabbcdd"], "StartTime": 1552268217.3649068, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["aaabbcdd"], ["aaabbcdd"], ["aaabbcdd"], ["aaabbcdd"], ["aaabbcdd"]]}]], [{"CorrectInputs": [[["4 -18"], 1527396493], [["1 5"], 1527396560]], "UniqueId": "43875a3c-aad2-4abe-a9b3-341ef384dd4e_0", "CoverageInfo": [7, 1, 2, 1, 78, "7,", "4->6"], "TimeStamp": 1527396453, "BadInput": ["-8 0"], "ErrorType": "ZeroDivisionError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 6, in <module>\n    R=a/b\nZeroDivisionError: division by zero\n", "ip": "168.194.15.198"}, [{"EndTime": 1552420671.9960854, "FinalMinimizedSolution": ["91212129 1"], "FinalCoverage": [7, 1, 2, 1, 78, "5,", "4->5"], "FinalSolution": ["91212129 1"], "StartTime": 1552420670.8592753, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["-8 0"], ["2 0"], ["Pik 0"], ["5 0"], ["91212129 0"], ["91212129 o8G"]]}, {"EndTime": 1552420673.1468081, "FinalMinimizedSolution": ["-1 3"], "FinalCoverage": [7, 1, 2, 1, 78, "5,", "4->5"], "FinalSolution": ["-1 3"], "StartTime": 1552420671.9962845, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["-8 0"], ["2 0"], ["Pik 0"], ["5 0"], ["91212129 0"], ["91212129 o8G"], ["-8 0"], [""], [" "], [" KNb"], ["KNb KNb"], ["KNb 3"]]}, {"EndTime": 1552420677.0443034, "FinalMinimizedSolution": ["7 7"], "FinalCoverage": [7, 1, 2, 1, 78, "5,", "4->5"], "FinalSolution": ["7 7"], "StartTime": 1552420673.1471987, "FoundSolution": true, "NumProbesMade": 31, "InputHistory": [["-8 0"], ["2 0"], ["Pik 0"], ["5 0"], ["91212129 0"], ["91212129 o8G"], ["-8 0"], [""], [" "], [" KNb"], ["KNb KNb"], ["KNb 3"], ["-8 0"], ["", ""], ["", " "], ["2", "", ""], ["2", "", " "], ["2", "", "", ""], ["2", "", "", " "], ["2", " "], ["7", "2", " "], ["7", "2", " -8 0"], ["7", "2", "-8 0 0"], ["7", "2", "-8 0 0 0"], ["7", "2", "-8 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0 0 0 0 0"], ["7", "2"], ["7", "2 2"], ["7", "2 2 2"], ["7", "2 2 2 2"], ["7", "2 2 2 2 2"], ["7", "2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2 2 2 2 2"], ["7"]]}, {"EndTime": 1552420677.75432, "FinalMinimizedSolution": ["2 1"], "FinalCoverage": [7, 1, 2, 1, 78, "5,", "4->5"], "FinalSolution": ["2 1"], "StartTime": 1552420677.044621, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["-8 0"], ["2 0"], ["Pik 0"], ["5 0"], ["91212129 0"], ["91212129 o8G"], ["-8 0"], [""], [" "], [" KNb"], ["KNb KNb"], ["KNb 3"], ["-8 0"], ["", ""], ["", " "], ["2", "", ""], ["2", "", " "], ["2", "", "", ""], ["2", "", "", " "], ["2", " "], ["7", "2", " "], ["7", "2", " -8 0"], ["7", "2", "-8 0 0"], ["7", "2", "-8 0 0 0"], ["7", "2", "-8 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0 0 0 0 0"], ["7", "2"], ["7", "2 2"], ["7", "2 2 2"], ["7", "2 2 2 2"], ["7", "2 2 2 2 2"], ["7", "2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2 2 2 2 2"], ["7"], ["-8 0"], ["2 def"]]}, {"EndTime": 1552420680.2084763, "FinalMinimizedSolution": ["6 6"], "FinalCoverage": [7, 1, 2, 1, 78, "5,", "4->5"], "FinalSolution": ["6 6"], "StartTime": 1552420677.754627, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["-8 0"], ["2 0"], ["Pik 0"], ["5 0"], ["91212129 0"], ["91212129 o8G"], ["-8 0"], [""], [" "], [" KNb"], ["KNb KNb"], ["KNb 3"], ["-8 0"], ["", ""], ["", " "], ["2", "", ""], ["2", "", " "], ["2", "", "", ""], ["2", "", "", " "], ["2", " "], ["7", "2", " "], ["7", "2", " -8 0"], ["7", "2", "-8 0 0"], ["7", "2", "-8 0 0 0"], ["7", "2", "-8 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0 0 0 0"], ["7", "2", "-8 0 0 0 0 0 0 0 0 0 0"], ["7", "2"], ["7", "2 2"], ["7", "2 2 2"], ["7", "2 2 2 2"], ["7", "2 2 2 2 2"], ["7", "2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2 2 2 2"], ["7", "2 2 2 2 2 2 2 2 2 2 2"], ["7"], ["-8 0"], ["2 def"], ["-8 0"], ["6 0"], ["6", "0"], ["6", "0 0"], ["6", "0 0 0"], ["6", "0 0 0 0"], ["6", "0 0 0 0 0"], ["6", "0 0 0 0 0 0"], ["6", "0 0 0 0 0 0 0"], ["6", "0 0 0 0 0 0 0 0"], ["6", "0 0 0 0 0 0 0 0 0"], ["6", "0 0 0 0 0 0 0 0 0 0"], ["6", "0 0 0 0 0 0 0 0 0 0 0"], ["6"]]}]], [{"CorrectInputs": [[["5931111121 87.25", "5932222221 77.00", "5934444421 69.75", "5934444421"], 1540458607]], "UniqueId": "fa41531e-5a7b-4bd8-ffa7-bf7ae90a0d2c_0", "CoverageInfo": [24, 19, 20, 1, 14, "5,", "7-25,", "4->5"], "TimeStamp": 1540458461, "BadInput": ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 6, in <module>\n    [id,score]=x.split()\nValueError: too many values to unpack (expected 2)\n", "ip": "184.22.123.177"}, [{"EndTime": 1552291110.0589085, "FinalMinimizedSolution": ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25", "5931111121 87.25", "WpV"], "FinalCoverage": [24, 5, 20, 4, 80, "12,", "16,", "21-23,", "11->12,", "15->16,", "20->21,", "24->exit"], "FinalSolution": ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25", "5931111121 87.25", "WpV"], "StartTime": 1552291105.22152, "FoundSolution": true, "NumProbesMade": 22, "InputHistory": [["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50"], ["5931111121 87.25 5932222221 77.00 5933333321"], ["5931111121 87.25 5932222221 77.00"], ["5931111121 87.25 5932222221"], ["5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25", "5931111121 87.25"]]}, {"EndTime": 1552291111.6732736, "FinalMinimizedSolution": [], "FinalCoverage": [24, 12, 20, 5, 39, "6-7,", "10-12,", "14-16,", "20-23,", "4->6,", "9->10,", "13->14,", "18->20,", "24->exit"], "FinalSolution": ["5931111121", "87.25", "5932222221", "77.00", "5933333321", "82.50", "5934444421"], "StartTime": 1552291110.0592787, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50"], ["5931111121 87.25 5932222221 77.00 5933333321"], ["5931111121 87.25 5932222221 77.00"], ["5931111121 87.25 5932222221"], ["5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 -1 5935555521 66.00"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 -1 5935555521"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 -1"]]}, {"EndTime": 1552291112.4079208, "FinalMinimizedSolution": [], "FinalCoverage": [24, 12, 20, 5, 39, "6-7,", "10-12,", "14-16,", "20-23,", "4->6,", "9->10,", "13->14,", "18->20,", "24->exit"], "FinalSolution": [""], "StartTime": 1552291111.673668, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50"], ["5931111121 87.25 5932222221 77.00 5933333321"], ["5931111121 87.25 5932222221 77.00"], ["5931111121 87.25 5932222221"], ["5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 -1 5935555521 66.00"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 -1 5935555521"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 -1"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"]]}, {"EndTime": 1552291114.5995438, "FinalMinimizedSolution": [], "FinalCoverage": [24, 12, 20, 5, 39, "6-7,", "10-12,", "14-16,", "20-23,", "4->6,", "9->10,", "13->14,", "18->20,", "24->exit"], "FinalSolution": [], "StartTime": 1552291112.4083076, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50"], ["5931111121 87.25 5932222221 77.00 5933333321"], ["5931111121 87.25 5932222221 77.00"], ["5931111121 87.25 5932222221"], ["5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 -1 5935555521 66.00"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 -1 5935555521"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 -1"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 pW4 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00"], ["5931111121 87.25 pW4 77.00 5933333321 82.50 5934444421 69.75 5935555521"], ["5931111121 87.25 pW4 77.00 5933333321 82.50 5934444421 69.75"], ["5931111121 87.25 pW4 77.00 5933333321 82.50 5934444421"], ["5931111121 87.25 pW4 77.00 5933333321 82.50"], ["5931111121 87.25 pW4 77.00 5933333321"], ["5931111121 87.25 pW4 77.00"], ["5931111121 87.25 pW4"]]}, {"EndTime": 1552291117.1343277, "FinalMinimizedSolution": [], "FinalCoverage": [24, 12, 20, 5, 39, "6-7,", "10-12,", "14-16,", "20-23,", "4->6,", "9->10,", "13->14,", "18->20,", "24->exit"], "FinalSolution": ["5931111121", "87.25", "5932222221"], "StartTime": 1552291114.599981, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50"], ["5931111121 87.25 5932222221 77.00 5933333321"], ["5931111121 87.25 5932222221 77.00"], ["5931111121 87.25 5932222221"], ["5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321 82.50"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00 5933333321"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221 77.00"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25 5932222221"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25", "5931111121 87.25", "5931111121 87.25", "5931111121 87.25"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 -1 5935555521 66.00"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 -1 5935555521"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 -1"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 pW4 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00"], ["5931111121 87.25 pW4 77.00 5933333321 82.50 5934444421 69.75 5935555521"], ["5931111121 87.25 pW4 77.00 5933333321 82.50 5934444421 69.75"], ["5931111121 87.25 pW4 77.00 5933333321 82.50 5934444421"], ["5931111121 87.25 pW4 77.00 5933333321 82.50"], ["5931111121 87.25 pW4 77.00 5933333321"], ["5931111121 87.25 pW4 77.00"], ["5931111121 87.25 pW4"], ["5931111121 87.25 5932222221 77.00 5933333321 82.50 5934444421 69.75 5935555521 66.00 5934444421"], ["5931111121 87.25 5932222221 me gusta comer,8 5933333321 82.50 5934444421 69.75 5935555521 66.00"], ["5931111121 87.25 5932222221 me gusta comer,8 5933333321 82.50 5934444421 69.75 5935555521"], ["5931111121 87.25 5932222221 me gusta comer,8 5933333321 82.50 5934444421 69.75"], ["5931111121 87.25 5932222221 me gusta comer,8 5933333321 82.50 5934444421"], ["5931111121 87.25 5932222221 me gusta comer,8 5933333321 82.50"], ["5931111121 87.25 5932222221 me gusta comer,8 5933333321"], ["5931111121 87.25 5932222221 me gusta comer,8"], ["5931111121 87.25 5932222221 me gusta"], ["5931111121 87.25 5932222221 me"]]}]], [{"CorrectInputs": [[["8", "5", "9"], 1525567021]], "UniqueId": "7bd86083-1174-4c17-9d30-7f61b436fb43_0", "CoverageInfo": [8, 7, 2, 0, 10, "2-9"], "TimeStamp": 1525566839, "BadInput": ["6.1,7.2,8.3"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    f,l,t = float(input()),float(input()),float(input())\nValueError: could not convert string to float: '6.1,7.2,8.3'\n", "ip": "191.53.162.207"}, [{"EndTime": 1552360383.632222, "FinalMinimizedSolution": ["5.3", "5.3", "7.10"], "FinalCoverage": [8, 1, 2, 1, 80, "9,", "3->9"], "FinalSolution": ["5.3", "5.3", "7.10"], "StartTime": 1552360382.1935518, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["6.1,7.2,8.3"], ["5.3"], ["5.3", "5.3"], ["5.3", "5.3", "J3U"]]}, {"EndTime": 1552360385.0708115, "FinalMinimizedSolution": ["10.0", "10.0", "8.2"], "FinalCoverage": [8, 1, 2, 1, 80, "9,", "3->9"], "FinalSolution": ["10.0", "10.0", "8.2"], "StartTime": 1552360383.632422, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["6.1,7.2,8.3"], ["5.3"], ["5.3", "5.3"], ["5.3", "5.3", "J3U"], ["6.1,7.2,8.3"], ["10.0"], ["10.0", "10.0"], ["10.0", "10.0", "dyL"]]}, {"EndTime": 1552360386.7024333, "FinalMinimizedSolution": ["8.5", "9.6", "2.0"], "FinalCoverage": [8, 1, 2, 1, 80, "9,", "3->9"], "FinalSolution": ["8.5", "9.6", "2.0"], "StartTime": 1552360385.0710769, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["6.1,7.2,8.3"], ["5.3"], ["5.3", "5.3"], ["5.3", "5.3", "J3U"], ["6.1,7.2,8.3"], ["10.0"], ["10.0", "10.0"], ["10.0", "10.0", "dyL"], ["6.1,7.2,8.3"], ["8.5"], ["8.5", "V67"], ["8.5", "9.6"], ["8.5", "9.6", "6.1,7.2,8.3"]]}, {"EndTime": 1552360388.1422477, "FinalMinimizedSolution": ["0.4", "2.0", "2.0"], "FinalCoverage": [8, 1, 2, 1, 80, "9,", "3->9"], "FinalSolution": ["0.4", "2.0", "2.0"], "StartTime": 1552360386.702703, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["6.1,7.2,8.3"], ["5.3"], ["5.3", "5.3"], ["5.3", "5.3", "J3U"], ["6.1,7.2,8.3"], ["10.0"], ["10.0", "10.0"], ["10.0", "10.0", "dyL"], ["6.1,7.2,8.3"], ["8.5"], ["8.5", "V67"], ["8.5", "9.6"], ["8.5", "9.6", "6.1,7.2,8.3"], ["6.1,7.2,8.3"], ["0.4"], ["0.4", "6.1,7.2,8.3"], ["0.4", "2.0"]]}, {"EndTime": 1552360389.7701166, "FinalMinimizedSolution": ["0.1", "0.3", "2.9"], "FinalCoverage": [8, 4, 2, 1, 50, "4-7,", "3->4"], "FinalSolution": ["0.1", "0.3", "2.9"], "StartTime": 1552360388.1425457, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["6.1,7.2,8.3"], ["5.3"], ["5.3", "5.3"], ["5.3", "5.3", "J3U"], ["6.1,7.2,8.3"], ["10.0"], ["10.0", "10.0"], ["10.0", "10.0", "dyL"], ["6.1,7.2,8.3"], ["8.5"], ["8.5", "V67"], ["8.5", "9.6"], ["8.5", "9.6", "6.1,7.2,8.3"], ["6.1,7.2,8.3"], ["0.4"], ["0.4", "6.1,7.2,8.3"], ["0.4", "2.0"], ["6.1,7.2,8.3"], ["0.1"], ["0.1", "R7K"], ["0.1", "0.3"], ["0.1", "0.3", "6.1,7.2,8.3"]]}]], [{"CorrectInputs": [[["7", "1 4 8 9 1 2 5"], 1537505643], [["6", "1 2 2 2 2 6"], 1537505730]], "UniqueId": "055dba6e-7819-4dda-b63f-526cc92bf76c_0", "CoverageInfo": [42, 25, 26, 3, 32, "13,", "17,", "23-45,", "10->13,", "14->17,", "18->23"], "TimeStamp": 1537505573, "BadInput": ["12", "1 4 3 7 8 2 2"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 19, in <module>\n    if u[i] != u[i - 1] and u[i] != u[i + 1]:\nIndexError: list index out of range\n", "ip": "94.25.228.53"}, [{"EndTime": 1552269896.171581, "FinalMinimizedSolution": ["0", "3 3 3"], "FinalCoverage": [42, 23, 26, 5, 35, "11,", "15,", "19-22,", "24-36,", "40-44,", "10->11,", "14->15,", "18->19,", "23->24,", "39->40"], "FinalSolution": ["0", "3 3 3", "2", "12"], "StartTime": 1552269892.7439039, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["12", "1 4 3 7 8 2 2"], ["12", ""], ["12", " B"], ["12", " -1"], ["12", "1 4 3 7 8 2 2 -1"], ["1 4 3 7 8 2 2 -1"], ["7"], ["7", "A"], ["7", "1"], ["7 B"], ["2"], ["2", "12"], ["3 4 5", "2", "12"], ["0", "2", "12"]]}, {"EndTime": 1552269900.2979858, "FinalMinimizedSolution": ["1", "5 0 3"], "FinalCoverage": [42, 21, 26, 6, 43, "13,", "17,", "19-22,", "24-36,", "41-42,", "44,", "10->13,", "14->17,", "18->19,", "23->24,", "40->41,", "43->44"], "FinalSolution": ["1", "5 0 3", "9"], "StartTime": 1552269896.171898, "FoundSolution": true, "NumProbesMade": 18, "InputHistory": [["12", "1 4 3 7 8 2 2"], ["12", ""], ["12", " B"], ["12", " -1"], ["12", "1 4 3 7 8 2 2 -1"], ["1 4 3 7 8 2 2 -1"], ["7"], ["7", "A"], ["7", "1"], ["7 B"], ["2"], ["2", "12"], ["3 4 5", "2", "12"], ["0", "2", "12"], ["12", "1 4 3 7 8 2 2"], ["wGh", "12", "1 4 3 7 8 2 2"], ["3", "12", "1 4 3 7 8 2 2"], ["3", "12", "1 4 3 1 4 3 7 8 2 2 8 2 2"], ["3 IsN", "12", "1 4 3 1 4 3 7 8 2 2 8 2 2"], ["2", "12", "1 4 3 1 4 3 7 8 2 2 8 2 2"], [], ["10"], ["10", "12"], ["10 M6A", "12"], ["A"], ["1"], ["1", "kSO"], ["1", "9"], ["1", "me gusta comer,8", "9"], ["1", "me gusta co7r,8", "9"], ["1", "5 gusta co7r,8", "9"], ["1", "5 0 co7r,8", "9"]]}, {"EndTime": 1552269906.270111, "FinalMinimizedSolution": ["0", "1 4 3 7 8 2 2"], "FinalCoverage": [42, 23, 26, 5, 35, "13,", "17,", "19-22,", "24-36,", "40-44,", "10->13,", "14->17,", "18->19,", "23->24,", "39->40"], "FinalSolution": ["0", "1 4 3 7 8 2 2"], "StartTime": 1552269900.2984595, "FoundSolution": true, "NumProbesMade": 29, "InputHistory": [["12", "1 4 3 7 8 2 2"], ["12", ""], ["12", " B"], ["12", " -1"], ["12", "1 4 3 7 8 2 2 -1"], ["1 4 3 7 8 2 2 -1"], ["7"], ["7", "A"], ["7", "1"], ["7 B"], ["2"], ["2", "12"], ["3 4 5", "2", "12"], ["0", "2", "12"], ["12", "1 4 3 7 8 2 2"], ["wGh", "12", "1 4 3 7 8 2 2"], ["3", "12", "1 4 3 7 8 2 2"], ["3", "12", "1 4 3 1 4 3 7 8 2 2 8 2 2"], ["3 IsN", "12", "1 4 3 1 4 3 7 8 2 2 8 2 2"], ["2", "12", "1 4 3 1 4 3 7 8 2 2 8 2 2"], [], ["10"], ["10", "12"], ["10 M6A", "12"], ["A"], ["1"], ["1", "kSO"], ["1", "9"], ["1", "me gusta comer,8", "9"], ["1", "me gusta co7r,8", "9"], ["1", "5 gusta co7r,8", "9"], ["1", "5 0 co7r,8", "9"], ["12", "1 4 3 7 8 2 2"], ["1 4 3 7 8 2 2"], ["9"], ["9", "12"], ["9", "c3,d1,hA,c5,sK,hJ", "12"], ["9", "4", "12"], ["aaaabbcaa", "9", "4", "12"], ["2", "9", "4", "12"], ["2", "9", "12", "4", "12"], ["2", "9", "5", "12", "4", "12"], ["2", "9", "5", "12", "12"], ["2", "PRI", "9", "5", "12", "12"], ["2", "3", "9", "5", "12", "12"], ["2", "3", "9", "20.36", "5", "12", "12"], ["2", "3", "1", "9", "20.36", "5", "12", "12"], ["2", "3", "1", "9", "20.36", "5", "12 6OK", "12"], ["B"], ["1 4 3 7 8 2 2", "9"], ["-1", "9"], ["BVD", "-1", "9"], ["-1", "-1", "9"], ["-1", "34", "-1", "9"], ["-1", "34", "-1", "9 lGo"], ["B", "-1", "34", "-1", "9 lGo"], ["0", "-1", "34", "-1", "9 lGo"], ["632"], ["632", "632"], ["632 B"], ["0"]]}, {"EndTime": 1552269907.1447413, "FinalMinimizedSolution": ["12", "1 4 3 7 1 4 3 7 8 2 2 2 2"], "FinalCoverage": [42, 6, 26, 8, 79, "11,", "17,", "20,", "35-36,", "44,", "10->11,", "14->17,", "19->20,", "23->37,", "24->32,", "32->34,", "34->35,", "43->44"], "FinalSolution": ["12", "1 4 3 7 1 4 3 7 8 2 2 2 2"], "StartTime": 1552269906.2709084, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["12", "1 4 3 7 8 2 2"], ["12", ""], ["12", " B"], ["12", " -1"], ["12", "1 4 3 7 8 2 2 -1"], ["1 4 3 7 8 2 2 -1"], ["7"], ["7", "A"], ["7", "1"], ["7 B"], ["2"], ["2", "12"], ["3 4 5", "2", "12"], ["0", "2", "12"], ["12", "1 4 3 7 8 2 2"], ["wGh", "12", "1 4 3 7 8 2 2"], ["3", "12", "1 4 3 7 8 2 2"], ["3", "12", "1 4 3 1 4 3 7 8 2 2 8 2 2"], ["3 IsN", "12", "1 4 3 1 4 3 7 8 2 2 8 2 2"], ["2", "12", "1 4 3 1 4 3 7 8 2 2 8 2 2"], [], ["10"], ["10", "12"], ["10 M6A", "12"], ["A"], ["1"], ["1", "kSO"], ["1", "9"], ["1", "me gusta comer,8", "9"], ["1", "me gusta co7r,8", "9"], ["1", "5 gusta co7r,8", "9"], ["1", "5 0 co7r,8", "9"], ["12", "1 4 3 7 8 2 2"], ["1 4 3 7 8 2 2"], ["9"], ["9", "12"], ["9", "c3,d1,hA,c5,sK,hJ", "12"], ["9", "4", "12"], ["aaaabbcaa", "9", "4", "12"], ["2", "9", "4", "12"], ["2", "9", "12", "4", "12"], ["2", "9", "5", "12", "4", "12"], ["2", "9", "5", "12", "12"], ["2", "PRI", "9", "5", "12", "12"], ["2", "3", "9", "5", "12", "12"], ["2", "3", "9", "20.36", "5", "12", "12"], ["2", "3", "1", "9", "20.36", "5", "12", "12"], ["2", "3", "1", "9", "20.36", "5", "12 6OK", "12"], ["B"], ["1 4 3 7 8 2 2", "9"], ["-1", "9"], ["BVD", "-1", "9"], ["-1", "-1", "9"], ["-1", "34", "-1", "9"], ["-1", "34", "-1", "9 lGo"], ["B", "-1", "34", "-1", "9 lGo"], ["0", "-1", "34", "-1", "9 lGo"], ["632"], ["632", "632"], ["632 B"], ["0"], ["12", "1 4 3 7 8 2 2"]]}, {"EndTime": 1552269915.7013843, "FinalMinimizedSolution": ["6", "1 4 3 7 8 2 2"], "FinalCoverage": [42, 17, 26, 4, 54, "13,", "17,", "24-36,", "41-42,", "10->13,", "14->17,", "23->24,", "40->41"], "FinalSolution": ["6", "1 4 3 7 8 2 2"], "StartTime": 1552269907.1455617, "FoundSolution": true, "NumProbesMade": 44, "InputHistory": [["12", "1 4 3 7 8 2 2"], ["12", ""], ["12", " B"], ["12", " -1"], ["12", "1 4 3 7 8 2 2 -1"], ["1 4 3 7 8 2 2 -1"], ["7"], ["7", "A"], ["7", "1"], ["7 B"], ["2"], ["2", "12"], ["3 4 5", "2", "12"], ["0", "2", "12"], ["12", "1 4 3 7 8 2 2"], ["wGh", "12", "1 4 3 7 8 2 2"], ["3", "12", "1 4 3 7 8 2 2"], ["3", "12", "1 4 3 1 4 3 7 8 2 2 8 2 2"], ["3 IsN", "12", "1 4 3 1 4 3 7 8 2 2 8 2 2"], ["2", "12", "1 4 3 1 4 3 7 8 2 2 8 2 2"], [], ["10"], ["10", "12"], ["10 M6A", "12"], ["A"], ["1"], ["1", "kSO"], ["1", "9"], ["1", "me gusta comer,8", "9"], ["1", "me gusta co7r,8", "9"], ["1", "5 gusta co7r,8", "9"], ["1", "5 0 co7r,8", "9"], ["12", "1 4 3 7 8 2 2"], ["1 4 3 7 8 2 2"], ["9"], ["9", "12"], ["9", "c3,d1,hA,c5,sK,hJ", "12"], ["9", "4", "12"], ["aaaabbcaa", "9", "4", "12"], ["2", "9", "4", "12"], ["2", "9", "12", "4", "12"], ["2", "9", "5", "12", "4", "12"], ["2", "9", "5", "12", "12"], ["2", "PRI", "9", "5", "12", "12"], ["2", "3", "9", "5", "12", "12"], ["2", "3", "9", "20.36", "5", "12", "12"], ["2", "3", "1", "9", "20.36", "5", "12", "12"], ["2", "3", "1", "9", "20.36", "5", "12 6OK", "12"], ["B"], ["1 4 3 7 8 2 2", "9"], ["-1", "9"], ["BVD", "-1", "9"], ["-1", "-1", "9"], ["-1", "34", "-1", "9"], ["-1", "34", "-1", "9 lGo"], ["B", "-1", "34", "-1", "9 lGo"], ["0", "-1", "34", "-1", "9 lGo"], ["632"], ["632", "632"], ["632 B"], ["0"], ["12", "1 4 3 7 8 2 2"], ["12", "1 4 3 7 8 2 2"], ["1", "B"], ["1", "8"], ["B", "1", "8"], ["4", "1", "8"], ["B", "A"], ["2", "A"], ["2", "3"], ["2", "B", "3"], ["2", "1", "3"], ["2", "1", "1", "3"], ["2", "B", "1", "1", "3"], ["2", "5", "1", "1", "3"], ["2", "5", "1", "1", "3 C4Y"], ["20.6", "B"], ["3", "B"], ["3", "2"], ["3", "2 M1E"], ["3", "2 1"], ["A", "3", "2 1"], ["10", "3", "2 1"], ["B", "10", "3", "2 1"], ["6", "10", "3", "2 1"], ["1 4 3 7 8 2 2", "6", "10", "3", "2 1"], ["6", "6", "10", "3", "2 1"], ["6", "6", "10", "3", "B 1"], ["6", "A", "6", "10", "3", "B 1"], ["6", "1", "6", "10", "3", "B 1"], ["6", "1", "6", "6", "10", "3", "B 1"], ["6", "abcds", "1", "6", "6", "10", "3", "B 1"], ["6", "6", "1", "6", "6", "10", "3", "B 1"], ["6", "6", "1", "6", "6", "10 0rG", "3", "B 1"], ["B 7OM", "A"], ["5", "A"], ["5", "5"], ["0Dw", "5", "5"], ["7", "5", "5"], ["B", "7", "5", "5"], ["6", "7", "5", "5"], ["6", "7", "1 4 3 7 8 2 2", "5", "5"], ["6", "7 B", "1 4 3 7 8 2 2", "5", "5"], ["6", "7 3", "1 4 3 7 8 2 2", "5", "5"], ["XUs"], ["6"]]}]], [{"CorrectInputs": [[["1500.45"], 1539038373]], "UniqueId": "dad9eb3c-2df2-4bdb-ad4d-85f12fa61f7e_0", "CoverageInfo": [4, 2, 0, 0, 50, "6-7"], "TimeStamp": 1539038231, "BadInput": ["1500,35"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 5, in <module>\n    salario=float(input())\nValueError: could not convert string to float: '1500,35'\n", "ip": "177.205.156.102"}, [{"EndTime": 1552319399.4766183, "FinalMinimizedSolution": ["4.3"], "FinalCoverage": null, "FinalSolution": ["4.3"], "StartTime": 1552319399.2212346, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1500,35"]]}, {"EndTime": 1552319400.3435452, "FinalMinimizedSolution": ["10.1"], "FinalCoverage": [4, 0, 0, 0, 100], "FinalSolution": ["10.1"], "StartTime": 1552319399.4767761, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1500,35"], ["1500,35"]]}, {"EndTime": 1552319401.2104292, "FinalMinimizedSolution": ["9.8"], "FinalCoverage": [4, 0, 0, 0, 100], "FinalSolution": ["9.8"], "StartTime": 1552319400.343724, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1500,35"], ["1500,35"], ["1500,35"]]}, {"EndTime": 1552319402.0766797, "FinalMinimizedSolution": ["9.1"], "FinalCoverage": [4, 0, 0, 0, 100], "FinalSolution": ["9.1"], "StartTime": 1552319401.2106104, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1500,35"], ["1500,35"], ["1500,35"], ["1500,35"]]}, {"EndTime": 1552319402.3315473, "FinalMinimizedSolution": ["1.9"], "FinalCoverage": null, "FinalSolution": ["1.9"], "StartTime": 1552319402.0768619, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1500,35"], ["1500,35"], ["1500,35"], ["1500,35"], ["1500,35"]]}]], [{"CorrectInputs": [[["4,4"], 1544093759]], "UniqueId": "8fced062-90cb-46b3-87b6-9443067a5e33_0", "CoverageInfo": [100, 53, 56, 2, 43, "31-43,", "52,", "70-76,", "80-105,", "108-122,", "136-145,", "51->52,", "134->exit"], "TimeStamp": 1544093691, "BadInput": ["4 5"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 148, in <module>\n    main() \n  File \"temp2018.py\", line 135, in main\n    r,c = input(\"Select a cell (row,column) \").split(',')\nValueError: not enough values to unpack (expected 2, got 1)\n", "ip": "174.91.108.226"}, [{"EndTime": 1552362973.4188225, "FinalMinimizedSolution": ["3,3"], "FinalCoverage": [100, 23, 56, 15, 74, "52,", "71,", "74,", "83,", "86,", "89,", "92,", "95,", "98,", "111-112,", "115-122,", "138-141,", "51->52,", "70->71,", "73->74,", "82->83,", "85->86,", "88->89,", "91->92,", "94->95,", "97->98,", "99->102,", "102->105,", "108->111,", "114->115,", "134->exit,", "137->138"], "FinalSolution": ["3,3"], "StartTime": 1552362972.0294857, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["4 5"], ["4 5,4 5"], ["4 5,3"]]}, {"EndTime": 1552362975.0865057, "FinalMinimizedSolution": ["1,4"], "FinalCoverage": [100, 18, 56, 16, 78, "52,", "71,", "76,", "83,", "86,", "95,", "98,", "103,", "115-122,", "144-145,", "51->52,", "70->71,", "73->76,", "82->83,", "85->86,", "88->91,", "91->94,", "94->95,", "97->98,", "99->102,", "102->103,", "108->114,", "111->114,", "114->115,", "134->exit,", "137->144"], "FinalSolution": ["1,4"], "StartTime": 1552362973.419023, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["4 5"], ["4 5,4 5"], ["4 5,3"], ["4 5"], ["3.5,4 5"], ["7,4 5"], ["7,4"], ["x,4"]]}, {"EndTime": 1552362979.0464191, "FinalMinimizedSolution": ["4,4"], "FinalCoverage": [100, 19, 56, 16, 78, "52,", "71,", "76,", "83,", "86,", "89,", "92,", "95,", "100,", "115-122,", "144-145,", "51->52,", "70->71,", "73->76,", "82->83,", "85->86,", "88->89,", "91->92,", "94->95,", "97->99,", "99->100,", "102->105,", "108->114,", "111->114,", "114->115,", "134->exit,", "137->144"], "FinalSolution": ["4,4"], "StartTime": 1552362975.086751, "FoundSolution": true, "NumProbesMade": 17, "InputHistory": [["4 5"], ["4 5,4 5"], ["4 5,3"], ["4 5"], ["3.5,4 5"], ["7,4 5"], ["7,4"], ["x,4"], ["4 5"], ["4 5,sssdddaaasssddaaf"], ["4,sssdddaaasssddaaf"], ["4,6"], ["kiV,6"], ["4", "6"], ["4", "6,6"], ["4", "6,6,6"], ["4", "6,6,6,6"], ["4", "6,6,6,6,6"], ["4", "6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6,6,6,6,6"], ["4"]]}, {"EndTime": 1552362981.9842203, "FinalMinimizedSolution": ["4,0", "4,0", "4,0", "4,0", "4,0", "4,0", "4,0", "4,0", "4,0"], "FinalCoverage": [100, 21, 56, 15, 76, "52,", "71,", "74,", "89,", "95,", "100,", "103,", "111-112,", "115-122,", "138-141,", "51->52,", "70->71,", "73->74,", "82->85,", "85->88,", "88->89,", "91->94,", "94->95,", "97->99,", "99->100,", "102->103,", "108->111,", "114->115,", "134->exit,", "137->138"], "FinalSolution": ["4,0", "4,0", "4,0", "4,0", "4,0", "4,0", "4,0", "4,0", "4,0"], "StartTime": 1552362979.0468168, "FoundSolution": true, "NumProbesMade": 11, "InputHistory": [["4 5"], ["4 5,4 5"], ["4 5,3"], ["4 5"], ["3.5,4 5"], ["7,4 5"], ["7,4"], ["x,4"], ["4 5"], ["4 5,sssdddaaasssddaaf"], ["4,sssdddaaasssddaaf"], ["4,6"], ["kiV,6"], ["4", "6"], ["4", "6,6"], ["4", "6,6,6"], ["4", "6,6,6,6"], ["4", "6,6,6,6,6"], ["4", "6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6,6,6,6,6"], ["4"], ["4 5"], ["x,4 5"], ["4,4 5"], ["4,0"], ["4,0", "4,0"], ["4,0", "4,0", "4,0"], ["4,0", "4,0", "4,0", "4,0"], ["4,0", "4,0", "4,0", "4,0", "4,0"], ["4,0", "4,0", "4,0", "4,0", "4,0", "4,0"], ["4,0", "4,0", "4,0", "4,0", "4,0", "4,0", "4,0"], ["4,0", "4,0", "4,0", "4,0", "4,0", "4,0", "4,0", "4,0"]]}, {"EndTime": 1552362990.6231143, "FinalMinimizedSolution": ["0,0"], "FinalCoverage": [100, 23, 56, 15, 74, "52,", "71,", "74,", "83,", "92,", "95,", "98,", "100,", "103,", "111-112,", "115-122,", "138-141,", "51->52,", "70->71,", "73->74,", "82->83,", "85->88,", "88->91,", "91->92,", "94->95,", "97->98,", "99->100,", "102->103,", "108->111,", "114->115,", "134->exit,", "137->138"], "FinalSolution": ["0,0"], "StartTime": 1552362981.9847398, "FoundSolution": true, "NumProbesMade": 42, "InputHistory": [["4 5"], ["4 5,4 5"], ["4 5,3"], ["4 5"], ["3.5,4 5"], ["7,4 5"], ["7,4"], ["x,4"], ["4 5"], ["4 5,sssdddaaasssddaaf"], ["4,sssdddaaasssddaaf"], ["4,6"], ["kiV,6"], ["4", "6"], ["4", "6,6"], ["4", "6,6,6"], ["4", "6,6,6,6"], ["4", "6,6,6,6,6"], ["4", "6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6,6,6,6"], ["4", "6,6,6,6,6,6,6,6,6,6,6"], ["4"], ["4 5"], ["x,4 5"], ["4,4 5"], ["4,0"], ["4,0", "4,0"], ["4,0", "4,0", "4,0"], ["4,0", "4,0", "4,0", "4,0"], ["4,0", "4,0", "4,0", "4,0", "4,0"], ["4,0", "4,0", "4,0", "4,0", "4,0", "4,0"], ["4,0", "4,0", "4,0", "4,0", "4,0", "4,0", "4,0"], ["4,0", "4,0", "4,0", "4,0", "4,0", "4,0", "4,0", "4,0"], ["4 5"], ["|,4 5"], ["6,4 5"], ["6,4"], ["6", "4"], ["6", "4,4"], ["6", "4,4,4"], ["6", "4,4,4,4"], ["6", "4,4,4,4,4"], ["6", "4,4,4,4,4,4"], ["6", "4,4,4,4,4,4,4"], ["6", "4,4,4,4,4,4,4,4"], ["6", "4,4,4,4,4,4,4,4,4"], ["6", "4,4,4,4,4,4,4,4,4,4"], ["6", "4,4,4,4,4,4,4,4,4,4,4"], ["6"], ["6,6"], ["6", "6"], ["6", "6,6"], ["6", "6,6,6"], ["6", "6,6,6,6"], ["6", "6,6,6,6,6"], ["6", "6,6,6,6,6,6"], ["6", "6,6,6,6,6,6,6"], ["6", "6,6,6,6,6,6,6,6"], ["6", "6,6,6,6,6,6,6,6,6"], ["6", "6,6,6,6,6,6,6,6,6,6"], ["6", "6,6,6,6,6,6,6,6,6,6,6"], ["1 1 1", "6"], ["1 1 1", "6,6"], ["1 1 1", "6,6,6"], ["1 1 1", "6,6,6,6"], ["1 1 1", "6,6,6,6,6"], ["1 1 1", "6,6,6,6,6,6"], ["1 1 1", "6,6,6,6,6,6,6"], ["1 1 1", "6,6,6,6,6,6,6,6"], ["1 1 1", "6,6,6,6,6,6,6,6,6"], ["1 1 1", "6,6,6,6,6,6,6,6,6,6"], ["1 1 1", "6,6,6,6,6,6,6,6,6,6,6"], ["1 1 1"], ["1 1 1,1 1 1"], ["1 1 1,0"]]}]], [{"CorrectInputs": [[["MESSAGE 3"], 1538185350]], "UniqueId": "740b5cd2-a3a2-4e8b-f3fb-175d0ec747fd_0", "CoverageInfo": [9, 2, 4, 2, 69, "8-9,", "4->9,", "6->8"], "TimeStamp": 1538181962, "BadInput": ["message 3"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 6, in <module>\n    while(message[i]!=c[j]):\nIndexError: string index out of range\n", "ip": "58.9.17.15"}, [{"EndTime": 1552359213.69338, "FinalMinimizedSolution": ["ABCDEFGHIJKLMNOPQRSTUVWXYZ 8"], "FinalCoverage": [9, 0, 4, 0, 100], "FinalSolution": ["ABCDEFGHIJKLMNOPQRSTUVWXYZ 8"], "StartTime": 1552359206.0330372, "FoundSolution": true, "NumProbesMade": 37, "InputHistory": [["message 3"], ["message", "3"], ["message", "3 3"], ["message", "3 3 3"], ["message", "3 3 3 3"], ["message", "3 3 3 3 3"], ["message", "3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3 3 3"], ["message"], ["message message"], [""], [" "], [" ux7"], ["ux7 ux7"], ["message 3", ""], ["message -", ""], ["message ", ""], ["message ", " "], ["2,3 ", " "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", " "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", " 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ"]]}, {"InputHistory": [["message 3"], ["message", "3"], ["message", "3 3"], ["message", "3 3 3"], ["message", "3 3 3 3"], ["message", "3 3 3 3 3"], ["message", "3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3 3 3"], ["message"], ["message message"], [""], [" "], [" ux7"], ["ux7 ux7"], ["message 3", ""], ["message -", ""], ["message ", ""], ["message ", " "], ["2,3 ", " "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", " "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", " 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["message 3"], ["message 23"], ["message", "23"], ["message", "23 23"], ["message", "23 23 23"], ["message", "23 23 23 23"], ["message", "23 23 23 23 23"], ["message", "23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23 23 23 23"], [], ["iCU ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["iCU ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["iCU Tay ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["iCU Tay"], ["{ Tay"], ["{ { Tay"], ["{ {"], ["{ ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["rOh ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["8 ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["message 3", "qXc", ""], ["message", "3", "qXc", ""], ["message", "3", "qXc", " "], ["message", "3", "qXc", "200 correct "], ["message", "3", "qXc", "200 correct correct"], ["message", "3", "qXc", "200 correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct correct correct correct"], ["message", "3", "qXc"], ["message", "3", "qXc qXc"], ["message", "3", "qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc qXc qXc qXc"], ["W94", "message", "3"], ["W94", "message", "3 3"], ["W94", "message", "3 3 3"], ["W94", "message", "3 3 3 3"], ["W94", "message", "3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3 3 3 3"], ["W94", "message"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552359225.0406973, "StartTime": 1552359213.6938357}, {"EndTime": 1552359227.0385888, "FinalMinimizedSolution": ["ABCDEFGHIJKLMNOPQRSTUVWXYZ 9"], "FinalCoverage": [9, 0, 4, 0, 100], "FinalSolution": ["ABCDEFGHIJKLMNOPQRSTUVWXYZ 9"], "StartTime": 1552359225.0416212, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["message 3"], ["message", "3"], ["message", "3 3"], ["message", "3 3 3"], ["message", "3 3 3 3"], ["message", "3 3 3 3 3"], ["message", "3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3 3 3"], ["message"], ["message message"], [""], [" "], [" ux7"], ["ux7 ux7"], ["message 3", ""], ["message -", ""], ["message ", ""], ["message ", " "], ["2,3 ", " "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", " "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", " 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["message 3"], ["message 23"], ["message", "23"], ["message", "23 23"], ["message", "23 23 23"], ["message", "23 23 23 23"], ["message", "23 23 23 23 23"], ["message", "23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23 23 23 23"], [], ["iCU ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["iCU ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["iCU Tay ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["iCU Tay"], ["{ Tay"], ["{ { Tay"], ["{ {"], ["{ ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["rOh ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["8 ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["message 3", "qXc", ""], ["message", "3", "qXc", ""], ["message", "3", "qXc", " "], ["message", "3", "qXc", "200 correct "], ["message", "3", "qXc", "200 correct correct"], ["message", "3", "qXc", "200 correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct correct correct correct"], ["message", "3", "qXc"], ["message", "3", "qXc qXc"], ["message", "3", "qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc qXc qXc qXc"], ["W94", "message", "3"], ["W94", "message", "3 3"], ["W94", "message", "3 3 3"], ["W94", "message", "3 3 3 3"], ["W94", "message", "3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3 3 3 3"], ["W94", "message"], ["message 3"], ["message 3ye"], ["message 9Su"], [" fQ3"], ["fQ3 fQ3"], ["fQ3 fQ3 fQ3"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ fQ3"]]}, {"EndTime": 1552359228.8513153, "FinalMinimizedSolution": ["ABCDEFGHIJKLMNOPQRSTUVWXYZ 3"], "FinalCoverage": [9, 0, 4, 0, 100], "FinalSolution": ["ABCDEFGHIJKLMNOPQRSTUVWXYZ 3"], "StartTime": 1552359227.039586, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["message 3"], ["message", "3"], ["message", "3 3"], ["message", "3 3 3"], ["message", "3 3 3 3"], ["message", "3 3 3 3 3"], ["message", "3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3 3 3"], ["message"], ["message message"], [""], [" "], [" ux7"], ["ux7 ux7"], ["message 3", ""], ["message -", ""], ["message ", ""], ["message ", " "], ["2,3 ", " "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", " "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", " 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["message 3"], ["message 23"], ["message", "23"], ["message", "23 23"], ["message", "23 23 23"], ["message", "23 23 23 23"], ["message", "23 23 23 23 23"], ["message", "23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23 23 23 23"], [], ["iCU ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["iCU ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["iCU Tay ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["iCU Tay"], ["{ Tay"], ["{ { Tay"], ["{ {"], ["{ ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["rOh ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["8 ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["message 3", "qXc", ""], ["message", "3", "qXc", ""], ["message", "3", "qXc", " "], ["message", "3", "qXc", "200 correct "], ["message", "3", "qXc", "200 correct correct"], ["message", "3", "qXc", "200 correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct correct correct correct"], ["message", "3", "qXc"], ["message", "3", "qXc qXc"], ["message", "3", "qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc qXc qXc qXc"], ["W94", "message", "3"], ["W94", "message", "3 3"], ["W94", "message", "3 3 3"], ["W94", "message", "3 3 3 3"], ["W94", "message", "3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3 3 3 3"], ["W94", "message"], ["message 3"], ["message 3ye"], ["message 9Su"], [" fQ3"], ["fQ3 fQ3"], ["fQ3 fQ3 fQ3"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ fQ3"], ["message 3"], ["4100 3"], ["1 3"], [" ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["message 3 ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["X0 3"]]}, {"EndTime": 1552359236.142441, "FinalMinimizedSolution": ["ABCDEFGHIJKLMNOPQRSTUVWXYZ 6"], "FinalCoverage": [9, 0, 4, 0, 100], "FinalSolution": ["ABCDEFGHIJKLMNOPQRSTUVWXYZ 6"], "StartTime": 1552359228.8523524, "FoundSolution": true, "NumProbesMade": 35, "InputHistory": [["message 3"], ["message", "3"], ["message", "3 3"], ["message", "3 3 3"], ["message", "3 3 3 3"], ["message", "3 3 3 3 3"], ["message", "3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3 3"], ["message", "3 3 3 3 3 3 3 3 3 3 3"], ["message"], ["message message"], [""], [" "], [" ux7"], ["ux7 ux7"], ["message 3", ""], ["message -", ""], ["message ", ""], ["message ", " "], ["2,3 ", " "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", " "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", " 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ", "5 5 5 5 5 5 5 5 5 5 5"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ "], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["message 3"], ["message 23"], ["message", "23"], ["message", "23 23"], ["message", "23 23 23"], ["message", "23 23 23 23"], ["message", "23 23 23 23 23"], ["message", "23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23 23 23"], ["message", "23 23 23 23 23 23 23 23 23 23 23"], [], ["iCU ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["iCU ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["iCU Tay ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["iCU Tay"], ["{ Tay"], ["{ { Tay"], ["{ {"], ["{ ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["rOh ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["8 ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["message 3", "qXc", ""], ["message", "3", "qXc", ""], ["message", "3", "qXc", " "], ["message", "3", "qXc", "200 correct "], ["message", "3", "qXc", "200 correct correct"], ["message", "3", "qXc", "200 correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct correct correct"], ["message", "3", "qXc", "200 correct correct correct correct correct correct correct correct correct correct"], ["message", "3", "qXc"], ["message", "3", "qXc qXc"], ["message", "3", "qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc qXc qXc"], ["message", "3", "qXc qXc qXc qXc qXc qXc qXc qXc qXc qXc qXc"], ["W94", "message", "3"], ["W94", "message", "3 3"], ["W94", "message", "3 3 3"], ["W94", "message", "3 3 3 3"], ["W94", "message", "3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3 3 3"], ["W94", "message", "3 3 3 3 3 3 3 3 3 3 3"], ["W94", "message"], ["message 3"], ["message 3ye"], ["message 9Su"], [" fQ3"], ["fQ3 fQ3"], ["fQ3 fQ3 fQ3"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ fQ3"], ["message 3"], ["4100 3"], ["1 3"], [" ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["message 3 ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["X0 3"], ["message 3"], ["message 0"], ["ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["perfecto ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["8W5 ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["message 3 UNIMARC LO OVALLE,GRAN AVENIDA 6555,LA CISTERNA"], ["message 3 UNIMARC LO OVALLE,GRAN AVENIDA 6555,LA"], ["message 3 UNIMARC LO OVALLE,GRAN AVENIDA"], ["message 3 UNIMARC LO OVALLE,GRAN"], ["message 3 UNIMARC LO"], ["message 3 UNIMARC"], ["message 2,5"], ["message", "2,5"], ["message", "2,5 2,5"], ["message", "2,5 2,5 2,5"], ["message", "2,5 2,5 2,5 2,5"], ["message", "2,5 2,5 2,5 2,5 2,5"], ["message", "2,5 2,5 2,5 2,5 2,5 2,5"], ["message", "2,5 2,5 2,5 2,5 2,5 2,5 2,5"], ["message", "2,5 2,5 2,5 2,5 2,5 2,5 2,5 2,5"], ["message", "2,5 2,5 2,5 2,5 2,5 2,5 2,5 2,5 2,5"], ["message", "2,5 2,5 2,5 2,5 2,5 2,5 2,5 2,5 2,5 2,5"], ["messagez8"]]}]], [{"CorrectInputs": [[["1 2 3 4 5 -5 -4 -1"], 1515635728]], "UniqueId": "c9286c39-b902-4b44-8620-9d335e6e33a7_0", "CoverageInfo": [9, 6, 4, 0, 23, "4-10"], "TimeStamp": 1515635697, "BadInput": [".append(lista)"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 3, in <module>\n    lista=list(map(int, input().split()))\nValueError: invalid literal for int() with base 10: '.append(lista)'\n", "ip": "177.38.85.125"}, [{"EndTime": 1552365152.8754516, "FinalMinimizedSolution": [], "FinalCoverage": [9, 1, 4, 1, 85, "8,", "5->8"], "FinalSolution": ["4"], "StartTime": 1552365152.1494503, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [[".append(lista)"]]}, {"EndTime": 1552365153.6059053, "FinalMinimizedSolution": [], "FinalCoverage": [9, 1, 4, 1, 85, "8,", "5->8"], "FinalSolution": ["1"], "StartTime": 1552365152.8756294, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [[".append(lista)"], [".append(lista)"]]}, {"EndTime": 1552365154.3341475, "FinalMinimizedSolution": [], "FinalCoverage": [9, 1, 4, 1, 85, "8,", "5->8"], "FinalSolution": ["6"], "StartTime": 1552365153.6060915, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [[".append(lista)"], [".append(lista)"], [".append(lista)"]]}, {"EndTime": 1552365155.0631545, "FinalMinimizedSolution": [], "FinalCoverage": [9, 1, 4, 1, 85, "8,", "5->8"], "FinalSolution": ["2"], "StartTime": 1552365154.3343418, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [[".append(lista)"], [".append(lista)"], [".append(lista)"], [".append(lista)"]]}, {"EndTime": 1552365155.7395637, "FinalMinimizedSolution": [], "FinalCoverage": [9, 3, 4, 1, 54, "5-8,", "4->5"], "FinalSolution": [], "StartTime": 1552365155.0633588, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [[".append(lista)"], [".append(lista)"], [".append(lista)"], [".append(lista)"], [".append(lista)"]]}]], [{"CorrectInputs": [[["14"], 1545926838]], "UniqueId": "d3142550-3b88-4370-df1f-e1a768d0db93_0", "CoverageInfo": [4, 3, 2, 0, 17, "2-5"], "TimeStamp": 1545926821, "BadInput": ["dded"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    mdp = int(input())\nValueError: invalid literal for int() with base 10: 'dded'\n", "ip": "2a01:cb19:194:9c00:609b:daec:574c:5fc5"}, [{"EndTime": 1552351808.275784, "FinalMinimizedSolution": ["10"], "FinalCoverage": [4, 1, 2, 1, 67, "5,", "2->5"], "FinalSolution": ["10"], "StartTime": 1552351807.413733, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dded"]]}, {"EndTime": 1552351809.1372745, "FinalMinimizedSolution": ["5"], "FinalCoverage": [4, 1, 2, 1, 67, "5,", "2->5"], "FinalSolution": ["5"], "StartTime": 1552351808.2759373, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dded"], ["dded"]]}, {"EndTime": 1552351809.9991817, "FinalMinimizedSolution": ["0"], "FinalCoverage": [4, 1, 2, 1, 67, "5,", "2->5"], "FinalSolution": ["0"], "StartTime": 1552351809.1374445, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dded"], ["dded"], ["dded"]]}, {"EndTime": 1552351811.0528803, "FinalMinimizedSolution": ["9"], "FinalCoverage": [4, 1, 2, 1, 67, "5,", "2->5"], "FinalSolution": ["9"], "StartTime": 1552351809.999355, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["dded"], ["dded"], ["dded"], ["dded"], ["0 e7V"]]}, {"EndTime": 1552351811.9169405, "FinalMinimizedSolution": ["6"], "FinalCoverage": [4, 1, 2, 1, 67, "5,", "2->5"], "FinalSolution": ["6"], "StartTime": 1552351811.05307, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dded"], ["dded"], ["dded"], ["dded"], ["0 e7V"], ["dded"]]}]], [{"CorrectInputs": [[["1 1 5"], 1535146237]], "UniqueId": "b98c41fa-53d0-4d3e-ca1b-4962cd4b4214_0", "CoverageInfo": [17, 14, 12, 0, 10, "7-26"], "TimeStamp": 1535146190, "BadInput": ["1"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 5, in <module>\n    A,B,C = sorted(valores)[::-1]\nValueError: not enough values to unpack (expected 3, got 1)\n", "ip": "200.136.207.220"}, [{"EndTime": 1552276469.0840735, "FinalMinimizedSolution": ["1 1 1"], "FinalCoverage": [17, 5, 12, 6, 62, "10-11,", "14,", "17,", "26,", "9->10,", "13->14,", "16->17,", "19->22,", "22->25,", "25->26"], "FinalSolution": ["1 1 1"], "StartTime": 1552276468.0280297, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1"], ["1 1"]]}, {"EndTime": 1552276470.3255942, "FinalMinimizedSolution": ["10.6 1 1"], "FinalCoverage": [17, 5, 12, 6, 62, "14,", "17,", "20,", "23,", "26,", "9->13,", "13->14,", "16->17,", "19->20,", "22->23,", "25->26"], "FinalSolution": ["10.6 1 1"], "StartTime": 1552276469.0842485, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["1"], ["1 1"], ["1"], ["8wi 1"], ["10.6 1"]]}, {"EndTime": 1552276472.1415873, "FinalMinimizedSolution": ["1.10 1.10 1.10"], "FinalCoverage": [17, 5, 12, 6, 62, "10-11,", "14,", "17,", "26,", "9->10,", "13->14,", "16->17,", "19->22,", "22->25,", "25->26"], "FinalSolution": ["1.10 1.10 1.10"], "StartTime": 1552276470.3257966, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["1"], ["1 1"], ["1"], ["8wi 1"], ["10.6 1"], ["1"], [""], [" "], [" W9G"], [" 1.10"], ["1.10 1.10"]]}, {"EndTime": 1552276473.3815088, "FinalMinimizedSolution": ["5.4 1 1"], "FinalCoverage": [17, 5, 12, 6, 62, "14,", "17,", "20,", "23,", "26,", "9->13,", "13->14,", "16->17,", "19->20,", "22->23,", "25->26"], "FinalSolution": ["5.4 1 1"], "StartTime": 1552276472.1418526, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["1"], ["1 1"], ["1"], ["8wi 1"], ["10.6 1"], ["1"], [""], [" "], [" W9G"], [" 1.10"], ["1.10 1.10"], ["1"], ["HV8 1"], ["5.4 1"]]}, {"EndTime": 1552276476.5621715, "FinalMinimizedSolution": ["3.3 9.2 10.1"], "FinalCoverage": [17, 6, 12, 6, 59, "10-11,", "14,", "20,", "23,", "26,", "9->10,", "13->14,", "16->19,", "19->20,", "22->23,", "25->26"], "FinalSolution": ["3.3 9.2 10.1"], "StartTime": 1552276473.3817847, "FoundSolution": true, "NumProbesMade": 16, "InputHistory": [["1"], ["1 1"], ["1"], ["8wi 1"], ["10.6 1"], ["1"], [""], [" "], [" W9G"], [" 1.10"], ["1.10 1.10"], ["1"], ["HV8 1"], ["5.4 1"], ["1"], ["1", "1"], ["1", "1 1"], ["1", "1 1 1"], ["1", "1 1 1 1"], ["1", "1 1 1 1 1"], ["1", "1 1 1 1 1 1"], ["1", "1 1 1 1 1 1 1"], ["1", "1 1 1 1 1 1 1 1"], ["1", "1 1 1 1 1 1 1 1 1"], ["1", "1 1 1 1 1 1 1 1 1 1"], ["1", "1 1 1 1 1 1 1 1 1 1 1"], [], ["I2j u8m u8m"], ["3.3 u8m u8m"], ["3.3 u8m 10.1"]]}]], [{"CorrectInputs": [[["5"], 1534990266]], "UniqueId": "88cadf8f-ee67-4fc6-d6fc-5e026e35e5de_0", "CoverageInfo": [7, 5, 2, 0, 22, "3-8"], "TimeStamp": 1534990248, "BadInput": ["*"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 2, in <module>\n    k = int(user)\nValueError: invalid literal for int() with base 10: '*'\n", "ip": "103.210.32.252"}, [{"EndTime": 1552359340.8008165, "FinalMinimizedSolution": ["7"], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["7"], "StartTime": 1552359339.9352083, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["*"]]}, {"EndTime": 1552359341.663223, "FinalMinimizedSolution": ["3"], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["3"], "StartTime": 1552359340.8009844, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["*"], ["*"]]}, {"EndTime": 1552359342.5261946, "FinalMinimizedSolution": ["5"], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["5"], "StartTime": 1552359341.6633978, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["*"], ["*"], ["*"]]}, {"EndTime": 1552359343.63052, "FinalMinimizedSolution": ["7"], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["7", "5"], "StartTime": 1552359342.526377, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["*"], ["*"], ["*"], ["*"], ["The five boxing wizards jump quickly.", "5"]]}, {"EndTime": 1552359344.4924166, "FinalMinimizedSolution": ["10"], "FinalCoverage": [7, 3, 2, 1, 56, "6-8,", "5->6"], "FinalSolution": ["10"], "StartTime": 1552359343.6307197, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["*"], ["*"], ["*"], ["*"], ["The five boxing wizards jump quickly.", "5"], ["*"]]}]], [{"CorrectInputs": [[["2", "m", "3"], 1531457876]], "UniqueId": "8a22f5d9-2623-4067-cdc9-42080db7ec84_0", "CoverageInfo": [26, 15, 6, 0, 34, "12-15,", "19-31,", "43"], "TimeStamp": 1531457845, "BadInput": ["m"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 42, in <module>\n    datos()\n  File \"temp2018.py\", line 11, in datos\n    1-osde 2-swiss 3-italiano 4-otros\"\"\"))\nValueError: invalid literal for int() with base 10: 'm'\n", "ip": "2800:810:4a7:a29:d01a:f1f2:bd87:4161"}, [{"EndTime": 1552279424.9359553, "FinalMinimizedSolution": ["8", "2FE", "8"], "FinalCoverage": null, "FinalSolution": ["8", "2FE", "8"], "StartTime": 1552279424.299652, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["m"], ["8"], ["8", "2FE"]]}, {"EndTime": 1552279425.7582073, "FinalMinimizedSolution": ["3", "3", "9"], "FinalCoverage": null, "FinalSolution": ["3", "3", "9"], "StartTime": 1552279424.936098, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["m"], ["8"], ["8", "2FE"], ["m"], ["3"], ["3", "3"], ["3", "3", "obra social"]]}, {"EndTime": 1552279427.192184, "FinalMinimizedSolution": ["5", "5", "5"], "FinalCoverage": [26, 1, 6, 2, 91, "23,", "22->23,", "24->27"], "FinalSolution": ["5", "5", "5"], "StartTime": 1552279425.7583852, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["m"], ["8"], ["8", "2FE"], ["m"], ["3"], ["3", "3"], ["3", "3", "obra social"], ["m"], ["8 QLQ"], ["5"], ["5", "5"]]}, {"EndTime": 1552279428.6237237, "FinalMinimizedSolution": ["4", "5", "1"], "FinalCoverage": [26, 1, 6, 2, 91, "23,", "22->23,", "24->27"], "FinalSolution": ["4", "5", "1"], "StartTime": 1552279427.1924531, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["m"], ["8"], ["8", "2FE"], ["m"], ["3"], ["3", "3"], ["3", "3", "obra social"], ["m"], ["8 QLQ"], ["5"], ["5", "5"], ["m"], ["m", "5"], ["4", "5"], ["4", "5", "m"]]}, {"EndTime": 1552279429.231462, "FinalMinimizedSolution": ["8", "3", "8"], "FinalCoverage": null, "FinalSolution": ["8", "3", "8"], "StartTime": 1552279428.624, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["m"], ["8"], ["8", "2FE"], ["m"], ["3"], ["3", "3"], ["3", "3", "obra social"], ["m"], ["8 QLQ"], ["5"], ["5", "5"], ["m"], ["m", "5"], ["4", "5"], ["4", "5", "m"], ["m"], ["vallon", "3"], ["8", "3"]]}]], [{"CorrectInputs": [[["1 2"], 1536519356]], "UniqueId": "c896a2a1-7b56-40d9-cf8b-1479fcaf9395_0", "CoverageInfo": [5, 2, 2, 1, 57, "2,", "6,", "4->exit"], "TimeStamp": 1536519255, "BadInput": ["2"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 5, in <module>\n    a, b = map(int, input().split())\nValueError: not enough values to unpack (expected 2, got 1)\n", "ip": "106.198.43.147"}, [{"EndTime": 1552342864.715809, "FinalMinimizedSolution": ["2 2"], "FinalCoverage": [5, 0, 2, 1, 86, "4->exit"], "FinalSolution": ["2 2"], "StartTime": 1552342863.8482885, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["2"]]}, {"EndTime": 1552342865.772096, "FinalMinimizedSolution": ["2 7"], "FinalCoverage": [5, 0, 2, 1, 86, "4->exit"], "FinalSolution": ["2 7"], "StartTime": 1552342864.7159693, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["2"], ["2"], ["2 4K5"]]}, {"EndTime": 1552342866.8295276, "FinalMinimizedSolution": ["4 2"], "FinalCoverage": [5, 0, 2, 1, 86, "4->exit"], "FinalSolution": ["4 2"], "StartTime": 1552342865.7722702, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["2"], ["2"], ["2 4K5"], ["2"], ["__main__ 2"]]}, {"EndTime": 1552342867.8870354, "FinalMinimizedSolution": ["2 0"], "FinalCoverage": [5, 0, 2, 1, 86, "4->exit"], "FinalSolution": ["2 0"], "StartTime": 1552342866.8297257, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["2"], ["2"], ["2 4K5"], ["2"], ["__main__ 2"], ["2"], ["2 __main__"]]}, {"EndTime": 1552342868.9455478, "FinalMinimizedSolution": ["2 -1"], "FinalCoverage": [5, 0, 2, 1, 86, "4->exit"], "FinalSolution": ["2 -1"], "StartTime": 1552342867.8872354, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["2"], ["2"], ["2 4K5"], ["2"], ["__main__ 2"], ["2"], ["2 __main__"], ["2"], ["2 123456789098765434567890-987654321234567892"]]}]], [{"CorrectInputs": [[["x", "3"], 1521475163]], "UniqueId": "f374bd98-e33f-4aff-934b-726ad2b399c4_0", "CoverageInfo": [25, 14, 2, 1, 44, "5-7,", "10-11,", "14-15,", "26-33,", "24->30"], "TimeStamp": 1521475088, "BadInput": ["x", "x"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 34, in <module>\n    main()\n  File \"temp2018.py\", line 25, in main\n    vvod = int(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u043e\u0434\u0430: '))\nValueError: invalid literal for int() with base 10: 'x'\n", "ip": "90.154.105.211"}, [{"EndTime": 1552351345.217845, "FinalMinimizedSolution": ["x", "8"], "FinalCoverage": [25, 6, 2, 1, 74, "14-15,", "30-33,", "24->30"], "FinalSolution": ["x", "8"], "StartTime": 1552351344.3471482, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["x", "x"]]}, {"EndTime": 1552351346.0872707, "FinalMinimizedSolution": ["x", "-1"], "FinalCoverage": [25, 6, 2, 1, 74, "14-15,", "30-33,", "24->30"], "FinalSolution": ["x", "-1"], "StartTime": 1552351345.218017, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["x", "x"], ["x", "x"]]}, {"EndTime": 1552351347.5231721, "FinalMinimizedSolution": ["o", "1"], "FinalCoverage": [25, 6, 2, 1, 74, "10-11,", "25-28,", "24->25"], "FinalSolution": ["o", "1"], "StartTime": 1552351346.0874553, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["x", "x"], ["x", "x"], ["x", "x"], [], ["o"], ["o", "x"]]}, {"EndTime": 1552351350.0984137, "FinalMinimizedSolution": ["GVo", "3"], "FinalCoverage": [25, 6, 2, 1, 74, "10-11,", "25-28,", "24->25"], "FinalSolution": ["GVo", "3"], "StartTime": 1552351347.5233753, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["x", "x"], ["x", "x"], ["x", "x"], [], ["o"], ["o", "x"], ["x", "x"], ["x", "x", "-1"], ["x", "10", "-1"], ["8F6"], ["8F6", "x"], ["8F6", "9"], ["x", "8F6", "9"], ["x", "10", "9"], ["GVo"], ["GVo", "GVo"]]}, {"EndTime": 1552351350.9696448, "FinalMinimizedSolution": ["x", "7"], "FinalCoverage": [25, 6, 2, 1, 74, "14-15,", "30-33,", "24->30"], "FinalSolution": ["x", "7"], "StartTime": 1552351350.0987086, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["x", "x"], ["x", "x"], ["x", "x"], [], ["o"], ["o", "x"], ["x", "x"], ["x", "x", "-1"], ["x", "10", "-1"], ["8F6"], ["8F6", "x"], ["8F6", "9"], ["x", "8F6", "9"], ["x", "10", "9"], ["GVo"], ["GVo", "GVo"], ["x", "x"]]}]], [{"CorrectInputs": [[["576.73"], 1533075525]], "UniqueId": "32e80163-4504-475f-e132-b7d156e4e6e6_0", "CoverageInfo": [39, 38, 0, 0, 3, "2-43"], "TimeStamp": 1533075473, "BadInput": ["5.6 48 47 63.3 474 "], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    x = float(input())\nValueError: could not convert string to float: '5.6 48 47 63.3 474 '\n", "ip": "200.17.112.121"}, [{"EndTime": 1552348904.211918, "FinalMinimizedSolution": ["-1.4"], "FinalCoverage": null, "FinalSolution": ["-1.4"], "StartTime": 1552348903.9605207, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5.6 48 47 63.3 474 "]]}, {"EndTime": 1552348905.0844686, "FinalMinimizedSolution": ["6.9"], "FinalCoverage": [39, 0, 0, 0, 100], "FinalSolution": ["6.9"], "StartTime": 1552348904.212051, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5.6 48 47 63.3 474 "], ["5.6 48 47 63.3 474 "]]}, {"EndTime": 1552348905.954572, "FinalMinimizedSolution": ["10.2"], "FinalCoverage": [39, 0, 0, 0, 100], "FinalSolution": ["10.2"], "StartTime": 1552348905.0846415, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5.6 48 47 63.3 474 "], ["5.6 48 47 63.3 474 "], ["5.6 48 47 63.3 474 "]]}, {"EndTime": 1552348906.829616, "FinalMinimizedSolution": ["6.0"], "FinalCoverage": [39, 0, 0, 0, 100], "FinalSolution": ["6.0"], "StartTime": 1552348905.954753, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5.6 48 47 63.3 474 "], ["5.6 48 47 63.3 474 "], ["5.6 48 47 63.3 474 "], ["5.6 48 47 63.3 474 "]]}, {"EndTime": 1552348907.7020166, "FinalMinimizedSolution": ["7.10"], "FinalCoverage": [39, 0, 0, 0, 100], "FinalSolution": ["7.10"], "StartTime": 1552348906.8298001, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["5.6 48 47 63.3 474 "], ["5.6 48 47 63.3 474 "], ["5.6 48 47 63.3 474 "], ["5.6 48 47 63.3 474 "], ["5.6 48 47 63.3 474 "]]}]], [{"CorrectInputs": [[["2"], 1544796467]], "UniqueId": "5b301d85-ed04-473d-f248-55a02f5dd815_0", "CoverageInfo": [10, 5, 4, 1, 43, "4,", "7,", "13-16,", "3->4"], "TimeStamp": 1544796409, "BadInput": ["5"], "ErrorType": "KeyError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    result = is_pell(int(input()))\n  File \"temp2018.py\", line 6, in is_pell\n    ans=2*d[n-1]+d[n-2]\nKeyError: 4\n", "ip": "110.93.199.66"}, [{"EndTime": 1552340559.2775424, "FinalMinimizedSolution": ["2"], "FinalCoverage": [10, 2, 4, 2, 71, "4,", "14,", "3->4,", "13->14"], "FinalSolution": ["2", "10"], "StartTime": 1552340554.1819065, "FoundSolution": true, "NumProbesMade": 23, "InputHistory": [["5"], ["5 0l9"], ["0"], ["3Wx", "0"], ["8", "0"], [], ["9"], ["banana", "9"], ["9", "9"], ["9", "9", "9"], ["9", "3", "9"], ["yWi", "9", "3", "9"], ["9", "9", "3", "9"], ["9", "juan", "9", "9"], ["9 V1n", "juan", "9", "9"], ["6", "juan", "9", "9"], ["6", "9", "9"], ["6", "9", "D", "9"], ["6", "6", "9", "D", "9"], ["Fud"], ["6"], ["cQI"], ["10"]]}, {"EndTime": 1552340563.3737664, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [10, 3, 4, 2, 64, "6-7,", "16,", "3->6,", "13->16"], "FinalSolution": ["-1"], "StartTime": 1552340559.2779021, "FoundSolution": true, "NumProbesMade": 18, "InputHistory": [["5"], ["5 0l9"], ["0"], ["3Wx", "0"], ["8", "0"], [], ["9"], ["banana", "9"], ["9", "9"], ["9", "9", "9"], ["9", "3", "9"], ["yWi", "9", "3", "9"], ["9", "9", "3", "9"], ["9", "juan", "9", "9"], ["9 V1n", "juan", "9", "9"], ["6", "juan", "9", "9"], ["6", "9", "9"], ["6", "9", "D", "9"], ["6", "6", "9", "D", "9"], ["Fud"], ["6"], ["cQI"], ["10"], ["5"], ["get foo a", "5"], ["9", "5"], ["9", "9", "5"], ["5", "9", "9", "5"], ["5", "9 SXS", "9", "5"], ["5", "", "9", "5"], ["a b a a b b n m m v v h i k y k", "5", "", "9", "5"], ["4", "5", "", "9", "5"], ["HOr"], ["5", "10"], ["5", "vmo", "10"], ["5", "5", "vmo", "10"], ["5", "5", "5", "vmo", "10"], ["dNn"], ["7"], ["7", "7"], ["k6c"]]}, {"EndTime": 1552340567.0082052, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [10, 3, 4, 2, 64, "6-7,", "16,", "3->6,", "13->16"], "FinalSolution": ["-1", "6", "-1"], "StartTime": 1552340563.3742983, "FoundSolution": true, "NumProbesMade": 15, "InputHistory": [["5"], ["5 0l9"], ["0"], ["3Wx", "0"], ["8", "0"], [], ["9"], ["banana", "9"], ["9", "9"], ["9", "9", "9"], ["9", "3", "9"], ["yWi", "9", "3", "9"], ["9", "9", "3", "9"], ["9", "juan", "9", "9"], ["9 V1n", "juan", "9", "9"], ["6", "juan", "9", "9"], ["6", "9", "9"], ["6", "9", "D", "9"], ["6", "6", "9", "D", "9"], ["Fud"], ["6"], ["cQI"], ["10"], ["5"], ["get foo a", "5"], ["9", "5"], ["9", "9", "5"], ["5", "9", "9", "5"], ["5", "9 SXS", "9", "5"], ["5", "", "9", "5"], ["a b a a b b n m m v v h i k y k", "5", "", "9", "5"], ["4", "5", "", "9", "5"], ["HOr"], ["5", "10"], ["5", "vmo", "10"], ["5", "5", "vmo", "10"], ["5", "5", "5", "vmo", "10"], ["dNn"], ["7"], ["7", "7"], ["k6c"], ["5"], ["sj2"], ["5", "5"], ["5", "5", "5"], ["5", "1", "5"], ["5", "1"], ["1"], ["PqT", "1"], ["3", "1"], ["1", "3", "1"], ["1", "1", "3", "1"], ["8k0"], ["-1 12-"], ["qH4", "-1"], ["6", "-1"]]}, {"EndTime": 1552340577.451198, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [10, 3, 4, 2, 64, "6-7,", "16,", "3->6,", "13->16"], "FinalSolution": ["-1", "5", "5", "5"], "StartTime": 1552340567.0088644, "FoundSolution": true, "NumProbesMade": 52, "InputHistory": [["5"], ["5 0l9"], ["0"], ["3Wx", "0"], ["8", "0"], [], ["9"], ["banana", "9"], ["9", "9"], ["9", "9", "9"], ["9", "3", "9"], ["yWi", "9", "3", "9"], ["9", "9", "3", "9"], ["9", "juan", "9", "9"], ["9 V1n", "juan", "9", "9"], ["6", "juan", "9", "9"], ["6", "9", "9"], ["6", "9", "D", "9"], ["6", "6", "9", "D", "9"], ["Fud"], ["6"], ["cQI"], ["10"], ["5"], ["get foo a", "5"], ["9", "5"], ["9", "9", "5"], ["5", "9", "9", "5"], ["5", "9 SXS", "9", "5"], ["5", "", "9", "5"], ["a b a a b b n m m v v h i k y k", "5", "", "9", "5"], ["4", "5", "", "9", "5"], ["HOr"], ["5", "10"], ["5", "vmo", "10"], ["5", "5", "vmo", "10"], ["5", "5", "5", "vmo", "10"], ["dNn"], ["7"], ["7", "7"], ["k6c"], ["5"], ["sj2"], ["5", "5"], ["5", "5", "5"], ["5", "1", "5"], ["5", "1"], ["1"], ["PqT", "1"], ["3", "1"], ["1", "3", "1"], ["1", "1", "3", "1"], ["8k0"], ["-1 12-"], ["qH4", "-1"], ["6", "-1"], ["5"], ["5 N48"], ["1", "1"], ["4 8 0 3 4 2 0 3", "1", "1"], ["7", "1", "1"], ["7", "hfG", "1", "1"], ["7", "aaaab", "hfG", "1", "1"], ["r9q"], ["6 LhP"], ["3"], ["5", "3"], ["0", "5", "3"], ["2nZ"], ["dC6"], ["A", "10"], ["5", "10 v4A"], ["5", ""], ["T86", "5", ""], ["7", "5", ""], ["34j"], ["8"], ["Insert 3", "8"], ["6", "8"], ["5.5", "6", "8"], ["6", "6", "8"], ["6", "6", "8 dBi"], ["6", "6", "2 dBi"], ["6", "6", "2", "dBi"], ["6", "6 0G8", "2", "dBi"], ["6", "6 0G8", "2", "yYJ", "dBi"], ["6", "2 0G8", "2", "yYJ", "dBi"], ["6", "2 0G8", "2", "2", "yYJ", "dBi"], ["UNIMARC INDEPENDENCIA,AVDA. EL GUANACO 3100,CONCHALI", "6", "2 0G8", "2", "2", "yYJ", "dBi"], ["9", "6", "2 0G8", "2", "2", "yYJ", "dBi"], ["9", "6", "TRA 0G8", "2", "2", "yYJ", "dBi"], ["9", "INTHEPOPULATION", "6", "TRA 0G8", "2", "2", "yYJ", "dBi"], ["9", "INTHEPOPULATION", "6", "TRA 0G8", "2", "2", "yYJ"], ["9", "INTHEPOPULATION", "6", "TRA", "0G8", "2", "2", "yYJ"], ["9", "INTHEPOPULATION", "6", "INTHEPOPULATION", "TRA", "0G8", "2", "2", "yYJ"], ["9 2X1", "INTHEPOPULATION", "6", "INTHEPOPULATION", "TRA", "0G8", "2", "2", "yYJ"], ["7", "INTHEPOPULATION", "6", "INTHEPOPULATION", "TRA", "0G8", "2", "2", "yYJ"], ["7", "INTHEPOPULATION", "6", "5", "INTHEPOPULATION", "TRA", "0G8", "2", "2", "yYJ"], ["7", "INTHEPOPULATION", "6", "5", "INTHEPOPULATION", "82O", "TRA", "0G8", "2", "2", "yYJ"], ["7", "INTHEPOPULATION", "6", "5", "INTHEPOPULATION", "82O", "TRA", "7", "0G8", "2", "2", "yYJ"], ["NDo"], ["57M", "5"], ["8", "5"], ["8", "5", "5"], ["cnu", "5", "5", "5"], ["9", "5", "5", "5"], ["9", "5", "5", "5", "5"], ["9 Tl8", "5", "5", "5"]]}, {"EndTime": 1552340578.9491441, "FinalMinimizedSolution": ["2"], "FinalCoverage": [10, 2, 4, 2, 71, "4,", "14,", "3->4,", "13->14"], "FinalSolution": ["2", "9"], "StartTime": 1552340577.452426, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["5"], ["5 0l9"], ["0"], ["3Wx", "0"], ["8", "0"], [], ["9"], ["banana", "9"], ["9", "9"], ["9", "9", "9"], ["9", "3", "9"], ["yWi", "9", "3", "9"], ["9", "9", "3", "9"], ["9", "juan", "9", "9"], ["9 V1n", "juan", "9", "9"], ["6", "juan", "9", "9"], ["6", "9", "9"], ["6", "9", "D", "9"], ["6", "6", "9", "D", "9"], ["Fud"], ["6"], ["cQI"], ["10"], ["5"], ["get foo a", "5"], ["9", "5"], ["9", "9", "5"], ["5", "9", "9", "5"], ["5", "9 SXS", "9", "5"], ["5", "", "9", "5"], ["a b a a b b n m m v v h i k y k", "5", "", "9", "5"], ["4", "5", "", "9", "5"], ["HOr"], ["5", "10"], ["5", "vmo", "10"], ["5", "5", "vmo", "10"], ["5", "5", "5", "vmo", "10"], ["dNn"], ["7"], ["7", "7"], ["k6c"], ["5"], ["sj2"], ["5", "5"], ["5", "5", "5"], ["5", "1", "5"], ["5", "1"], ["1"], ["PqT", "1"], ["3", "1"], ["1", "3", "1"], ["1", "1", "3", "1"], ["8k0"], ["-1 12-"], ["qH4", "-1"], ["6", "-1"], ["5"], ["5 N48"], ["1", "1"], ["4 8 0 3 4 2 0 3", "1", "1"], ["7", "1", "1"], ["7", "hfG", "1", "1"], ["7", "aaaab", "hfG", "1", "1"], ["r9q"], ["6 LhP"], ["3"], ["5", "3"], ["0", "5", "3"], ["2nZ"], ["dC6"], ["A", "10"], ["5", "10 v4A"], ["5", ""], ["T86", "5", ""], ["7", "5", ""], ["34j"], ["8"], ["Insert 3", "8"], ["6", "8"], ["5.5", "6", "8"], ["6", "6", "8"], ["6", "6", "8 dBi"], ["6", "6", "2 dBi"], ["6", "6", "2", "dBi"], ["6", "6 0G8", "2", "dBi"], ["6", "6 0G8", "2", "yYJ", "dBi"], ["6", "2 0G8", "2", "yYJ", "dBi"], ["6", "2 0G8", "2", "2", "yYJ", "dBi"], ["UNIMARC INDEPENDENCIA,AVDA. EL GUANACO 3100,CONCHALI", "6", "2 0G8", "2", "2", "yYJ", "dBi"], ["9", "6", "2 0G8", "2", "2", "yYJ", "dBi"], ["9", "6", "TRA 0G8", "2", "2", "yYJ", "dBi"], ["9", "INTHEPOPULATION", "6", "TRA 0G8", "2", "2", "yYJ", "dBi"], ["9", "INTHEPOPULATION", "6", "TRA 0G8", "2", "2", "yYJ"], ["9", "INTHEPOPULATION", "6", "TRA", "0G8", "2", "2", "yYJ"], ["9", "INTHEPOPULATION", "6", "INTHEPOPULATION", "TRA", "0G8", "2", "2", "yYJ"], ["9 2X1", "INTHEPOPULATION", "6", "INTHEPOPULATION", "TRA", "0G8", "2", "2", "yYJ"], ["7", "INTHEPOPULATION", "6", "INTHEPOPULATION", "TRA", "0G8", "2", "2", "yYJ"], ["7", "INTHEPOPULATION", "6", "5", "INTHEPOPULATION", "TRA", "0G8", "2", "2", "yYJ"], ["7", "INTHEPOPULATION", "6", "5", "INTHEPOPULATION", "82O", "TRA", "0G8", "2", "2", "yYJ"], ["7", "INTHEPOPULATION", "6", "5", "INTHEPOPULATION", "82O", "TRA", "7", "0G8", "2", "2", "yYJ"], ["NDo"], ["57M", "5"], ["8", "5"], ["8", "5", "5"], ["cnu", "5", "5", "5"], ["9", "5", "5", "5"], ["9", "5", "5", "5", "5"], ["9 Tl8", "5", "5", "5"], ["5"], ["hk8"], ["0 fQA"], ["F6N", "9"]]}]], [{"CorrectInputs": [[["1", "a"], 1528955923]], "UniqueId": "a874cfbb-884a-4883-c12a-fe75b1b14143_0", "CoverageInfo": [27, 22, 18, 0, 11, "4-25,", "28-30"], "TimeStamp": 1528955899, "BadInput": ["a"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 32, in <module>\n    main()\n  File \"temp2018.py\", line 27, in main\n    n = int(input())\nValueError: invalid literal for int() with base 10: 'a'\n", "ip": "168.194.12.254"}, [{"EndTime": 1552417000.4293628, "FinalMinimizedSolution": ["10", "a", "a", "a", "10", "10", "a", "10", "a", "a", "10"], "FinalCoverage": [27, 5, 18, 3, 73, "13-16,", "19,", "12->13,", "17->22,", "18->19"], "FinalSolution": ["10", "a", "a", "a", "10", "10", "a", "10", "a", "a", "10"], "StartTime": 1552416997.6750398, "FoundSolution": true, "NumProbesMade": 11, "InputHistory": [["a"], ["10"], ["10", "a"], ["10", "a", "a"], ["10", "a", "a", "a"], ["10", "a", "a", "a", "10"], ["10", "a", "a", "a", "10", "10"], ["10", "a", "a", "a", "10", "10", "a"], ["10", "a", "a", "a", "10", "10", "a", "10"], ["10", "a", "a", "a", "10", "10", "a", "10", "a"], ["10", "a", "a", "a", "10", "10", "a", "10", "a", "a"]]}, {"EndTime": 1552417001.2953172, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [27, 21, 18, 1, 16, "4-25,", "29-30,", "28->29"], "FinalSolution": ["-1"], "StartTime": 1552417000.4297311, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["a"], ["10"], ["10", "a"], ["10", "a", "a"], ["10", "a", "a", "a"], ["10", "a", "a", "a", "10"], ["10", "a", "a", "a", "10", "10"], ["10", "a", "a", "a", "10", "10", "a"], ["10", "a", "a", "a", "10", "10", "a", "10"], ["10", "a", "a", "a", "10", "10", "a", "10", "a"], ["10", "a", "a", "a", "10", "10", "a", "10", "a", "a"], ["a"]]}, {"EndTime": 1552417002.4045687, "FinalMinimizedSolution": ["0"], "FinalCoverage": [27, 21, 18, 1, 16, "4-25,", "29-30,", "28->29"], "FinalSolution": ["0", "10"], "StartTime": 1552417001.2956624, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["a"], ["10"], ["10", "a"], ["10", "a", "a"], ["10", "a", "a", "a"], ["10", "a", "a", "a", "10"], ["10", "a", "a", "a", "10", "10"], ["10", "a", "a", "a", "10", "10", "a"], ["10", "a", "a", "a", "10", "10", "a", "10"], ["10", "a", "a", "a", "10", "10", "a", "10", "a"], ["10", "a", "a", "a", "10", "10", "a", "10", "a", "a"], ["a"], ["a"], ["-5 -6", "10"]]}, {"EndTime": 1552417004.2231348, "FinalMinimizedSolution": ["5", "a", "z", "z", "a", "a"], "FinalCoverage": [27, 5, 18, 3, 73, "13-16,", "24,", "8->24,", "12->13,", "17->22"], "FinalSolution": ["5", "a", "z", "z", "a", "a"], "StartTime": 1552417002.4049444, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["a"], ["10"], ["10", "a"], ["10", "a", "a"], ["10", "a", "a", "a"], ["10", "a", "a", "a", "10"], ["10", "a", "a", "a", "10", "10"], ["10", "a", "a", "a", "10", "10", "a"], ["10", "a", "a", "a", "10", "10", "a", "10"], ["10", "a", "a", "a", "10", "10", "a", "10", "a"], ["10", "a", "a", "a", "10", "10", "a", "10", "a", "a"], ["a"], ["a"], ["-5 -6", "10"], ["a"], ["5"], ["5", "a"], ["5", "a", "z"], ["5", "a", "z", "z"], ["5", "a", "z", "z", "a"]]}, {"EndTime": 1552417005.8475676, "FinalMinimizedSolution": ["4", "a", "z", "a", "a"], "FinalCoverage": [27, 5, 18, 3, 73, "13-16,", "24,", "8->24,", "12->13,", "17->22"], "FinalSolution": ["4", "a", "z", "a", "a"], "StartTime": 1552417004.2235646, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["a"], ["10"], ["10", "a"], ["10", "a", "a"], ["10", "a", "a", "a"], ["10", "a", "a", "a", "10"], ["10", "a", "a", "a", "10", "10"], ["10", "a", "a", "a", "10", "10", "a"], ["10", "a", "a", "a", "10", "10", "a", "10"], ["10", "a", "a", "a", "10", "10", "a", "10", "a"], ["10", "a", "a", "a", "10", "10", "a", "10", "a", "a"], ["a"], ["a"], ["-5 -6", "10"], ["a"], ["5"], ["5", "a"], ["5", "a", "z"], ["5", "a", "z", "z"], ["5", "a", "z", "z", "a"], ["a"], ["4"], ["4", "a"], ["4", "a", "z"], ["4", "a", "z", "a"]]}]], [{"CorrectInputs": [[["2 5"], 1536097873]], "UniqueId": "45541e8e-bdea-4b21-8e81-ae26fdb7d0e6_0", "CoverageInfo": [7, 5, 2, 0, 22, "3-6,", "9"], "TimeStamp": 1536097841, "BadInput": ["11"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 8, in <module>\n    n, m = map(int, input().split())\nValueError: not enough values to unpack (expected 2, got 1)\n", "ip": "31.134.191.116"}, [{"EndTime": 1552353159.8226106, "FinalMinimizedSolution": ["11 11"], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["11 11"], "StartTime": 1552353158.955396, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["11"]]}, {"EndTime": 1552353161.0686238, "FinalMinimizedSolution": ["100 50 "], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["100 50 "], "StartTime": 1552353159.8227758, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["11"], ["11"], [""], [" "]]}, {"EndTime": 1552353162.1218264, "FinalMinimizedSolution": ["5 11"], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["5 11"], "StartTime": 1552353161.0688064, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["11"], ["11"], [""], [" "], ["11"], ["yes 11"]]}, {"EndTime": 1552353167.5302482, "FinalMinimizedSolution": ["10 10"], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["10 10"], "StartTime": 1552353162.122021, "FoundSolution": true, "NumProbesMade": 25, "InputHistory": [["11"], ["11"], [""], [" "], ["11"], ["yes 11"], ["11"], ["11", "11"], ["11", "11 11"], ["11", "11 11 11"], ["11", "11 11 11 11"], ["11", "11 11 11 11 11"], ["11", "11 11 11 11 11 11"], ["11", "11 11 11 11 11 11 11"], ["11", "11 11 11 11 11 11 11 11"], ["11", "11 11 11 11 11 11 11 11 11"], ["11", "11 11 11 11 11 11 11 11 11 11"], ["11", "11 11 11 11 11 11 11 11 11 11 11"], ["vE8", "11"], ["10", "11"], ["10", "11 11"], ["10", "11 11 11"], ["10", "11 11 11 11"], ["10", "11 11 11 11 11"], ["10", "11 11 11 11 11 11"], ["10", "11 11 11 11 11 11 11"], ["10", "11 11 11 11 11 11 11 11"], ["10", "11 11 11 11 11 11 11 11 11"], ["10", "11 11 11 11 11 11 11 11 11 11"], ["10", "11 11 11 11 11 11 11 11 11 11 11"], ["10"]]}, {"EndTime": 1552353168.583366, "FinalMinimizedSolution": ["11 5"], "FinalCoverage": [7, 0, 2, 0, 100], "FinalSolution": ["11 5"], "StartTime": 1552353167.5306418, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["11"], ["11"], [""], [" "], ["11"], ["yes 11"], ["11"], ["11", "11"], ["11", "11 11"], ["11", "11 11 11"], ["11", "11 11 11 11"], ["11", "11 11 11 11 11"], ["11", "11 11 11 11 11 11"], ["11", "11 11 11 11 11 11 11"], ["11", "11 11 11 11 11 11 11 11"], ["11", "11 11 11 11 11 11 11 11 11"], ["11", "11 11 11 11 11 11 11 11 11 11"], ["11", "11 11 11 11 11 11 11 11 11 11 11"], ["vE8", "11"], ["10", "11"], ["10", "11 11"], ["10", "11 11 11"], ["10", "11 11 11 11"], ["10", "11 11 11 11 11"], ["10", "11 11 11 11 11 11"], ["10", "11 11 11 11 11 11 11"], ["10", "11 11 11 11 11 11 11 11"], ["10", "11 11 11 11 11 11 11 11 11"], ["10", "11 11 11 11 11 11 11 11 11 11"], ["10", "11 11 11 11 11 11 11 11 11 11 11"], ["10"], ["11"], ["11 JBz"]]}]], [{"CorrectInputs": [[["3", "inp1", "inp2", "inp3"], 1531578108], [["2", "sky bag", "water wash"], 1531581744]], "UniqueId": "9b737a6c-8d45-433f-878e-3a95ffb42844_0", "CoverageInfo": [7, 5, 4, 0, 18, "3-7"], "TimeStamp": 1531575874, "BadInput": ["n"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 2, in <module>\n    n=int(input())\nValueError: invalid literal for int() with base 10: 'n'\n", "ip": "122.164.170.176"}, [{"EndTime": 1552274617.9681273, "FinalMinimizedSolution": ["3", " ", "Rp3", "Rp3"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["3", " ", "Rp3", "Rp3"], "StartTime": 1552274616.5326457, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["n"], ["3"], ["3", " "], ["3", " ", "Rp3"]]}, {"EndTime": 1552274619.2126987, "FinalMinimizedSolution": ["2", "n", "2"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["2", "n", "2"], "StartTime": 1552274617.9683468, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["n"], ["3"], ["3", " "], ["3", " ", "Rp3"], ["n"], ["2"], ["2", "n"]]}, {"EndTime": 1552274620.992497, "FinalMinimizedSolution": ["5", "n", "5", "5", "5", " "], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["5", "n", "5", "5", "5", " "], "StartTime": 1552274619.2129323, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["n"], ["3"], ["3", " "], ["3", " ", "Rp3"], ["n"], ["2"], ["2", "n"], ["n"], ["5"], ["5", "n"], ["5", "n", "5"], ["5", "n", "5", "5"], ["5", "n", "5", "5", "5"]]}, {"EndTime": 1552274623.7437177, "FinalMinimizedSolution": ["9", "9", "kFr", "9", "n", "9", "9", "9", "9", "9"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["9", "9", "kFr", "9", "n", "9", "9", "9", "9", "9"], "StartTime": 1552274620.9928155, "FoundSolution": true, "NumProbesMade": 11, "InputHistory": [["n"], ["3"], ["3", " "], ["3", " ", "Rp3"], ["n"], ["2"], ["2", "n"], ["n"], ["5"], ["5", "n"], ["5", "n", "5"], ["5", "n", "5", "5"], ["5", "n", "5", "5", "5"], ["n"], [], ["9"], ["9", "9"], ["9", "9", "kFr"], ["9", "9", "kFr", "9"], ["9", "9", "kFr", "9", "n"], ["9", "9", "kFr", "9", "n", "9"], ["9", "9", "kFr", "9", "n", "9", "9"], ["9", "9", "kFr", "9", "n", "9", "9", "9"], ["9", "9", "kFr", "9", "n", "9", "9", "9", "9"]]}, {"EndTime": 1552274624.7998066, "FinalMinimizedSolution": ["1", "g2q"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["1", "g2q"], "StartTime": 1552274623.744185, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["n"], ["3"], ["3", " "], ["3", " ", "Rp3"], ["n"], ["2"], ["2", "n"], ["n"], ["5"], ["5", "n"], ["5", "n", "5"], ["5", "n", "5", "5"], ["5", "n", "5", "5", "5"], ["n"], [], ["9"], ["9", "9"], ["9", "9", "kFr"], ["9", "9", "kFr", "9"], ["9", "9", "kFr", "9", "n"], ["9", "9", "kFr", "9", "n", "9"], ["9", "9", "kFr", "9", "n", "9", "9"], ["9", "9", "kFr", "9", "n", "9", "9", "9"], ["9", "9", "kFr", "9", "n", "9", "9", "9", "9"], ["n"], ["1"]]}]], [{"CorrectInputs": [[["5 60 15"], 1534455569]], "UniqueId": "34796520-b045-4836-aace-ff1ac98feb13_0", "CoverageInfo": [11, 6, 6, 0, 41, "6-12"], "TimeStamp": 1534455554, "BadInput": ["5"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 5, in <module>\n    l = n [1]\nIndexError: list index out of range\n", "ip": "200.17.112.121"}, [{"EndTime": 1552295144.584776, "FinalMinimizedSolution": ["9.9 9.5 6.0"], "FinalCoverage": [11, 2, 6, 2, 76, "8,", "12,", "7->8,", "9->12"], "FinalSolution": ["9.9 9.5 6.0"], "StartTime": 1552295142.5851765, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["5"], [], ["0.7"], ["0.7 52g"], ["0.7 6.0"], ["5' 6\" 6.0"], ["9.9 6\" 6.0"]]}, {"InputHistory": [["5"], [], ["0.7"], ["0.7 52g"], ["0.7 6.0"], ["5' 6\" 6.0"], ["9.9 6\" 6.0"], ["5"], ["4", "5"], ["2.36", "4", "5"], ["2.36", "5", "4", "5"], ["2.36", "5", "4", " ", "5"], ["2.36", "-3", "5", "4", " ", "5"], ["2.36", "-3", " ", "5", "4", " ", "5"], ["2.36", "-3", " ", "5", "4", " ", "5", "5"], ["2.36", "-3", " ", "5", "4", "", "5", "5"], [" "], ["8.8"], ["2AL", "8.8"], ["2.4", "8.8"], ["7uQ", "8.8"], ["1.4", "8.8"], ["9", "1.4", "8.8"], ["9", "1.4", "9", "8.8"], ["9 2pf", "1.4", "9", "8.8"], ["9 9.8", "1.4", "9", "8.8"], ["20.36 9.8", "1.4", "9", "8.8"], ["20.36 9.8", " ", "1.4", "9", "8.8"], [" 5"], ["3.9"], ["P92"], ["10.9"], ["", ""], ["10.6", ""], ["5", "10.6", ""], ["5", " ", "10.6", ""], ["5", " ", "10.6", "10", ""], ["5", " ", "A : C B", "10.6", "10", ""], ["5", "  ", "A : C B", "10.6", "10", ""], ["5", "  ", "A : C B", "10.6", "10", " Hd3"], ["5", " 2 ", "A : C B", "10.6", "10", " Hd3"], ["5", " 2 ", "A : C B", "10.6", "10", "  2 "], [" 2 ", "5", " 2 ", "A : C B", "10.6", "10", "  2 "], [" 2 ", "8.2", " 2 ", "A : C B", "10.6", "10", "  2 "], [" 2 ", "8.2", " 2 ", "-1.3", "10.6", "10", "  2 "], [" 2 ", "8.2", " 2 ", "8.5", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "8.5", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "7.5", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "3.10", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "3.10", "10.6", "4.6", "  2 "], [" 2 ", "3.9", " 2 ", "3.10", "1.7", "4.6", "  2 "], [" 2 ", "0.4", " 2 ", "3.10", "1.7", "4.6", "  2 "], [" 2 ", "0.4", " 2 ", "5.9", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", " 2 ", "5.9", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", "7.3", "5.9", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", "7.3", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", "2.9", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "2.9", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "8.1", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "10.9", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "10.9", "4.1", "1.7", "4.6", "2.2"], [" 2 ", "3.8", "10.9", "4.1", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", " ", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", "", "", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", " YCp", "", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", " YCp", "", "1.7", " YCp", "4.6", "9.6"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552295155.4734256, "StartTime": 1552295144.584967}, {"InputHistory": [["5"], [], ["0.7"], ["0.7 52g"], ["0.7 6.0"], ["5' 6\" 6.0"], ["9.9 6\" 6.0"], ["5"], ["4", "5"], ["2.36", "4", "5"], ["2.36", "5", "4", "5"], ["2.36", "5", "4", " ", "5"], ["2.36", "-3", "5", "4", " ", "5"], ["2.36", "-3", " ", "5", "4", " ", "5"], ["2.36", "-3", " ", "5", "4", " ", "5", "5"], ["2.36", "-3", " ", "5", "4", "", "5", "5"], [" "], ["8.8"], ["2AL", "8.8"], ["2.4", "8.8"], ["7uQ", "8.8"], ["1.4", "8.8"], ["9", "1.4", "8.8"], ["9", "1.4", "9", "8.8"], ["9 2pf", "1.4", "9", "8.8"], ["9 9.8", "1.4", "9", "8.8"], ["20.36 9.8", "1.4", "9", "8.8"], ["20.36 9.8", " ", "1.4", "9", "8.8"], [" 5"], ["3.9"], ["P92"], ["10.9"], ["", ""], ["10.6", ""], ["5", "10.6", ""], ["5", " ", "10.6", ""], ["5", " ", "10.6", "10", ""], ["5", " ", "A : C B", "10.6", "10", ""], ["5", "  ", "A : C B", "10.6", "10", ""], ["5", "  ", "A : C B", "10.6", "10", " Hd3"], ["5", " 2 ", "A : C B", "10.6", "10", " Hd3"], ["5", " 2 ", "A : C B", "10.6", "10", "  2 "], [" 2 ", "5", " 2 ", "A : C B", "10.6", "10", "  2 "], [" 2 ", "8.2", " 2 ", "A : C B", "10.6", "10", "  2 "], [" 2 ", "8.2", " 2 ", "-1.3", "10.6", "10", "  2 "], [" 2 ", "8.2", " 2 ", "8.5", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "8.5", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "7.5", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "3.10", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "3.10", "10.6", "4.6", "  2 "], [" 2 ", "3.9", " 2 ", "3.10", "1.7", "4.6", "  2 "], [" 2 ", "0.4", " 2 ", "3.10", "1.7", "4.6", "  2 "], [" 2 ", "0.4", " 2 ", "5.9", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", " 2 ", "5.9", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", "7.3", "5.9", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", "7.3", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", "2.9", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "2.9", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "8.1", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "10.9", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "10.9", "4.1", "1.7", "4.6", "2.2"], [" 2 ", "3.8", "10.9", "4.1", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", " ", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", "", "", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", " YCp", "", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", " YCp", "", "1.7", " YCp", "4.6", "9.6"], ["5"], ["4", "5  "], ["5", "4", "5  "], ["5", "4", "5 5 "], ["Wlk"], ["5.2"], ["Ton"], ["8.9"], ["8.9  "], ["0.1"], ["oWr"], ["2.1"], [" ", "2.1"], ["6.9", "2.1"], ["2.1", "6.9", "2.1"], ["2.1", "6.9", "2.1", "2.1"], ["2.1", "6.9", "2.1", " ", "2.1"], ["2.1", "6.9", "2.1", "aaaa   ", "2.1"], ["2.1", "6.9", "2.1", "    ", "2.1"], ["2.1", "6.9  ", "2.1", "    ", "2.1"], ["2.1", "6.9  ", "2.1", "", "", "", "", "", "2.1"], ["2.1", "6.9  ", "2.1", "  ", "", "", "", "", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "", "", "", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "", "6.8", "", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "", "6.8", "2.5", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "7.2", "6.8", "2.5", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "-1.4", "6.8", "2.5", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "-1.4", "-1.8", "2.5", "2.1"], ["9.1", "2.1", "6.9  ", "2.1", "  ", "", "-1.4", "-1.8", "2.5", "2.1"], ["9.1", "2.1", "6.9  ", "2.1", "  ", "", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["9.1", "2.1", "6.9  ", "2.1", "  ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["2.1", "6.9  ", "2.1", "  ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["2.1", "6.9  ", "2.1", " janka ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["2.1 Rlc", "6.9  ", "2.1", " janka ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["2.1 0.9", "6.9  ", "2.1", " janka ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["3 0.9", "6.9  ", "2.1", " janka ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["PVO"], ["7.6"], ["7.6", "7.6"], ["7.6  ", "7.6"], ["0.5", "7.6"], ["0.5", "3", "7.6"], ["125", "0.5", "3", "7.6"], ["125", "G13", "0.5", "3", "7.6"], ["125", " ", "G13", "0.5", "3", "7.6"], ["125", " 3", "G13", "0.5", "3", "7.6"], ["125", " 3", "125", "G13", "0.5", "3", "7.6"], ["125", " 3", "125", "G13", "0.5", "0.5", "3", "7.6"], ["125", " 3", "125", "G13", " 1 2 3 4 5 6 7 8 9", "0.5", "0.5", "3", "7.6"], ["125", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "0.5", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "125", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "0.5", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "125", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "10.6", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "125", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", " 3", "125", " 1 2 3 4 5 6 7 8 9", "9.4", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "9.4", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "2.0", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "2.0", "8.3", "9.6", "7.6"], ["10.5", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "2.0", "8.3", "9.6", "7.6"], ["10.5", "-----", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "2.0", "8.3", "9.6", "7.6"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552295166.851313, "StartTime": 1552295155.4743266}, {"InputHistory": [["5"], [], ["0.7"], ["0.7 52g"], ["0.7 6.0"], ["5' 6\" 6.0"], ["9.9 6\" 6.0"], ["5"], ["4", "5"], ["2.36", "4", "5"], ["2.36", "5", "4", "5"], ["2.36", "5", "4", " ", "5"], ["2.36", "-3", "5", "4", " ", "5"], ["2.36", "-3", " ", "5", "4", " ", "5"], ["2.36", "-3", " ", "5", "4", " ", "5", "5"], ["2.36", "-3", " ", "5", "4", "", "5", "5"], [" "], ["8.8"], ["2AL", "8.8"], ["2.4", "8.8"], ["7uQ", "8.8"], ["1.4", "8.8"], ["9", "1.4", "8.8"], ["9", "1.4", "9", "8.8"], ["9 2pf", "1.4", "9", "8.8"], ["9 9.8", "1.4", "9", "8.8"], ["20.36 9.8", "1.4", "9", "8.8"], ["20.36 9.8", " ", "1.4", "9", "8.8"], [" 5"], ["3.9"], ["P92"], ["10.9"], ["", ""], ["10.6", ""], ["5", "10.6", ""], ["5", " ", "10.6", ""], ["5", " ", "10.6", "10", ""], ["5", " ", "A : C B", "10.6", "10", ""], ["5", "  ", "A : C B", "10.6", "10", ""], ["5", "  ", "A : C B", "10.6", "10", " Hd3"], ["5", " 2 ", "A : C B", "10.6", "10", " Hd3"], ["5", " 2 ", "A : C B", "10.6", "10", "  2 "], [" 2 ", "5", " 2 ", "A : C B", "10.6", "10", "  2 "], [" 2 ", "8.2", " 2 ", "A : C B", "10.6", "10", "  2 "], [" 2 ", "8.2", " 2 ", "-1.3", "10.6", "10", "  2 "], [" 2 ", "8.2", " 2 ", "8.5", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "8.5", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "7.5", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "3.10", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "3.10", "10.6", "4.6", "  2 "], [" 2 ", "3.9", " 2 ", "3.10", "1.7", "4.6", "  2 "], [" 2 ", "0.4", " 2 ", "3.10", "1.7", "4.6", "  2 "], [" 2 ", "0.4", " 2 ", "5.9", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", " 2 ", "5.9", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", "7.3", "5.9", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", "7.3", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", "2.9", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "2.9", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "8.1", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "10.9", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "10.9", "4.1", "1.7", "4.6", "2.2"], [" 2 ", "3.8", "10.9", "4.1", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", " ", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", "", "", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", " YCp", "", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", " YCp", "", "1.7", " YCp", "4.6", "9.6"], ["5"], ["4", "5  "], ["5", "4", "5  "], ["5", "4", "5 5 "], ["Wlk"], ["5.2"], ["Ton"], ["8.9"], ["8.9  "], ["0.1"], ["oWr"], ["2.1"], [" ", "2.1"], ["6.9", "2.1"], ["2.1", "6.9", "2.1"], ["2.1", "6.9", "2.1", "2.1"], ["2.1", "6.9", "2.1", " ", "2.1"], ["2.1", "6.9", "2.1", "aaaa   ", "2.1"], ["2.1", "6.9", "2.1", "    ", "2.1"], ["2.1", "6.9  ", "2.1", "    ", "2.1"], ["2.1", "6.9  ", "2.1", "", "", "", "", "", "2.1"], ["2.1", "6.9  ", "2.1", "  ", "", "", "", "", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "", "", "", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "", "6.8", "", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "", "6.8", "2.5", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "7.2", "6.8", "2.5", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "-1.4", "6.8", "2.5", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "-1.4", "-1.8", "2.5", "2.1"], ["9.1", "2.1", "6.9  ", "2.1", "  ", "", "-1.4", "-1.8", "2.5", "2.1"], ["9.1", "2.1", "6.9  ", "2.1", "  ", "", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["9.1", "2.1", "6.9  ", "2.1", "  ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["2.1", "6.9  ", "2.1", "  ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["2.1", "6.9  ", "2.1", " janka ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["2.1 Rlc", "6.9  ", "2.1", " janka ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["2.1 0.9", "6.9  ", "2.1", " janka ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["3 0.9", "6.9  ", "2.1", " janka ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["PVO"], ["7.6"], ["7.6", "7.6"], ["7.6  ", "7.6"], ["0.5", "7.6"], ["0.5", "3", "7.6"], ["125", "0.5", "3", "7.6"], ["125", "G13", "0.5", "3", "7.6"], ["125", " ", "G13", "0.5", "3", "7.6"], ["125", " 3", "G13", "0.5", "3", "7.6"], ["125", " 3", "125", "G13", "0.5", "3", "7.6"], ["125", " 3", "125", "G13", "0.5", "0.5", "3", "7.6"], ["125", " 3", "125", "G13", " 1 2 3 4 5 6 7 8 9", "0.5", "0.5", "3", "7.6"], ["125", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "0.5", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "125", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "0.5", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "125", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "10.6", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "125", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", " 3", "125", " 1 2 3 4 5 6 7 8 9", "9.4", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "9.4", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "2.0", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "2.0", "8.3", "9.6", "7.6"], ["10.5", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "2.0", "8.3", "9.6", "7.6"], ["10.5", "-----", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "2.0", "8.3", "9.6", "7.6"], ["5"], ["5", "5"], ["wYf "], ["6.6 "], ["5.6"], ["1", "5.6"], ["tov", "5.6"], ["8.6", "5.6"], ["5", "8.6", "5.6"], ["5", "5", "8.6", "5.6"], ["5", "5", "8.6  ", "5.6"], ["5", "5", "5  ", "5.6"], ["5", "5  ", "5.6"], ["e-9"], ["0.3"], ["HDw"], ["-1.2"], ["-1.2  "], ["6.2"], ["4cs", "6.2"], ["6.2", "6.2"], ["6.2  ", "6.2"], ["6.2  ", "2.1"], ["4.2", "2.1"], [" ", "4.2", "2.1"], [" ", "10.2", "2.1"], ["4.4", "10.2", "2.1"], ["4.4  ", "10.2", "2.1"], ["5.1", "10.2", "2.1"], ["0.25", "5.1", "10.2", "2.1"], ["x", "0.25", "5.1", "10.2", "2.1"], ["6.5", "0.25", "5.1", "10.2", "2.1"], ["6.5", "0.25", "5.1", "10.2", "0.25", "2.1"], ["6.5", "0.25", "5.1", "10.2", "0.25 EPA", "2.1"], ["6.5", "0.25", "5.1", "10.2", "10.2 EPA", "2.1"], ["6.5", "0.25", "5.1", "10.2", "10.2 EPA EPA", "2.1"], ["2 "], ["2.3"], ["599", "2.3"], ["599", "2.3 azD"], ["2.3 azD"], ["2.3 0.0"], [""], ["2.5"], ["SQE", "2.5"], ["3.10", "2.5"], ["3.10", "3.10", "2.5"], ["3.10", "3.10", "3.10", "2.5"], ["S9p"], ["5.0"], ["b9Y"], ["1.0"], ["423"], ["  "], ["5.5"], ["-4P", ""], ["3.1", ""], ["3.1", "5,1,4,2,3", ""], ["3.1", "5,1,4,2,3", "7", ""], ["3.1", "B : A", "5,1,4,2,3", "7", ""]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552295177.6571913, "StartTime": 1552295166.8530533}, {"InputHistory": [["5"], [], ["0.7"], ["0.7 52g"], ["0.7 6.0"], ["5' 6\" 6.0"], ["9.9 6\" 6.0"], ["5"], ["4", "5"], ["2.36", "4", "5"], ["2.36", "5", "4", "5"], ["2.36", "5", "4", " ", "5"], ["2.36", "-3", "5", "4", " ", "5"], ["2.36", "-3", " ", "5", "4", " ", "5"], ["2.36", "-3", " ", "5", "4", " ", "5", "5"], ["2.36", "-3", " ", "5", "4", "", "5", "5"], [" "], ["8.8"], ["2AL", "8.8"], ["2.4", "8.8"], ["7uQ", "8.8"], ["1.4", "8.8"], ["9", "1.4", "8.8"], ["9", "1.4", "9", "8.8"], ["9 2pf", "1.4", "9", "8.8"], ["9 9.8", "1.4", "9", "8.8"], ["20.36 9.8", "1.4", "9", "8.8"], ["20.36 9.8", " ", "1.4", "9", "8.8"], [" 5"], ["3.9"], ["P92"], ["10.9"], ["", ""], ["10.6", ""], ["5", "10.6", ""], ["5", " ", "10.6", ""], ["5", " ", "10.6", "10", ""], ["5", " ", "A : C B", "10.6", "10", ""], ["5", "  ", "A : C B", "10.6", "10", ""], ["5", "  ", "A : C B", "10.6", "10", " Hd3"], ["5", " 2 ", "A : C B", "10.6", "10", " Hd3"], ["5", " 2 ", "A : C B", "10.6", "10", "  2 "], [" 2 ", "5", " 2 ", "A : C B", "10.6", "10", "  2 "], [" 2 ", "8.2", " 2 ", "A : C B", "10.6", "10", "  2 "], [" 2 ", "8.2", " 2 ", "-1.3", "10.6", "10", "  2 "], [" 2 ", "8.2", " 2 ", "8.5", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "8.5", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "7.5", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "3.10", "10.6", "10", "  2 "], [" 2 ", "3.9", " 2 ", "3.10", "10.6", "4.6", "  2 "], [" 2 ", "3.9", " 2 ", "3.10", "1.7", "4.6", "  2 "], [" 2 ", "0.4", " 2 ", "3.10", "1.7", "4.6", "  2 "], [" 2 ", "0.4", " 2 ", "5.9", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", " 2 ", "5.9", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", "7.3", "5.9", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", "7.3", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "-1.3", "2.9", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "2.9", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "8.1", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "10.9", "4.1", "1.7", "4.6", "  2 "], [" 2 ", "3.8", "10.9", "4.1", "1.7", "4.6", "2.2"], [" 2 ", "3.8", "10.9", "4.1", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", " ", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", "", "", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", " YCp", "", "1.7", "4.6", "9.6"], ["7.5", "3.8", "10.9", "4.1", " YCp", "", "1.7", " YCp", "4.6", "9.6"], ["5"], ["4", "5  "], ["5", "4", "5  "], ["5", "4", "5 5 "], ["Wlk"], ["5.2"], ["Ton"], ["8.9"], ["8.9  "], ["0.1"], ["oWr"], ["2.1"], [" ", "2.1"], ["6.9", "2.1"], ["2.1", "6.9", "2.1"], ["2.1", "6.9", "2.1", "2.1"], ["2.1", "6.9", "2.1", " ", "2.1"], ["2.1", "6.9", "2.1", "aaaa   ", "2.1"], ["2.1", "6.9", "2.1", "    ", "2.1"], ["2.1", "6.9  ", "2.1", "    ", "2.1"], ["2.1", "6.9  ", "2.1", "", "", "", "", "", "2.1"], ["2.1", "6.9  ", "2.1", "  ", "", "", "", "", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "", "", "", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "", "6.8", "", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "", "6.8", "2.5", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "7.2", "6.8", "2.5", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "-1.4", "6.8", "2.5", "2.1"], [" ", "2.1", "6.9  ", "2.1", "  ", "", "-1.4", "-1.8", "2.5", "2.1"], ["9.1", "2.1", "6.9  ", "2.1", "  ", "", "-1.4", "-1.8", "2.5", "2.1"], ["9.1", "2.1", "6.9  ", "2.1", "  ", "", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["9.1", "2.1", "6.9  ", "2.1", "  ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["2.1", "6.9  ", "2.1", "  ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["2.1", "6.9  ", "2.1", " janka ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["2.1 Rlc", "6.9  ", "2.1", " janka ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["2.1 0.9", "6.9  ", "2.1", " janka ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["3 0.9", "6.9  ", "2.1", " janka ", "", "Luka", "-1.4", "-1.8 7pJ", "2.5", "2.1"], ["PVO"], ["7.6"], ["7.6", "7.6"], ["7.6  ", "7.6"], ["0.5", "7.6"], ["0.5", "3", "7.6"], ["125", "0.5", "3", "7.6"], ["125", "G13", "0.5", "3", "7.6"], ["125", " ", "G13", "0.5", "3", "7.6"], ["125", " 3", "G13", "0.5", "3", "7.6"], ["125", " 3", "125", "G13", "0.5", "3", "7.6"], ["125", " 3", "125", "G13", "0.5", "0.5", "3", "7.6"], ["125", " 3", "125", "G13", " 1 2 3 4 5 6 7 8 9", "0.5", "0.5", "3", "7.6"], ["125", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "0.5", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "125", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "0.5", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "125", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "10.6", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "125", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", " 3", "125", " 1 2 3 4 5 6 7 8 9", "0.5", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", " 3", "125", " 1 2 3 4 5 6 7 8 9", "9.4", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "9.4", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "2.0", "8.3", "3", "7.6"], [" 1 2 3 4 5 6 7 8 9", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "2.0", "8.3", "9.6", "7.6"], ["10.5", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "2.0", "8.3", "9.6", "7.6"], ["10.5", "-----", "-1.2", "2.9", "125", " 1 2 3 4 5 6 7 8 9", "2.0", "8.3", "9.6", "7.6"], ["5"], ["5", "5"], ["wYf "], ["6.6 "], ["5.6"], ["1", "5.6"], ["tov", "5.6"], ["8.6", "5.6"], ["5", "8.6", "5.6"], ["5", "5", "8.6", "5.6"], ["5", "5", "8.6  ", "5.6"], ["5", "5", "5  ", "5.6"], ["5", "5  ", "5.6"], ["e-9"], ["0.3"], ["HDw"], ["-1.2"], ["-1.2  "], ["6.2"], ["4cs", "6.2"], ["6.2", "6.2"], ["6.2  ", "6.2"], ["6.2  ", "2.1"], ["4.2", "2.1"], [" ", "4.2", "2.1"], [" ", "10.2", "2.1"], ["4.4", "10.2", "2.1"], ["4.4  ", "10.2", "2.1"], ["5.1", "10.2", "2.1"], ["0.25", "5.1", "10.2", "2.1"], ["x", "0.25", "5.1", "10.2", "2.1"], ["6.5", "0.25", "5.1", "10.2", "2.1"], ["6.5", "0.25", "5.1", "10.2", "0.25", "2.1"], ["6.5", "0.25", "5.1", "10.2", "0.25 EPA", "2.1"], ["6.5", "0.25", "5.1", "10.2", "10.2 EPA", "2.1"], ["6.5", "0.25", "5.1", "10.2", "10.2 EPA EPA", "2.1"], ["2 "], ["2.3"], ["599", "2.3"], ["599", "2.3 azD"], ["2.3 azD"], ["2.3 0.0"], [""], ["2.5"], ["SQE", "2.5"], ["3.10", "2.5"], ["3.10", "3.10", "2.5"], ["3.10", "3.10", "3.10", "2.5"], ["S9p"], ["5.0"], ["b9Y"], ["1.0"], ["423"], ["  "], ["5.5"], ["-4P", ""], ["3.1", ""], ["3.1", "5,1,4,2,3", ""], ["3.1", "5,1,4,2,3", "7", ""], ["3.1", "B : A", "5,1,4,2,3", "7", ""], ["5"], ["6PN"], ["2", "0.1"], ["2 52A", "0.1"], ["2 8.4", "0.1"], ["2  ", "0.1"], ["2  ", "0.7"], ["2  ", "1.10"], ["2  ", "4.3"], ["2  ", "-1.9"], ["8.3", "-1.9"], ["8.3", "-1.9  "], [" ", "8.3", "-1.9  "], [" ", "-1.5", "-1.9  "], [" ", "10.4", "-1.9  "], [" ", "10.4", "-1.4"], ["5.6", "10.4", "-1.4"], ["5.6", "5.6", "10.4", "-1.4"], ["5.6", "5.6", "-30", "10.4", "-1.4"], ["5.6", "S1J", "5.6", "-30", "10.4", "-1.4"], ["5.6", "S1J", "5.6", "-30", "OB1", "10.4", "-1.4"], ["5.6", "S1J", "-30", "OB1", "10.4", "-1.4"], ["5.6", "S1J", "-30", "OB1", "10.4 1LO", "-1.4"], ["5.6", "S1J", "-30", " ", "OB1", "10.4 1LO", "-1.4"], [" ", "5.6", "S1J", "-30", " ", "OB1", "10.4 1LO", "-1.4"], [" ", "5.6", "S1J", "2.6", " ", "OB1", "10.4 1LO", "-1.4"], [" ", "5.6", "8.5", "2.6", " ", "OB1", "10.4 1LO", "-1.4"], [" ", "5.6", "8.5", "2.6", " ", "OB1", "10.4 1LO", "10.0"], [" ", "5.6", "0.2", "2.6", " ", "OB1", "10.4 1LO", "10.0"], [" ", "5.6", "0.2", "2.6", " ", "3.4", "10.4 1LO", "10.0"], [" ", "5.6", "0.2", "2.6", " ", "3.4", "10.4 1LO", "1.4"], ["3.1", "5.6", "0.2", "2.6", " ", "3.4", "10.4 1LO", "1.4"], ["3.1", "5.6", "0.2", "2.6", " ", "3.4", "10.4 1LO"], ["3.1", "5.6", "0.2", "230,32", "2.6", " ", "3.4", "10.4 1LO"], ["3.1", "5.6", "0.2", "230,32", "2.6", "W : V ", "3.4", "10.4 1LO"], ["$52", ""], ["3.10", ""], ["1F8", "3.10", ""], ["3.9", "3.10", ""], ["end", "3.9", "3.10", ""], ["5.10", "3.9", "3.10", ""], ["C1m"], ["5.10"], [" ", "", ""], ["2.10", "", ""], ["2.10", " z4t", ""], ["2.10", " z4t", "50", ""], ["2.10", "yl6 z4t", "50", ""], ["2.10", "yl6 z4t", "o4K", "50", ""], ["2.10", "yl6", "z4t", "o4K", "50", ""], ["2.10", "yl6", "z4t", "50", ""], ["2.10", "yl6", "z4t", "yl6", "50", ""], ["2.10", "yl6", " ", "z4t", "yl6", "50", ""], ["2.10", " ", "z4t", "yl6", "50", ""], ["2.10", "  ", "z4t", "yl6", "50", ""], ["Q6J"], ["9.0"], ["LEon", "9.0"], ["-1.6", "9.0"], ["aaaabbcaa", "-1.6", "9.0"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552295189.07599, "StartTime": 1552295177.6594765}]], [{"CorrectInputs": [[["1", "aabbB"], 1532911131]], "UniqueId": "7de52b76-59ce-4fb5-c8a3-e55b40821f45_0", "CoverageInfo": [19, 18, 8, 0, 4, "2-20"], "TimeStamp": 1532911055, "BadInput": ["1 aabbB"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    testcase = int(input())\nValueError: invalid literal for int() with base 10: '1 aabbB'\n", "ip": "183.83.211.9"}, [{"EndTime": 1552271212.008643, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [19, 16, 8, 1, 15, "3-18,", "20,", "19->20"], "FinalSolution": ["-1"], "StartTime": 1552271211.1505773, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 aabbB"]]}, {"EndTime": 1552271213.6231174, "FinalMinimizedSolution": ["4", "4", "4", "4", "4"], "FinalCoverage": [19, 6, 8, 1, 67, "11-17,", "8->11"], "FinalSolution": ["4", "4", "4", "4", "4"], "StartTime": 1552271212.0088172, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["1 aabbB"], ["1 aabbB"], ["4"], ["4", "4"], ["4", "4", "4"], ["4", "4", "4", "4"]]}, {"EndTime": 1552271214.481985, "FinalMinimizedSolution": ["0"], "FinalCoverage": [19, 16, 8, 1, 15, "3-18,", "20,", "19->20"], "FinalSolution": ["0"], "StartTime": 1552271213.6233585, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 aabbB"], ["1 aabbB"], ["4"], ["4", "4"], ["4", "4", "4"], ["4", "4", "4", "4"], ["1 aabbB"]]}, {"EndTime": 1552271215.902643, "FinalMinimizedSolution": ["2", "2", "1 aabbB"], "FinalCoverage": [19, 0, 8, 0, 100], "FinalSolution": ["2", "2", "1 aabbB"], "StartTime": 1552271214.4822145, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1 aabbB"], ["1 aabbB"], ["4"], ["4", "4"], ["4", "4", "4"], ["4", "4", "4", "4"], ["1 aabbB"], ["1 aabbB"], ["0 K68"], ["2"], ["2", "2"]]}, {"EndTime": 1552271216.9512186, "FinalMinimizedSolution": ["1", "Y32"], "FinalCoverage": [19, 1, 8, 1, 93, "12,", "11->12"], "FinalSolution": ["1", "Y32"], "StartTime": 1552271215.9029114, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1 aabbB"], ["1 aabbB"], ["4"], ["4", "4"], ["4", "4", "4"], ["4", "4", "4", "4"], ["1 aabbB"], ["1 aabbB"], ["0 K68"], ["2"], ["2", "2"], ["1 aabbB"], ["1"]]}]], [{"CorrectInputs": [[["25", "100", "5.5"], 1522781742]], "UniqueId": "9fd05208-4c34-49b3-c75a-c67bdc1b7ad5_0", "CoverageInfo": [6, 3, 0, 0, 50, "4-6"], "TimeStamp": 1522781705, "BadInput": ["25", "100", "5,5"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 3, in <module>\n    valor = float(input())\nValueError: could not convert string to float: '5,5'\n", "ip": "200.136.207.220"}, [{"EndTime": 1552354187.6134188, "FinalMinimizedSolution": ["25", "100", "6.5"], "FinalCoverage": [6, 0, 0, 0, 100], "FinalSolution": ["25", "100", "6.5"], "StartTime": 1552354186.7516646, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["25", "100", "5,5"]]}, {"EndTime": 1552354188.4792252, "FinalMinimizedSolution": ["25", "100", "8.10"], "FinalCoverage": [6, 0, 0, 0, 100], "FinalSolution": ["25", "100", "8.10"], "StartTime": 1552354187.6135976, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["25", "100", "5,5"], ["25", "100", "5,5"]]}, {"EndTime": 1552354189.3489356, "FinalMinimizedSolution": ["25", "100", "0.10"], "FinalCoverage": [6, 0, 0, 0, 100], "FinalSolution": ["25", "100", "0.10"], "StartTime": 1552354188.4794161, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["25", "100", "5,5"], ["25", "100", "5,5"], ["25", "100", "5,5"]]}, {"EndTime": 1552354190.211727, "FinalMinimizedSolution": ["25", "100", "2.6"], "FinalCoverage": [6, 0, 0, 0, 100], "FinalSolution": ["25", "100", "2.6"], "StartTime": 1552354189.3491726, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["25", "100", "5,5"], ["25", "100", "5,5"], ["25", "100", "5,5"], ["25", "100", "5,5"]]}, {"EndTime": 1552354191.0754693, "FinalMinimizedSolution": ["25", "100", "9.2"], "FinalCoverage": [6, 0, 0, 0, 100], "FinalSolution": ["25", "100", "9.2"], "StartTime": 1552354190.2119439, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["25", "100", "5,5"], ["25", "100", "5,5"], ["25", "100", "5,5"], ["25", "100", "5,5"], ["25", "100", "5,5"]]}]], [{"CorrectInputs": [[["1", "4", "f 1", "p 1", "A", "A"], 1530301290]], "UniqueId": "59d7bfd4-335d-4372-80ad-21fd72b7e92e_0", "CoverageInfo": [40, 26, 24, 1, 23, "4-5,", "14-21,", "23-26,", "37-58,", "31->exit"], "TimeStamp": 1530301249, "BadInput": ["1", "f 1"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 35, in <module>\n    y = int(input())\nValueError: invalid literal for int() with base 10: 'f 1'\n", "ip": "200.17.137.68"}, [{"EndTime": 1552362312.3439093, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [40, 32, 24, 1, 14, "4-5,", "10-11,", "14-21,", "23-26,", "32-58,", "31->32"], "FinalSolution": ["-1"], "StartTime": 1552362305.5588157, "FoundSolution": true, "NumProbesMade": 39, "InputHistory": [["1", "f 1"], ["1", "2"], ["1", "2", "1"], ["1", "2", "1 rAZ"], ["1", "2", "1 rAZ", "1"], ["1", "1 rAZ", "1"], ["1", "8", "1"], ["1", "1"], ["1", "1", "1"], ["7lC", "1", "1", "1"], ["9", "1", "1", "1"], ["9", "1", "1", "1", "1"], ["1", "9", "1", "1", "1", "1"], ["1", "9", "1", "1", "1", "1 hcu"], ["1", "9 Jjx", "1", "1", "1", "1 hcu"], ["1", "4", "1", "1", "1", "1 hcu"], ["1", "4", "1", "1", "1", "1", "1 hcu"], [], ["4"], ["4", "4"], ["4", "4", "4"], ["4", "4", "176 -272 -272 -45 269 -327 -945 176 ", "4"], ["R76"], ["2"], ["2", "60j"], ["2", "5"], ["2", "5", "f 1"], ["2", "5", "f 1", "5"], ["Imi"], ["10"], ["10", "1"], ["10", "1", "10"], ["10 YmE", "1", "10"], ["1", "1", "10"], ["1", "1 4pY"], ["1", "8"], ["1", "8", "f 1"], ["1", "8", "f 1", "8"], ["vBs"]]}, {"EndTime": 1552362320.5258899, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [40, 32, 24, 1, 14, "4-5,", "10-11,", "14-21,", "23-26,", "32-58,", "31->32"], "FinalSolution": ["-1", "2"], "StartTime": 1552362312.3445, "FoundSolution": true, "NumProbesMade": 40, "InputHistory": [["1", "f 1"], ["1", "2"], ["1", "2", "1"], ["1", "2", "1 rAZ"], ["1", "2", "1 rAZ", "1"], ["1", "1 rAZ", "1"], ["1", "8", "1"], ["1", "1"], ["1", "1", "1"], ["7lC", "1", "1", "1"], ["9", "1", "1", "1"], ["9", "1", "1", "1", "1"], ["1", "9", "1", "1", "1", "1"], ["1", "9", "1", "1", "1", "1 hcu"], ["1", "9 Jjx", "1", "1", "1", "1 hcu"], ["1", "4", "1", "1", "1", "1 hcu"], ["1", "4", "1", "1", "1", "1", "1 hcu"], [], ["4"], ["4", "4"], ["4", "4", "4"], ["4", "4", "176 -272 -272 -45 269 -327 -945 176 ", "4"], ["R76"], ["2"], ["2", "60j"], ["2", "5"], ["2", "5", "f 1"], ["2", "5", "f 1", "5"], ["Imi"], ["10"], ["10", "1"], ["10", "1", "10"], ["10 YmE", "1", "10"], ["1", "1", "10"], ["1", "1 4pY"], ["1", "8"], ["1", "8", "f 1"], ["1", "8", "f 1", "8"], ["vBs"], ["1", "f 1"], ["UcH"], ["6"], ["6", "D7i"], ["6", "4"], ["6", "4", "f 1"], ["6", "4", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "2"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "2", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "2", "f 1", "6"], ["6", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["col", "6", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6 P0M", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6", "A", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6", "A", "4", "f 1", "f 1", "f 1", "SWi x", "2", "f 1", "6"], ["6VA", "6", "6", "A", "4", "f 1", "f 1", "f 1", "SWi x", "2", "f 1", "6"], ["9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "SWi x", "2", "f 1", "6"], ["9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "", "2", "f 1", "6"], ["8ke", "9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "", "2", "f 1", "6"], ["5", "9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "", "2", "f 1", "6"], ["5", "9", "6", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "2", "f 1", "6"], ["5", "9", "6", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "2", "", "6"], ["5", "9", "6", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "1", "2", "", "6"], ["5", "9", "6 B", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "1", "2", "", "6"], ["56j"], ["0--"], ["1"], ["A", "1", "f 1"], ["9", "1", "f 1"], ["9", "1", "f 1", "f 1"], ["9", "1", "f 1", "3"], ["9", "1", "f 1", "3", "1"], ["lt-"], ["A"], ["lby"], ["A", "2"]]}, {"EndTime": 1552362331.8278553, "FinalMinimizedSolution": ["0"], "FinalCoverage": [40, 32, 24, 1, 14, "4-5,", "10-11,", "14-21,", "23-26,", "32-58,", "31->32"], "FinalSolution": ["0"], "StartTime": 1552362320.5270863, "FoundSolution": true, "NumProbesMade": 59, "InputHistory": [["1", "f 1"], ["1", "2"], ["1", "2", "1"], ["1", "2", "1 rAZ"], ["1", "2", "1 rAZ", "1"], ["1", "1 rAZ", "1"], ["1", "8", "1"], ["1", "1"], ["1", "1", "1"], ["7lC", "1", "1", "1"], ["9", "1", "1", "1"], ["9", "1", "1", "1", "1"], ["1", "9", "1", "1", "1", "1"], ["1", "9", "1", "1", "1", "1 hcu"], ["1", "9 Jjx", "1", "1", "1", "1 hcu"], ["1", "4", "1", "1", "1", "1 hcu"], ["1", "4", "1", "1", "1", "1", "1 hcu"], [], ["4"], ["4", "4"], ["4", "4", "4"], ["4", "4", "176 -272 -272 -45 269 -327 -945 176 ", "4"], ["R76"], ["2"], ["2", "60j"], ["2", "5"], ["2", "5", "f 1"], ["2", "5", "f 1", "5"], ["Imi"], ["10"], ["10", "1"], ["10", "1", "10"], ["10 YmE", "1", "10"], ["1", "1", "10"], ["1", "1 4pY"], ["1", "8"], ["1", "8", "f 1"], ["1", "8", "f 1", "8"], ["vBs"], ["1", "f 1"], ["UcH"], ["6"], ["6", "D7i"], ["6", "4"], ["6", "4", "f 1"], ["6", "4", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "2"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "2", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "2", "f 1", "6"], ["6", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["col", "6", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6 P0M", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6", "A", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6", "A", "4", "f 1", "f 1", "f 1", "SWi x", "2", "f 1", "6"], ["6VA", "6", "6", "A", "4", "f 1", "f 1", "f 1", "SWi x", "2", "f 1", "6"], ["9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "SWi x", "2", "f 1", "6"], ["9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "", "2", "f 1", "6"], ["8ke", "9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "", "2", "f 1", "6"], ["5", "9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "", "2", "f 1", "6"], ["5", "9", "6", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "2", "f 1", "6"], ["5", "9", "6", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "2", "", "6"], ["5", "9", "6", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "1", "2", "", "6"], ["5", "9", "6 B", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "1", "2", "", "6"], ["56j"], ["0--"], ["1"], ["A", "1", "f 1"], ["9", "1", "f 1"], ["9", "1", "f 1", "f 1"], ["9", "1", "f 1", "3"], ["9", "1", "f 1", "3", "1"], ["lt-"], ["A"], ["lby"], ["A", "2"], ["1", "f 1"], ["1", "4"], ["1", "4", "1"], ["asz", "1", "4", "1"], ["6", "1", "4", "1"], ["6", "1", "smidw", "4", "1"], ["6", "1", "smidw 5-c", "4", "1"], ["6", "smidw 5-c", "1", "smidw 5-c", "4", "1"], ["6", "smidw 5-c", "1", "7", "4", "1"], ["6", "5", "1", "7", "4", "1"], ["scdasc", "6", "5", "1", "7", "4", "1"], ["1", "6", "5", "1", "7", "4", "1"], ["5", "1", "7", "4", "1"], ["5", "1", "5", "7", "4", "1"], ["5", "1 A", "5", "7", "4", "1"], ["5", "5", "5", "7", "4", "1"], ["5", "3m3", "5", "5", "7", "4", "1"], ["5", "6", "5", "5", "7", "4", "1"], ["pommes", "5", "6", "5", "5", "7", "4", "1"], ["7", "5", "6", "5", "5", "7", "4", "1"], ["7", "5", "6", "5", "mg8", "5", "7", "4", "1"], ["7", "5", "6", "5", "mg8", "5", "7", "4"], ["7", "6", "5", "mg8", "5", "7", "4"], ["7", "6", "5", "mg8", "5", "7", "316", "4"], ["7", "6", "5", "mg8", "5", "Osro roxre osri caftide", "7", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro roxre osri caftide", "7", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro roxre osri caftide", "7", "15", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro", "roxre", "osri", "caftide", "7", "15", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro", "roxre", "osri", "caftide", "7 6Z0", "15", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro", "roxre", "osri", "caftide", "7 6Z0", "15", "316"], ["7", "6", "5", "mg8", "p", "5", "roxre", "osri", "caftide", "7 6Z0", "15", "316"], ["7", "6", "5", "mg8", "p", "SUo", "5", "roxre", "osri", "caftide", "7 6Z0", "15", "316"], ["7", "f", "6", "5", "mg8", "p", "SUo", "5", "roxre", "osri", "caftide", "7 6Z0", "15", "316"], ["7", "f", "6", "5", "mg8", "p", "SUo", "5", "roxre", "osri", "ca8tide", "7 6Z0", "15", "316"], ["7", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "osri", "ca8tide", "7 6Z0", "15", "316"], ["7", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["7 p", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["3", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["3", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "100,000", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "100,000", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["4", "6", "5", "mg8", "p", "SUo", "5", "roxre B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["4", "6", "5", "A", "mg8", "p", "SUo", "5", "roxre B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["4", "6", "5", "A", "mg8", "p", "SUo", "5", "roxre B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A p", "mg8", "p", "SUo", "5", "roxre B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A p", "mg8", "p", "SUo", "5", "100,000 B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A p", "mg8", "p", "SUo", "5", "100,000 B", "100,000", "5", "Sl5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A", "p", "mg8", "p", "SUo", "5", "100,000 B", "100,000", "5", "Sl5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A", "p", "mg8", "p", "SUo", "5", "100,000 B", "100,000", "4", "5", "Sl5", "osri", "ca8tide", "7 6Z0", "316"], ["a-B"], ["8"], ["8", "Rh3"], ["8", "1"], ["8", "1", "1"], ["10", "8", "1"], ["10", "8 G2K", "1"], ["10", "7", "1"], ["10", "7", "B", "1"], ["7", "10", "7", "B", "1"], ["B"]]}, {"EndTime": 1552362334.690955, "FinalMinimizedSolution": ["1", "1", "9 W70"], "FinalCoverage": [40, 22, 24, 2, 38, "4-5,", "14-21,", "23-26,", "41-50,", "53-58,", "40->41,", "52->53"], "FinalSolution": ["1", "1", "9 W70", "8 Ke1", "f 1", "f 1", "f 1", "f"], "StartTime": 1552362331.830178, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["1", "f 1"], ["1", "2"], ["1", "2", "1"], ["1", "2", "1 rAZ"], ["1", "2", "1 rAZ", "1"], ["1", "1 rAZ", "1"], ["1", "8", "1"], ["1", "1"], ["1", "1", "1"], ["7lC", "1", "1", "1"], ["9", "1", "1", "1"], ["9", "1", "1", "1", "1"], ["1", "9", "1", "1", "1", "1"], ["1", "9", "1", "1", "1", "1 hcu"], ["1", "9 Jjx", "1", "1", "1", "1 hcu"], ["1", "4", "1", "1", "1", "1 hcu"], ["1", "4", "1", "1", "1", "1", "1 hcu"], [], ["4"], ["4", "4"], ["4", "4", "4"], ["4", "4", "176 -272 -272 -45 269 -327 -945 176 ", "4"], ["R76"], ["2"], ["2", "60j"], ["2", "5"], ["2", "5", "f 1"], ["2", "5", "f 1", "5"], ["Imi"], ["10"], ["10", "1"], ["10", "1", "10"], ["10 YmE", "1", "10"], ["1", "1", "10"], ["1", "1 4pY"], ["1", "8"], ["1", "8", "f 1"], ["1", "8", "f 1", "8"], ["vBs"], ["1", "f 1"], ["UcH"], ["6"], ["6", "D7i"], ["6", "4"], ["6", "4", "f 1"], ["6", "4", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "2"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "2", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "2", "f 1", "6"], ["6", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["col", "6", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6 P0M", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6", "A", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6", "A", "4", "f 1", "f 1", "f 1", "SWi x", "2", "f 1", "6"], ["6VA", "6", "6", "A", "4", "f 1", "f 1", "f 1", "SWi x", "2", "f 1", "6"], ["9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "SWi x", "2", "f 1", "6"], ["9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "", "2", "f 1", "6"], ["8ke", "9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "", "2", "f 1", "6"], ["5", "9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "", "2", "f 1", "6"], ["5", "9", "6", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "2", "f 1", "6"], ["5", "9", "6", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "2", "", "6"], ["5", "9", "6", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "1", "2", "", "6"], ["5", "9", "6 B", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "1", "2", "", "6"], ["56j"], ["0--"], ["1"], ["A", "1", "f 1"], ["9", "1", "f 1"], ["9", "1", "f 1", "f 1"], ["9", "1", "f 1", "3"], ["9", "1", "f 1", "3", "1"], ["lt-"], ["A"], ["lby"], ["A", "2"], ["1", "f 1"], ["1", "4"], ["1", "4", "1"], ["asz", "1", "4", "1"], ["6", "1", "4", "1"], ["6", "1", "smidw", "4", "1"], ["6", "1", "smidw 5-c", "4", "1"], ["6", "smidw 5-c", "1", "smidw 5-c", "4", "1"], ["6", "smidw 5-c", "1", "7", "4", "1"], ["6", "5", "1", "7", "4", "1"], ["scdasc", "6", "5", "1", "7", "4", "1"], ["1", "6", "5", "1", "7", "4", "1"], ["5", "1", "7", "4", "1"], ["5", "1", "5", "7", "4", "1"], ["5", "1 A", "5", "7", "4", "1"], ["5", "5", "5", "7", "4", "1"], ["5", "3m3", "5", "5", "7", "4", "1"], ["5", "6", "5", "5", "7", "4", "1"], ["pommes", "5", "6", "5", "5", "7", "4", "1"], ["7", "5", "6", "5", "5", "7", "4", "1"], ["7", "5", "6", "5", "mg8", "5", "7", "4", "1"], ["7", "5", "6", "5", "mg8", "5", "7", "4"], ["7", "6", "5", "mg8", "5", "7", "4"], ["7", "6", "5", "mg8", "5", "7", "316", "4"], ["7", "6", "5", "mg8", "5", "Osro roxre osri caftide", "7", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro roxre osri caftide", "7", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro roxre osri caftide", "7", "15", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro", "roxre", "osri", "caftide", "7", "15", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro", "roxre", "osri", "caftide", "7 6Z0", "15", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro", "roxre", "osri", "caftide", "7 6Z0", "15", "316"], ["7", "6", "5", "mg8", "p", "5", "roxre", "osri", "caftide", "7 6Z0", "15", "316"], ["7", "6", "5", "mg8", "p", "SUo", "5", "roxre", "osri", "caftide", "7 6Z0", "15", "316"], ["7", "f", "6", "5", "mg8", "p", "SUo", "5", "roxre", "osri", "caftide", "7 6Z0", "15", "316"], ["7", "f", "6", "5", "mg8", "p", "SUo", "5", "roxre", "osri", "ca8tide", "7 6Z0", "15", "316"], ["7", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "osri", "ca8tide", "7 6Z0", "15", "316"], ["7", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["7 p", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["3", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["3", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "100,000", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "100,000", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["4", "6", "5", "mg8", "p", "SUo", "5", "roxre B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["4", "6", "5", "A", "mg8", "p", "SUo", "5", "roxre B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["4", "6", "5", "A", "mg8", "p", "SUo", "5", "roxre B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A p", "mg8", "p", "SUo", "5", "roxre B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A p", "mg8", "p", "SUo", "5", "100,000 B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A p", "mg8", "p", "SUo", "5", "100,000 B", "100,000", "5", "Sl5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A", "p", "mg8", "p", "SUo", "5", "100,000 B", "100,000", "5", "Sl5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A", "p", "mg8", "p", "SUo", "5", "100,000 B", "100,000", "4", "5", "Sl5", "osri", "ca8tide", "7 6Z0", "316"], ["a-B"], ["8"], ["8", "Rh3"], ["8", "1"], ["8", "1", "1"], ["10", "8", "1"], ["10", "8 G2K", "1"], ["10", "7", "1"], ["10", "7", "B", "1"], ["7", "10", "7", "B", "1"], ["B"], ["1", "f 1"], ["1", "12.3 m", "8"], ["1", "9", "8"], ["1", "9", "8 Ke1"], ["1", "9", "8 Ke1", "f 1"], ["1", "9", "8 Ke1", "f 1", "f 1"], ["1", "9", "8 Ke1", "f 1", "f 1", "f 1"], ["1", "9", "8 Ke1", "f 1", "f 1", "f 1", "f"], ["1", "w12", "9", "8 Ke1", "f 1", "f 1", "f 1", "f"], ["1", "1", "9", "8 Ke1", "f 1", "f 1", "f 1", "f"]]}, {"EndTime": 1552362335.5716395, "FinalMinimizedSolution": ["1", "0"], "FinalCoverage": [40, 25, 24, 1, 28, "4-5,", "14-21,", "23-26,", "38-58,", "37->38"], "FinalSolution": ["1", "0"], "StartTime": 1552362334.6934001, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1", "f 1"], ["1", "2"], ["1", "2", "1"], ["1", "2", "1 rAZ"], ["1", "2", "1 rAZ", "1"], ["1", "1 rAZ", "1"], ["1", "8", "1"], ["1", "1"], ["1", "1", "1"], ["7lC", "1", "1", "1"], ["9", "1", "1", "1"], ["9", "1", "1", "1", "1"], ["1", "9", "1", "1", "1", "1"], ["1", "9", "1", "1", "1", "1 hcu"], ["1", "9 Jjx", "1", "1", "1", "1 hcu"], ["1", "4", "1", "1", "1", "1 hcu"], ["1", "4", "1", "1", "1", "1", "1 hcu"], [], ["4"], ["4", "4"], ["4", "4", "4"], ["4", "4", "176 -272 -272 -45 269 -327 -945 176 ", "4"], ["R76"], ["2"], ["2", "60j"], ["2", "5"], ["2", "5", "f 1"], ["2", "5", "f 1", "5"], ["Imi"], ["10"], ["10", "1"], ["10", "1", "10"], ["10 YmE", "1", "10"], ["1", "1", "10"], ["1", "1 4pY"], ["1", "8"], ["1", "8", "f 1"], ["1", "8", "f 1", "8"], ["vBs"], ["1", "f 1"], ["UcH"], ["6"], ["6", "D7i"], ["6", "4"], ["6", "4", "f 1"], ["6", "4", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "2"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "2", "f 1"], ["6", "4", "f 1", "f 1", "f 1", "f 1", "2", "f 1", "6"], ["6", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["col", "6", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6 P0M", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6", "A", "4", "f 1", "f 1", "f 1", "f x", "2", "f 1", "6"], ["6", "6", "A", "4", "f 1", "f 1", "f 1", "SWi x", "2", "f 1", "6"], ["6VA", "6", "6", "A", "4", "f 1", "f 1", "f 1", "SWi x", "2", "f 1", "6"], ["9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "SWi x", "2", "f 1", "6"], ["9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "", "2", "f 1", "6"], ["8ke", "9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "", "2", "f 1", "6"], ["5", "9", "6", "6", "A", "4", "f 1", "f 1", "f 1", "", "2", "f 1", "6"], ["5", "9", "6", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "2", "f 1", "6"], ["5", "9", "6", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "2", "", "6"], ["5", "9", "6", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "1", "2", "", "6"], ["5", "9", "6 B", "6", "A", "4", "YBn 1", "f 1", "f 1", "", "1", "2", "", "6"], ["56j"], ["0--"], ["1"], ["A", "1", "f 1"], ["9", "1", "f 1"], ["9", "1", "f 1", "f 1"], ["9", "1", "f 1", "3"], ["9", "1", "f 1", "3", "1"], ["lt-"], ["A"], ["lby"], ["A", "2"], ["1", "f 1"], ["1", "4"], ["1", "4", "1"], ["asz", "1", "4", "1"], ["6", "1", "4", "1"], ["6", "1", "smidw", "4", "1"], ["6", "1", "smidw 5-c", "4", "1"], ["6", "smidw 5-c", "1", "smidw 5-c", "4", "1"], ["6", "smidw 5-c", "1", "7", "4", "1"], ["6", "5", "1", "7", "4", "1"], ["scdasc", "6", "5", "1", "7", "4", "1"], ["1", "6", "5", "1", "7", "4", "1"], ["5", "1", "7", "4", "1"], ["5", "1", "5", "7", "4", "1"], ["5", "1 A", "5", "7", "4", "1"], ["5", "5", "5", "7", "4", "1"], ["5", "3m3", "5", "5", "7", "4", "1"], ["5", "6", "5", "5", "7", "4", "1"], ["pommes", "5", "6", "5", "5", "7", "4", "1"], ["7", "5", "6", "5", "5", "7", "4", "1"], ["7", "5", "6", "5", "mg8", "5", "7", "4", "1"], ["7", "5", "6", "5", "mg8", "5", "7", "4"], ["7", "6", "5", "mg8", "5", "7", "4"], ["7", "6", "5", "mg8", "5", "7", "316", "4"], ["7", "6", "5", "mg8", "5", "Osro roxre osri caftide", "7", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro roxre osri caftide", "7", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro roxre osri caftide", "7", "15", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro", "roxre", "osri", "caftide", "7", "15", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro", "roxre", "osri", "caftide", "7 6Z0", "15", "316", "4"], ["7", "6", "5", "mg8", "p", "5", "Osro", "roxre", "osri", "caftide", "7 6Z0", "15", "316"], ["7", "6", "5", "mg8", "p", "5", "roxre", "osri", "caftide", "7 6Z0", "15", "316"], ["7", "6", "5", "mg8", "p", "SUo", "5", "roxre", "osri", "caftide", "7 6Z0", "15", "316"], ["7", "f", "6", "5", "mg8", "p", "SUo", "5", "roxre", "osri", "caftide", "7 6Z0", "15", "316"], ["7", "f", "6", "5", "mg8", "p", "SUo", "5", "roxre", "osri", "ca8tide", "7 6Z0", "15", "316"], ["7", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "osri", "ca8tide", "7 6Z0", "15", "316"], ["7", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["7 p", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["3", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["3", "4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "100,000", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["4", "6", "5", "mg8", "p", "SUo", "5", "roxre", "100,000", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["4", "6", "5", "mg8", "p", "SUo", "5", "roxre B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["4", "6", "5", "A", "mg8", "p", "SUo", "5", "roxre B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "15", "316"], ["4", "6", "5", "A", "mg8", "p", "SUo", "5", "roxre B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A p", "mg8", "p", "SUo", "5", "roxre B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A p", "mg8", "p", "SUo", "5", "100,000 B", "100,000", "5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A p", "mg8", "p", "SUo", "5", "100,000 B", "100,000", "5", "Sl5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A", "p", "mg8", "p", "SUo", "5", "100,000 B", "100,000", "5", "Sl5", "osri", "ca8tide", "7 6Z0", "316"], ["4", "6", "5", "A", "p", "mg8", "p", "SUo", "5", "100,000 B", "100,000", "4", "5", "Sl5", "osri", "ca8tide", "7 6Z0", "316"], ["a-B"], ["8"], ["8", "Rh3"], ["8", "1"], ["8", "1", "1"], ["10", "8", "1"], ["10", "8 G2K", "1"], ["10", "7", "1"], ["10", "7", "B", "1"], ["7", "10", "7", "B", "1"], ["B"], ["1", "f 1"], ["1", "12.3 m", "8"], ["1", "9", "8"], ["1", "9", "8 Ke1"], ["1", "9", "8 Ke1", "f 1"], ["1", "9", "8 Ke1", "f 1", "f 1"], ["1", "9", "8 Ke1", "f 1", "f 1", "f 1"], ["1", "9", "8 Ke1", "f 1", "f 1", "f 1", "f"], ["1", "w12", "9", "8 Ke1", "f 1", "f 1", "f 1", "f"], ["1", "1", "9", "8 Ke1", "f 1", "f 1", "f 1", "f"], ["1", "f 1"]]}]], [{"CorrectInputs": [[["0011 0101"], 1518215522]], "UniqueId": "888e1def-eb2c-4eac-cfbd-064fcefbb28d_0", "CoverageInfo": [2, 1, 2, 1, 50, "2,", "1->2"], "TimeStamp": 1518215510, "BadInput": ["0011"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    a,b=[int(s) for s in input().split()]\nValueError: not enough values to unpack (expected 2, got 1)\n", "ip": "93.185.17.62"}, [{"EndTime": 1552360833.5330203, "FinalMinimizedSolution": ["0011 0011"], "FinalCoverage": [2, 0, 2, 0, 100], "FinalSolution": ["0011 0011"], "StartTime": 1552360832.6712682, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["0011"]]}, {"EndTime": 1552360834.5857706, "FinalMinimizedSolution": ["1 0011"], "FinalCoverage": [2, 0, 2, 0, 100], "FinalSolution": ["1 0011"], "StartTime": 1552360833.5332348, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0011"], ["0011"], ["tS1 0011"]]}, {"EndTime": 1552360835.6389039, "FinalMinimizedSolution": ["2 0011"], "FinalCoverage": [2, 0, 2, 0, 100], "FinalSolution": ["2 0011"], "StartTime": 1552360834.585981, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0011"], ["0011"], ["tS1 0011"], ["0011"], ["AmY 0011"]]}, {"EndTime": 1552360841.0627475, "FinalMinimizedSolution": ["3 3"], "FinalCoverage": [2, 0, 2, 0, 100], "FinalSolution": ["3 3"], "StartTime": 1552360835.63911, "FoundSolution": true, "NumProbesMade": 25, "InputHistory": [["0011"], ["0011"], ["tS1 0011"], ["0011"], ["AmY 0011"], ["0011"], ["0011", "0011"], ["0011", "0011 0011"], ["0011", "0011 0011 0011"], ["0011", "0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011 0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011 0011 0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011"], ["e7a", "0011"], ["3", "0011"], ["3", "0011 0011"], ["3", "0011 0011 0011"], ["3", "0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011 0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011 0011 0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011"], ["3"]]}, {"EndTime": 1552360842.1252313, "FinalMinimizedSolution": ["7 0011"], "FinalCoverage": [2, 0, 2, 0, 100], "FinalSolution": ["7 0011"], "StartTime": 1552360841.063161, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0011"], ["0011"], ["tS1 0011"], ["0011"], ["AmY 0011"], ["0011"], ["0011", "0011"], ["0011", "0011 0011"], ["0011", "0011 0011 0011"], ["0011", "0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011 0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011 0011 0011 0011 0011 0011"], ["0011", "0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011"], ["e7a", "0011"], ["3", "0011"], ["3", "0011 0011"], ["3", "0011 0011 0011"], ["3", "0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011 0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011 0011 0011 0011 0011 0011"], ["3", "0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011"], ["3"], ["0011"], ["Oj9 0011"]]}]], [{"CorrectInputs": [[["3", "1.50"], 1518674597]], "UniqueId": "cd6e6a05-75f7-424b-dfe0-c0d7d57b66ef_0", "CoverageInfo": [4, 2, 0, 0, 50, "3-4"], "TimeStamp": 1518672113, "BadInput": ["3", "\u00a31.50"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 2, in <module>\n    ticketprice = float(input(\"How much do these tickets cost?: \"))\nValueError: could not convert string to float: '\u00a31.50'\n", "ip": "81.101.200.193"}, [{"EndTime": 1552358527.16027, "FinalMinimizedSolution": ["3", "8.10"], "FinalCoverage": [4, 0, 0, 0, 100], "FinalSolution": ["3", "8.10"], "StartTime": 1552358526.2978644, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3", "\u00a31.50"]]}, {"EndTime": 1552358528.184459, "FinalMinimizedSolution": ["3", "8.1"], "FinalCoverage": null, "FinalSolution": ["3", "8.1"], "StartTime": 1552358527.160449, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3", "\u00a31.50"], ["3", "\u00a31.50"]]}, {"EndTime": 1552358529.0502605, "FinalMinimizedSolution": ["3", "3.1"], "FinalCoverage": [4, 0, 0, 0, 100], "FinalSolution": ["3", "3.1"], "StartTime": 1552358528.1846159, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3", "\u00a31.50"], ["3", "\u00a31.50"], ["3", "\u00a31.50"]]}, {"EndTime": 1552358529.908478, "FinalMinimizedSolution": ["3", "9.3"], "FinalCoverage": null, "FinalSolution": ["3", "9.3"], "StartTime": 1552358529.050457, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3", "\u00a31.50"], ["3", "\u00a31.50"], ["3", "\u00a31.50"], ["3", "\u00a31.50"]]}, {"EndTime": 1552358530.8045106, "FinalMinimizedSolution": ["3", "9.10"], "FinalCoverage": null, "FinalSolution": ["3", "9.10"], "StartTime": 1552358529.9085855, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3", "\u00a31.50"], ["3", "\u00a31.50"], ["3", "\u00a31.50"], ["3", "\u00a31.50"], ["3", "\u00a31.50"]]}]], [{"CorrectInputs": [[["dcba", "badc", "dcba", "badc"], 1534017167]], "UniqueId": "b8381149-f9d6-4f71-b5a3-8bf1bfc0bee0_0", "CoverageInfo": [15, 2, 6, 1, 86, "14-15,", "12->14"], "TimeStamp": 1534017003, "BadInput": ["abcd", "*d%#", "abacabadaba", "#*%*d*%"], "ErrorType": "KeyError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 13, in <module>\n    rashifr_itog += slovar[rashifr[k]]\nKeyError: '#'\n", "ip": "134.17.156.227"}, [{"InputHistory": [["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "abacabadaba", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "YJ4", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 OVe", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*% ZTu"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%", "ZTu"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "n", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%", "ZTu"], [], ["Ble"], ["Ble", "abcd"], ["Ble", "abcd", "abcd"], ["Ble", "abcd", "abcd", "abcd"], ["Ble", "abcd", "abcd", "abcd Ak7"], ["Ble", "abcd", "abcd Ak7"], ["Ble", "abcd", "abcd Ak7", "*d%#"], ["Ble", "abcd", "abcd 7o9", "*d%#"], ["Ble", "abcd", "abcd 7o9"], ["Ble", "abcd", "abcd 7o9", "#*%*d*%"], ["Ble", "abcd", "abcd 3", "#*%*d*%"], ["Ble", "abcd", "abcd", "3", "#*%*d*%"], ["Ble", "abcd", "3", "abcd", "3", "#*%*d*%"], ["t44"], ["t44", "*d%#"], ["t44", "*d%#", "O5A"], ["t44", "*d%#", "O5A", "5PM"], ["t44", "*d%# kpH", "O5A", "5PM"], ["t44", "*d%# kpH", "1s1", "O5A", "5PM"], ["t44", "*d%# apple", "1s1", "O5A", "5PM"], ["t44", "E7m apple", "1s1", "O5A", "5PM"], ["t44", "E7m apple", "1s1", "O5A", "9", "5PM"], ["t44", "E7m apple", "1s1", "1s1", "O5A", "9", "5PM"], ["t44", "", "1s1", "1s1", "O5A", "9", "5PM"], ["sA-"], ["sA-", "39n"], ["sA-", "39n", "*d%#"], ["sA-", "39n", "*d%#", "Maz"], ["sA-", "39n", "*d%# 238"], ["sA-", "39n", "*d%# 238", "abacabadaba"], ["39n", "*d%# 238", "abacabadaba"], ["39n", "*d%# 238", "abacabadaba", "39n"], ["39n", "*d%# 238", "1t8", "abacabadaba", "39n"], ["3Qy", "39n", "*d%# 238", "1t8", "abacabadaba", "39n"], ["nMX"], ["nMX", "abcd"], ["nMX", "abcd", "abcd"], ["nMX", "abcd", "abcd", "abcd"], ["nMX", "abcd", "abcd", "abcd DL7"], ["nMX", "craete bar foo", "abcd", "abcd", "abcd DL7"], ["oo3"], ["oo3", "#*%*d*%"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552357579.093123, "StartTime": 1552357567.7441335}, {"InputHistory": [["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "abacabadaba", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "YJ4", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 OVe", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*% ZTu"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%", "ZTu"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "n", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%", "ZTu"], [], ["Ble"], ["Ble", "abcd"], ["Ble", "abcd", "abcd"], ["Ble", "abcd", "abcd", "abcd"], ["Ble", "abcd", "abcd", "abcd Ak7"], ["Ble", "abcd", "abcd Ak7"], ["Ble", "abcd", "abcd Ak7", "*d%#"], ["Ble", "abcd", "abcd 7o9", "*d%#"], ["Ble", "abcd", "abcd 7o9"], ["Ble", "abcd", "abcd 7o9", "#*%*d*%"], ["Ble", "abcd", "abcd 3", "#*%*d*%"], ["Ble", "abcd", "abcd", "3", "#*%*d*%"], ["Ble", "abcd", "3", "abcd", "3", "#*%*d*%"], ["t44"], ["t44", "*d%#"], ["t44", "*d%#", "O5A"], ["t44", "*d%#", "O5A", "5PM"], ["t44", "*d%# kpH", "O5A", "5PM"], ["t44", "*d%# kpH", "1s1", "O5A", "5PM"], ["t44", "*d%# apple", "1s1", "O5A", "5PM"], ["t44", "E7m apple", "1s1", "O5A", "5PM"], ["t44", "E7m apple", "1s1", "O5A", "9", "5PM"], ["t44", "E7m apple", "1s1", "1s1", "O5A", "9", "5PM"], ["t44", "", "1s1", "1s1", "O5A", "9", "5PM"], ["sA-"], ["sA-", "39n"], ["sA-", "39n", "*d%#"], ["sA-", "39n", "*d%#", "Maz"], ["sA-", "39n", "*d%# 238"], ["sA-", "39n", "*d%# 238", "abacabadaba"], ["39n", "*d%# 238", "abacabadaba"], ["39n", "*d%# 238", "abacabadaba", "39n"], ["39n", "*d%# 238", "1t8", "abacabadaba", "39n"], ["3Qy", "39n", "*d%# 238", "1t8", "abacabadaba", "39n"], ["nMX"], ["nMX", "abcd"], ["nMX", "abcd", "abcd"], ["nMX", "abcd", "abcd", "abcd"], ["nMX", "abcd", "abcd", "abcd DL7"], ["nMX", "craete bar foo", "abcd", "abcd", "abcd DL7"], ["oo3"], ["oo3", "#*%*d*%"], ["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["EWh"], ["EWh", "abacabadaba"], ["EWh", "abacabadaba", "*d%#"], ["EWh", "abacabadaba", "*d%#", "abacabadaba"], ["uii"], ["uii", "abcd"], ["uii", "abcd", "abcd"], ["uii", "abcd", "abcd", "abcd"], ["BIi"], ["BIi", "abcd"], ["BIi", "abcd", "BIi"], ["BIi", "abcd", "BIi", "abcd"], ["BIi", "abcd", "BIi", "esp", "abcd"], ["BIi w21", "abcd", "BIi", "esp", "abcd"], ["BIi w21", "abcd", "abcd", "BIi", "esp", "abcd"], ["BIi w21", "abcd", "abcd", "BIi 2Ie", "esp", "abcd"], ["BIi w21", "c9P", "abcd", "abcd", "BIi 2Ie", "esp", "abcd"], ["BIi w21", "c9P", "abcd", "abcd", "BIi 2Ie", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "abcd", "BIi 2Ie", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "abcd", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi 2Ie", "abcd", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi", "2Ie", "abcd", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi", "2Ie", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi", "2Ie", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "2Ie", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "2Ie F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "2Ie", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "Hello", "2Ie", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "Hello", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "abcd Umt", "BIi 'madhu',12.3", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "", "BIi 'madhu',12.3", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "", "BIi 'madhu',12.3", "Hello", "abcd 430", "3 cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "", "", "Hello", "abcd 430", "3 cZ8"], ["Kz6"], ["Kz6", "Kz6"], ["Kz6", "Kz6", "Kz6"], ["Kz6", "Kz6", "Kz6", "*d%#"], ["9PR"], ["9PR", "#*%*d*%"], ["9PR", "#*%*d*%", "abacabadaba"], ["9PR", "#*%*d*%", "abacabadaba", "*d%#"], ["9PR", "#*%*d*%", "Ntx", "abacabadaba", "*d%#"], ["9PR", "#*%*d*%", "Ntx", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "Ntx", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx cZN", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx #*%*d*%", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "Ntx #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "z38", "nWG", "abacabadaba"], ["9PR", "#*%*d*%", "QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "z38", "nWG", "abacabadaba"], ["9PR", "#*%*d*%", "QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "z38", "nWG", "QE8", "abacabadaba"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552357590.4399176, "StartTime": 1552357579.0940616}, {"EndTime": 1552357600.7700763, "FinalMinimizedSolution": ["-Et", "abcd", "-Et", "-Et"], "FinalCoverage": [15, 0, 6, 0, 100], "FinalSolution": ["-Et", "abcd", "-Et", "-Et"], "StartTime": 1552357590.4417264, "FoundSolution": true, "NumProbesMade": 51, "InputHistory": [["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "abacabadaba", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "YJ4", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 OVe", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*% ZTu"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%", "ZTu"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "n", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%", "ZTu"], [], ["Ble"], ["Ble", "abcd"], ["Ble", "abcd", "abcd"], ["Ble", "abcd", "abcd", "abcd"], ["Ble", "abcd", "abcd", "abcd Ak7"], ["Ble", "abcd", "abcd Ak7"], ["Ble", "abcd", "abcd Ak7", "*d%#"], ["Ble", "abcd", "abcd 7o9", "*d%#"], ["Ble", "abcd", "abcd 7o9"], ["Ble", "abcd", "abcd 7o9", "#*%*d*%"], ["Ble", "abcd", "abcd 3", "#*%*d*%"], ["Ble", "abcd", "abcd", "3", "#*%*d*%"], ["Ble", "abcd", "3", "abcd", "3", "#*%*d*%"], ["t44"], ["t44", "*d%#"], ["t44", "*d%#", "O5A"], ["t44", "*d%#", "O5A", "5PM"], ["t44", "*d%# kpH", "O5A", "5PM"], ["t44", "*d%# kpH", "1s1", "O5A", "5PM"], ["t44", "*d%# apple", "1s1", "O5A", "5PM"], ["t44", "E7m apple", "1s1", "O5A", "5PM"], ["t44", "E7m apple", "1s1", "O5A", "9", "5PM"], ["t44", "E7m apple", "1s1", "1s1", "O5A", "9", "5PM"], ["t44", "", "1s1", "1s1", "O5A", "9", "5PM"], ["sA-"], ["sA-", "39n"], ["sA-", "39n", "*d%#"], ["sA-", "39n", "*d%#", "Maz"], ["sA-", "39n", "*d%# 238"], ["sA-", "39n", "*d%# 238", "abacabadaba"], ["39n", "*d%# 238", "abacabadaba"], ["39n", "*d%# 238", "abacabadaba", "39n"], ["39n", "*d%# 238", "1t8", "abacabadaba", "39n"], ["3Qy", "39n", "*d%# 238", "1t8", "abacabadaba", "39n"], ["nMX"], ["nMX", "abcd"], ["nMX", "abcd", "abcd"], ["nMX", "abcd", "abcd", "abcd"], ["nMX", "abcd", "abcd", "abcd DL7"], ["nMX", "craete bar foo", "abcd", "abcd", "abcd DL7"], ["oo3"], ["oo3", "#*%*d*%"], ["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["EWh"], ["EWh", "abacabadaba"], ["EWh", "abacabadaba", "*d%#"], ["EWh", "abacabadaba", "*d%#", "abacabadaba"], ["uii"], ["uii", "abcd"], ["uii", "abcd", "abcd"], ["uii", "abcd", "abcd", "abcd"], ["BIi"], ["BIi", "abcd"], ["BIi", "abcd", "BIi"], ["BIi", "abcd", "BIi", "abcd"], ["BIi", "abcd", "BIi", "esp", "abcd"], ["BIi w21", "abcd", "BIi", "esp", "abcd"], ["BIi w21", "abcd", "abcd", "BIi", "esp", "abcd"], ["BIi w21", "abcd", "abcd", "BIi 2Ie", "esp", "abcd"], ["BIi w21", "c9P", "abcd", "abcd", "BIi 2Ie", "esp", "abcd"], ["BIi w21", "c9P", "abcd", "abcd", "BIi 2Ie", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "abcd", "BIi 2Ie", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "abcd", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi 2Ie", "abcd", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi", "2Ie", "abcd", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi", "2Ie", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi", "2Ie", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "2Ie", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "2Ie F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "2Ie", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "Hello", "2Ie", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "Hello", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "abcd Umt", "BIi 'madhu',12.3", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "", "BIi 'madhu',12.3", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "", "BIi 'madhu',12.3", "Hello", "abcd 430", "3 cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "", "", "Hello", "abcd 430", "3 cZ8"], ["Kz6"], ["Kz6", "Kz6"], ["Kz6", "Kz6", "Kz6"], ["Kz6", "Kz6", "Kz6", "*d%#"], ["9PR"], ["9PR", "#*%*d*%"], ["9PR", "#*%*d*%", "abacabadaba"], ["9PR", "#*%*d*%", "abacabadaba", "*d%#"], ["9PR", "#*%*d*%", "Ntx", "abacabadaba", "*d%#"], ["9PR", "#*%*d*%", "Ntx", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "Ntx", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx cZN", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx #*%*d*%", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "Ntx #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "z38", "nWG", "abacabadaba"], ["9PR", "#*%*d*%", "QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "z38", "nWG", "abacabadaba"], ["9PR", "#*%*d*%", "QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "z38", "nWG", "QE8", "abacabadaba"], ["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["2d1"], ["2d1", "2d1"], ["2d1", "2d1", "*d%#"], ["2d1", "2d1", "*d%#", "*d%#"], ["abcd", "2d1", "2d1", "*d%#", "*d%#"], ["abcd", "2d1", "4TK", "2d1", "*d%#", "*d%#"], ["abcd", "2d1", "4TK", "2d1", "*d%#", "*d%# fOR"], ["*d%# fOR", "abcd", "2d1", "4TK", "2d1", "*d%#", "*d%# fOR"], ["abcd fOR", "abcd", "2d1", "4TK", "2d1", "*d%#", "*d%# fOR"], ["abcd fOR", "abcd", "2d1", "4TK", "*d%#", "*d%# fOR"], ["abcd fOR", "abcd", "2d1", "4TK", "*d%#", "Im 33 fOR"], ["abcd fOR", "abcd", "2d1", "*d%#", "Im 33 fOR"], ["abcd fOR", "2d1", "*d%#", "Im 33 fOR"], ["abcd fOR", "abcd fOR", "2d1", "*d%#", "Im 33 fOR"], ["abcd fOR", "abcd fOR", "2d1", "*d%#", "Im", "33", "fOR"], ["fzW"], ["fzW", "#*%*d*%"], ["fzW", "#*%*d*%", "abcd"], ["fzW", "#*%*d*%", "abcd", "*d%#"], ["fzW", "#*%*d*%", "abcd", "end", "*d%#"], ["fzW", "abcd", "end", "*d%#"], ["10", "fzW", "abcd", "end", "*d%#"], ["Ip7"], ["Ip7", "*d%#"], ["Ip7", "*d%#", "abcd"], ["Ip7", "*d%#", "abcd", "*d%#"], ["Ip7", "011", "*d%#", "abcd", "*d%#"], ["MjC"], ["MjC", "*d%#"], ["MjC", "*d%#", "#*%*d*%"], ["MjC", "*d%#", "#*%*d*%", "*d%#"], ["MjC", "*d%#", "rK2", "#*%*d*%", "*d%#"], ["MjC", "*d%#", "rK2", "#*%*d*%"], ["MjC", "#*%*d*%", "*d%#", "rK2", "#*%*d*%"], ["MjC", "#*%*d*% yXu", "*d%#", "rK2", "#*%*d*%"], ["MjC", "1 yXu", "*d%#", "rK2", "#*%*d*%"], ["62h"], ["62h", "#*%*d*%"], ["62h", "#*%*d*%", "H97"], ["62h", "#*%*d*%", "H97", "H97"], ["62h", "#*%*d*%", "H97", "5", "H97"], ["62h", "#*%*d*%", "H97", "H97", "5", "H97"], ["62h", "#*%*d*%", "H97", "H97 -gf", "5", "H97"], ["62h", "#*%*d*%", "H97", "H97 -gf", "5", "$4.50", "H97"], ["62h", "#*%*d*%", "H97", "H97 abcd", "5", "$4.50", "H97"], ["62h", "#*%*d*%", "H97", "H97 abcd", "5", "H97"], ["62h", "#*%*d*%", "H97", "H97 #*%*d*%", "5", "H97"], ["-Et"], ["-Et", "abcd"], ["-Et", "abcd", "-Et"]]}, {"InputHistory": [["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "abacabadaba", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "YJ4", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 OVe", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*% ZTu"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%", "ZTu"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "n", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%", "ZTu"], [], ["Ble"], ["Ble", "abcd"], ["Ble", "abcd", "abcd"], ["Ble", "abcd", "abcd", "abcd"], ["Ble", "abcd", "abcd", "abcd Ak7"], ["Ble", "abcd", "abcd Ak7"], ["Ble", "abcd", "abcd Ak7", "*d%#"], ["Ble", "abcd", "abcd 7o9", "*d%#"], ["Ble", "abcd", "abcd 7o9"], ["Ble", "abcd", "abcd 7o9", "#*%*d*%"], ["Ble", "abcd", "abcd 3", "#*%*d*%"], ["Ble", "abcd", "abcd", "3", "#*%*d*%"], ["Ble", "abcd", "3", "abcd", "3", "#*%*d*%"], ["t44"], ["t44", "*d%#"], ["t44", "*d%#", "O5A"], ["t44", "*d%#", "O5A", "5PM"], ["t44", "*d%# kpH", "O5A", "5PM"], ["t44", "*d%# kpH", "1s1", "O5A", "5PM"], ["t44", "*d%# apple", "1s1", "O5A", "5PM"], ["t44", "E7m apple", "1s1", "O5A", "5PM"], ["t44", "E7m apple", "1s1", "O5A", "9", "5PM"], ["t44", "E7m apple", "1s1", "1s1", "O5A", "9", "5PM"], ["t44", "", "1s1", "1s1", "O5A", "9", "5PM"], ["sA-"], ["sA-", "39n"], ["sA-", "39n", "*d%#"], ["sA-", "39n", "*d%#", "Maz"], ["sA-", "39n", "*d%# 238"], ["sA-", "39n", "*d%# 238", "abacabadaba"], ["39n", "*d%# 238", "abacabadaba"], ["39n", "*d%# 238", "abacabadaba", "39n"], ["39n", "*d%# 238", "1t8", "abacabadaba", "39n"], ["3Qy", "39n", "*d%# 238", "1t8", "abacabadaba", "39n"], ["nMX"], ["nMX", "abcd"], ["nMX", "abcd", "abcd"], ["nMX", "abcd", "abcd", "abcd"], ["nMX", "abcd", "abcd", "abcd DL7"], ["nMX", "craete bar foo", "abcd", "abcd", "abcd DL7"], ["oo3"], ["oo3", "#*%*d*%"], ["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["EWh"], ["EWh", "abacabadaba"], ["EWh", "abacabadaba", "*d%#"], ["EWh", "abacabadaba", "*d%#", "abacabadaba"], ["uii"], ["uii", "abcd"], ["uii", "abcd", "abcd"], ["uii", "abcd", "abcd", "abcd"], ["BIi"], ["BIi", "abcd"], ["BIi", "abcd", "BIi"], ["BIi", "abcd", "BIi", "abcd"], ["BIi", "abcd", "BIi", "esp", "abcd"], ["BIi w21", "abcd", "BIi", "esp", "abcd"], ["BIi w21", "abcd", "abcd", "BIi", "esp", "abcd"], ["BIi w21", "abcd", "abcd", "BIi 2Ie", "esp", "abcd"], ["BIi w21", "c9P", "abcd", "abcd", "BIi 2Ie", "esp", "abcd"], ["BIi w21", "c9P", "abcd", "abcd", "BIi 2Ie", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "abcd", "BIi 2Ie", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "abcd", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi 2Ie", "abcd", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi", "2Ie", "abcd", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi", "2Ie", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi", "2Ie", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "2Ie", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "2Ie F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "2Ie", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "Hello", "2Ie", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "Hello", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "abcd Umt", "BIi 'madhu',12.3", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "", "BIi 'madhu',12.3", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "", "BIi 'madhu',12.3", "Hello", "abcd 430", "3 cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "", "", "Hello", "abcd 430", "3 cZ8"], ["Kz6"], ["Kz6", "Kz6"], ["Kz6", "Kz6", "Kz6"], ["Kz6", "Kz6", "Kz6", "*d%#"], ["9PR"], ["9PR", "#*%*d*%"], ["9PR", "#*%*d*%", "abacabadaba"], ["9PR", "#*%*d*%", "abacabadaba", "*d%#"], ["9PR", "#*%*d*%", "Ntx", "abacabadaba", "*d%#"], ["9PR", "#*%*d*%", "Ntx", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "Ntx", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx cZN", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx #*%*d*%", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "Ntx #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "z38", "nWG", "abacabadaba"], ["9PR", "#*%*d*%", "QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "z38", "nWG", "abacabadaba"], ["9PR", "#*%*d*%", "QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "z38", "nWG", "QE8", "abacabadaba"], ["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["2d1"], ["2d1", "2d1"], ["2d1", "2d1", "*d%#"], ["2d1", "2d1", "*d%#", "*d%#"], ["abcd", "2d1", "2d1", "*d%#", "*d%#"], ["abcd", "2d1", "4TK", "2d1", "*d%#", "*d%#"], ["abcd", "2d1", "4TK", "2d1", "*d%#", "*d%# fOR"], ["*d%# fOR", "abcd", "2d1", "4TK", "2d1", "*d%#", "*d%# fOR"], ["abcd fOR", "abcd", "2d1", "4TK", "2d1", "*d%#", "*d%# fOR"], ["abcd fOR", "abcd", "2d1", "4TK", "*d%#", "*d%# fOR"], ["abcd fOR", "abcd", "2d1", "4TK", "*d%#", "Im 33 fOR"], ["abcd fOR", "abcd", "2d1", "*d%#", "Im 33 fOR"], ["abcd fOR", "2d1", "*d%#", "Im 33 fOR"], ["abcd fOR", "abcd fOR", "2d1", "*d%#", "Im 33 fOR"], ["abcd fOR", "abcd fOR", "2d1", "*d%#", "Im", "33", "fOR"], ["fzW"], ["fzW", "#*%*d*%"], ["fzW", "#*%*d*%", "abcd"], ["fzW", "#*%*d*%", "abcd", "*d%#"], ["fzW", "#*%*d*%", "abcd", "end", "*d%#"], ["fzW", "abcd", "end", "*d%#"], ["10", "fzW", "abcd", "end", "*d%#"], ["Ip7"], ["Ip7", "*d%#"], ["Ip7", "*d%#", "abcd"], ["Ip7", "*d%#", "abcd", "*d%#"], ["Ip7", "011", "*d%#", "abcd", "*d%#"], ["MjC"], ["MjC", "*d%#"], ["MjC", "*d%#", "#*%*d*%"], ["MjC", "*d%#", "#*%*d*%", "*d%#"], ["MjC", "*d%#", "rK2", "#*%*d*%", "*d%#"], ["MjC", "*d%#", "rK2", "#*%*d*%"], ["MjC", "#*%*d*%", "*d%#", "rK2", "#*%*d*%"], ["MjC", "#*%*d*% yXu", "*d%#", "rK2", "#*%*d*%"], ["MjC", "1 yXu", "*d%#", "rK2", "#*%*d*%"], ["62h"], ["62h", "#*%*d*%"], ["62h", "#*%*d*%", "H97"], ["62h", "#*%*d*%", "H97", "H97"], ["62h", "#*%*d*%", "H97", "5", "H97"], ["62h", "#*%*d*%", "H97", "H97", "5", "H97"], ["62h", "#*%*d*%", "H97", "H97 -gf", "5", "H97"], ["62h", "#*%*d*%", "H97", "H97 -gf", "5", "$4.50", "H97"], ["62h", "#*%*d*%", "H97", "H97 abcd", "5", "$4.50", "H97"], ["62h", "#*%*d*%", "H97", "H97 abcd", "5", "H97"], ["62h", "#*%*d*%", "H97", "H97 #*%*d*%", "5", "H97"], ["-Et"], ["-Et", "abcd"], ["-Et", "abcd", "-Et"], ["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["abcd", "abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["Spartak;1;Zenit;1", "abcd", "abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["Spartak;1;Zenit;1", "abcd", "#*%*d*%", "abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["Spartak;1;Zenit;1", "abcd", "abcd", "#*%*d*%", "abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["727"], ["727", "abacabadaba"], ["727", "abacabadaba", "#*%*d*%"], ["727", "abacabadaba", "#*%*d*%", "#*%*d*%"], ["no", "727", "abacabadaba", "#*%*d*%", "#*%*d*%"], ["no", "727", "abacabadaba", "#*%*d*%", "#*%*d*% G8R"], ["no", "iX-", "727", "abacabadaba", "#*%*d*%", "#*%*d*% G8R"], ["no", "iX-", "727", "#*%*d*%", "#*%*d*% G8R"], ["no", "iX-", "iX-", "727", "#*%*d*%", "#*%*d*% G8R"], ["no", "iX-", "iX-", "iX-", "727", "#*%*d*%", "#*%*d*% G8R"], ["no", "iX-", "iX-", "iX-", "727", "#*%*d*%", "727 G8R"], ["WvI"], ["WvI", "#*%*d*%"], ["WvI", "#*%*d*%", "#*%*d*%"], ["WvI", "#*%*d*%", "#*%*d*%", "abcd"], ["gZV"], ["gZV", "abcd"], ["gZV", "abcd", "*d%#"], ["gZV", "abcd", "*d%#", "#*%*d*%"], ["6xK"], ["6xK", "cTY"], ["6xK", "cTY", "*d%#"], ["6xK", "cTY", "*d%#", "abacabadaba"], ["cTY", "*d%#", "abacabadaba"], ["cTY", "*d%#", "abacabadaba", "abcd"], ["cTY", "*d%#", "abacabadaba", "1234", "abcd"], ["cTY", "abacabadaba", "1234", "abcd"], ["Lisa", "cTY", "abacabadaba", "1234", "abcd"], ["Lisa", "cTY", "abacabadaba", "1234 Gk8", "abcd"], ["Lisa", "q", "cTY", "abacabadaba", "1234 Gk8", "abcd"], ["xD3"], ["xD3", "TS0"], ["xD3", "TS0", "xD3"], ["xD3", "TS0", "xD3", "H4J"], ["xD3", "xD3", "H4J"], ["xD3", "xD3", "H4J", "xD3"], ["GNG"], ["GNG", "*d%#"], ["GNG", "*d%#", "GNG"], ["GNG", "*d%#", "GNG", "#*%*d*%"], ["v5K"], ["v5K", "#*%*d*%"], ["v5K", "#*%*d*%", "#*%*d*%"], ["v5K", "#*%*d*%", "#*%*d*%", "abacabadaba"], ["UC2"], ["UC2", "4La"], ["UC2", "4La", "abacabadaba"], ["UC2", "4La", "abacabadaba", "#*%*d*%"], ["0wN"], ["0wN", "abacabadaba"], ["0wN", "abacabadaba", "abcd"], ["0wN", "abacabadaba", "abcd", "*d%#"], ["0wN", "abacabadaba", "1.8", "abcd", "*d%#"], ["0wN", "abacabadaba", "1.8 zG9", "abcd", "*d%#"], ["0wN", "GvG", "abacabadaba", "1.8 zG9", "abcd", "*d%#"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552357612.1260953, "StartTime": 1552357600.7725108}, {"EndTime": 1552357617.7260964, "FinalMinimizedSolution": ["puq", "abcd", "puq", "puq"], "FinalCoverage": [15, 0, 6, 0, 100], "FinalSolution": ["puq", "abcd", "puq", "puq"], "StartTime": 1552357612.1292143, "FoundSolution": true, "NumProbesMade": 26, "InputHistory": [["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "abacabadaba", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "abacabadaba", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "34", "abacabadaba", "YJ4", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "YJ4", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 OVe", "#*%*d*%"], ["abcd", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "24", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*% ZTu"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%", "ZTu"], ["abcd", "Gd7", "*d%#", "2", "24", "16.5", "34", "abacabadaba", "n", "87R", "5", "abacabadaba", "-h7 4VR", "#*%*d*%", "ZTu"], [], ["Ble"], ["Ble", "abcd"], ["Ble", "abcd", "abcd"], ["Ble", "abcd", "abcd", "abcd"], ["Ble", "abcd", "abcd", "abcd Ak7"], ["Ble", "abcd", "abcd Ak7"], ["Ble", "abcd", "abcd Ak7", "*d%#"], ["Ble", "abcd", "abcd 7o9", "*d%#"], ["Ble", "abcd", "abcd 7o9"], ["Ble", "abcd", "abcd 7o9", "#*%*d*%"], ["Ble", "abcd", "abcd 3", "#*%*d*%"], ["Ble", "abcd", "abcd", "3", "#*%*d*%"], ["Ble", "abcd", "3", "abcd", "3", "#*%*d*%"], ["t44"], ["t44", "*d%#"], ["t44", "*d%#", "O5A"], ["t44", "*d%#", "O5A", "5PM"], ["t44", "*d%# kpH", "O5A", "5PM"], ["t44", "*d%# kpH", "1s1", "O5A", "5PM"], ["t44", "*d%# apple", "1s1", "O5A", "5PM"], ["t44", "E7m apple", "1s1", "O5A", "5PM"], ["t44", "E7m apple", "1s1", "O5A", "9", "5PM"], ["t44", "E7m apple", "1s1", "1s1", "O5A", "9", "5PM"], ["t44", "", "1s1", "1s1", "O5A", "9", "5PM"], ["sA-"], ["sA-", "39n"], ["sA-", "39n", "*d%#"], ["sA-", "39n", "*d%#", "Maz"], ["sA-", "39n", "*d%# 238"], ["sA-", "39n", "*d%# 238", "abacabadaba"], ["39n", "*d%# 238", "abacabadaba"], ["39n", "*d%# 238", "abacabadaba", "39n"], ["39n", "*d%# 238", "1t8", "abacabadaba", "39n"], ["3Qy", "39n", "*d%# 238", "1t8", "abacabadaba", "39n"], ["nMX"], ["nMX", "abcd"], ["nMX", "abcd", "abcd"], ["nMX", "abcd", "abcd", "abcd"], ["nMX", "abcd", "abcd", "abcd DL7"], ["nMX", "craete bar foo", "abcd", "abcd", "abcd DL7"], ["oo3"], ["oo3", "#*%*d*%"], ["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["EWh"], ["EWh", "abacabadaba"], ["EWh", "abacabadaba", "*d%#"], ["EWh", "abacabadaba", "*d%#", "abacabadaba"], ["uii"], ["uii", "abcd"], ["uii", "abcd", "abcd"], ["uii", "abcd", "abcd", "abcd"], ["BIi"], ["BIi", "abcd"], ["BIi", "abcd", "BIi"], ["BIi", "abcd", "BIi", "abcd"], ["BIi", "abcd", "BIi", "esp", "abcd"], ["BIi w21", "abcd", "BIi", "esp", "abcd"], ["BIi w21", "abcd", "abcd", "BIi", "esp", "abcd"], ["BIi w21", "abcd", "abcd", "BIi 2Ie", "esp", "abcd"], ["BIi w21", "c9P", "abcd", "abcd", "BIi 2Ie", "esp", "abcd"], ["BIi w21", "c9P", "abcd", "abcd", "BIi 2Ie", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "abcd", "BIi 2Ie", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "abcd", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi 2Ie", "abcd", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi", "2Ie", "abcd", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi", "2Ie", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd", "BIi 2Ie", "BIi", "2Ie", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "2Ie", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "2Ie F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "2Ie", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "Hello", "2Ie", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "BIi", "Hello", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "F0s", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "abcd 430", "esp", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "abcd Umt", "BIi 2Ie", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "abcd Umt", "BIi 'madhu',12.3", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "", "BIi 'madhu',12.3", "Hello", "abcd 430", "abcd cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "", "BIi 'madhu',12.3", "Hello", "abcd 430", "3 cZ8"], ["BIi *d%#", "c9P", "fA2 a3u", "abcd", "2 4", "", "", "Hello", "abcd 430", "3 cZ8"], ["Kz6"], ["Kz6", "Kz6"], ["Kz6", "Kz6", "Kz6"], ["Kz6", "Kz6", "Kz6", "*d%#"], ["9PR"], ["9PR", "#*%*d*%"], ["9PR", "#*%*d*%", "abacabadaba"], ["9PR", "#*%*d*%", "abacabadaba", "*d%#"], ["9PR", "#*%*d*%", "Ntx", "abacabadaba", "*d%#"], ["9PR", "#*%*d*%", "Ntx", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "Ntx", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx cZN", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx #*%*d*%", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "54 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "Ntx #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% 1cj", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "nWG", "abacabadaba"], ["9PR", "#*%*d*% QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "z38", "nWG", "abacabadaba"], ["9PR", "#*%*d*%", "QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "z38", "nWG", "abacabadaba"], ["9PR", "#*%*d*%", "QE8", "#*%*d*% 1cj #*%*d*% 64545454545454545454545454545454554", "Ntx #*%*d*%", "z38", "nWG", "QE8", "abacabadaba"], ["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["2d1"], ["2d1", "2d1"], ["2d1", "2d1", "*d%#"], ["2d1", "2d1", "*d%#", "*d%#"], ["abcd", "2d1", "2d1", "*d%#", "*d%#"], ["abcd", "2d1", "4TK", "2d1", "*d%#", "*d%#"], ["abcd", "2d1", "4TK", "2d1", "*d%#", "*d%# fOR"], ["*d%# fOR", "abcd", "2d1", "4TK", "2d1", "*d%#", "*d%# fOR"], ["abcd fOR", "abcd", "2d1", "4TK", "2d1", "*d%#", "*d%# fOR"], ["abcd fOR", "abcd", "2d1", "4TK", "*d%#", "*d%# fOR"], ["abcd fOR", "abcd", "2d1", "4TK", "*d%#", "Im 33 fOR"], ["abcd fOR", "abcd", "2d1", "*d%#", "Im 33 fOR"], ["abcd fOR", "2d1", "*d%#", "Im 33 fOR"], ["abcd fOR", "abcd fOR", "2d1", "*d%#", "Im 33 fOR"], ["abcd fOR", "abcd fOR", "2d1", "*d%#", "Im", "33", "fOR"], ["fzW"], ["fzW", "#*%*d*%"], ["fzW", "#*%*d*%", "abcd"], ["fzW", "#*%*d*%", "abcd", "*d%#"], ["fzW", "#*%*d*%", "abcd", "end", "*d%#"], ["fzW", "abcd", "end", "*d%#"], ["10", "fzW", "abcd", "end", "*d%#"], ["Ip7"], ["Ip7", "*d%#"], ["Ip7", "*d%#", "abcd"], ["Ip7", "*d%#", "abcd", "*d%#"], ["Ip7", "011", "*d%#", "abcd", "*d%#"], ["MjC"], ["MjC", "*d%#"], ["MjC", "*d%#", "#*%*d*%"], ["MjC", "*d%#", "#*%*d*%", "*d%#"], ["MjC", "*d%#", "rK2", "#*%*d*%", "*d%#"], ["MjC", "*d%#", "rK2", "#*%*d*%"], ["MjC", "#*%*d*%", "*d%#", "rK2", "#*%*d*%"], ["MjC", "#*%*d*% yXu", "*d%#", "rK2", "#*%*d*%"], ["MjC", "1 yXu", "*d%#", "rK2", "#*%*d*%"], ["62h"], ["62h", "#*%*d*%"], ["62h", "#*%*d*%", "H97"], ["62h", "#*%*d*%", "H97", "H97"], ["62h", "#*%*d*%", "H97", "5", "H97"], ["62h", "#*%*d*%", "H97", "H97", "5", "H97"], ["62h", "#*%*d*%", "H97", "H97 -gf", "5", "H97"], ["62h", "#*%*d*%", "H97", "H97 -gf", "5", "$4.50", "H97"], ["62h", "#*%*d*%", "H97", "H97 abcd", "5", "$4.50", "H97"], ["62h", "#*%*d*%", "H97", "H97 abcd", "5", "H97"], ["62h", "#*%*d*%", "H97", "H97 #*%*d*%", "5", "H97"], ["-Et"], ["-Et", "abcd"], ["-Et", "abcd", "-Et"], ["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["abcd", "abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["Spartak;1;Zenit;1", "abcd", "abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["Spartak;1;Zenit;1", "abcd", "#*%*d*%", "abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["Spartak;1;Zenit;1", "abcd", "abcd", "#*%*d*%", "abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["727"], ["727", "abacabadaba"], ["727", "abacabadaba", "#*%*d*%"], ["727", "abacabadaba", "#*%*d*%", "#*%*d*%"], ["no", "727", "abacabadaba", "#*%*d*%", "#*%*d*%"], ["no", "727", "abacabadaba", "#*%*d*%", "#*%*d*% G8R"], ["no", "iX-", "727", "abacabadaba", "#*%*d*%", "#*%*d*% G8R"], ["no", "iX-", "727", "#*%*d*%", "#*%*d*% G8R"], ["no", "iX-", "iX-", "727", "#*%*d*%", "#*%*d*% G8R"], ["no", "iX-", "iX-", "iX-", "727", "#*%*d*%", "#*%*d*% G8R"], ["no", "iX-", "iX-", "iX-", "727", "#*%*d*%", "727 G8R"], ["WvI"], ["WvI", "#*%*d*%"], ["WvI", "#*%*d*%", "#*%*d*%"], ["WvI", "#*%*d*%", "#*%*d*%", "abcd"], ["gZV"], ["gZV", "abcd"], ["gZV", "abcd", "*d%#"], ["gZV", "abcd", "*d%#", "#*%*d*%"], ["6xK"], ["6xK", "cTY"], ["6xK", "cTY", "*d%#"], ["6xK", "cTY", "*d%#", "abacabadaba"], ["cTY", "*d%#", "abacabadaba"], ["cTY", "*d%#", "abacabadaba", "abcd"], ["cTY", "*d%#", "abacabadaba", "1234", "abcd"], ["cTY", "abacabadaba", "1234", "abcd"], ["Lisa", "cTY", "abacabadaba", "1234", "abcd"], ["Lisa", "cTY", "abacabadaba", "1234 Gk8", "abcd"], ["Lisa", "q", "cTY", "abacabadaba", "1234 Gk8", "abcd"], ["xD3"], ["xD3", "TS0"], ["xD3", "TS0", "xD3"], ["xD3", "TS0", "xD3", "H4J"], ["xD3", "xD3", "H4J"], ["xD3", "xD3", "H4J", "xD3"], ["GNG"], ["GNG", "*d%#"], ["GNG", "*d%#", "GNG"], ["GNG", "*d%#", "GNG", "#*%*d*%"], ["v5K"], ["v5K", "#*%*d*%"], ["v5K", "#*%*d*%", "#*%*d*%"], ["v5K", "#*%*d*%", "#*%*d*%", "abacabadaba"], ["UC2"], ["UC2", "4La"], ["UC2", "4La", "abacabadaba"], ["UC2", "4La", "abacabadaba", "#*%*d*%"], ["0wN"], ["0wN", "abacabadaba"], ["0wN", "abacabadaba", "abcd"], ["0wN", "abacabadaba", "abcd", "*d%#"], ["0wN", "abacabadaba", "1.8", "abcd", "*d%#"], ["0wN", "abacabadaba", "1.8 zG9", "abcd", "*d%#"], ["0wN", "GvG", "abacabadaba", "1.8 zG9", "abcd", "*d%#"], ["abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["2 4", "abcd", "*d%#", "abacabadaba", "#*%*d*%"], ["2 4", "abcd", "*d%# sEk", "abacabadaba", "#*%*d*%"], ["2 4", "abcd", "*d%# sEk", "abacabadaba", "#*%*d*%", "#*%*d*%"], ["2 ylT", "abcd", "*d%# sEk", "abacabadaba", "#*%*d*%", "#*%*d*%"], ["v3B ylT", "abcd", "*d%# sEk", "abacabadaba", "#*%*d*%", "#*%*d*%"], ["vA3"], ["vA3", "HYq"], ["vA3", "HYq", "*d%#"], ["vA3", "HYq", "*d%#", "*d%#"], ["*d%#", "vA3", "HYq", "*d%#", "*d%#"], ["*d%# 71T", "vA3", "HYq", "*d%#", "*d%#"], ["*d%#", "71T", "vA3", "HYq", "*d%#", "*d%#"], ["*d%#", "71T", "vA3", "HYq", "*d%# IfN", "*d%#"], ["*d%#", "71T", "vA3 gKH", "HYq", "*d%# IfN", "*d%#"], ["*d%#", "71T", "vA3 gKH", "HYq", "3/2 IfN", "*d%#"], ["*d%#", "71T", "vA3 gKH", "HYq", "3/2 IfN", "*d%#", "*d%#"], ["*d%#", "71T", "vA3 gKH", "HYq", "3/2 *d%#", "*d%#", "*d%#"], ["-KJ"], ["-KJ", "816"], ["-KJ", "816", "#*%*d*%"], ["-KJ", "816", "#*%*d*%", "816"], ["b9j", "-KJ", "816", "#*%*d*%", "816"], ["puq"], ["puq", "abcd"], ["puq", "abcd", "puq"]]}]]], "rest": [[{"CorrectInputs": [[["three"], 1525853650]], "UniqueId": "b6fdf312-16b3-4494-a84f-404533087ff8_0", "CoverageInfo": [7, 3, 0, 0, 57, "4,", "6-7"], "TimeStamp": 1525853672, "BadInput": ["0"], "ErrorType": "ZeroDivisionError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 3, in <module>\n    result = 10/n\nZeroDivisionError: division by zero\n", "ip": "72.192.214.123"}, [{"EndTime": 1552352632.0444446, "FinalMinimizedSolution": [], "FinalCoverage": [7, 2, 0, 0, 71, "3-4"], "FinalSolution": [], "StartTime": 1552352631.3695972, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["0"]]}, {"EndTime": 1552352632.8262086, "FinalMinimizedSolution": [], "FinalCoverage": [7, 2, 0, 0, 71, "3-4"], "FinalSolution": ["-3,4", "0"], "StartTime": 1552352632.044595, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["0"], ["0"]]}, {"EndTime": 1552352633.796626, "FinalMinimizedSolution": [], "FinalCoverage": [7, 2, 0, 0, 71, "3-4"], "FinalSolution": ["s77", "0"], "StartTime": 1552352632.826374, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0"], ["0"], ["0"], ["0", "0"]]}, {"EndTime": 1552352634.5243556, "FinalMinimizedSolution": [], "FinalCoverage": [7, 2, 0, 0, 71, "3-4"], "FinalSolution": ["s2f"], "StartTime": 1552352633.79682, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["0"], ["0"], ["0"], ["0", "0"], ["0"]]}, {"EndTime": 1552352635.251695, "FinalMinimizedSolution": [], "FinalCoverage": [7, 2, 0, 0, 71, "3-4"], "FinalSolution": ["EnL"], "StartTime": 1552352634.524542, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["0"], ["0"], ["0"], ["0", "0"], ["0"], ["0"]]}]], [{"CorrectInputs": [[["3"], 1533866003]], "UniqueId": "cf919490-025d-4ec3-f577-a2b742826cf1_0", "CoverageInfo": [14, 4, 6, 3, 65, "5,", "7-8,", "17,", "4->5,", "6->7,", "10->12"], "TimeStamp": 1533866041, "BadInput": ["4"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 16, in <module>\n    r = primos(2,x)\n  File \"temp2018.py\", line 13, in primos\n    primos(a+1,n)\nNameError: name 'n' is not defined\n", "ip": "170.244.136.10"}, [{"EndTime": 1552344493.3864264, "FinalMinimizedSolution": ["2"], "FinalCoverage": [14, 5, 6, 2, 55, "5,", "10-13,", "4->5,", "6->10"], "FinalSolution": ["2"], "StartTime": 1552344491.9535928, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["4"], ["5 6  7", "4"], ["7", "4"], []]}, {"EndTime": 1552344495.8176305, "FinalMinimizedSolution": ["2"], "FinalCoverage": [14, 5, 6, 2, 55, "5,", "10-13,", "4->5,", "6->10"], "FinalSolution": ["2", "4 -Mq"], "StartTime": 1552344493.3866305, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["4"], ["5 6  7", "4"], ["7", "4"], [], ["4"], ["PfT"], ["9"], ["9 92j"], ["4", "4"], ["4", "4", "4"], ["4", "4", "2", "4"], ["4", "2", "4"], ["4", "2", "4 -Mq"]]}, {"EndTime": 1552344499.7664032, "FinalMinimizedSolution": ["0"], "FinalCoverage": [14, 7, 6, 1, 40, "6-13,", "4->6"], "FinalSolution": ["0", "4", "10", "3", "4", "10", "4", "8", "4"], "StartTime": 1552344495.8179028, "FoundSolution": true, "NumProbesMade": 15, "InputHistory": [["4"], ["5 6  7", "4"], ["7", "4"], [], ["4"], ["PfT"], ["9"], ["9 92j"], ["4", "4"], ["4", "4", "4"], ["4", "4", "2", "4"], ["4", "2", "4"], ["4", "2", "4 -Mq"], ["4"], ["-xb", "4"], ["8", "4"], ["Uxk", "8", "4"], ["4", "8", "4"], ["Insert18", "4", "8", "4"], ["10", "4", "8", "4"], ["10", "4", "4", "8", "4"], ["4", "10", "4", "4", "8", "4"], ["4", "10", "12.2", "4", "4", "8", "4"], ["4", "10", "12.2", "4", "4", "4", "8", "4"], ["4", "10", "12.2", "4", "10", "4", "4", "8", "4"], ["4", "10", "12.2", "4", "10", "4", "8", "4"], ["12.2", "4", "10", "12.2", "4", "10", "4", "8", "4"], ["12.2", "4", "10", "3", "4", "10", "4", "8", "4"]]}, {"EndTime": 1552344500.8228872, "FinalMinimizedSolution": ["1"], "FinalCoverage": [14, 7, 6, 1, 40, "6-13,", "4->6"], "FinalSolution": ["1"], "StartTime": 1552344499.7669144, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["4"], ["5 6  7", "4"], ["7", "4"], [], ["4"], ["PfT"], ["9"], ["9 92j"], ["4", "4"], ["4", "4", "4"], ["4", "4", "2", "4"], ["4", "2", "4"], ["4", "2", "4 -Mq"], ["4"], ["-xb", "4"], ["8", "4"], ["Uxk", "8", "4"], ["4", "8", "4"], ["Insert18", "4", "8", "4"], ["10", "4", "8", "4"], ["10", "4", "4", "8", "4"], ["4", "10", "4", "4", "8", "4"], ["4", "10", "12.2", "4", "4", "8", "4"], ["4", "10", "12.2", "4", "4", "4", "8", "4"], ["4", "10", "12.2", "4", "10", "4", "4", "8", "4"], ["4", "10", "12.2", "4", "10", "4", "8", "4"], ["12.2", "4", "10", "12.2", "4", "10", "4", "8", "4"], ["12.2", "4", "10", "3", "4", "10", "4", "8", "4"], ["4"], ["l5E"]]}, {"EndTime": 1552344502.6431649, "FinalMinimizedSolution": ["3"], "FinalCoverage": [14, 5, 6, 2, 55, "5,", "10-13,", "4->5,", "6->10"], "FinalSolution": ["3"], "StartTime": 1552344500.8233845, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["4"], ["5 6  7", "4"], ["7", "4"], [], ["4"], ["PfT"], ["9"], ["9 92j"], ["4", "4"], ["4", "4", "4"], ["4", "4", "2", "4"], ["4", "2", "4"], ["4", "2", "4 -Mq"], ["4"], ["-xb", "4"], ["8", "4"], ["Uxk", "8", "4"], ["4", "8", "4"], ["Insert18", "4", "8", "4"], ["10", "4", "8", "4"], ["10", "4", "4", "8", "4"], ["4", "10", "4", "4", "8", "4"], ["4", "10", "12.2", "4", "4", "8", "4"], ["4", "10", "12.2", "4", "4", "4", "8", "4"], ["4", "10", "12.2", "4", "10", "4", "4", "8", "4"], ["4", "10", "12.2", "4", "10", "4", "8", "4"], ["12.2", "4", "10", "12.2", "4", "10", "4", "8", "4"], ["12.2", "4", "10", "3", "4", "10", "4", "8", "4"], ["4"], ["l5E"], ["4"], ["WoF"], ["5"], ["ILc", "5"], ["4", "5"], ["Yze"]]}]], [{"CorrectInputs": [[["1 2 3", "4 5 6"], 1545623101], [["1 2 3 4", "5 6"], 1545623654]], "UniqueId": "cc2023e9-063f-4567-a0da-141c68851b86_0", "CoverageInfo": [15, 6, 8, 1, 43, "12-20,", "11->12"], "TimeStamp": 1545623706, "BadInput": ["a b c d ", "1 2 3 4"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 22, in <module>\n    Cartesian()\n  File \"temp2018.py\", line 11, in Cartesian\n    a = [int(i) for i in inp_a.split()]  # Makes input numbers into list values\n  File \"temp2018.py\", line 11, in <listcomp>\n    a = [int(i) for i in inp_a.split()]  # Makes input numbers into list values\nValueError: invalid literal for int() with base 10: 'a'\n", "ip": "2601:282:4200:2660:98b4:2e9f:6e35:4119"}, [{"EndTime": 1552295345.5893693, "FinalMinimizedSolution": ["9 5 -1 7 ", "1 2 3 4"], "FinalCoverage": null, "FinalSolution": ["9 5 -1 7 ", "1 2 3 4"], "StartTime": 1552295344.762185, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["a b c d ", "1 2 3 4"], ["9 b c d ", "1 2 3 4"], ["9 5 c d ", "1 2 3 4"], ["9 5 -1 d ", "1 2 3 4"]]}, {"EndTime": 1552295346.407621, "FinalMinimizedSolution": ["2 6 4 8 ", "1 2 3 4"], "FinalCoverage": null, "FinalSolution": ["2 6 4 8 ", "1 2 3 4"], "StartTime": 1552295345.58952, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["a b c d ", "1 2 3 4"], ["9 b c d ", "1 2 3 4"], ["9 5 c d ", "1 2 3 4"], ["9 5 -1 d ", "1 2 3 4"], ["a b c d ", "1 2 3 4"], ["2 b c d ", "1 2 3 4"], ["2 6 c d ", "1 2 3 4"], ["2 6 4 d ", "1 2 3 4"]]}, {"EndTime": 1552295347.2267992, "FinalMinimizedSolution": ["3 1 3 6 ", "1 2 3 4"], "FinalCoverage": null, "FinalSolution": ["3 1 3 6 ", "1 2 3 4"], "StartTime": 1552295346.4078014, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["a b c d ", "1 2 3 4"], ["9 b c d ", "1 2 3 4"], ["9 5 c d ", "1 2 3 4"], ["9 5 -1 d ", "1 2 3 4"], ["a b c d ", "1 2 3 4"], ["2 b c d ", "1 2 3 4"], ["2 6 c d ", "1 2 3 4"], ["2 6 4 d ", "1 2 3 4"], ["a b c d ", "1 2 3 4"], ["3 b c d ", "1 2 3 4"], ["3 1 c d ", "1 2 3 4"], ["3 1 3 d ", "1 2 3 4"]]}, {"EndTime": 1552295349.94631, "FinalMinimizedSolution": ["8 4 5 2 9 1 6 5 10 2 4 5 0 ", "1 2 3 4"], "FinalCoverage": null, "FinalSolution": ["8 4 5 2 9 1 6 5 10 2 4 5 0 ", "1 2 3 4"], "StartTime": 1552295347.22701, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["a b c d ", "1 2 3 4"], ["9 b c d ", "1 2 3 4"], ["9 5 c d ", "1 2 3 4"], ["9 5 -1 d ", "1 2 3 4"], ["a b c d ", "1 2 3 4"], ["2 b c d ", "1 2 3 4"], ["2 6 c d ", "1 2 3 4"], ["2 6 4 d ", "1 2 3 4"], ["a b c d ", "1 2 3 4"], ["3 b c d ", "1 2 3 4"], ["3 1 c d ", "1 2 3 4"], ["3 1 3 d ", "1 2 3 4"], ["a b c d ", "1 2 3 4"], ["\"\"Takes user input numbers and prints them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 user input numbers and prints them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 input numbers and prints them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 numbers and prints them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 and prints them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 9 prints them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 9 1 them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 9 1 6 in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 9 1 6 5 Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 9 1 6 5 10 pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 9 1 6 5 10 2 b c d ", "1 2 3 4"], ["8 4 5 2 9 1 6 5 10 2 4 c d ", "1 2 3 4"], ["8 4 5 2 9 1 6 5 10 2 4 5 d ", "1 2 3 4"]]}, {"EndTime": 1552295350.7655306, "FinalMinimizedSolution": ["1 10 10 7 ", "1 2 3 4"], "FinalCoverage": null, "FinalSolution": ["1 10 10 7 ", "1 2 3 4"], "StartTime": 1552295349.9466548, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["a b c d ", "1 2 3 4"], ["9 b c d ", "1 2 3 4"], ["9 5 c d ", "1 2 3 4"], ["9 5 -1 d ", "1 2 3 4"], ["a b c d ", "1 2 3 4"], ["2 b c d ", "1 2 3 4"], ["2 6 c d ", "1 2 3 4"], ["2 6 4 d ", "1 2 3 4"], ["a b c d ", "1 2 3 4"], ["3 b c d ", "1 2 3 4"], ["3 1 c d ", "1 2 3 4"], ["3 1 3 d ", "1 2 3 4"], ["a b c d ", "1 2 3 4"], ["\"\"Takes user input numbers and prints them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 user input numbers and prints them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 input numbers and prints them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 numbers and prints them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 and prints them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 9 prints them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 9 1 them in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 9 1 6 in Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 9 1 6 5 Cartesian pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 9 1 6 5 10 pairs\"\" b c d ", "1 2 3 4"], ["8 4 5 2 9 1 6 5 10 2 b c d ", "1 2 3 4"], ["8 4 5 2 9 1 6 5 10 2 4 c d ", "1 2 3 4"], ["8 4 5 2 9 1 6 5 10 2 4 5 d ", "1 2 3 4"], ["a b c d ", "1 2 3 4"], ["1 b c d ", "1 2 3 4"], ["1 10 c d ", "1 2 3 4"], ["1 10 10 d ", "1 2 3 4"]]}]], [{"CorrectInputs": [[["12345"], 1541187471], [["26594"], 1541187547], [["45864"], 1541187581], [["98762"], 1541187665], [["26494"], 1541187686], [["13579"], 1541187737], [["97531"], 1541187775], [["24680"], 1541187797], [["22332"], 1541187854], [["78637"], 1541187929]], "UniqueId": "4555e534-eb7c-4031-f2d1-f9cee5333bb0_0", "CoverageInfo": [7, 1, 4, 1, 82, "9,", "3->9"], "TimeStamp": 1541187557, "BadInput": ["5678"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 6, in <module>\n    total = total + int(number[x])\nIndexError: string index out of range\n", "ip": "194.74.196.106"}, [{"EndTime": 1552342316.5869348, "FinalMinimizedSolution": ["43133ty"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["43133ty", "5678"], "StartTime": 1552342314.7100317, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["5678"], ["qwerty", "5678"], ["4werty", "5678"], ["4-1erty", "5678"], ["431erty", "5678"], ["4313rty", "5678"]]}, {"EndTime": 1552342318.026489, "FinalMinimizedSolution": ["10410"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["10410"], "StartTime": 1552342316.5871782, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["5678"], ["qwerty", "5678"], ["4werty", "5678"], ["4-1erty", "5678"], ["431erty", "5678"], ["4313rty", "5678"], ["5678"], [], ["x4l"], ["104l"]]}, {"EndTime": 1552342320.0901473, "FinalMinimizedSolution": ["909903"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["909903", "5678"], "StartTime": 1552342318.0267372, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["5678"], ["qwerty", "5678"], ["4werty", "5678"], ["4-1erty", "5678"], ["431erty", "5678"], ["4313rty", "5678"], ["5678"], [], ["x4l"], ["104l"], ["5678"], ["NNNSSS", "5678"], ["NN9SSS", "5678"], ["N09SSS", "5678"], ["909SSS", "5678"], ["909SS3", "5678"], ["909S03", "5678"]]}, {"EndTime": 1552342323.4818876, "FinalMinimizedSolution": ["32247n"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["32247n", "221"], "StartTime": 1552342320.0904386, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["5678"], ["qwerty", "5678"], ["4werty", "5678"], ["4-1erty", "5678"], ["431erty", "5678"], ["4313rty", "5678"], ["5678"], [], ["x4l"], ["104l"], ["5678"], ["NNNSSS", "5678"], ["NN9SSS", "5678"], ["N09SSS", "5678"], ["909SSS", "5678"], ["909SS3", "5678"], ["909S03", "5678"], ["5678"], ["aYM"], ["0YM"], ["07M"], ["070"], ["KlE"], ["2lE"], ["22E"], ["221"], ["vallon", "221"], ["3allon", "221"], ["32llon", "221"], ["32l4on", "221"], ["3224on", "221"]]}, {"EndTime": 1552342325.4092638, "FinalMinimizedSolution": ["18411SP"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["18411SP", "Lnm", "5678"], "StartTime": 1552342323.4822915, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["5678"], ["qwerty", "5678"], ["4werty", "5678"], ["4-1erty", "5678"], ["431erty", "5678"], ["4313rty", "5678"], ["5678"], [], ["x4l"], ["104l"], ["5678"], ["NNNSSS", "5678"], ["NN9SSS", "5678"], ["N09SSS", "5678"], ["909SSS", "5678"], ["909SS3", "5678"], ["909S03", "5678"], ["5678"], ["aYM"], ["0YM"], ["07M"], ["070"], ["KlE"], ["2lE"], ["22E"], ["221"], ["vallon", "221"], ["3allon", "221"], ["32llon", "221"], ["32l4on", "221"], ["3224on", "221"], ["5678"], ["18", "5678"], ["18", "Lnm", "5678"], ["18 HSP", "Lnm", "5678"], ["18-1HSP", "Lnm", "5678"], ["1841HSP", "Lnm", "5678"]]}]], [{"CorrectInputs": [[["22", "144", "s"], 1524121203]], "UniqueId": "a6d2e2a2-f7e3-49e6-ab38-1b6a590d5a00_0", "CoverageInfo": [20, 3, 6, 3, 77, "16,", "18-19,", "15->16,", "17->18,", "22->exit"], "TimeStamp": 1524121232, "BadInput": ["22", "144", "k", "k", "k"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 25, in <module>\n    adicionar_quantidade()\n  File \"temp2018.py\", line 9, in adicionar_quantidade\n    decisoes(decisao)\n  File \"temp2018.py\", line 24, in decisoes\n    decisoes()\nTypeError: decisoes() missing 1 required positional argument: 'decisao'\n", "ip": "168.0.192.105"}, [{"InputHistory": [["22", "144", "k", "k", "k"], ["22 N", "144", "k", "k", "k"], ["-1", "144", "k", "k", "k"], ["-1", "k", "k", "k"], ["-1", "k", "k", "-1"], ["-1", "k", "4", "-1"], ["-1", "7", "4", "-1"], ["-1", "7", "4", "-1", "k"], ["-1", "7", "qwerty", "4", "-1", "k"], ["-1", "7", "7", "qwerty", "4", "-1", "k"], ["-1 NAO", "7", "7", "qwerty", "4", "-1", "k"], ["9", "7", "7", "qwerty", "4", "-1", "k"], ["9", "7", "qwerty", "4", "-1", "k"], ["9", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "10,92,68,36", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty N", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty N", "4 N", "-1", "k"], ["9", "2", "7", "qwerty N", "4 N", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4 NAO", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4", "NAO", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "k"], ["9", "k", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "k"], ["9", "k", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "doll", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "AABBDCCDEEFFGGHHIIJJKKLLMM", "NAO", "feedthedog", "doll", "-1", "6"], [], ["5"], ["5", "SIM"], ["5", "8"], ["5", "8", "k"], ["5", "8", "k", "8"], ["5", "8", "k", "8", " unidades de "], ["y-K"], ["2"], ["2", "k"], ["2", "-1"], ["2", "-1", "k"], ["2", "-1", "k", "k"], ["2", "-1", "k", "k", "k"], ["2", "12 3", "-1", "k", "k", "k"], ["2", "5", "-1", "k", "k", "k"], ["N\u00c3O"], ["10"], ["10", "k"], ["10", "-1"], ["10", "-1", "k"], ["10", "-1", "k", "10"], ["10", "-1", "k", "10", "22"], ["10", "-1", "k", "10 t78", "22"], ["10", "-1", "k", "", "22"], ["10", "-1", "k", "", "22 S"], ["10", "-1 5Rd", "k", "", "22 S"], ["10", "4", "k", "", "22 S"], ["10", "4", "k", " N", "22 S"], ["10", "4 ?", "k", " N", "22 S"], ["10", "2", "k", " N", "22 S"], ["2", "k", " N", "22 S"], ["2", "8", " N", "22 S"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552363725.8121507, "StartTime": 1552363714.4037328}, {"EndTime": 1552363730.1961248, "FinalMinimizedSolution": ["7", "144", "1", "N"], "FinalCoverage": [20, 5, 6, 3, 69, "16,", "18-19,", "23-24,", "15->16,", "17->18,", "22->23"], "FinalSolution": ["7", "144", "1", "N", "k", "144"], "StartTime": 1552363725.8130767, "FoundSolution": true, "NumProbesMade": 19, "InputHistory": [["22", "144", "k", "k", "k"], ["22 N", "144", "k", "k", "k"], ["-1", "144", "k", "k", "k"], ["-1", "k", "k", "k"], ["-1", "k", "k", "-1"], ["-1", "k", "4", "-1"], ["-1", "7", "4", "-1"], ["-1", "7", "4", "-1", "k"], ["-1", "7", "qwerty", "4", "-1", "k"], ["-1", "7", "7", "qwerty", "4", "-1", "k"], ["-1 NAO", "7", "7", "qwerty", "4", "-1", "k"], ["9", "7", "7", "qwerty", "4", "-1", "k"], ["9", "7", "qwerty", "4", "-1", "k"], ["9", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "10,92,68,36", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty N", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty N", "4 N", "-1", "k"], ["9", "2", "7", "qwerty N", "4 N", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4 NAO", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4", "NAO", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "k"], ["9", "k", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "k"], ["9", "k", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "doll", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "AABBDCCDEEFFGGHHIIJJKKLLMM", "NAO", "feedthedog", "doll", "-1", "6"], [], ["5"], ["5", "SIM"], ["5", "8"], ["5", "8", "k"], ["5", "8", "k", "8"], ["5", "8", "k", "8", " unidades de "], ["y-K"], ["2"], ["2", "k"], ["2", "-1"], ["2", "-1", "k"], ["2", "-1", "k", "k"], ["2", "-1", "k", "k", "k"], ["2", "12 3", "-1", "k", "k", "k"], ["2", "5", "-1", "k", "k", "k"], ["N\u00c3O"], ["10"], ["10", "k"], ["10", "-1"], ["10", "-1", "k"], ["10", "-1", "k", "10"], ["10", "-1", "k", "10", "22"], ["10", "-1", "k", "10 t78", "22"], ["10", "-1", "k", "", "22"], ["10", "-1", "k", "", "22 S"], ["10", "-1 5Rd", "k", "", "22 S"], ["10", "4", "k", "", "22 S"], ["10", "4", "k", " N", "22 S"], ["10", "4 ?", "k", " N", "22 S"], ["10", "2", "k", " N", "22 S"], ["2", "k", " N", "22 S"], ["2", "8", " N", "22 S"], ["22", "144", "k", "k", "k"], ["144", "k", "k", "k"], ["144", "k", "k", "7"], ["144", "k", "9", "7"], ["144", "10", "9", "7"], ["144", "10", "9", "7", "7"], ["144", "10", "9", "9", "7"], ["N"], ["7"], ["7", "k"], ["7", "1"], ["7", "1", "k"], ["7", "1", "k", "k"], ["7", "1", "k", "k", "7"], ["7", "1", "k", "7"], ["7", "1", "k", "7", "144"], ["7", "144", "1", "k", "7", "144"], ["7", "144", "144", "1", "k", "7", "144"], ["7", "144", "1", "k", "144"]]}, {"EndTime": 1552363734.341992, "FinalMinimizedSolution": ["9", "9", "k", "SIM"], "FinalCoverage": [20, 5, 6, 3, 69, "16,", "18-19,", "23-24,", "15->16,", "17->18,", "22->23"], "FinalSolution": ["9", "9", "k", "SIM"], "StartTime": 1552363730.1973932, "FoundSolution": true, "NumProbesMade": 21, "InputHistory": [["22", "144", "k", "k", "k"], ["22 N", "144", "k", "k", "k"], ["-1", "144", "k", "k", "k"], ["-1", "k", "k", "k"], ["-1", "k", "k", "-1"], ["-1", "k", "4", "-1"], ["-1", "7", "4", "-1"], ["-1", "7", "4", "-1", "k"], ["-1", "7", "qwerty", "4", "-1", "k"], ["-1", "7", "7", "qwerty", "4", "-1", "k"], ["-1 NAO", "7", "7", "qwerty", "4", "-1", "k"], ["9", "7", "7", "qwerty", "4", "-1", "k"], ["9", "7", "qwerty", "4", "-1", "k"], ["9", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "10,92,68,36", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty N", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty N", "4 N", "-1", "k"], ["9", "2", "7", "qwerty N", "4 N", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4 NAO", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4", "NAO", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "k"], ["9", "k", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "k"], ["9", "k", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "doll", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "AABBDCCDEEFFGGHHIIJJKKLLMM", "NAO", "feedthedog", "doll", "-1", "6"], [], ["5"], ["5", "SIM"], ["5", "8"], ["5", "8", "k"], ["5", "8", "k", "8"], ["5", "8", "k", "8", " unidades de "], ["y-K"], ["2"], ["2", "k"], ["2", "-1"], ["2", "-1", "k"], ["2", "-1", "k", "k"], ["2", "-1", "k", "k", "k"], ["2", "12 3", "-1", "k", "k", "k"], ["2", "5", "-1", "k", "k", "k"], ["N\u00c3O"], ["10"], ["10", "k"], ["10", "-1"], ["10", "-1", "k"], ["10", "-1", "k", "10"], ["10", "-1", "k", "10", "22"], ["10", "-1", "k", "10 t78", "22"], ["10", "-1", "k", "", "22"], ["10", "-1", "k", "", "22 S"], ["10", "-1 5Rd", "k", "", "22 S"], ["10", "4", "k", "", "22 S"], ["10", "4", "k", " N", "22 S"], ["10", "4 ?", "k", " N", "22 S"], ["10", "2", "k", " N", "22 S"], ["2", "k", " N", "22 S"], ["2", "8", " N", "22 S"], ["22", "144", "k", "k", "k"], ["144", "k", "k", "k"], ["144", "k", "k", "7"], ["144", "k", "9", "7"], ["144", "10", "9", "7"], ["144", "10", "9", "7", "7"], ["144", "10", "9", "9", "7"], ["N"], ["7"], ["7", "k"], ["7", "1"], ["7", "1", "k"], ["7", "1", "k", "k"], ["7", "1", "k", "k", "7"], ["7", "1", "k", "7"], ["7", "1", "k", "7", "144"], ["7", "144", "1", "k", "7", "144"], ["7", "144", "144", "1", "k", "7", "144"], ["7", "144", "1", "k", "144"], ["22", "144", "k", "k", "k"], ["3w6"], ["8"], ["8", "k"], ["8", "4"], ["8", "4", "144"], ["8", "4", "144", "144"], ["8", "4", "144", "144", "k"], ["8", "4", " unidades de ", "144", "144", "k"], ["8", "4", " unidades de ", "Jt7", "144", "144", "k"], ["8", "4 S", " unidades de ", "Jt7", "144", "144", "k"], ["itE"], ["-1"], ["-1", "144"], ["-1", "144", "k"], ["-1", "144", "k", "-1"], ["-1", "144", "k", "-1", "144"], ["?"], ["9"], ["9", "9"], ["9", "9", "k"]]}, {"EndTime": 1552363738.9383996, "FinalMinimizedSolution": ["144", "10", "5", "N\u00c3O"], "FinalCoverage": [20, 5, 6, 3, 69, "16,", "18-19,", "23-24,", "15->16,", "17->18,", "22->23"], "FinalSolution": ["144", "10", "5", "N\u00c3O", "1", "c bb aaa", "3", "k", "60L  unidades de ", "144", "ds", "k"], "StartTime": 1552363734.3434074, "FoundSolution": true, "NumProbesMade": 19, "InputHistory": [["22", "144", "k", "k", "k"], ["22 N", "144", "k", "k", "k"], ["-1", "144", "k", "k", "k"], ["-1", "k", "k", "k"], ["-1", "k", "k", "-1"], ["-1", "k", "4", "-1"], ["-1", "7", "4", "-1"], ["-1", "7", "4", "-1", "k"], ["-1", "7", "qwerty", "4", "-1", "k"], ["-1", "7", "7", "qwerty", "4", "-1", "k"], ["-1 NAO", "7", "7", "qwerty", "4", "-1", "k"], ["9", "7", "7", "qwerty", "4", "-1", "k"], ["9", "7", "qwerty", "4", "-1", "k"], ["9", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "10,92,68,36", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty N", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty N", "4 N", "-1", "k"], ["9", "2", "7", "qwerty N", "4 N", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4 NAO", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4", "NAO", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "k"], ["9", "k", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "k"], ["9", "k", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "doll", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "AABBDCCDEEFFGGHHIIJJKKLLMM", "NAO", "feedthedog", "doll", "-1", "6"], [], ["5"], ["5", "SIM"], ["5", "8"], ["5", "8", "k"], ["5", "8", "k", "8"], ["5", "8", "k", "8", " unidades de "], ["y-K"], ["2"], ["2", "k"], ["2", "-1"], ["2", "-1", "k"], ["2", "-1", "k", "k"], ["2", "-1", "k", "k", "k"], ["2", "12 3", "-1", "k", "k", "k"], ["2", "5", "-1", "k", "k", "k"], ["N\u00c3O"], ["10"], ["10", "k"], ["10", "-1"], ["10", "-1", "k"], ["10", "-1", "k", "10"], ["10", "-1", "k", "10", "22"], ["10", "-1", "k", "10 t78", "22"], ["10", "-1", "k", "", "22"], ["10", "-1", "k", "", "22 S"], ["10", "-1 5Rd", "k", "", "22 S"], ["10", "4", "k", "", "22 S"], ["10", "4", "k", " N", "22 S"], ["10", "4 ?", "k", " N", "22 S"], ["10", "2", "k", " N", "22 S"], ["2", "k", " N", "22 S"], ["2", "8", " N", "22 S"], ["22", "144", "k", "k", "k"], ["144", "k", "k", "k"], ["144", "k", "k", "7"], ["144", "k", "9", "7"], ["144", "10", "9", "7"], ["144", "10", "9", "7", "7"], ["144", "10", "9", "9", "7"], ["N"], ["7"], ["7", "k"], ["7", "1"], ["7", "1", "k"], ["7", "1", "k", "k"], ["7", "1", "k", "k", "7"], ["7", "1", "k", "7"], ["7", "1", "k", "7", "144"], ["7", "144", "1", "k", "7", "144"], ["7", "144", "144", "1", "k", "7", "144"], ["7", "144", "1", "k", "144"], ["22", "144", "k", "k", "k"], ["3w6"], ["8"], ["8", "k"], ["8", "4"], ["8", "4", "144"], ["8", "4", "144", "144"], ["8", "4", "144", "144", "k"], ["8", "4", " unidades de ", "144", "144", "k"], ["8", "4", " unidades de ", "Jt7", "144", "144", "k"], ["8", "4 S", " unidades de ", "Jt7", "144", "144", "k"], ["itE"], ["-1"], ["-1", "144"], ["-1", "144", "k"], ["-1", "144", "k", "-1"], ["-1", "144", "k", "-1", "144"], ["?"], ["9"], ["9", "9"], ["9", "9", "k"], ["22", "144", "k", "k", "k"], ["K8G"], ["-1 N\u00c3O"], ["1"], ["1", "144"], ["1", "144", "1"], ["1", "144", "1", "k"], ["1", "144", "1", "k", "144"], ["144", "1", "k", "144"], ["144", "1", "k", "144", "k"], ["144", "1", "k", "60L", "144", "k"], ["144", "Ja", "1", "k", "60L", "144", "k"], ["144", "5", "1", "k", "60L", "144", "k"], ["144", "5", "1", "k", "60L", "144", "ds", "k"], ["144", "5", "1", "3", "k", "60L", "144", "ds", "k"], ["144", "5", "1", "c bb aaa", "3", "k", "60L", "144", "ds", "k"], ["144", "C : A ", "5", "1", "c bb aaa", "3", "k", "60L", "144", "ds", "k"], ["144", "10", "5", "1", "c bb aaa", "3", "k", "60L", "144", "ds", "k"], ["144", "10", "5", "1", "c bb aaa", "3", "k", "60L  unidades de ", "144", "ds", "k"]]}, {"EndTime": 1552363741.0624416, "FinalMinimizedSolution": ["22", "144", "n", "10", "1", "0", "SIM"], "FinalCoverage": [20, 3, 6, 2, 81, "16,", "23-24,", "15->16,", "22->23"], "FinalSolution": ["22", "144", "n", "10", "1", "0", "SIM", "k", "k"], "StartTime": 1552363738.9401093, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["22", "144", "k", "k", "k"], ["22 N", "144", "k", "k", "k"], ["-1", "144", "k", "k", "k"], ["-1", "k", "k", "k"], ["-1", "k", "k", "-1"], ["-1", "k", "4", "-1"], ["-1", "7", "4", "-1"], ["-1", "7", "4", "-1", "k"], ["-1", "7", "qwerty", "4", "-1", "k"], ["-1", "7", "7", "qwerty", "4", "-1", "k"], ["-1 NAO", "7", "7", "qwerty", "4", "-1", "k"], ["9", "7", "7", "qwerty", "4", "-1", "k"], ["9", "7", "qwerty", "4", "-1", "k"], ["9", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "10,92,68,36", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty N", "4 5gJ", "-1", "k"], ["9", "2", "7", "qwerty N", "4 N", "-1", "k"], ["9", "2", "7", "qwerty N", "4 N", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4 NAO", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4", "NAO", "NAO", "-1", "k"], ["9", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "k"], ["9", "k", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "k"], ["9", "k", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "NAO", "feedthedog", "doll", "-1", "6"], ["9", "2", "2", "7", "qwerty N", "4", "NAO", "AABBDCCDEEFFGGHHIIJJKKLLMM", "NAO", "feedthedog", "doll", "-1", "6"], [], ["5"], ["5", "SIM"], ["5", "8"], ["5", "8", "k"], ["5", "8", "k", "8"], ["5", "8", "k", "8", " unidades de "], ["y-K"], ["2"], ["2", "k"], ["2", "-1"], ["2", "-1", "k"], ["2", "-1", "k", "k"], ["2", "-1", "k", "k", "k"], ["2", "12 3", "-1", "k", "k", "k"], ["2", "5", "-1", "k", "k", "k"], ["N\u00c3O"], ["10"], ["10", "k"], ["10", "-1"], ["10", "-1", "k"], ["10", "-1", "k", "10"], ["10", "-1", "k", "10", "22"], ["10", "-1", "k", "10 t78", "22"], ["10", "-1", "k", "", "22"], ["10", "-1", "k", "", "22 S"], ["10", "-1 5Rd", "k", "", "22 S"], ["10", "4", "k", "", "22 S"], ["10", "4", "k", " N", "22 S"], ["10", "4 ?", "k", " N", "22 S"], ["10", "2", "k", " N", "22 S"], ["2", "k", " N", "22 S"], ["2", "8", " N", "22 S"], ["22", "144", "k", "k", "k"], ["144", "k", "k", "k"], ["144", "k", "k", "7"], ["144", "k", "9", "7"], ["144", "10", "9", "7"], ["144", "10", "9", "7", "7"], ["144", "10", "9", "9", "7"], ["N"], ["7"], ["7", "k"], ["7", "1"], ["7", "1", "k"], ["7", "1", "k", "k"], ["7", "1", "k", "k", "7"], ["7", "1", "k", "7"], ["7", "1", "k", "7", "144"], ["7", "144", "1", "k", "7", "144"], ["7", "144", "144", "1", "k", "7", "144"], ["7", "144", "1", "k", "144"], ["22", "144", "k", "k", "k"], ["3w6"], ["8"], ["8", "k"], ["8", "4"], ["8", "4", "144"], ["8", "4", "144", "144"], ["8", "4", "144", "144", "k"], ["8", "4", " unidades de ", "144", "144", "k"], ["8", "4", " unidades de ", "Jt7", "144", "144", "k"], ["8", "4 S", " unidades de ", "Jt7", "144", "144", "k"], ["itE"], ["-1"], ["-1", "144"], ["-1", "144", "k"], ["-1", "144", "k", "-1"], ["-1", "144", "k", "-1", "144"], ["?"], ["9"], ["9", "9"], ["9", "9", "k"], ["22", "144", "k", "k", "k"], ["K8G"], ["-1 N\u00c3O"], ["1"], ["1", "144"], ["1", "144", "1"], ["1", "144", "1", "k"], ["1", "144", "1", "k", "144"], ["144", "1", "k", "144"], ["144", "1", "k", "144", "k"], ["144", "1", "k", "60L", "144", "k"], ["144", "Ja", "1", "k", "60L", "144", "k"], ["144", "5", "1", "k", "60L", "144", "k"], ["144", "5", "1", "k", "60L", "144", "ds", "k"], ["144", "5", "1", "3", "k", "60L", "144", "ds", "k"], ["144", "5", "1", "c bb aaa", "3", "k", "60L", "144", "ds", "k"], ["144", "C : A ", "5", "1", "c bb aaa", "3", "k", "60L", "144", "ds", "k"], ["144", "10", "5", "1", "c bb aaa", "3", "k", "60L", "144", "ds", "k"], ["144", "10", "5", "1", "c bb aaa", "3", "k", "60L  unidades de ", "144", "ds", "k"], ["22", "144", "k", "k", "k"], ["22", "144", "n", "k", "k", "k"], ["22", "144", "n", "k", "k", "0"], ["22", "144", "n", "k", "1", "0"], ["22", "144", "n", "10", "1", "0"], ["22", "144", "n", "10", "1", "0", "k"], ["22", "144", "n", "10", "1", "0", "k", "k"]]}]], [{"CorrectInputs": [[["l"], 1515977644]], "UniqueId": "38a92d57-8b6d-4673-9ec3-f8f122d0db5f_0", "CoverageInfo": [6, 0, 6, 2, 83, "3->exit,", "4->exit"], "TimeStamp": 1515977689, "BadInput": ["j"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 7, in <module>\n    mot=mot[0:i]+lettre+mot[i+1:]\nNameError: name 'mot' is not defined\n", "ip": "82.234.149.210"}, [{"EndTime": 1552294048.8424463, "FinalMinimizedSolution": [], "FinalCoverage": [6, 3, 6, 1, 33, "4-7,", "3->4"], "FinalSolution": ["6Ml", "j"], "StartTime": 1552294048.0597398, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["j"]]}, {"EndTime": 1552294049.6254156, "FinalMinimizedSolution": [], "FinalCoverage": [6, 3, 6, 1, 33, "4-7,", "3->4"], "FinalSolution": ["Uyi", "j"], "StartTime": 1552294048.8426042, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["j"], ["j"]]}, {"EndTime": 1552294050.3004894, "FinalMinimizedSolution": [], "FinalCoverage": [6, 1, 6, 2, 75, "7,", "3->exit,", "5->7"], "FinalSolution": [], "StartTime": 1552294049.6255798, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["j"], ["j"], ["j"]]}, {"EndTime": 1552294051.0292642, "FinalMinimizedSolution": [], "FinalCoverage": [6, 3, 6, 1, 33, "4-7,", "3->4"], "FinalSolution": ["j 0LJ"], "StartTime": 1552294050.300657, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["j"], ["j"], ["j"], ["j"]]}, {"EndTime": 1552294051.7830079, "FinalMinimizedSolution": [], "FinalCoverage": [6, 3, 6, 1, 33, "4-7,", "3->4"], "FinalSolution": ["sum34and36is", "j"], "StartTime": 1552294051.0294297, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["j"], ["j"], ["j"], ["j"], ["j"]]}]], [{"CorrectInputs": [[["aaaabbbbccccd", "codificar"], 1538184412], [["a2bc3ad2", "decodificar"], 1538184517]], "UniqueId": "036f4fca-3b5d-4f84-d539-de164ddd0c95_0", "CoverageInfo": [35, 23, 18, 3, 28, "8-13,", "15-32,", "36,", "4->13,", "5->8,", "35->36"], "TimeStamp": 1538184640, "BadInput": ["abababa", "decodificar"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 38, in <module>\n    print(decodificar(string))\n  File \"temp2018.py\", line 5, in decodificar\n    if (string[i]).isalpha() == True and (string[i+1]).isalpha() == True:\nIndexError: string index out of range\n", "ip": "146.155.158.48"}, [{"EndTime": 1552340419.771517, "FinalMinimizedSolution": ["codificar", "codificar"], "FinalCoverage": [35, 18, 18, 3, 42, "2-13,", "24-29,", "38,", "18->32,", "22->24,", "35->38"], "FinalSolution": ["codificar", "codificar"], "StartTime": 1552340418.135844, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["abababa", "decodificar"], [], ["C3T"], ["C3T", "C3T"], ["codificar"]]}, {"EndTime": 1552340421.463986, "FinalMinimizedSolution": ["codificar", "codificar"], "FinalCoverage": [35, 18, 18, 3, 42, "2-13,", "24-29,", "38,", "18->32,", "22->24,", "35->38"], "FinalSolution": ["codificar", "codificar", "QFH"], "StartTime": 1552340419.7717323, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["abababa", "decodificar"], [], ["C3T"], ["C3T", "C3T"], ["codificar"], ["abababa", "decodificar"], ["abababa"], ["abababa", "QFH"], ["codificar", "abababa", "QFH"], ["codificar", "QFH"]]}, {"EndTime": 1552340422.3951926, "FinalMinimizedSolution": ["abababa", "codificar"], "FinalCoverage": [35, 18, 18, 3, 42, "2-13,", "24-29,", "38,", "18->32,", "22->24,", "35->38"], "FinalSolution": ["abababa", "codificar", "decodificar"], "StartTime": 1552340421.4642282, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["abababa", "decodificar"], [], ["C3T"], ["C3T", "C3T"], ["codificar"], ["abababa", "decodificar"], ["abababa"], ["abababa", "QFH"], ["codificar", "abababa", "QFH"], ["codificar", "QFH"], ["abababa", "decodificar"]]}, {"EndTime": 1552340423.8416848, "FinalMinimizedSolution": ["qD1", "decodificar"], "FinalCoverage": [35, 18, 18, 1, 45, "15-32,", "36,", "35->36"], "FinalSolution": ["qD1", "decodificar"], "StartTime": 1552340422.395443, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["abababa", "decodificar"], [], ["C3T"], ["C3T", "C3T"], ["codificar"], ["abababa", "decodificar"], ["abababa"], ["abababa", "QFH"], ["codificar", "abababa", "QFH"], ["codificar", "QFH"], ["abababa", "decodificar"], ["abababa", "decodificar"], ["abababa", "0", "decodificar"], ["abababa", "0 codificar", "decodificar"], ["qD1"]]}, {"EndTime": 1552340425.3474712, "FinalMinimizedSolution": ["abababa 76T", "codificar"], "FinalCoverage": [35, 18, 18, 3, 42, "2-13,", "24-29,", "38,", "18->32,", "22->24,", "35->38"], "FinalSolution": ["abababa 76T", "codificar", "decodificar"], "StartTime": 1552340423.8419764, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["abababa", "decodificar"], [], ["C3T"], ["C3T", "C3T"], ["codificar"], ["abababa", "decodificar"], ["abababa"], ["abababa", "QFH"], ["codificar", "abababa", "QFH"], ["codificar", "QFH"], ["abababa", "decodificar"], ["abababa", "decodificar"], ["abababa", "0", "decodificar"], ["abababa", "0 codificar", "decodificar"], ["qD1"], ["abababa", "decodificar"], ["abababa", "abababa", "decodificar"], ["abababa 76T", "abababa", "decodificar"], ["abababa 76T", "decodificar"]]}]], [{"CorrectInputs": [[["14"], 1540509805], [["32"], 1540509844], [["54"], 1540509907]], "UniqueId": "b71ea421-6d8e-4d6b-a498-21de64a7dc38_0", "CoverageInfo": [5, 4, 2, 0, 14, "2-6"], "TimeStamp": 1540509871, "BadInput": ["3.6"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    t=int(input(\"Saisir un temps \"))\nValueError: invalid literal for int() with base 10: '3.6'\n", "ip": "105.154.167.88"}, [{"EndTime": 1552321035.0653758, "FinalMinimizedSolution": ["2"], "FinalCoverage": null, "FinalSolution": ["2"], "StartTime": 1552321034.810514, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3.6"]]}, {"EndTime": 1552321035.3193524, "FinalMinimizedSolution": ["7"], "FinalCoverage": null, "FinalSolution": ["7"], "StartTime": 1552321035.0655096, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3.6"], ["3.6"]]}, {"EndTime": 1552321035.57503, "FinalMinimizedSolution": ["6"], "FinalCoverage": null, "FinalSolution": ["6"], "StartTime": 1552321035.3194804, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3.6"], ["3.6"], ["3.6"]]}, {"EndTime": 1552321036.2614005, "FinalMinimizedSolution": ["5"], "FinalCoverage": null, "FinalSolution": ["5", "7"], "StartTime": 1552321035.5751631, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["3.6"], ["3.6"], ["3.6"], ["3.6"], [], ["3.6", "7"]]}, {"EndTime": 1552321036.515393, "FinalMinimizedSolution": ["10"], "FinalCoverage": null, "FinalSolution": ["10"], "StartTime": 1552321036.2615564, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3.6"], ["3.6"], ["3.6"], ["3.6"], [], ["3.6", "7"], ["3.6"]]}]], [{"CorrectInputs": [[["213", "132", "123"], 1532142289]], "UniqueId": "596d8dae-555d-427e-86d2-3121f1cabeaa_0", "CoverageInfo": [13, 4, 8, 3, 57, "8,", "10,", "13-14,", "7->8,", "9->10,", "11->13"], "TimeStamp": 1532142310, "BadInput": ["123", "*", "23"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    print(a * c)\nTypeError: can't multiply sequence by non-int of type 'str'\n", "ip": "188.168.252.143"}, [{"EndTime": 1552345763.5938554, "FinalMinimizedSolution": ["5", "23", "4"], "FinalCoverage": [13, 4, 8, 4, 62, "8,", "10,", "12,", "14,", "7->8,", "9->10,", "11->12,", "13->14"], "FinalSolution": ["5", "23", "4"], "StartTime": 1552345761.5901031, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["123", "*", "23"], ["123", "*", "1", "23"], [], ["*"], ["*", "23"], ["*", "23", "*"], ["*", "23", "4"]]}, {"EndTime": 1552345764.890568, "FinalMinimizedSolution": ["2", "123", "7"], "FinalCoverage": [13, 4, 8, 4, 62, "8,", "10,", "12,", "14,", "7->8,", "9->10,", "11->12,", "13->14"], "FinalSolution": ["2", "123", "7", "23"], "StartTime": 1552345763.5940866, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["123", "*", "23"], ["123", "*", "1", "23"], [], ["*"], ["*", "23"], ["*", "23", "*"], ["*", "23", "4"], ["123", "*", "23"], ["end", "123", "*", "23"], ["2", "123", "*", "23"]]}, {"EndTime": 1552345766.1051612, "FinalMinimizedSolution": ["123", "4 3", "6"], "FinalCoverage": null, "FinalSolution": ["123", "4 3", "6", "23"], "StartTime": 1552345764.8908339, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["123", "*", "23"], ["123", "*", "1", "23"], [], ["*"], ["*", "23"], ["*", "23", "*"], ["*", "23", "4"], ["123", "*", "23"], ["end", "123", "*", "23"], ["2", "123", "*", "23"], ["123", "*", "23"], ["123", "4 3", "*", "23"]]}, {"EndTime": 1552345767.9695969, "FinalMinimizedSolution": ["0", "7", "1"], "FinalCoverage": [13, 4, 8, 4, 62, "8,", "10,", "12,", "14,", "7->8,", "9->10,", "11->12,", "13->14"], "FinalSolution": ["0", "7", "1", "23"], "StartTime": 1552345766.1054194, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["123", "*", "23"], ["123", "*", "1", "23"], [], ["*"], ["*", "23"], ["*", "23", "*"], ["*", "23", "4"], ["123", "*", "23"], ["end", "123", "*", "23"], ["2", "123", "*", "23"], ["123", "*", "23"], ["123", "4 3", "*", "23"], ["123", "*", "23"], ["-"], ["-", "*"], ["-", "*", "23"], ["7", "*", "23"], ["0", "7", "*", "23"]]}, {"EndTime": 1552345769.0764053, "FinalMinimizedSolution": ["123", "123", "8"], "FinalCoverage": [13, 4, 8, 4, 62, "8,", "10,", "12,", "14,", "7->8,", "9->10,", "11->12,", "13->14"], "FinalSolution": ["123", "123", "8", "23"], "StartTime": 1552345767.969939, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["123", "*", "23"], ["123", "*", "1", "23"], [], ["*"], ["*", "23"], ["*", "23", "*"], ["*", "23", "4"], ["123", "*", "23"], ["end", "123", "*", "23"], ["2", "123", "*", "23"], ["123", "*", "23"], ["123", "4 3", "*", "23"], ["123", "*", "23"], ["-"], ["-", "*"], ["-", "*", "23"], ["7", "*", "23"], ["0", "7", "*", "23"], ["123", "*", "23"], ["123", "123", "*", "23"]]}]], [{"CorrectInputs": [[["s=input('write a word') y=0 i=1 for x in s:     if y+i<len(s):        if s[y]<=s[y+i]:          y+=1        else:          i+=1          y+=1 print(\"Longest substring in alphabetical order is: \"+s[y:y+i])    "], 1525633732]], "UniqueId": "5ab895d0-9285-42b6-c21d-1442aa6b1978_0", "CoverageInfo": [7, 1, 4, 2, 73, "7,", "4->7,", "5->4"], "TimeStamp": 1525633776, "BadInput": ["azcbobobegghakl"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 6, in <module>\n    print[x]\nTypeError: 'builtin_function_or_method' object is not subscriptable\n", "ip": "174.127.79.13"}, [{"EndTime": 1552365685.3159072, "FinalMinimizedSolution": [], "FinalCoverage": [7, 2, 4, 1, 55, "5-6,", "4->5"], "FinalSolution": [], "StartTime": 1552365684.4518204, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["azcbobobegghakl"], ["azcbobobegghakl", "azcbobobegghakl"]]}, {"EndTime": 1552365686.0990157, "FinalMinimizedSolution": [], "FinalCoverage": [7, 1, 4, 1, 82, "6,", "5->6"], "FinalSolution": ["& d f", "azcbobobegghakl"], "StartTime": 1552365685.3160949, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["azcbobobegghakl"], ["azcbobobegghakl", "azcbobobegghakl"], ["azcbobobegghakl"]]}, {"EndTime": 1552365686.8299694, "FinalMinimizedSolution": [], "FinalCoverage": [7, 1, 4, 1, 82, "6,", "5->6"], "FinalSolution": ["N6U"], "StartTime": 1552365686.0992136, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["azcbobobegghakl"], ["azcbobobegghakl", "azcbobobegghakl"], ["azcbobobegghakl"], ["azcbobobegghakl"]]}, {"EndTime": 1552365689.1253686, "FinalMinimizedSolution": [], "FinalCoverage": [7, 2, 4, 1, 55, "5-6,", "4->5"], "FinalSolution": ["", "1BG"], "StartTime": 1552365686.8301752, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["azcbobobegghakl"], ["azcbobobegghakl", "azcbobobegghakl"], ["azcbobobegghakl"], ["azcbobobegghakl"], ["azcbobobegghakl"], ["Pya"], ["azcbobobegghakl", "Pya"], ["1BG"], ["azcbobobegghakl", "1BG"], [" 9 5 3  0 7 -1  -5 2 9  end", "azcbobobegghakl", "1BG"], [" 9 5 3  0 7 -1  -5 2 9  end", "1BG"], [" 4Mo 5 3  0 7 -1  -5 2 9  end", "1BG"], [" 4Mo 5 3  0 7 -1  -5 2 9  end", "eQV", "1BG"]]}, {"EndTime": 1552365689.8554819, "FinalMinimizedSolution": [], "FinalCoverage": [7, 1, 4, 1, 82, "6,", "5->6"], "FinalSolution": ["oP7"], "StartTime": 1552365689.1256592, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["azcbobobegghakl"], ["azcbobobegghakl", "azcbobobegghakl"], ["azcbobobegghakl"], ["azcbobobegghakl"], ["azcbobobegghakl"], ["Pya"], ["azcbobobegghakl", "Pya"], ["1BG"], ["azcbobobegghakl", "1BG"], [" 9 5 3  0 7 -1  -5 2 9  end", "azcbobobegghakl", "1BG"], [" 9 5 3  0 7 -1  -5 2 9  end", "1BG"], [" 4Mo 5 3  0 7 -1  -5 2 9  end", "1BG"], [" 4Mo 5 3  0 7 -1  -5 2 9  end", "eQV", "1BG"], ["azcbobobegghakl"]]}]], [{"CorrectInputs": [[["4 -1 9 3"], 1533167905]], "UniqueId": "4a64f65a-53a6-406a-e954-d6be9d092de5_0", "CoverageInfo": [15, 6, 4, 2, 58, "8-12,", "16,", "5->16,", "7->8"], "TimeStamp": 1533168060, "BadInput": ["1 2 1 3 4  5 6 -1 2 -1"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 14, in <module>\n    n = int(e) + n\nValueError: invalid literal for int() with base 10: ' '\n", "ip": "109.226.83.41"}, [{"EndTime": 1552295633.3162594, "FinalMinimizedSolution": [], "FinalCoverage": [15, 0, 4, 0, 100], "FinalSolution": ["1 2 1 3 4 1053610-1622-1"], "StartTime": 1552295631.8243854, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["1 2 1 3 4  5 6 -1 2 -1"], ["1 2 1 3 4  5 6 -1 22-1"], ["1 2 1 3 4  5 6 -1622-1"], ["1 2 1 3 4  5 610-1622-1"], ["1 2 1 3 4  53610-1622-1"]]}, {"EndTime": 1552295634.798924, "FinalMinimizedSolution": [], "FinalCoverage": [15, 5, 4, 1, 68, "8-12,", "7->8"], "FinalSolution": ["1 2 1 3 4 45063-11029-1"], "StartTime": 1552295633.316465, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["1 2 1 3 4  5 6 -1 2 -1"], ["1 2 1 3 4  5 6 -1 22-1"], ["1 2 1 3 4  5 6 -1622-1"], ["1 2 1 3 4  5 610-1622-1"], ["1 2 1 3 4  53610-1622-1"], ["1 2 1 3 4  5 6 -1 2 -1"], ["1 2 1 3 4  5 6 -1 29-1"], ["1 2 1 3 4  5 6 -11029-1"], ["1 2 1 3 4  5 63-11029-1"], ["1 2 1 3 4  5063-11029-1"]]}, {"EndTime": 1552295636.2871692, "FinalMinimizedSolution": [], "FinalCoverage": [15, 0, 4, 0, 100], "FinalSolution": ["1 2 1 3 4 05769-1126-1"], "StartTime": 1552295634.7991362, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["1 2 1 3 4  5 6 -1 2 -1"], ["1 2 1 3 4  5 6 -1 22-1"], ["1 2 1 3 4  5 6 -1622-1"], ["1 2 1 3 4  5 610-1622-1"], ["1 2 1 3 4  53610-1622-1"], ["1 2 1 3 4  5 6 -1 2 -1"], ["1 2 1 3 4  5 6 -1 29-1"], ["1 2 1 3 4  5 6 -11029-1"], ["1 2 1 3 4  5 63-11029-1"], ["1 2 1 3 4  5063-11029-1"], ["1 2 1 3 4  5 6 -1 2 -1"], ["1 2 1 3 4  5 6 -1 26-1"], ["1 2 1 3 4  5 6 -1126-1"], ["1 2 1 3 4  5 69-1126-1"], ["1 2 1 3 4  5769-1126-1"]]}, {"EndTime": 1552295637.019305, "FinalMinimizedSolution": [], "FinalCoverage": [15, 9, 4, 1, 37, "6-15,", "5->6"], "FinalSolution": [""], "StartTime": 1552295636.2874093, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 2 1 3 4  5 6 -1 2 -1"], ["1 2 1 3 4  5 6 -1 22-1"], ["1 2 1 3 4  5 6 -1622-1"], ["1 2 1 3 4  5 610-1622-1"], ["1 2 1 3 4  53610-1622-1"], ["1 2 1 3 4  5 6 -1 2 -1"], ["1 2 1 3 4  5 6 -1 29-1"], ["1 2 1 3 4  5 6 -11029-1"], ["1 2 1 3 4  5 63-11029-1"], ["1 2 1 3 4  5063-11029-1"], ["1 2 1 3 4  5 6 -1 2 -1"], ["1 2 1 3 4  5 6 -1 26-1"], ["1 2 1 3 4  5 6 -1126-1"], ["1 2 1 3 4  5 69-1126-1"], ["1 2 1 3 4  5769-1126-1"], ["1 2 1 3 4  5 6 -1 2 -1"]]}, {"EndTime": 1552295637.9430451, "FinalMinimizedSolution": [], "FinalCoverage": [15, 2, 4, 1, 84, "14-15,", "7->14"], "FinalSolution": ["-1-"], "StartTime": 1552295637.0195532, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1 2 1 3 4  5 6 -1 2 -1"], ["1 2 1 3 4  5 6 -1 22-1"], ["1 2 1 3 4  5 6 -1622-1"], ["1 2 1 3 4  5 610-1622-1"], ["1 2 1 3 4  53610-1622-1"], ["1 2 1 3 4  5 6 -1 2 -1"], ["1 2 1 3 4  5 6 -1 29-1"], ["1 2 1 3 4  5 6 -11029-1"], ["1 2 1 3 4  5 63-11029-1"], ["1 2 1 3 4  5063-11029-1"], ["1 2 1 3 4  5 6 -1 2 -1"], ["1 2 1 3 4  5 6 -1 26-1"], ["1 2 1 3 4  5 6 -1126-1"], ["1 2 1 3 4  5 69-1126-1"], ["1 2 1 3 4  5769-1126-1"], ["1 2 1 3 4  5 6 -1 2 -1"], ["1 2 1 3 4  5 6 -1 2 -1"], [" -"]]}]], [{"CorrectInputs": [[["12", "2", "2000"], 1524700054]], "UniqueId": "b0fe73a5-2c1d-4351-b0e4-55d0974ccee9_0", "CoverageInfo": [35, 22, 16, 5, 27, "8-11,", "14-19,", "23,", "25-27,", "31-40,", "44-46,", "22->23,", "24->25,", "24->27,", "43->44,", "43->46"], "TimeStamp": 1524700200, "BadInput": ["29", "2", "2016"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 48, in <module>\n    main()\n  File \"temp2018.py\", line 43, in main\n    if checkDay(day,month,year)>1:\n  File \"temp2018.py\", line 24, in checkDay\n    elif day==29 and month==2 and leap():\nTypeError: leap() missing 1 required positional argument: 'year'\n", "ip": "146.230.179.231"}, [{"EndTime": 1552360398.1302683, "FinalMinimizedSolution": ["6", "10", "2"], "FinalCoverage": [35, 21, 16, 2, 31, "8-11,", "14-19,", "24-27,", "31-40,", "46,", "22->24,", "43->46"], "FinalSolution": ["6", "10", "2"], "StartTime": 1552360396.3057494, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["29", "2", "2016"], [], ["6"], ["6", "/"], ["6", "10"], ["6", "10", "Vd7"]]}, {"EndTime": 1552360399.7677865, "FinalMinimizedSolution": ["7", "7", "6"], "FinalCoverage": [35, 21, 16, 2, 31, "8-11,", "14-19,", "24-27,", "31-40,", "46,", "22->24,", "43->46"], "FinalSolution": ["7", "7", "6"], "StartTime": 1552360398.130486, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["29", "2", "2016"], [], ["6"], ["6", "/"], ["6", "10"], ["6", "10", "Vd7"], ["29", "2", "2016"], ["/"], ["7"], ["7", "7"], ["7", "7", "/"]]}, {"EndTime": 1552360403.6811736, "FinalMinimizedSolution": ["773", "4", "29"], "FinalCoverage": null, "FinalSolution": ["773", "4", "29", "1F0 1", "2", "8KY", "10"], "StartTime": 1552360399.768051, "FoundSolution": true, "NumProbesMade": 15, "InputHistory": [["29", "2", "2016"], [], ["6"], ["6", "/"], ["6", "10"], ["6", "10", "Vd7"], ["29", "2", "2016"], ["/"], ["7"], ["7", "7"], ["7", "7", "/"], ["29", "2", "2016"], ["29", "2016"], ["29", "2016", "29"], ["29", "2016", "29 jwP"], ["29", "2016", "10"], ["29", "2016", "2", "10"], ["29", "773", "2016", "2", "10"], ["29", "773", "29", "2016", "2", "10"], ["29", "773", "29", "2016", "2 8KY", "10"], ["29", "773", "29", "2016", "2", "8KY", "10"], ["29", "773", "29", "2016 /", "2", "8KY", "10"], ["29", "773", "29", "1F0 /", "2", "8KY", "10"], ["29", "773", "29", "1F0 1", "2", "8KY", "10"], ["29", "773", "[4,4,4,4,4,4,5,1,8]", "29", "1F0 1", "2", "8KY", "10"], ["29", "773", "4", "29", "1F0 1", "2", "8KY", "10"]]}, {"EndTime": 1552360405.2306948, "FinalMinimizedSolution": ["9", "9", "2"], "FinalCoverage": null, "FinalSolution": ["9", "9", "2"], "StartTime": 1552360403.6816113, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["29", "2", "2016"], [], ["6"], ["6", "/"], ["6", "10"], ["6", "10", "Vd7"], ["29", "2", "2016"], ["/"], ["7"], ["7", "7"], ["7", "7", "/"], ["29", "2", "2016"], ["29", "2016"], ["29", "2016", "29"], ["29", "2016", "29 jwP"], ["29", "2016", "10"], ["29", "2016", "2", "10"], ["29", "773", "2016", "2", "10"], ["29", "773", "29", "2016", "2", "10"], ["29", "773", "29", "2016", "2 8KY", "10"], ["29", "773", "29", "2016", "2", "8KY", "10"], ["29", "773", "29", "2016 /", "2", "8KY", "10"], ["29", "773", "29", "1F0 /", "2", "8KY", "10"], ["29", "773", "29", "1F0 1", "2", "8KY", "10"], ["29", "773", "[4,4,4,4,4,4,5,1,8]", "29", "1F0 1", "2", "8KY", "10"], ["29", "773", "4", "29", "1F0 1", "2", "8KY", "10"], ["29", "2", "2016"], ["72i"], ["9"], ["9", "9"]]}, {"EndTime": 1552360407.5909665, "FinalMinimizedSolution": ["2016", "9", "6"], "FinalCoverage": null, "FinalSolution": ["2016", "9", "6"], "StartTime": 1552360405.2311628, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["29", "2", "2016"], [], ["6"], ["6", "/"], ["6", "10"], ["6", "10", "Vd7"], ["29", "2", "2016"], ["/"], ["7"], ["7", "7"], ["7", "7", "/"], ["29", "2", "2016"], ["29", "2016"], ["29", "2016", "29"], ["29", "2016", "29 jwP"], ["29", "2016", "10"], ["29", "2016", "2", "10"], ["29", "773", "2016", "2", "10"], ["29", "773", "29", "2016", "2", "10"], ["29", "773", "29", "2016", "2 8KY", "10"], ["29", "773", "29", "2016", "2", "8KY", "10"], ["29", "773", "29", "2016 /", "2", "8KY", "10"], ["29", "773", "29", "1F0 /", "2", "8KY", "10"], ["29", "773", "29", "1F0 1", "2", "8KY", "10"], ["29", "773", "[4,4,4,4,4,4,5,1,8]", "29", "1F0 1", "2", "8KY", "10"], ["29", "773", "4", "29", "1F0 1", "2", "8KY", "10"], ["29", "2", "2016"], ["72i"], ["9"], ["9", "9"], ["29", "2", "2016"], ["29", "2", "/", "2016"], ["29", "2", "-1", "2016"], ["29", "2", "-1", "4", "2016"], ["P9W"], ["/ /"], ["2016", "9"], ["2016", "9", "/"]]}]], [{"CorrectInputs": [[["0"], 1540677191]], "UniqueId": "18c4c61a-3c83-4675-9041-f55e0a6b874d_0", "CoverageInfo": [14, 11, 10, 0, 12, "6-20"], "TimeStamp": 1540677412, "BadInput": ["0 255 255 255 255"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 4, in <module>\n    T = int(input())\nValueError: invalid literal for int() with base 10: '0 255 255 255 255'\n", "ip": "179.197.49.218"}, [{"EndTime": 1552279992.1185894, "FinalMinimizedSolution": ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "0"], "FinalCoverage": [14, 1, 10, 1, 92, "20,", "17->20"], "FinalSolution": ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "0"], "StartTime": 1552279983.1264255, "FoundSolution": true, "NumProbesMade": 44, "InputHistory": [["0 255 255 255 255"], ["7"], ["7", "7"], ["7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "C"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "Q15"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "D"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "-1"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255"]]}, {"InputHistory": [["0 255 255 255 255"], ["7"], ["7", "7"], ["7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "C"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "Q15"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "D"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "-1"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255"], ["0 255 255 255 255"], ["1"], ["1", "B"], ["1", "6"], ["1", "6", "1BR"], ["1", "6", "1"], ["1", "6", "1", "6"], ["1", "6", "1", "6", "A"], ["1", "6", "1", "6", "1"], ["1", "6", "1", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "E"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "D"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "0 255 255 255 255"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3", "6", "1", "6"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552280002.9873648, "StartTime": 1552279992.1203725}, {"EndTime": 1552280008.0231276, "FinalMinimizedSolution": ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255", "0 255 255 255 255", "4", "0"], "FinalCoverage": [14, 1, 10, 1, 92, "20,", "17->20"], "FinalSolution": ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255", "0 255 255 255 255", "4", "0"], "StartTime": 1552280002.9917276, "FoundSolution": true, "NumProbesMade": 23, "InputHistory": [["0 255 255 255 255"], ["7"], ["7", "7"], ["7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "C"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "Q15"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "D"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "-1"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255"], ["0 255 255 255 255"], ["1"], ["1", "B"], ["1", "6"], ["1", "6", "1BR"], ["1", "6", "1"], ["1", "6", "1", "6"], ["1", "6", "1", "6", "A"], ["1", "6", "1", "6", "1"], ["1", "6", "1", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "E"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "D"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "0 255 255 255 255"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3", "6", "1", "6"], ["0 255 255 255 255"], ["6"], ["6", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "A"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255", "0 255 255 255 255", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255", "0 255 255 255 255", "4", "0 255 255 255 255"]]}, {"EndTime": 1552280016.9738636, "FinalMinimizedSolution": ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "1", "0 255 255 255 255", "0"], "FinalCoverage": [14, 1, 10, 1, 92, "20,", "17->20"], "FinalSolution": ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "1", "0 255 255 255 255", "0"], "StartTime": 1552280008.028043, "FoundSolution": true, "NumProbesMade": 44, "InputHistory": [["0 255 255 255 255"], ["7"], ["7", "7"], ["7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "C"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "Q15"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "D"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "-1"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255"], ["0 255 255 255 255"], ["1"], ["1", "B"], ["1", "6"], ["1", "6", "1BR"], ["1", "6", "1"], ["1", "6", "1", "6"], ["1", "6", "1", "6", "A"], ["1", "6", "1", "6", "1"], ["1", "6", "1", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "E"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "D"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "0 255 255 255 255"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3", "6", "1", "6"], ["0 255 255 255 255"], ["6"], ["6", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "A"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255", "0 255 255 255 255", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255", "0 255 255 255 255", "4", "0 255 255 255 255"], ["0 255 255 255 255"], [], ["10"], ["10", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "C"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "A"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "1"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "1", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "1", "0 255 255 255 255", "0 255 255 255 255"]]}, {"InputHistory": [["0 255 255 255 255"], ["7"], ["7", "7"], ["7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "C"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "Q15"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "D"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "-1"], ["7", "7", "0 255 255 255 255", "7", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255", "4", "7", "7", "0 255 255 255 255", "5", "4", "7", "7", "7", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "5", "7", "0 255 255 255 255", "8", "4", "7", "0 255 255 255 255", "7", "7", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "0 255 255 255 255"], ["0 255 255 255 255"], ["1"], ["1", "B"], ["1", "6"], ["1", "6", "1BR"], ["1", "6", "1"], ["1", "6", "1", "6"], ["1", "6", "1", "6", "A"], ["1", "6", "1", "6", "1"], ["1", "6", "1", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "E"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "D"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "0 255 255 255 255"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3", "6"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3", "6", "1"], ["1", "6", "1", "6", "1", "1", "1", "6", "6", "1", "6", "6", "1", "6", "1", "1", "1", "10", "1", "1", "1", "1", "10", "1", "1", "1", "1", "6", "6", "1", "1", "6", "1", "1", "6", "6", "1", "1", "1", "6", "1", "6", "6", "1", "1", "7", "6", "0 255 255 255 255", "6", "3", "6", "1", "6"], ["0 255 255 255 255"], ["6"], ["6", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "A"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255", "0 255 255 255 255"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255", "0 255 255 255 255", "4"], ["6", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "4", "4", "0 255 255 255 255", "6", "0 255 255 255 255", "6", "4", "0 255 255 255 255", "0 255 255 255 255", "4", "0 255 255 255 255"], ["0 255 255 255 255"], [], ["10"], ["10", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "C"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "A"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "1"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "1", "0 255 255 255 255"], ["10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0", "0 255 255 255 255", "6", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "10", "0 255 255 255 255", "0 255 255 255 255", "0 255 255 255 255", "1", "10", "4", "0 255 255 255 255", "10", "10", "0 255 255 255 255", "1", "0 255 255 255 255", "0 255 255 255 255"], ["0 255 255 255 255"], ["-1"], ["-1", "GpT"], ["-1", "8"], ["-1", "8", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8"], ["-1", "8", "0 255 255 255 255", "8", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "D"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8", "-1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8", "-1", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8", "-1", "8", "-1"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8", "-1", "8", "-1", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8", "-1", "8", "-1", "7"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8", "-1", "8", "-1", "7", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8", "-1", "8", "-1", "7", "8", "3"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8", "-1", "8", "-1", "7", "8", "3", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8", "-1", "8", "-1", "7", "8", "3", "8", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8", "-1", "8", "-1", "7", "8", "3", "8", "8", "8"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8", "-1", "8", "-1", "7", "8", "3", "8", "8", "8", "6"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8", "-1", "8", "-1", "7", "8", "3", "8", "8", "8", "6", "0 255 255 255 255"], ["-1", "8", "0 255 255 255 255", "8", "8", "-1", "0 255 255 255 255", "8", "6", "-1", "8", "6", "8", "0 255 255 255 255", "0 255 255 255 255", "-1", "6", "-1", "-1", "8", "0 255 255 255 255", "-1", "0 255 255 255 255", "0 255 255 255 255", "8", "0 255 255 255 255", "-1", "-1", "3", "8", "-1", "8", "-1", "1", "-1", "7", "3", "8", "8", "8", "-1", "8", "-1", "7", "8", "3", "8", "8", "8", "6", "0 255 255 255 255", "0 255 255 255 255"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552280027.8054266, "StartTime": 1552280016.9803789}]], [{"CorrectInputs": [[["team2 1"], 1540058684]], "UniqueId": "79a0ab03-38c4-49c1-9fcf-9e077ae26d77_0", "CoverageInfo": [32, 17, 20, 2, 37, "21-27,", "31-39,", "52,", "55-56,", "43->exit,", "51->52"], "TimeStamp": 1540058871, "BadInput": ["team2 2"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 54, in <module>\n    org(diction,c,d)\n  File \"temp2018.py\", line 30, in org\n    org(diction,diction[c][0],g)\n  File \"temp2018.py\", line 20, in org\n    b= int(diction[c][g+1])\nIndexError: list index out of range\n", "ip": "2401:dd00:10:20:b0bc:d78:9a47:4cc9"}, [{"InputHistory": [["team2 2"], ["team2 NONE"], ["team2 10"], ["team2 end"], ["team2 100"], ["team2 team2 2"], ["team2 5 2"], ["team2", "5", "2"], ["team2", "hAy", "5", "2"], ["team2", "7u7", "hAy", "5", "2"], ["team2", "7u7", "hAy 5", "5", "2"], ["team2", "7u7", "hAy 5", "5", "0", "2"], ["team2", "7u7 0", "hAy 5", "5", "0", "2"], ["team2", "7u7", "0", "hAy 5", "5", "0", "2"], [], ["8ro"], ["Vd9"], ["Baloo", "Vd9"], ["zx6", "Baloo", "Vd9"], ["CHAPTER VIII - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 2 -9 6 4", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 2 -9 6 4", "1", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9 O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "Baloo", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["", "", "1", "company", "0", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["n05"], ["n05 10"], [""], ["5"], ["team2part1", "5"], ["team2part1", "5 rmD"], ["NONE", "team2part1", "5 rmD"], ["NONE", "10", "team2part1", "5 rmD"], ["NONE", "company", "10", "team2part1", "5 rmD"], ["0", "NONE", "company", "10", "team2part1", "5 rmD"], ["0", "NONE", "company", "10", "team2part1", "5 x"], ["0", "NONE", "company", "company", "10", "team2part1", "5 x"], ["team2part2"], ["JuW"], ["cW2"], ["3", "5"], ["3"], ["PJE"], ["100", "PJE"], ["Nhy"], ["-1 10 13 25 -10", "Nhy"], ["-1 10 13 25 1 20", "Nhy"], ["-1 10 13 25 1 20", "Patm labgxl bg max gbzam ldr", "Nhy"], ["-1 10 13 25 1 20", "Patm", "labgxl", "bg", "max", "gbzam", "ldr", "Nhy"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552351934.8185349, "StartTime": 1552351923.437346}, {"EndTime": 1552351946.314341, "FinalMinimizedSolution": ["team2part2 2"], "FinalCoverage": [32, 21, 20, 1, 27, "17-39,", "54-55,", "51->54"], "FinalSolution": ["team2part2 2"], "StartTime": 1552351934.8192892, "FoundSolution": true, "NumProbesMade": 57, "InputHistory": [["team2 2"], ["team2 NONE"], ["team2 10"], ["team2 end"], ["team2 100"], ["team2 team2 2"], ["team2 5 2"], ["team2", "5", "2"], ["team2", "hAy", "5", "2"], ["team2", "7u7", "hAy", "5", "2"], ["team2", "7u7", "hAy 5", "5", "2"], ["team2", "7u7", "hAy 5", "5", "0", "2"], ["team2", "7u7 0", "hAy 5", "5", "0", "2"], ["team2", "7u7", "0", "hAy 5", "5", "0", "2"], [], ["8ro"], ["Vd9"], ["Baloo", "Vd9"], ["zx6", "Baloo", "Vd9"], ["CHAPTER VIII - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 2 -9 6 4", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 2 -9 6 4", "1", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9 O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "Baloo", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["", "", "1", "company", "0", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["n05"], ["n05 10"], [""], ["5"], ["team2part1", "5"], ["team2part1", "5 rmD"], ["NONE", "team2part1", "5 rmD"], ["NONE", "10", "team2part1", "5 rmD"], ["NONE", "company", "10", "team2part1", "5 rmD"], ["0", "NONE", "company", "10", "team2part1", "5 rmD"], ["0", "NONE", "company", "10", "team2part1", "5 x"], ["0", "NONE", "company", "company", "10", "team2part1", "5 x"], ["team2part2"], ["JuW"], ["cW2"], ["3", "5"], ["3"], ["PJE"], ["100", "PJE"], ["Nhy"], ["-1 10 13 25 -10", "Nhy"], ["-1 10 13 25 1 20", "Nhy"], ["-1 10 13 25 1 20", "Patm labgxl bg max gbzam ldr", "Nhy"], ["-1 10 13 25 1 20", "Patm", "labgxl", "bg", "max", "gbzam", "ldr", "Nhy"], ["team2 2"], ["team2 -3"], ["1"], ["1 2 3 4", "1"], ["1 2 3 4", "Cx-", "1"], ["1 1 2 3 4 3 4", "Cx-", "1"], ["1 1 2 3 4 4a2 4", "Cx-", "1"], ["1 1 2 5 4 4a2 4", "Cx-", "1"], ["1 1 2 5 4 team2part2 4", "Cx-", "1"], ["1 1 2 5 4 team2part2 4", "1"], ["1 1 2 5 4 team2part2 4", "10", "1"], ["0", "team2part2"], ["lXu"], ["7jE", "lXu"], ["4PH"], ["5", "4PH"], ["company", "3"], ["5", "company", "3"], ["5 0", "company", "3"], ["5 0", "company", "3 7tv"], ["5 0", "0.0 20.0 5.0", "company", "3 7tv"], ["5 0", "0.0 20.0 5.0", "company", ""], ["5 0", "0.0 engineering 5.0", "company", ""], ["5 0", "0.0 engineering 5.0", "O9J", "company", ""], ["5 0", "10 9 engineering 5.0", "O9J", "company", ""], ["5 0", "10 9 engineering 1.0 1.0 2.0 1.5", "O9J", "company", ""], ["-Bx"], ["Lqu"], ["team2", "Lqu"], ["team2", "team2", "Lqu"], ["team2", "team2"], ["30", "team2", "team2"], ["30", "team2"], ["30", "5", "team2"], ["40"], ["40", "40"], ["10", "40"], ["team2"], ["0"], ["team2", "0"], ["team2", "0.01", "0"], ["1,2", "team2", "0.01", "0"], ["1,2", "team2", "0.01", "9w4", "0"], ["1,2", "team2", "0.01", "X1Q", "9w4", "0"], ["1,2", "team2", "0.01", "0", "X1Q", "9w4", "0"], ["nHZ"], ["6 5 8", "nHZ"], ["6", "5", "8", "nHZ"], ["6", "3", "5", "8", "nHZ"], ["UKP"], ["3 5", "5"], ["vq4"], ["5", "vq4"], ["KQb"], ["KQb i0k"], ["KQb 6"], ["KQb 2"]]}, {"InputHistory": [["team2 2"], ["team2 NONE"], ["team2 10"], ["team2 end"], ["team2 100"], ["team2 team2 2"], ["team2 5 2"], ["team2", "5", "2"], ["team2", "hAy", "5", "2"], ["team2", "7u7", "hAy", "5", "2"], ["team2", "7u7", "hAy 5", "5", "2"], ["team2", "7u7", "hAy 5", "5", "0", "2"], ["team2", "7u7 0", "hAy 5", "5", "0", "2"], ["team2", "7u7", "0", "hAy 5", "5", "0", "2"], [], ["8ro"], ["Vd9"], ["Baloo", "Vd9"], ["zx6", "Baloo", "Vd9"], ["CHAPTER VIII - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 2 -9 6 4", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 2 -9 6 4", "1", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9 O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "Baloo", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["", "", "1", "company", "0", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["n05"], ["n05 10"], [""], ["5"], ["team2part1", "5"], ["team2part1", "5 rmD"], ["NONE", "team2part1", "5 rmD"], ["NONE", "10", "team2part1", "5 rmD"], ["NONE", "company", "10", "team2part1", "5 rmD"], ["0", "NONE", "company", "10", "team2part1", "5 rmD"], ["0", "NONE", "company", "10", "team2part1", "5 x"], ["0", "NONE", "company", "company", "10", "team2part1", "5 x"], ["team2part2"], ["JuW"], ["cW2"], ["3", "5"], ["3"], ["PJE"], ["100", "PJE"], ["Nhy"], ["-1 10 13 25 -10", "Nhy"], ["-1 10 13 25 1 20", "Nhy"], ["-1 10 13 25 1 20", "Patm labgxl bg max gbzam ldr", "Nhy"], ["-1 10 13 25 1 20", "Patm", "labgxl", "bg", "max", "gbzam", "ldr", "Nhy"], ["team2 2"], ["team2 -3"], ["1"], ["1 2 3 4", "1"], ["1 2 3 4", "Cx-", "1"], ["1 1 2 3 4 3 4", "Cx-", "1"], ["1 1 2 3 4 4a2 4", "Cx-", "1"], ["1 1 2 5 4 4a2 4", "Cx-", "1"], ["1 1 2 5 4 team2part2 4", "Cx-", "1"], ["1 1 2 5 4 team2part2 4", "1"], ["1 1 2 5 4 team2part2 4", "10", "1"], ["0", "team2part2"], ["lXu"], ["7jE", "lXu"], ["4PH"], ["5", "4PH"], ["company", "3"], ["5", "company", "3"], ["5 0", "company", "3"], ["5 0", "company", "3 7tv"], ["5 0", "0.0 20.0 5.0", "company", "3 7tv"], ["5 0", "0.0 20.0 5.0", "company", ""], ["5 0", "0.0 engineering 5.0", "company", ""], ["5 0", "0.0 engineering 5.0", "O9J", "company", ""], ["5 0", "10 9 engineering 5.0", "O9J", "company", ""], ["5 0", "10 9 engineering 1.0 1.0 2.0 1.5", "O9J", "company", ""], ["-Bx"], ["Lqu"], ["team2", "Lqu"], ["team2", "team2", "Lqu"], ["team2", "team2"], ["30", "team2", "team2"], ["30", "team2"], ["30", "5", "team2"], ["40"], ["40", "40"], ["10", "40"], ["team2"], ["0"], ["team2", "0"], ["team2", "0.01", "0"], ["1,2", "team2", "0.01", "0"], ["1,2", "team2", "0.01", "9w4", "0"], ["1,2", "team2", "0.01", "X1Q", "9w4", "0"], ["1,2", "team2", "0.01", "0", "X1Q", "9w4", "0"], ["nHZ"], ["6 5 8", "nHZ"], ["6", "5", "8", "nHZ"], ["6", "3", "5", "8", "nHZ"], ["UKP"], ["3 5", "5"], ["vq4"], ["5", "vq4"], ["KQb"], ["KQb i0k"], ["KQb 6"], ["KQb 2"], ["team2 2"], ["team2 5"], ["OvP 10"], ["OvP 8"], ["bb 8"], ["bb qo7"], ["bb 7"], ["bb 205"], ["0 205"], ["0 40"], ["0", "40"], ["Hacker", "0", "40"], ["Hacker", "team2", "0", "40"], ["Hacker", "team2", "0", "1 90", "40"], ["Hacker", "0", "1 90", "40"], ["Hacker 0", "0", "1 90", "40"], ["Hacker 0", "0", "1 p9c", "40"], ["9j3"], ["team2part2", "9j3"], ["company", "team2part2", "9j3"], ["company", "9j3"], ["9j3 oFY"], ["9j3 6"], ["9j3 team2"], ["9j3 -1"], ["9j3 aQ7"], ["9j3 8"], ["team2 2 8"], ["team2 em4 8"], ["team2 7 8"], ["team2", "7", "8"], ["team2", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8"], ["team2 finance", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8 g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P 5", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P", "5", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "5", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "5", "0", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "0", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "0 10", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "team2 10", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "team2 10", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "team2 10", "accounting", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "team2 10", "accounting", "team2 2", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "5", "team2 10", "accounting", "team2 2", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "5", "team2 10", "accounting", "team2 2", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "5", "team2 10", "accounting", "", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "team2 10", "accounting", "", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "team2", "10", "accounting", "", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "team2", "10", "accounting", "", "8", "0", "MTq", "g-5"], ["apn", "0"], ["100 100 101 400 11111 22", "0"], ["100 100 101 400 11111 3u1", "0"], ["100", "100", "101", "400", "11111", "3u1", "0"], ["1Tt"], ["company", "1Tt"], ["1Ff"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552351957.698498, "StartTime": 1552351946.3156393}, {"EndTime": 1552351960.913588, "FinalMinimizedSolution": ["manufacturing -1 N"], "FinalCoverage": [32, 21, 20, 1, 27, "17-39,", "54-55,", "51->54"], "FinalSolution": ["manufacturing -1 N", "2xs 0"], "StartTime": 1552351957.7004223, "FoundSolution": true, "NumProbesMade": 13, "InputHistory": [["team2 2"], ["team2 NONE"], ["team2 10"], ["team2 end"], ["team2 100"], ["team2 team2 2"], ["team2 5 2"], ["team2", "5", "2"], ["team2", "hAy", "5", "2"], ["team2", "7u7", "hAy", "5", "2"], ["team2", "7u7", "hAy 5", "5", "2"], ["team2", "7u7", "hAy 5", "5", "0", "2"], ["team2", "7u7 0", "hAy 5", "5", "0", "2"], ["team2", "7u7", "0", "hAy 5", "5", "0", "2"], [], ["8ro"], ["Vd9"], ["Baloo", "Vd9"], ["zx6", "Baloo", "Vd9"], ["CHAPTER VIII - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 2 -9 6 4", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 2 -9 6 4", "1", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9 O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "Baloo", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["", "", "1", "company", "0", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["n05"], ["n05 10"], [""], ["5"], ["team2part1", "5"], ["team2part1", "5 rmD"], ["NONE", "team2part1", "5 rmD"], ["NONE", "10", "team2part1", "5 rmD"], ["NONE", "company", "10", "team2part1", "5 rmD"], ["0", "NONE", "company", "10", "team2part1", "5 rmD"], ["0", "NONE", "company", "10", "team2part1", "5 x"], ["0", "NONE", "company", "company", "10", "team2part1", "5 x"], ["team2part2"], ["JuW"], ["cW2"], ["3", "5"], ["3"], ["PJE"], ["100", "PJE"], ["Nhy"], ["-1 10 13 25 -10", "Nhy"], ["-1 10 13 25 1 20", "Nhy"], ["-1 10 13 25 1 20", "Patm labgxl bg max gbzam ldr", "Nhy"], ["-1 10 13 25 1 20", "Patm", "labgxl", "bg", "max", "gbzam", "ldr", "Nhy"], ["team2 2"], ["team2 -3"], ["1"], ["1 2 3 4", "1"], ["1 2 3 4", "Cx-", "1"], ["1 1 2 3 4 3 4", "Cx-", "1"], ["1 1 2 3 4 4a2 4", "Cx-", "1"], ["1 1 2 5 4 4a2 4", "Cx-", "1"], ["1 1 2 5 4 team2part2 4", "Cx-", "1"], ["1 1 2 5 4 team2part2 4", "1"], ["1 1 2 5 4 team2part2 4", "10", "1"], ["0", "team2part2"], ["lXu"], ["7jE", "lXu"], ["4PH"], ["5", "4PH"], ["company", "3"], ["5", "company", "3"], ["5 0", "company", "3"], ["5 0", "company", "3 7tv"], ["5 0", "0.0 20.0 5.0", "company", "3 7tv"], ["5 0", "0.0 20.0 5.0", "company", ""], ["5 0", "0.0 engineering 5.0", "company", ""], ["5 0", "0.0 engineering 5.0", "O9J", "company", ""], ["5 0", "10 9 engineering 5.0", "O9J", "company", ""], ["5 0", "10 9 engineering 1.0 1.0 2.0 1.5", "O9J", "company", ""], ["-Bx"], ["Lqu"], ["team2", "Lqu"], ["team2", "team2", "Lqu"], ["team2", "team2"], ["30", "team2", "team2"], ["30", "team2"], ["30", "5", "team2"], ["40"], ["40", "40"], ["10", "40"], ["team2"], ["0"], ["team2", "0"], ["team2", "0.01", "0"], ["1,2", "team2", "0.01", "0"], ["1,2", "team2", "0.01", "9w4", "0"], ["1,2", "team2", "0.01", "X1Q", "9w4", "0"], ["1,2", "team2", "0.01", "0", "X1Q", "9w4", "0"], ["nHZ"], ["6 5 8", "nHZ"], ["6", "5", "8", "nHZ"], ["6", "3", "5", "8", "nHZ"], ["UKP"], ["3 5", "5"], ["vq4"], ["5", "vq4"], ["KQb"], ["KQb i0k"], ["KQb 6"], ["KQb 2"], ["team2 2"], ["team2 5"], ["OvP 10"], ["OvP 8"], ["bb 8"], ["bb qo7"], ["bb 7"], ["bb 205"], ["0 205"], ["0 40"], ["0", "40"], ["Hacker", "0", "40"], ["Hacker", "team2", "0", "40"], ["Hacker", "team2", "0", "1 90", "40"], ["Hacker", "0", "1 90", "40"], ["Hacker 0", "0", "1 90", "40"], ["Hacker 0", "0", "1 p9c", "40"], ["9j3"], ["team2part2", "9j3"], ["company", "team2part2", "9j3"], ["company", "9j3"], ["9j3 oFY"], ["9j3 6"], ["9j3 team2"], ["9j3 -1"], ["9j3 aQ7"], ["9j3 8"], ["team2 2 8"], ["team2 em4 8"], ["team2 7 8"], ["team2", "7", "8"], ["team2", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8"], ["team2 finance", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8 g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P 5", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P", "5", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "5", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "5", "0", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "0", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "0 10", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "team2 10", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "team2 10", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "team2 10", "accounting", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "team2 10", "accounting", "team2 2", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "5", "team2 10", "accounting", "team2 2", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "5", "team2 10", "accounting", "team2 2", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "5", "team2 10", "accounting", "", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "team2 10", "accounting", "", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "team2", "10", "accounting", "", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "team2", "10", "accounting", "", "8", "0", "MTq", "g-5"], ["apn", "0"], ["100 100 101 400 11111 22", "0"], ["100 100 101 400 11111 3u1", "0"], ["100", "100", "101", "400", "11111", "3u1", "0"], ["1Tt"], ["company", "1Tt"], ["1Ff"], ["team2 2"], ["team2 0"], ["7"], ["h41"], ["WSQ"], ["i am caesar", "WSQ"], ["i -1 caesar", "WSQ"], ["34 -1 caesar", "WSQ"], ["34 -1 caesar", "WSQ 9j9"], ["34 -1 N", "WSQ 9j9"], ["34 -1 N", "-aZ 9j9"], ["34 -1 N", "-aZ 0"], ["34 -1 N", "2xs 0"]]}, {"InputHistory": [["team2 2"], ["team2 NONE"], ["team2 10"], ["team2 end"], ["team2 100"], ["team2 team2 2"], ["team2 5 2"], ["team2", "5", "2"], ["team2", "hAy", "5", "2"], ["team2", "7u7", "hAy", "5", "2"], ["team2", "7u7", "hAy 5", "5", "2"], ["team2", "7u7", "hAy 5", "5", "0", "2"], ["team2", "7u7 0", "hAy 5", "5", "0", "2"], ["team2", "7u7", "0", "hAy 5", "5", "0", "2"], [], ["8ro"], ["Vd9"], ["Baloo", "Vd9"], ["zx6", "Baloo", "Vd9"], ["CHAPTER VIII - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour of his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "zx6", "1 2 -9 6 4", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 2 -9 6 4", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 2 -9 6 4", "1", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9 6se"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9 O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "1 CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them. -9 6 4", "1", "company", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "Baloo", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "Baloo", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["CHAPTER -1 - CONCERNING THOSE WHO HAVE OBTAINED A PRINCIPALITY BY WICKEDNESS Although a prince may rise from a private station in two ways, neither of which can be entirely attributed to fortune or genius, yet it is manifest to me that I must not be silent on them, although one could be more copiously treated when I discuss republics. These methods are when, either by some wicked or nefarious ways, one ascends to the principality, or when by the favour accounting his fellow-citizens a private person becomes the prince of his country. And speaking of the first method, it will be illustrated by two examples--one ancient, the other modern--and without entering further into the subject, I consider these two examples will suffice those who may be compelled to follow them.", "", "1", "company", "0", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["", "", "1", "company", "0", "10", "Vd9", "7 3 9 4 7 2 8 6 1 8 ", "O3p"], ["n05"], ["n05 10"], [""], ["5"], ["team2part1", "5"], ["team2part1", "5 rmD"], ["NONE", "team2part1", "5 rmD"], ["NONE", "10", "team2part1", "5 rmD"], ["NONE", "company", "10", "team2part1", "5 rmD"], ["0", "NONE", "company", "10", "team2part1", "5 rmD"], ["0", "NONE", "company", "10", "team2part1", "5 x"], ["0", "NONE", "company", "company", "10", "team2part1", "5 x"], ["team2part2"], ["JuW"], ["cW2"], ["3", "5"], ["3"], ["PJE"], ["100", "PJE"], ["Nhy"], ["-1 10 13 25 -10", "Nhy"], ["-1 10 13 25 1 20", "Nhy"], ["-1 10 13 25 1 20", "Patm labgxl bg max gbzam ldr", "Nhy"], ["-1 10 13 25 1 20", "Patm", "labgxl", "bg", "max", "gbzam", "ldr", "Nhy"], ["team2 2"], ["team2 -3"], ["1"], ["1 2 3 4", "1"], ["1 2 3 4", "Cx-", "1"], ["1 1 2 3 4 3 4", "Cx-", "1"], ["1 1 2 3 4 4a2 4", "Cx-", "1"], ["1 1 2 5 4 4a2 4", "Cx-", "1"], ["1 1 2 5 4 team2part2 4", "Cx-", "1"], ["1 1 2 5 4 team2part2 4", "1"], ["1 1 2 5 4 team2part2 4", "10", "1"], ["0", "team2part2"], ["lXu"], ["7jE", "lXu"], ["4PH"], ["5", "4PH"], ["company", "3"], ["5", "company", "3"], ["5 0", "company", "3"], ["5 0", "company", "3 7tv"], ["5 0", "0.0 20.0 5.0", "company", "3 7tv"], ["5 0", "0.0 20.0 5.0", "company", ""], ["5 0", "0.0 engineering 5.0", "company", ""], ["5 0", "0.0 engineering 5.0", "O9J", "company", ""], ["5 0", "10 9 engineering 5.0", "O9J", "company", ""], ["5 0", "10 9 engineering 1.0 1.0 2.0 1.5", "O9J", "company", ""], ["-Bx"], ["Lqu"], ["team2", "Lqu"], ["team2", "team2", "Lqu"], ["team2", "team2"], ["30", "team2", "team2"], ["30", "team2"], ["30", "5", "team2"], ["40"], ["40", "40"], ["10", "40"], ["team2"], ["0"], ["team2", "0"], ["team2", "0.01", "0"], ["1,2", "team2", "0.01", "0"], ["1,2", "team2", "0.01", "9w4", "0"], ["1,2", "team2", "0.01", "X1Q", "9w4", "0"], ["1,2", "team2", "0.01", "0", "X1Q", "9w4", "0"], ["nHZ"], ["6 5 8", "nHZ"], ["6", "5", "8", "nHZ"], ["6", "3", "5", "8", "nHZ"], ["UKP"], ["3 5", "5"], ["vq4"], ["5", "vq4"], ["KQb"], ["KQb i0k"], ["KQb 6"], ["KQb 2"], ["team2 2"], ["team2 5"], ["OvP 10"], ["OvP 8"], ["bb 8"], ["bb qo7"], ["bb 7"], ["bb 205"], ["0 205"], ["0 40"], ["0", "40"], ["Hacker", "0", "40"], ["Hacker", "team2", "0", "40"], ["Hacker", "team2", "0", "1 90", "40"], ["Hacker", "0", "1 90", "40"], ["Hacker 0", "0", "1 90", "40"], ["Hacker 0", "0", "1 p9c", "40"], ["9j3"], ["team2part2", "9j3"], ["company", "team2part2", "9j3"], ["company", "9j3"], ["9j3 oFY"], ["9j3 6"], ["9j3 team2"], ["9j3 -1"], ["9j3 aQ7"], ["9j3 8"], ["team2 2 8"], ["team2 em4 8"], ["team2 7 8"], ["team2", "7", "8"], ["team2", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8"], ["team2 finance", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8 g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P 5", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P", "5", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "5", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "5", "0", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "0", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "0 10", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "team2 10", "8", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "team2 10", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "team2 10", "accounting", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7", "R7P team2part2", "team2", "5", "team2 10", "accounting", "team2 2", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "5", "team2 10", "accounting", "team2 2", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "5", "team2 10", "accounting", "team2 2", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "5", "team2 10", "accounting", "", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "team2 10", "accounting", "", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "team2", "10", "accounting", "", "8", "0", "g-5"], ["team2 7", "import json data = json.loads(input()) d, p, h = {}, [], {} for i in data:     d[i['name']] = i['parents'] for j in d:     p.append(j) for x in sorted(p):     h[x] = ", "7 xVP", "R7P team2part2", "team2", "0b4", "team2", "10", "accounting", "", "8", "0", "MTq", "g-5"], ["apn", "0"], ["100 100 101 400 11111 22", "0"], ["100 100 101 400 11111 3u1", "0"], ["100", "100", "101", "400", "11111", "3u1", "0"], ["1Tt"], ["company", "1Tt"], ["1Ff"], ["team2 2"], ["team2 0"], ["7"], ["h41"], ["WSQ"], ["i am caesar", "WSQ"], ["i -1 caesar", "WSQ"], ["34 -1 caesar", "WSQ"], ["34 -1 caesar", "WSQ 9j9"], ["34 -1 N", "WSQ 9j9"], ["34 -1 N", "-aZ 9j9"], ["34 -1 N", "-aZ 0"], ["34 -1 N", "2xs 0"], ["team2 2"], ["team2", "2"], ["team2 zq7", "2"], ["team2 10", "2"], ["t35 10"], ["3Hr 10"], ["3Hr", "10"], ["engineering"], ["team2", "engineering"], ["team2 2", "team2", "engineering"], ["team2 2", "W : V", "team2", "engineering"], ["team2 2", "W : V", "accounting", "team2", "engineering"], ["", "W : V", "accounting", "team2", "engineering"], [" 40", "W : V", "accounting", "team2", "engineering"], [" 40", "W : V", "accounting", "team2"], ["Z8e"], ["0.9999999", "Z8e"], ["sk7"], ["B90"], ["finance", "B90"], ["finance", "UNIMARC LAS REJAS,LAS REJAS SUR 1279,ESTACION CENTRAL", "B90"], ["finance", "UNIMARC LAS REJAS,LAS REJAS SUR 1279,ESTACION CENTRAL", "B90 3"], ["finance", "UNIMARC LAS REJAS,LAS REJAS SUR 1279,ESTACION CENTRAL", "manufacturing 3"], ["Vd0"], ["4VC"], ["Cashew", "4VC"], ["Cashew 0", "4VC"], ["Cashew", "0", "4VC"], ["Cashew", "0", "5", "4VC"], ["Cashew", "0", "5", "5I6", "4VC"], ["Cashew", "EO6", "0", "5", "5I6", "4VC"], ["Cashew", "EO6", "0", "5", "5I6", "5", "4VC"], ["Cashew", "0", "5", "5I6", "5", "4VC"], ["Cashew", "0", "0", "5", "5I6", "5", "4VC"], ["Cashew", "Cashew", "0", "0", "5", "5I6", "5", "4VC"], ["Cashew", "Cashew", "0", "0", "5", "3", "5I6", "5", "4VC"], ["Cashew", "Cashew", "0", "0", "5", "3", "5I6", "team2part1", "5", "4VC"], ["Cashew", "5", "Cashew", "0", "0", "5", "3", "5I6", "team2part1", "5", "4VC"], ["Cashew", "5", "Cashew", "0", "5761", "0", "5", "3", "5I6", "team2part1", "5", "4VC"], ["Cashew", "5", "Cashew", "0", "5761", "0", "5", "3", "5I6", "team2part1", "engineering", "5", "4VC"], ["company"], ["engineering", "0"], ["engineering", "5", "0"], ["engineering", "5", "0 40"], ["O0R", "engineering", "5", "0 40"], ["7I5"], ["7I5 146"], ["7I5 0"], ["7I5", "0"], ["100", "7I5", "0"], ["asdref", "100", "7I5", "0"], ["asdref", "7I5", "0"], ["company", "asdref", "7I5", "0"], ["52F", "company", "asdref", "7I5", "0"], ["finance"], ["manufacturing"], ["m4P"], ["=", "40"], ["="], ["-sK"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552351972.2986937, "StartTime": 1552351960.9156718}]], [{"CorrectInputs": [[["123456"], 1539014684]], "UniqueId": "99661bf5-55a6-4406-e5bd-61cdad0ca055_0", "CoverageInfo": [10, 8, 2, 0, 17, "4-13"], "TimeStamp": 1539014732, "BadInput": ["arka"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 2, in <module>\n    str1 = int(str1)\nValueError: invalid literal for int() with base 10: 'arka'\n", "ip": "103.40.66.62"}, [{"EndTime": 1552357405.0208175, "FinalMinimizedSolution": ["3"], "FinalCoverage": [10, 3, 2, 1, 67, "9-11,", "6->exit"], "FinalSolution": ["3"], "StartTime": 1552357404.1583202, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["arka"]]}, {"EndTime": 1552357405.8847935, "FinalMinimizedSolution": ["1"], "FinalCoverage": [10, 3, 2, 1, 67, "9-11,", "6->exit"], "FinalSolution": ["1"], "StartTime": 1552357405.0209854, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["arka"], ["arka"]]}, {"EndTime": 1552357406.748863, "FinalMinimizedSolution": ["0"], "FinalCoverage": [10, 3, 2, 1, 67, "9-11,", "6->exit"], "FinalSolution": ["0"], "StartTime": 1552357405.884968, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["arka"], ["arka"], ["arka"]]}, {"EndTime": 1552357407.6132548, "FinalMinimizedSolution": ["6"], "FinalCoverage": [10, 3, 2, 1, 67, "9-11,", "6->exit"], "FinalSolution": ["6"], "StartTime": 1552357406.7490458, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["arka"], ["arka"], ["arka"], ["arka"]]}, {"EndTime": 1552357408.4793956, "FinalMinimizedSolution": ["7"], "FinalCoverage": [10, 3, 2, 1, 67, "9-11,", "6->exit"], "FinalSolution": ["7"], "StartTime": 1552357407.6134396, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["arka"], ["arka"], ["arka"], ["arka"], ["arka"]]}]], [{"CorrectInputs": [[["Y"], 1523139774]], "UniqueId": "2758e6ab-66d9-439c-c21f-7edc9ac78cb6_0", "CoverageInfo": [10, 4, 6, 3, 56, "6,", "9-10,", "13,", "5->6,", "8->9,", "12->13"], "TimeStamp": 1523139817, "BadInput": ["N"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    if SHUFFLE:\nNameError: name 'SHUFFLE' is not defined\n", "ip": "60.224.249.107"}, [{"EndTime": 1552353851.643255, "FinalMinimizedSolution": [], "FinalCoverage": [10, 1, 6, 3, 75, "6,", "5->6,", "8->12,", "12->exit"], "FinalSolution": [], "StartTime": 1552353850.9590464, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["N"]]}, {"EndTime": 1552353852.3807876, "FinalMinimizedSolution": [], "FinalCoverage": [10, 1, 6, 3, 75, "6,", "5->6,", "8->12,", "12->exit"], "FinalSolution": ["54v"], "StartTime": 1552353851.6434112, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["N"], ["N"]]}, {"EndTime": 1552353853.1213856, "FinalMinimizedSolution": [], "FinalCoverage": [10, 1, 6, 3, 75, "6,", "5->6,", "8->12,", "12->exit"], "FinalSolution": ["N Ywi"], "StartTime": 1552353852.3809574, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["N"], ["N"], ["N"]]}, {"EndTime": 1552353853.9193423, "FinalMinimizedSolution": [], "FinalCoverage": [10, 1, 6, 3, 75, "6,", "5->6,", "8->12,", "12->exit"], "FinalSolution": ["abcd", "N"], "StartTime": 1552353853.121558, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["N"], ["N"], ["N"], ["N"]]}, {"EndTime": 1552353854.660191, "FinalMinimizedSolution": [], "FinalCoverage": [10, 1, 6, 3, 75, "6,", "5->6,", "8->12,", "12->exit"], "FinalSolution": ["N fHE"], "StartTime": 1552353853.919528, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["N"], ["N"], ["N"], ["N"], ["N"]]}]], [{"CorrectInputs": [[["2", "A : B C", "B : D E"], 1517616178], [["2", "A : C B", "B : D E"], 1517616383]], "UniqueId": "b8a77327-47c1-4911-ce03-1df77b8fa6d8_0", "CoverageInfo": [12, 7, 8, 2, 35, "6-15,", "2->15,", "4->8"], "TimeStamp": 1517616825, "BadInput": ["1", "A"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 5, in <module>\n    classes[i] = i\nTypeError: unhashable type: 'list'\n", "ip": "109.74.218.89"}, [{"InputHistory": [["1", "A"], [], ["7"], ["7", "1"], ["XSA"], ["8"], ["8", "1"], ["1"], ["A"], [" : "], ["8  : "], ["3"], ["3", "1"], ["y7n"], ["", ":", ""], ["", ":", "6"], ["", ":", "66"], ["", ":", "667"], ["", ":", "667-1"], ["", ":", "667-12"], ["", ":", "667-126"], ["", ":", "667-1265"], ["", ":", "667-1265-1"], ["", ":", "667-1265-14"], ["", ":", "667-1265-142"], ["", ":", "667-1265-1427"], ["", ":", "667-1265-14272"], ["", ":", "667-1265-142729"], ["", ":", "667-1265-1427296"], ["", ":", "667-1265-14272969"], ["", ":", "667-1265-14272969-1"], ["", ":", "667-1265-14272969-14"], ["", ":", "667-1265-14272969-142"], ["", ":", "667-1265-14272969-1427"], ["", ":", "667-1265-14272969-14277"], ["", ":", "667-1265-14272969-142770"], ["", ":", "667-1265-14272969-14277010"], ["", ":", "667-1265-14272969-142770100"], ["", ":", "667-1265-14272969-1427701003"], ["", ":", "667-1265-14272969-14277010035"], ["", ":", "667-1265-14272969-142770100353"], ["", ":", "667-1265-14272969-1427701003538"], ["", ":", "667-1265-14272969-14277010035387"], ["", ":", "667-1265-14272969-142770100353871"], ["", ":", "667-1265-14272969-1427701003538713"], ["", ":", "667-1265-14272969-14277010035387136"], ["", ":", "667-1265-14272969-142770100353871368"], ["", ":", "667-1265-14272969-1427701003538713687"], ["", ":", "667-1265-14272969-14277010035387136875"], ["", ":", "667-1265-14272969-142770100353871368751"], ["", ":", "667-1265-14272969-1427701003538713687510"], ["", ":", "667-1265-14272969-1427701003538713687510-1"], ["", ":", "667-1265-14272969-1427701003538713687510-11"], ["", ":", "667-1265-14272969-1427701003538713687510-114"], ["", ":", "667-1265-14272969-1427701003538713687510-1144"], ["", ":", "667-1265-14272969-1427701003538713687510-11441"], ["", ":", "667-1265-14272969-1427701003538713687510-114410"], ["", ":", "667-1265-14272969-1427701003538713687510-1144100"], ["", ":", "667-1265-14272969-1427701003538713687510-11441000"], ["", ":", "667-1265-14272969-1427701003538713687510-114410003"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552266534.6751518, "StartTime": 1552266523.3944573}, {"EndTime": 1552266541.4075887, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [12, 9, 8, 1, 20, "3-13,", "2->3"], "FinalSolution": ["-1"], "StartTime": 1552266534.6758351, "FoundSolution": true, "NumProbesMade": 34, "InputHistory": [["1", "A"], [], ["7"], ["7", "1"], ["XSA"], ["8"], ["8", "1"], ["1"], ["A"], [" : "], ["8  : "], ["3"], ["3", "1"], ["y7n"], ["", ":", ""], ["", ":", "6"], ["", ":", "66"], ["", ":", "667"], ["", ":", "667-1"], ["", ":", "667-12"], ["", ":", "667-126"], ["", ":", "667-1265"], ["", ":", "667-1265-1"], ["", ":", "667-1265-14"], ["", ":", "667-1265-142"], ["", ":", "667-1265-1427"], ["", ":", "667-1265-14272"], ["", ":", "667-1265-142729"], ["", ":", "667-1265-1427296"], ["", ":", "667-1265-14272969"], ["", ":", "667-1265-14272969-1"], ["", ":", "667-1265-14272969-14"], ["", ":", "667-1265-14272969-142"], ["", ":", "667-1265-14272969-1427"], ["", ":", "667-1265-14272969-14277"], ["", ":", "667-1265-14272969-142770"], ["", ":", "667-1265-14272969-14277010"], ["", ":", "667-1265-14272969-142770100"], ["", ":", "667-1265-14272969-1427701003"], ["", ":", "667-1265-14272969-14277010035"], ["", ":", "667-1265-14272969-142770100353"], ["", ":", "667-1265-14272969-1427701003538"], ["", ":", "667-1265-14272969-14277010035387"], ["", ":", "667-1265-14272969-142770100353871"], ["", ":", "667-1265-14272969-1427701003538713"], ["", ":", "667-1265-14272969-14277010035387136"], ["", ":", "667-1265-14272969-142770100353871368"], ["", ":", "667-1265-14272969-1427701003538713687"], ["", ":", "667-1265-14272969-14277010035387136875"], ["", ":", "667-1265-14272969-142770100353871368751"], ["", ":", "667-1265-14272969-1427701003538713687510"], ["", ":", "667-1265-14272969-1427701003538713687510-1"], ["", ":", "667-1265-14272969-1427701003538713687510-11"], ["", ":", "667-1265-14272969-1427701003538713687510-114"], ["", ":", "667-1265-14272969-1427701003538713687510-1144"], ["", ":", "667-1265-14272969-1427701003538713687510-11441"], ["", ":", "667-1265-14272969-1427701003538713687510-114410"], ["", ":", "667-1265-14272969-1427701003538713687510-1144100"], ["", ":", "667-1265-14272969-1427701003538713687510-11441000"], ["", ":", "667-1265-14272969-1427701003538713687510-114410003"], ["1", "A"], [" : ", "1", "A"], ["2", "1", "A"], ["3B6", "2", "1", "A"], ["8", "2", "1", "A"], ["8", "2", "1", "1", "A"], ["8", "2", "1", "1", "2", "A"], ["8", "2", "1", "1  : ", "2", "A"], ["8", " : ", "2", "1", "1  : ", "2", "A"], ["8", " : ", "2", "1", "1  : ", "2  : ", "A"], ["A", "8", " : ", "2", "1", "1  : ", "2  : ", "A"], ["A", "8", " : ", "2", "1", "1  : ", "2  : ", "5"], ["8", "8", " : ", "2", "1", "1  : ", "2  : ", "5"], ["8", "8", " : 2", "2", "1", "1  : ", "2  : ", "5"], ["8", "8", " : 2", "1", "1  : ", "2  : ", "5"], ["8", "20", "8", " : 2", "1", "1  : ", "2  : ", "5"], ["8", "20", "8", " : 2", "1", "", "2  : ", "5"], ["8", "20", "8  : ", " : 2", "1", "", "2  : ", "5"], ["8", "20", "8  : ", " : 2", "1", "", "2", "", ":", "", "5"], ["8", "20", "8  : ", " : 2", "1", " : ", "", "2", "", ":", "", "5"], ["8", "20", "8  : ", "", ":", "2", "1", " : ", "", "2", "", ":", "", "5"], ["8", "20", "8  : ", "", ":", "", "2", "1", " : ", "", "2", "", ":", "", "5"], ["20", "8  : ", "", ":", "", "2", "1", " : ", "", "2", "", ":", "", "5"], ["20", "8  : ", "", ":", "2", "1", " : ", "", "2", "", ":", "", "5"], ["20", "8  : ", "", ":", "2", "1", " : ", "2", "", ":", "", "5"], ["20", "", "", ":", "2", "1", " : ", "2", "", ":", "", "5"], ["20", "", "", ":", "2", "1", " : ", " : ", "2", "", ":", "", "5"], ["20", "", "", ":", "2", "1", " : ", " : ", "", ":", "", "5"], ["20", "", "", ": 2P3", "2", "1", " : ", " : ", "", ":", "", "5"], ["20", "", "", ": 0", "2", "1", " : ", " : ", "", ":", "", "5"], ["20", "", "", ": 0", "2", "1", " : ", "", "", ":", "", "5"], ["013"], ["013", "1"], ["ZDQ : "]]}, {"EndTime": 1552266544.2046368, "FinalMinimizedSolution": ["-1"], "FinalCoverage": null, "FinalSolution": ["-1", "10", "10"], "StartTime": 1552266541.4089286, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["1", "A"], [], ["7"], ["7", "1"], ["XSA"], ["8"], ["8", "1"], ["1"], ["A"], [" : "], ["8  : "], ["3"], ["3", "1"], ["y7n"], ["", ":", ""], ["", ":", "6"], ["", ":", "66"], ["", ":", "667"], ["", ":", "667-1"], ["", ":", "667-12"], ["", ":", "667-126"], ["", ":", "667-1265"], ["", ":", "667-1265-1"], ["", ":", "667-1265-14"], ["", ":", "667-1265-142"], ["", ":", "667-1265-1427"], ["", ":", "667-1265-14272"], ["", ":", "667-1265-142729"], ["", ":", "667-1265-1427296"], ["", ":", "667-1265-14272969"], ["", ":", "667-1265-14272969-1"], ["", ":", "667-1265-14272969-14"], ["", ":", "667-1265-14272969-142"], ["", ":", "667-1265-14272969-1427"], ["", ":", "667-1265-14272969-14277"], ["", ":", "667-1265-14272969-142770"], ["", ":", "667-1265-14272969-14277010"], ["", ":", "667-1265-14272969-142770100"], ["", ":", "667-1265-14272969-1427701003"], ["", ":", "667-1265-14272969-14277010035"], ["", ":", "667-1265-14272969-142770100353"], ["", ":", "667-1265-14272969-1427701003538"], ["", ":", "667-1265-14272969-14277010035387"], ["", ":", "667-1265-14272969-142770100353871"], ["", ":", "667-1265-14272969-1427701003538713"], ["", ":", "667-1265-14272969-14277010035387136"], ["", ":", "667-1265-14272969-142770100353871368"], ["", ":", "667-1265-14272969-1427701003538713687"], ["", ":", "667-1265-14272969-14277010035387136875"], ["", ":", "667-1265-14272969-142770100353871368751"], ["", ":", "667-1265-14272969-1427701003538713687510"], ["", ":", "667-1265-14272969-1427701003538713687510-1"], ["", ":", "667-1265-14272969-1427701003538713687510-11"], ["", ":", "667-1265-14272969-1427701003538713687510-114"], ["", ":", "667-1265-14272969-1427701003538713687510-1144"], ["", ":", "667-1265-14272969-1427701003538713687510-11441"], ["", ":", "667-1265-14272969-1427701003538713687510-114410"], ["", ":", "667-1265-14272969-1427701003538713687510-1144100"], ["", ":", "667-1265-14272969-1427701003538713687510-11441000"], ["", ":", "667-1265-14272969-1427701003538713687510-114410003"], ["1", "A"], [" : ", "1", "A"], ["2", "1", "A"], ["3B6", "2", "1", "A"], ["8", "2", "1", "A"], ["8", "2", "1", "1", "A"], ["8", "2", "1", "1", "2", "A"], ["8", "2", "1", "1  : ", "2", "A"], ["8", " : ", "2", "1", "1  : ", "2", "A"], ["8", " : ", "2", "1", "1  : ", "2  : ", "A"], ["A", "8", " : ", "2", "1", "1  : ", "2  : ", "A"], ["A", "8", " : ", "2", "1", "1  : ", "2  : ", "5"], ["8", "8", " : ", "2", "1", "1  : ", "2  : ", "5"], ["8", "8", " : 2", "2", "1", "1  : ", "2  : ", "5"], ["8", "8", " : 2", "1", "1  : ", "2  : ", "5"], ["8", "20", "8", " : 2", "1", "1  : ", "2  : ", "5"], ["8", "20", "8", " : 2", "1", "", "2  : ", "5"], ["8", "20", "8  : ", " : 2", "1", "", "2  : ", "5"], ["8", "20", "8  : ", " : 2", "1", "", "2", "", ":", "", "5"], ["8", "20", "8  : ", " : 2", "1", " : ", "", "2", "", ":", "", "5"], ["8", "20", "8  : ", "", ":", "2", "1", " : ", "", "2", "", ":", "", "5"], ["8", "20", "8  : ", "", ":", "", "2", "1", " : ", "", "2", "", ":", "", "5"], ["20", "8  : ", "", ":", "", "2", "1", " : ", "", "2", "", ":", "", "5"], ["20", "8  : ", "", ":", "2", "1", " : ", "", "2", "", ":", "", "5"], ["20", "8  : ", "", ":", "2", "1", " : ", "2", "", ":", "", "5"], ["20", "", "", ":", "2", "1", " : ", "2", "", ":", "", "5"], ["20", "", "", ":", "2", "1", " : ", " : ", "2", "", ":", "", "5"], ["20", "", "", ":", "2", "1", " : ", " : ", "", ":", "", "5"], ["20", "", "", ": 2P3", "2", "1", " : ", " : ", "", ":", "", "5"], ["20", "", "", ": 0", "2", "1", " : ", " : ", "", ":", "", "5"], ["20", "", "", ": 0", "2", "1", " : ", "", "", ":", "", "5"], ["013"], ["013", "1"], ["ZDQ : "], ["1", "A"], ["1", "Ioan", "A"], ["7 7 7", "1", "Ioan", "A"], ["8", "1", "Ioan", "A"], [" : co"], ["860"], ["860", "860"], ["860", "860", "860"], ["0  : "], ["10"], ["10", "A"], ["5", "10", "A"], ["A", "10", "A"], ["A", "10", "10"]]}, {"EndTime": 1552266545.3948848, "FinalMinimizedSolution": ["0"], "FinalCoverage": null, "FinalSolution": ["0"], "StartTime": 1552266544.2060752, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["1", "A"], [], ["7"], ["7", "1"], ["XSA"], ["8"], ["8", "1"], ["1"], ["A"], [" : "], ["8  : "], ["3"], ["3", "1"], ["y7n"], ["", ":", ""], ["", ":", "6"], ["", ":", "66"], ["", ":", "667"], ["", ":", "667-1"], ["", ":", "667-12"], ["", ":", "667-126"], ["", ":", "667-1265"], ["", ":", "667-1265-1"], ["", ":", "667-1265-14"], ["", ":", "667-1265-142"], ["", ":", "667-1265-1427"], ["", ":", "667-1265-14272"], ["", ":", "667-1265-142729"], ["", ":", "667-1265-1427296"], ["", ":", "667-1265-14272969"], ["", ":", "667-1265-14272969-1"], ["", ":", "667-1265-14272969-14"], ["", ":", "667-1265-14272969-142"], ["", ":", "667-1265-14272969-1427"], ["", ":", "667-1265-14272969-14277"], ["", ":", "667-1265-14272969-142770"], ["", ":", "667-1265-14272969-14277010"], ["", ":", "667-1265-14272969-142770100"], ["", ":", "667-1265-14272969-1427701003"], ["", ":", "667-1265-14272969-14277010035"], ["", ":", "667-1265-14272969-142770100353"], ["", ":", "667-1265-14272969-1427701003538"], ["", ":", "667-1265-14272969-14277010035387"], ["", ":", "667-1265-14272969-142770100353871"], ["", ":", "667-1265-14272969-1427701003538713"], ["", ":", "667-1265-14272969-14277010035387136"], ["", ":", "667-1265-14272969-142770100353871368"], ["", ":", "667-1265-14272969-1427701003538713687"], ["", ":", "667-1265-14272969-14277010035387136875"], ["", ":", "667-1265-14272969-142770100353871368751"], ["", ":", "667-1265-14272969-1427701003538713687510"], ["", ":", "667-1265-14272969-1427701003538713687510-1"], ["", ":", "667-1265-14272969-1427701003538713687510-11"], ["", ":", "667-1265-14272969-1427701003538713687510-114"], ["", ":", "667-1265-14272969-1427701003538713687510-1144"], ["", ":", "667-1265-14272969-1427701003538713687510-11441"], ["", ":", "667-1265-14272969-1427701003538713687510-114410"], ["", ":", "667-1265-14272969-1427701003538713687510-1144100"], ["", ":", "667-1265-14272969-1427701003538713687510-11441000"], ["", ":", "667-1265-14272969-1427701003538713687510-114410003"], ["1", "A"], [" : ", "1", "A"], ["2", "1", "A"], ["3B6", "2", "1", "A"], ["8", "2", "1", "A"], ["8", "2", "1", "1", "A"], ["8", "2", "1", "1", "2", "A"], ["8", "2", "1", "1  : ", "2", "A"], ["8", " : ", "2", "1", "1  : ", "2", "A"], ["8", " : ", "2", "1", "1  : ", "2  : ", "A"], ["A", "8", " : ", "2", "1", "1  : ", "2  : ", "A"], ["A", "8", " : ", "2", "1", "1  : ", "2  : ", "5"], ["8", "8", " : ", "2", "1", "1  : ", "2  : ", "5"], ["8", "8", " : 2", "2", "1", "1  : ", "2  : ", "5"], ["8", "8", " : 2", "1", "1  : ", "2  : ", "5"], ["8", "20", "8", " : 2", "1", "1  : ", "2  : ", "5"], ["8", "20", "8", " : 2", "1", "", "2  : ", "5"], ["8", "20", "8  : ", " : 2", "1", "", "2  : ", "5"], ["8", "20", "8  : ", " : 2", "1", "", "2", "", ":", "", "5"], ["8", "20", "8  : ", " : 2", "1", " : ", "", "2", "", ":", "", "5"], ["8", "20", "8  : ", "", ":", "2", "1", " : ", "", "2", "", ":", "", "5"], ["8", "20", "8  : ", "", ":", "", "2", "1", " : ", "", "2", "", ":", "", "5"], ["20", "8  : ", "", ":", "", "2", "1", " : ", "", "2", "", ":", "", "5"], ["20", "8  : ", "", ":", "2", "1", " : ", "", "2", "", ":", "", "5"], ["20", "8  : ", "", ":", "2", "1", " : ", "2", "", ":", "", "5"], ["20", "", "", ":", "2", "1", " : ", "2", "", ":", "", "5"], ["20", "", "", ":", "2", "1", " : ", " : ", "2", "", ":", "", "5"], ["20", "", "", ":", "2", "1", " : ", " : ", "", ":", "", "5"], ["20", "", "", ": 2P3", "2", "1", " : ", " : ", "", ":", "", "5"], ["20", "", "", ": 0", "2", "1", " : ", " : ", "", ":", "", "5"], ["20", "", "", ": 0", "2", "1", " : ", "", "", ":", "", "5"], ["013"], ["013", "1"], ["ZDQ : "], ["1", "A"], ["1", "Ioan", "A"], ["7 7 7", "1", "Ioan", "A"], ["8", "1", "Ioan", "A"], [" : co"], ["860"], ["860", "860"], ["860", "860", "860"], ["0  : "], ["10"], ["10", "A"], ["5", "10", "A"], ["A", "10", "A"], ["A", "10", "10"], ["1", "A"], ["1", "tQs", "A"], ["tQs", "A"], ["2", "A"], ["2", "jcB", "A"], ["nA0"]]}, {"EndTime": 1552266549.320587, "FinalMinimizedSolution": ["0"], "FinalCoverage": [12, 9, 8, 1, 20, "3-13,", "2->3"], "FinalSolution": ["0", "6"], "StartTime": 1552266545.3963342, "FoundSolution": true, "NumProbesMade": 17, "InputHistory": [["1", "A"], [], ["7"], ["7", "1"], ["XSA"], ["8"], ["8", "1"], ["1"], ["A"], [" : "], ["8  : "], ["3"], ["3", "1"], ["y7n"], ["", ":", ""], ["", ":", "6"], ["", ":", "66"], ["", ":", "667"], ["", ":", "667-1"], ["", ":", "667-12"], ["", ":", "667-126"], ["", ":", "667-1265"], ["", ":", "667-1265-1"], ["", ":", "667-1265-14"], ["", ":", "667-1265-142"], ["", ":", "667-1265-1427"], ["", ":", "667-1265-14272"], ["", ":", "667-1265-142729"], ["", ":", "667-1265-1427296"], ["", ":", "667-1265-14272969"], ["", ":", "667-1265-14272969-1"], ["", ":", "667-1265-14272969-14"], ["", ":", "667-1265-14272969-142"], ["", ":", "667-1265-14272969-1427"], ["", ":", "667-1265-14272969-14277"], ["", ":", "667-1265-14272969-142770"], ["", ":", "667-1265-14272969-14277010"], ["", ":", "667-1265-14272969-142770100"], ["", ":", "667-1265-14272969-1427701003"], ["", ":", "667-1265-14272969-14277010035"], ["", ":", "667-1265-14272969-142770100353"], ["", ":", "667-1265-14272969-1427701003538"], ["", ":", "667-1265-14272969-14277010035387"], ["", ":", "667-1265-14272969-142770100353871"], ["", ":", "667-1265-14272969-1427701003538713"], ["", ":", "667-1265-14272969-14277010035387136"], ["", ":", "667-1265-14272969-142770100353871368"], ["", ":", "667-1265-14272969-1427701003538713687"], ["", ":", "667-1265-14272969-14277010035387136875"], ["", ":", "667-1265-14272969-142770100353871368751"], ["", ":", "667-1265-14272969-1427701003538713687510"], ["", ":", "667-1265-14272969-1427701003538713687510-1"], ["", ":", "667-1265-14272969-1427701003538713687510-11"], ["", ":", "667-1265-14272969-1427701003538713687510-114"], ["", ":", "667-1265-14272969-1427701003538713687510-1144"], ["", ":", "667-1265-14272969-1427701003538713687510-11441"], ["", ":", "667-1265-14272969-1427701003538713687510-114410"], ["", ":", "667-1265-14272969-1427701003538713687510-1144100"], ["", ":", "667-1265-14272969-1427701003538713687510-11441000"], ["", ":", "667-1265-14272969-1427701003538713687510-114410003"], ["1", "A"], [" : ", "1", "A"], ["2", "1", "A"], ["3B6", "2", "1", "A"], ["8", "2", "1", "A"], ["8", "2", "1", "1", "A"], ["8", "2", "1", "1", "2", "A"], ["8", "2", "1", "1  : ", "2", "A"], ["8", " : ", "2", "1", "1  : ", "2", "A"], ["8", " : ", "2", "1", "1  : ", "2  : ", "A"], ["A", "8", " : ", "2", "1", "1  : ", "2  : ", "A"], ["A", "8", " : ", "2", "1", "1  : ", "2  : ", "5"], ["8", "8", " : ", "2", "1", "1  : ", "2  : ", "5"], ["8", "8", " : 2", "2", "1", "1  : ", "2  : ", "5"], ["8", "8", " : 2", "1", "1  : ", "2  : ", "5"], ["8", "20", "8", " : 2", "1", "1  : ", "2  : ", "5"], ["8", "20", "8", " : 2", "1", "", "2  : ", "5"], ["8", "20", "8  : ", " : 2", "1", "", "2  : ", "5"], ["8", "20", "8  : ", " : 2", "1", "", "2", "", ":", "", "5"], ["8", "20", "8  : ", " : 2", "1", " : ", "", "2", "", ":", "", "5"], ["8", "20", "8  : ", "", ":", "2", "1", " : ", "", "2", "", ":", "", "5"], ["8", "20", "8  : ", "", ":", "", "2", "1", " : ", "", "2", "", ":", "", "5"], ["20", "8  : ", "", ":", "", "2", "1", " : ", "", "2", "", ":", "", "5"], ["20", "8  : ", "", ":", "2", "1", " : ", "", "2", "", ":", "", "5"], ["20", "8  : ", "", ":", "2", "1", " : ", "2", "", ":", "", "5"], ["20", "", "", ":", "2", "1", " : ", "2", "", ":", "", "5"], ["20", "", "", ":", "2", "1", " : ", " : ", "2", "", ":", "", "5"], ["20", "", "", ":", "2", "1", " : ", " : ", "", ":", "", "5"], ["20", "", "", ": 2P3", "2", "1", " : ", " : ", "", ":", "", "5"], ["20", "", "", ": 0", "2", "1", " : ", " : ", "", ":", "", "5"], ["20", "", "", ": 0", "2", "1", " : ", "", "", ":", "", "5"], ["013"], ["013", "1"], ["ZDQ : "], ["1", "A"], ["1", "Ioan", "A"], ["7 7 7", "1", "Ioan", "A"], ["8", "1", "Ioan", "A"], [" : co"], ["860"], ["860", "860"], ["860", "860", "860"], ["0  : "], ["10"], ["10", "A"], ["5", "10", "A"], ["A", "10", "A"], ["A", "10", "10"], ["1", "A"], ["1", "tQs", "A"], ["tQs", "A"], ["2", "A"], ["2", "jcB", "A"], ["nA0"], ["1", "A"], ["Ufm"], ["8 y7O"], ["-1 bWi"], ["9"], ["9", "A"], ["PASSWORD123!$", "9", "A"], ["5", "9", "A"], ["8 1", "5", "9", "A"], ["4", "5", "9", "A"], ["4", "A", "5", "9", "A"], ["Yf6"], ["6"], ["6", "6"], ["6", " : ", "6"], ["6", "", "6"], [" : ", "6"]]}]], [{"CorrectInputs": [[["a_asdf"], 1541300167]], "UniqueId": "869d6dc6-1844-4b35-c3b1-d1cf70ac8f79_0", "CoverageInfo": [15, 6, 10, 3, 48, "5-8,", "14-16,", "4->5,", "13->14,", "13->16"], "TimeStamp": 1541300180, "BadInput": ["1asdf"], "ErrorType": "UnboundLocalError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 18, in <module>\n    main()\n  File \"temp2018.py\", line 13, in main\n    if valid_name(entry) == True:\n  File \"temp2018.py\", line 9, in valid_name\n    return validity\nUnboundLocalError: local variable 'validity' referenced before assignment\n", "ip": "129.64.170.144"}, [{"EndTime": 1552418250.7667024, "FinalMinimizedSolution": ["_"], "FinalCoverage": [15, 3, 10, 3, 68, "7-8,", "16,", "4->3,", "6->7,", "13->16"], "FinalSolution": ["_", "jCO"], "StartTime": 1552418248.5254745, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["1asdf"], ["1asdf", "1asdf"], ["1asdf", "679", "1asdf"], ["1asdf", "1asdf", "679", "1asdf"], ["1asdf", "1 2 3", "1asdf", "679", "1asdf"], ["1asdf", "1 2 3", "1asdf", "679", "3.5", "1asdf"], [], ["jCO"]]}, {"EndTime": 1552418251.633188, "FinalMinimizedSolution": ["_"], "FinalCoverage": [15, 3, 10, 3, 68, "7-8,", "16,", "4->3,", "6->7,", "13->16"], "FinalSolution": ["_"], "StartTime": 1552418250.7669573, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1asdf"], ["1asdf", "1asdf"], ["1asdf", "679", "1asdf"], ["1asdf", "1asdf", "679", "1asdf"], ["1asdf", "1 2 3", "1asdf", "679", "1asdf"], ["1asdf", "1 2 3", "1asdf", "679", "3.5", "1asdf"], [], ["jCO"], ["1asdf"]]}, {"EndTime": 1552418252.8776839, "FinalMinimizedSolution": ["T7W _"], "FinalCoverage": [15, 3, 10, 2, 72, "7-8,", "16,", "6->7,", "13->16"], "FinalSolution": ["T7W _"], "StartTime": 1552418251.633476, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["1asdf"], ["1asdf", "1asdf"], ["1asdf", "679", "1asdf"], ["1asdf", "1asdf", "679", "1asdf"], ["1asdf", "1 2 3", "1asdf", "679", "1asdf"], ["1asdf", "1 2 3", "1asdf", "679", "3.5", "1asdf"], [], ["jCO"], ["1asdf"], ["1asdf"], ["1asdf", "_", "1asdf"], ["T7W"]]}, {"EndTime": 1552418256.6455884, "FinalMinimizedSolution": ["_"], "FinalCoverage": [15, 3, 10, 3, 68, "7-8,", "16,", "4->3,", "6->7,", "13->16"], "FinalSolution": ["_", "Fe9"], "StartTime": 1552418252.877973, "FoundSolution": true, "NumProbesMade": 16, "InputHistory": [["1asdf"], ["1asdf", "1asdf"], ["1asdf", "679", "1asdf"], ["1asdf", "1asdf", "679", "1asdf"], ["1asdf", "1 2 3", "1asdf", "679", "1asdf"], ["1asdf", "1 2 3", "1asdf", "679", "3.5", "1asdf"], [], ["jCO"], ["1asdf"], ["1asdf"], ["1asdf", "_", "1asdf"], ["T7W"], ["1asdf"], ["5,5,4", "_"], ["5,5,4", "243", "_"], ["5,5,4", "Nc2", "243", "_"], ["5,5,4", "2", "Nc2", "243", "_"], ["5,5,4", "2", "Nc2", "_", "243", "_"], ["5,5,4", "2", "Nc2", "_", "_"], ["5,5,4", "2", "Nc2", "_", "gwH", "_"], ["5,5,4", "2", "Nc2", "aI7", "_", "gwH", "_"], ["5,5,4", "2", "Nc2", "aI7", "_", "_", "gwH", "_"], ["5,5,4", "2", "Nc2", "aI7", "_", "_", "gwH"], ["5,5,4", "2", "Nc2", "aI7", "aI7", "_", "_", "gwH"], ["5,5,4", "2", "Nc2", "_", "aI7", "aI7", "_", "_", "gwH"], ["5,5,4", "aI7", "2", "Nc2", "_", "aI7", "aI7", "_", "_", "gwH"], ["Z5H"], ["Fe9"]]}, {"EndTime": 1552418259.2602682, "FinalMinimizedSolution": ["_"], "FinalCoverage": [15, 3, 10, 3, 68, "7-8,", "16,", "4->3,", "6->7,", "13->16"], "FinalSolution": ["_", "9D6"], "StartTime": 1552418256.6461039, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["1asdf"], ["1asdf", "1asdf"], ["1asdf", "679", "1asdf"], ["1asdf", "1asdf", "679", "1asdf"], ["1asdf", "1 2 3", "1asdf", "679", "1asdf"], ["1asdf", "1 2 3", "1asdf", "679", "3.5", "1asdf"], [], ["jCO"], ["1asdf"], ["1asdf"], ["1asdf", "_", "1asdf"], ["T7W"], ["1asdf"], ["5,5,4", "_"], ["5,5,4", "243", "_"], ["5,5,4", "Nc2", "243", "_"], ["5,5,4", "2", "Nc2", "243", "_"], ["5,5,4", "2", "Nc2", "_", "243", "_"], ["5,5,4", "2", "Nc2", "_", "_"], ["5,5,4", "2", "Nc2", "_", "gwH", "_"], ["5,5,4", "2", "Nc2", "aI7", "_", "gwH", "_"], ["5,5,4", "2", "Nc2", "aI7", "_", "_", "gwH", "_"], ["5,5,4", "2", "Nc2", "aI7", "_", "_", "gwH"], ["5,5,4", "2", "Nc2", "aI7", "aI7", "_", "_", "gwH"], ["5,5,4", "2", "Nc2", "_", "aI7", "aI7", "_", "_", "gwH"], ["5,5,4", "aI7", "2", "Nc2", "_", "aI7", "aI7", "_", "_", "gwH"], ["Z5H"], ["Fe9"], ["1asdf"], ["33 59", "1asdf"], ["", "1asdf"], ["", "1asdf _"], ["", "1asdf", "_"], ["1asdf", "_"], ["1asdf", "1asdf", "_"], ["1asdf", "aaabbccc", "1asdf", "_"], ["1asdf", "aaabbccc _", "1asdf", "_"], ["9D6"]]}]], [{"CorrectInputs": [[["666"], 1541281109], [["4"], 1541281532]], "UniqueId": "80038cfb-e21c-400e-fe05-4d100936bf24_0", "CoverageInfo": [11, 8, 6, 0, 18, "2-9,", "13"], "TimeStamp": 1541281226, "BadInput": ["Peter Parker Persaud"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    year=int(year)\nValueError: invalid literal for int() with base 10: 'Peter Parker Persaud'\n", "ip": "168.229.254.1"}, [{"EndTime": 1552281284.572536, "FinalMinimizedSolution": ["2"], "FinalCoverage": [11, 3, 6, 3, 65, "3,", "5,", "7,", "2->3,", "4->5,", "6->7"], "FinalSolution": ["2"], "StartTime": 1552281284.1427858, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["Peter Parker Persaud"]]}, {"EndTime": 1552281285.4750865, "FinalMinimizedSolution": ["2"], "FinalCoverage": [11, 3, 6, 3, 65, "3,", "5,", "7,", "2->3,", "4->5,", "6->7"], "FinalSolution": ["2", "2"], "StartTime": 1552281284.5726452, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["Peter Parker Persaud"], ["Peter Parker Persaud"]]}, {"EndTime": 1552281286.336234, "FinalMinimizedSolution": ["4"], "FinalCoverage": [11, 3, 6, 3, 65, "3,", "5,", "9,", "2->3,", "4->5,", "6->9"], "FinalSolution": ["4"], "StartTime": 1552281285.4752607, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["Peter Parker Persaud"], ["Peter Parker Persaud"], ["Peter Parker Persaud"]]}, {"EndTime": 1552281287.198696, "FinalMinimizedSolution": ["0"], "FinalCoverage": [11, 5, 6, 1, 41, "4-9,", "2->4"], "FinalSolution": ["0"], "StartTime": 1552281286.336413, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["Peter Parker Persaud"], ["Peter Parker Persaud"], ["Peter Parker Persaud"], ["Peter Parker Persaud"]]}, {"EndTime": 1552281288.05907, "FinalMinimizedSolution": ["3"], "FinalCoverage": [11, 3, 6, 3, 65, "3,", "5,", "7,", "2->3,", "4->5,", "6->7"], "FinalSolution": ["3"], "StartTime": 1552281287.198884, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["Peter Parker Persaud"], ["Peter Parker Persaud"], ["Peter Parker Persaud"], ["Peter Parker Persaud"], ["Peter Parker Persaud"]]}]], [{"CorrectInputs": [[["10"], 1545012043]], "UniqueId": "98189b07-1b36-49c1-cb4a-b5af35d0a3a4_0", "CoverageInfo": [15, 6, 16, 6, 55, "4,", "6,", "10,", "13-15,", "3->4,", "5->6,", "7->exit,", "8->exit,", "9->10,", "11->13"], "TimeStamp": 1545012066, "BadInput": ["3 5 6 10"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    c += (list[i-1] + list[i+1])\nTypeError: 'int' object is not iterable\n", "ip": "37.214.218.152"}, [{"EndTime": 1552345186.7059762, "FinalMinimizedSolution": [], "FinalCoverage": [15, 11, 16, 1, 23, "5-15,", "3->5"], "FinalSolution": ["3", "5", "6", "10"], "StartTime": 1552345185.8123386, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3 5 6 10"]]}, {"EndTime": 1552345187.8143942, "FinalMinimizedSolution": [], "FinalCoverage": [15, 10, 16, 3, 32, "4,", "6,", "8-15,", "3->4,", "5->6,", "7->8"], "FinalSolution": [""], "StartTime": 1552345186.7061489, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["3 5 6 10"], ["3 5 6 10"], ["3 5 6 10 5 6 10"], ["3 5 6 34 5 6 10"]]}, {"EndTime": 1552345189.2500718, "FinalMinimizedSolution": [], "FinalCoverage": [15, 10, 16, 3, 32, "4,", "6,", "8-15,", "3->4,", "5->6,", "7->8"], "FinalSolution": [], "StartTime": 1552345187.8145778, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["3 5 6 10"], ["3 5 6 10"], ["3 5 6 10 5 6 10"], ["3 5 6 34 5 6 10"], ["3 5 6 10"], ["4 1 2 2 3", "3", "5", "6", "10"], ["4 1 2 2 3", "3 90V", "5", "6", "10"], ["4 1 2 2 3", "", "5", "6", "10"], ["4 1 2 2 3", "", "6", "10"]]}, {"EndTime": 1552345190.4131439, "FinalMinimizedSolution": [], "FinalCoverage": [15, 11, 16, 1, 23, "5-15,", "3->5"], "FinalSolution": ["1", ""], "StartTime": 1552345189.2503142, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["3 5 6 10"], ["3 5 6 10"], ["3 5 6 10 5 6 10"], ["3 5 6 34 5 6 10"], ["3 5 6 10"], ["4 1 2 2 3", "3", "5", "6", "10"], ["4 1 2 2 3", "3 90V", "5", "6", "10"], ["4 1 2 2 3", "", "5", "6", "10"], ["4 1 2 2 3", "", "6", "10"], ["3 5 6 10"], ["25 5 6 10"], ["k1P", ""]]}, {"EndTime": 1552345191.5813587, "FinalMinimizedSolution": [], "FinalCoverage": [15, 11, 16, 1, 23, "5-15,", "3->5"], "FinalSolution": ["8", ""], "StartTime": 1552345190.4134119, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["3 5 6 10"], ["3 5 6 10"], ["3 5 6 10 5 6 10"], ["3 5 6 34 5 6 10"], ["3 5 6 10"], ["4 1 2 2 3", "3", "5", "6", "10"], ["4 1 2 2 3", "3 90V", "5", "6", "10"], ["4 1 2 2 3", "", "5", "6", "10"], ["4 1 2 2 3", "", "6", "10"], ["3 5 6 10"], ["25 5 6 10"], ["k1P", ""], ["3 5 6 10"], ["3 5 3 5 6 10 10"], ["W9q", ""]]}]], [{"CorrectInputs": [[["4 2"], 1537810848], [["2 3"], 1537811113]], "UniqueId": "03b4faec-9706-4256-d35b-28d579ad54cd_0", "CoverageInfo": [3, 2, 4, 1, 29, "2-3,", "1->2"], "TimeStamp": 1537811092, "BadInput": ["9 5 3"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    n, m= (int(i) for i in input().split())\nValueError: too many values to unpack (expected 2)\n", "ip": "79.173.65.30"}, [{"EndTime": 1552293101.5577562, "FinalMinimizedSolution": ["9 5"], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["9 5"], "StartTime": 1552293100.685081, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["9 5 3"]]}, {"EndTime": 1552293106.4229584, "FinalMinimizedSolution": ["9 9"], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["9 9"], "StartTime": 1552293101.5579028, "FoundSolution": true, "NumProbesMade": 25, "InputHistory": [["9 5 3"], ["9 5 3"], ["9 5 5"], ["9", "5", "5"], ["9", "5", "5 5"], ["9", "5", "5 5 5"], ["9", "5", "5 5 5 5"], ["9", "5", "5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5 5 5 5"], ["9", "5"], ["9", "5 5"], ["9", "5 5 5"], ["9", "5 5 5 5"], ["9", "5 5 5 5 5"], ["9", "5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5 5 5 5"], ["9"]]}, {"EndTime": 1552293107.4751914, "FinalMinimizedSolution": ["9 1"], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["9 1"], "StartTime": 1552293106.423328, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["9 5 3"], ["9 5 3"], ["9 5 5"], ["9", "5", "5"], ["9", "5", "5 5"], ["9", "5", "5 5 5"], ["9", "5", "5 5 5 5"], ["9", "5", "5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5 5 5 5"], ["9", "5"], ["9", "5 5"], ["9", "5 5 5"], ["9", "5 5 5 5"], ["9", "5 5 5 5 5"], ["9", "5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5 5 5 5"], ["9"], ["9 5 3"], ["9 1CI"]]}, {"EndTime": 1552293108.5379388, "FinalMinimizedSolution": ["9 10"], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["9 10"], "StartTime": 1552293107.475571, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["9 5 3"], ["9 5 3"], ["9 5 5"], ["9", "5", "5"], ["9", "5", "5 5"], ["9", "5", "5 5 5"], ["9", "5", "5 5 5 5"], ["9", "5", "5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5 5 5 5"], ["9", "5"], ["9", "5 5"], ["9", "5 5 5"], ["9", "5 5 5 5"], ["9", "5 5 5 5 5"], ["9", "5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5 5 5 5"], ["9"], ["9 5 3"], ["9 1CI"], ["9 5 3"], ["9 15l"]]}, {"EndTime": 1552293109.9726853, "FinalMinimizedSolution": ["21 21"], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["21 21"], "StartTime": 1552293108.5383284, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["9 5 3"], ["9 5 3"], ["9 5 5"], ["9", "5", "5"], ["9", "5", "5 5"], ["9", "5", "5 5 5"], ["9", "5", "5 5 5 5"], ["9", "5", "5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5 5 5"], ["9", "5", "5 5 5 5 5 5 5 5 5 5 5"], ["9", "5"], ["9", "5 5"], ["9", "5 5 5"], ["9", "5 5 5 5"], ["9", "5 5 5 5 5"], ["9", "5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5 5 5"], ["9", "5 5 5 5 5 5 5 5 5 5 5"], ["9"], ["9 5 3"], ["9 1CI"], ["9 5 3"], ["9 15l"], ["9 5 3"], [""], [" "], ["21 "]]}]], [{"CorrectInputs": [[["oui"], 1537929293]], "UniqueId": "d7154aa6-25dc-40f1-e45e-c786d3f37d52_0", "CoverageInfo": [8, 2, 4, 2, 67, "6,", "8,", "4->8,", "5->6"], "TimeStamp": 1537929479, "BadInput": ["bqprt"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 5, in <module>\n    if(word[x] in 'aeiouAEIOU'): #The in statement checks to see if a substring is in a string\nIndexError: string index out of range\n", "ip": "128.239.219.94"}, [{"EndTime": 1552273628.7807014, "FinalMinimizedSolution": [], "FinalCoverage": [8, 3, 4, 1, 50, "5-7,", "4->5"], "FinalSolution": [], "StartTime": 1552273628.1559536, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["bqprt"]]}, {"EndTime": 1552273631.1070027, "FinalMinimizedSolution": [], "FinalCoverage": [8, 3, 4, 1, 50, "5-7,", "4->5"], "FinalSolution": [""], "StartTime": 1552273628.7808075, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["bqprt"], ["bqprt"], ["8i8"], ["c2q", "8i8"], ["c2q dlA", "8i8"], ["c2q dlA", "8i8 aeiouAEIOU"], ["c2q dlA", "8i8 1"], ["c2q dlA", "-1,5 1"], ["c2q dlA", "-1,5 200.0"], ["c2q dlA", "-1,5 -1,5 200.0"], ["c2q -1,5", "-1,5 -1,5 200.0"], ["c2q -1,5", ""], ["c2q -1,5"], ["c2q c2q -1,5"], ["c2q c2q -1,5 c2q -1,5"]]}, {"EndTime": 1552273632.5278778, "FinalMinimizedSolution": [], "FinalCoverage": [8, 0, 4, 1, 92, "5->7"], "FinalSolution": ["aeiouAEIOU", "B2I"], "StartTime": 1552273631.1071777, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["bqprt"], ["bqprt"], ["8i8"], ["c2q", "8i8"], ["c2q dlA", "8i8"], ["c2q dlA", "8i8 aeiouAEIOU"], ["c2q dlA", "8i8 1"], ["c2q dlA", "-1,5 1"], ["c2q dlA", "-1,5 200.0"], ["c2q dlA", "-1,5 -1,5 200.0"], ["c2q -1,5", "-1,5 -1,5 200.0"], ["c2q -1,5", ""], ["c2q -1,5"], ["c2q c2q -1,5"], ["c2q c2q -1,5 c2q -1,5"], ["bqprt"], ["bqprt V14"], ["bqprt", "V14"], ["bqprt", "aeiouAEIOU", "V14"], ["B2I"]]}, {"EndTime": 1552273634.061837, "FinalMinimizedSolution": [], "FinalCoverage": [8, 0, 4, 1, 92, "5->7"], "FinalSolution": ["aeiouAEIOU", "9CD"], "StartTime": 1552273632.5282269, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["bqprt"], ["bqprt"], ["8i8"], ["c2q", "8i8"], ["c2q dlA", "8i8"], ["c2q dlA", "8i8 aeiouAEIOU"], ["c2q dlA", "8i8 1"], ["c2q dlA", "-1,5 1"], ["c2q dlA", "-1,5 200.0"], ["c2q dlA", "-1,5 -1,5 200.0"], ["c2q -1,5", "-1,5 -1,5 200.0"], ["c2q -1,5", ""], ["c2q -1,5"], ["c2q c2q -1,5"], ["c2q c2q -1,5 c2q -1,5"], ["bqprt"], ["bqprt V14"], ["bqprt", "V14"], ["bqprt", "aeiouAEIOU", "V14"], ["B2I"], ["bqprt"], ["bqprt MS-"], ["bqprt MS- MS-"], ["bqprt", "MS-", "MS-"], ["9CD"]]}, {"EndTime": 1552273635.456283, "FinalMinimizedSolution": [], "FinalCoverage": [8, 0, 4, 1, 92, "5->7"], "FinalSolution": ["aeiouAEIOU", "bqprt", ""], "StartTime": 1552273634.062211, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["bqprt"], ["bqprt"], ["8i8"], ["c2q", "8i8"], ["c2q dlA", "8i8"], ["c2q dlA", "8i8 aeiouAEIOU"], ["c2q dlA", "8i8 1"], ["c2q dlA", "-1,5 1"], ["c2q dlA", "-1,5 200.0"], ["c2q dlA", "-1,5 -1,5 200.0"], ["c2q -1,5", "-1,5 -1,5 200.0"], ["c2q -1,5", ""], ["c2q -1,5"], ["c2q c2q -1,5"], ["c2q c2q -1,5 c2q -1,5"], ["bqprt"], ["bqprt V14"], ["bqprt", "V14"], ["bqprt", "aeiouAEIOU", "V14"], ["B2I"], ["bqprt"], ["bqprt MS-"], ["bqprt MS- MS-"], ["bqprt", "MS-", "MS-"], ["9CD"], ["bqprt"], ["bqprt aeiouAEIOU"], ["= aeiouAEIOU"], ["bqprt", ""]]}]], [{"CorrectInputs": [[["5"], 1533796550]], "UniqueId": "bf4e024b-858c-4a9f-c747-90e6e8b99282_0", "CoverageInfo": [7, 6, 4, 0, 9, "2-7"], "TimeStamp": 1533797114, "BadInput": ["s"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    num=int(input(\"enter a number\"))\nValueError: invalid literal for int() with base 10: 's'\n", "ip": "103.73.222.84"}, [{"EndTime": 1552320574.2107437, "FinalMinimizedSolution": ["1"], "FinalCoverage": [7, 1, 4, 1, 82, "3,", "2->3"], "FinalSolution": ["1"], "StartTime": 1552320573.3432512, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["s"]]}, {"EndTime": 1552320575.0789335, "FinalMinimizedSolution": ["8"], "FinalCoverage": [7, 1, 4, 1, 82, "3,", "2->3"], "FinalSolution": ["8"], "StartTime": 1552320574.2109213, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["s"], ["s"]]}, {"EndTime": 1552320575.9446197, "FinalMinimizedSolution": ["10"], "FinalCoverage": [7, 1, 4, 1, 82, "3,", "2->3"], "FinalSolution": ["10"], "StartTime": 1552320575.0791092, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["s"], ["s"], ["s"]]}, {"EndTime": 1552320577.054963, "FinalMinimizedSolution": ["6"], "FinalCoverage": [7, 1, 4, 1, 82, "3,", "2->3"], "FinalSolution": ["6", "8"], "StartTime": 1552320575.944819, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["s"], ["s"], ["s"], ["s"], ["t5U", "8"]]}, {"EndTime": 1552320577.9228687, "FinalMinimizedSolution": ["6"], "FinalCoverage": [7, 1, 4, 1, 82, "3,", "2->3"], "FinalSolution": ["6"], "StartTime": 1552320577.0551422, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["s"], ["s"], ["s"], ["s"], ["t5U", "8"], ["s"]]}]], [{"CorrectInputs": [[["130", "30"], 1533072475]], "UniqueId": "64a5f806-307d-4f7c-9041-45ccd028065a_0", "CoverageInfo": [18, 14, 12, 0, 13, "4-18"], "TimeStamp": 1533072494, "BadInput": ["130", "1.66"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 19, in <module>\n    imc()\n  File \"temp2018.py\", line 3, in imc\n    A = int(input())\nValueError: invalid literal for int() with base 10: '1.66'\n", "ip": "200.17.112.121"}, [{"EndTime": 1552278395.6324663, "FinalMinimizedSolution": ["130", "8"], "FinalCoverage": [18, 10, 12, 2, 33, "6,", "9-18,", "5->6,", "7->9"], "FinalSolution": ["130", "8"], "StartTime": 1552278394.8503313, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["130", "1.66"]]}, {"EndTime": 1552278396.5082026, "FinalMinimizedSolution": ["130", "2"], "FinalCoverage": [18, 10, 12, 2, 33, "6,", "9-18,", "5->6,", "7->9"], "FinalSolution": ["130", "2"], "StartTime": 1552278395.632637, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["130", "1.66"], ["130", "1.66"]]}, {"EndTime": 1552278397.1696877, "FinalMinimizedSolution": ["130", "3"], "FinalCoverage": [18, 10, 12, 2, 33, "6,", "9-18,", "5->6,", "7->9"], "FinalSolution": ["130", "3"], "StartTime": 1552278396.5083835, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["130", "1.66"], ["130", "1.66"], ["130", "1.66"]]}, {"EndTime": 1552278398.2856493, "FinalMinimizedSolution": ["1", "130"], "FinalCoverage": [18, 11, 12, 1, 27, "7-18,", "5->7"], "FinalSolution": ["1", "130", "3"], "StartTime": 1552278397.1698875, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["130", "1.66"], ["130", "1.66"], ["130", "1.66"], ["130", "1.66"], ["Pg2", "130", "3"]]}, {"EndTime": 1552278399.1473296, "FinalMinimizedSolution": ["130", "4"], "FinalCoverage": [18, 10, 12, 2, 33, "6,", "9-18,", "5->6,", "7->9"], "FinalSolution": ["130", "4"], "StartTime": 1552278398.2858727, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["130", "1.66"], ["130", "1.66"], ["130", "1.66"], ["130", "1.66"], ["Pg2", "130", "3"], ["130", "1.66"]]}]], [{"CorrectInputs": [[["3"], 1516797966], [["5"], 1516798042]], "UniqueId": "9ac51d4b-dafc-47a9-c76e-009eb99fc984_0", "CoverageInfo": [17, 6, 6, 3, 61, "11-12,", "15-16,", "20-22,", "10->11,", "14->15,", "18->22"], "TimeStamp": 1516798069, "BadInput": ["9"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 24, in <module>\n    print (tri_section_list(num_to_find))\n  File \"temp2018.py\", line 19, in tri_section_list\n    num_im_finding = ((second_pivot+1)+(end))/2\nNameError: name 'second_pivot' is not defined\n", "ip": "5.57.6.29"}, [{"EndTime": 1552273261.830421, "FinalMinimizedSolution": ["4"], "FinalCoverage": [17, 6, 6, 2, 57, "11-12,", "18-22,", "10->11,", "14->18"], "FinalSolution": ["4"], "StartTime": 1552273260.2130175, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["9"], ["9 N92"], ["8"], ["8", "8"], []]}, {"EndTime": 1552273264.9075952, "FinalMinimizedSolution": ["3"], "FinalCoverage": null, "FinalSolution": ["3"], "StartTime": 1552273261.8306725, "FoundSolution": true, "NumProbesMade": 16, "InputHistory": [["9"], ["9 N92"], ["8"], ["8", "8"], [], ["9"], ["9", "9"], ["9 number dont exist", "9"], ["2", "9"], ["number dont exist"], ["10"], ["lm8"], ["number dont exist", "8", "8"], ["8", "8", "8"], ["8", "9", "8", "8"], ["8", "9", "number dont exist", "8", "8"], ["8", "9", "number dont exist", "8 number dont exist", "8"], ["8", "9", "", "8 number dont exist", "8"], ["Z0a"], ["4 number dont exist"], [""]]}, {"EndTime": 1552273265.3984659, "FinalMinimizedSolution": ["7"], "FinalCoverage": null, "FinalSolution": ["7", "9"], "StartTime": 1552273264.9079342, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["9"], ["9 N92"], ["8"], ["8", "8"], [], ["9"], ["9", "9"], ["9 number dont exist", "9"], ["2", "9"], ["number dont exist"], ["10"], ["lm8"], ["number dont exist", "8", "8"], ["8", "8", "8"], ["8", "9", "8", "8"], ["8", "9", "number dont exist", "8", "8"], ["8", "9", "number dont exist", "8 number dont exist", "8"], ["8", "9", "", "8 number dont exist", "8"], ["Z0a"], ["4 number dont exist"], [""], ["9"], ["abc", "9"]]}, {"EndTime": 1552273265.8369439, "FinalMinimizedSolution": ["6"], "FinalCoverage": null, "FinalSolution": ["6"], "StartTime": 1552273265.3988307, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["9"], ["9 N92"], ["8"], ["8", "8"], [], ["9"], ["9", "9"], ["9 number dont exist", "9"], ["2", "9"], ["number dont exist"], ["10"], ["lm8"], ["number dont exist", "8", "8"], ["8", "8", "8"], ["8", "9", "8", "8"], ["8", "9", "number dont exist", "8", "8"], ["8", "9", "number dont exist", "8 number dont exist", "8"], ["8", "9", "", "8 number dont exist", "8"], ["Z0a"], ["4 number dont exist"], [""], ["9"], ["abc", "9"], ["9"], ["number 5 exist"]]}, {"EndTime": 1552273266.9440677, "FinalMinimizedSolution": ["4"], "FinalCoverage": [17, 6, 6, 2, 57, "11-12,", "18-22,", "10->11,", "14->18"], "FinalSolution": ["4", "9"], "StartTime": 1552273265.837331, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["9"], ["9 N92"], ["8"], ["8", "8"], [], ["9"], ["9", "9"], ["9 number dont exist", "9"], ["2", "9"], ["number dont exist"], ["10"], ["lm8"], ["number dont exist", "8", "8"], ["8", "8", "8"], ["8", "9", "8", "8"], ["8", "9", "number dont exist", "8", "8"], ["8", "9", "number dont exist", "8 number dont exist", "8"], ["8", "9", "", "8 number dont exist", "8"], ["Z0a"], ["4 number dont exist"], [""], ["9"], ["abc", "9"], ["9"], ["number 5 exist"], ["9"], ["SaraA123", "9"]]}]], [{"CorrectInputs": [[["2536", "32", "45", "1000", "3", "222"], 1542018268]], "UniqueId": "cf68a2a2-d101-4265-c33f-9c7fd9af0330_0", "CoverageInfo": [30, 16, 4, 0, 41, "15-17,", "19,", "25-36"], "TimeStamp": 1542018370, "BadInput": ["2.33"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 23, in <module>\n    n=int(input(\"ingrese numero entero:\"))\nValueError: invalid literal for int() with base 10: '2.33'\n", "ip": "191.85.138.80"}, [{"EndTime": 1552287780.4440973, "FinalMinimizedSolution": ["1", "3", "-1", "3", "1", "3"], "FinalCoverage": [30, 2, 4, 1, 91, "29-30,", "28->29"], "FinalSolution": ["1", "3", "-1", "3", "1", "3"], "StartTime": 1552287778.5388381, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["2.33"], ["1"], ["1", "0k0"], ["1", "3"], ["1", "3", "Xc5"], ["1", "3", "-1"], ["1", "3", "-1", "3"], ["1", "3", "-1", "3", "1"], ["1", "3", "-1", "3", "1", "cDq"]]}, {"EndTime": 1552287782.6278076, "FinalMinimizedSolution": ["-1", "5", "-1", "5", "2", "5"], "FinalCoverage": [30, 2, 4, 1, 91, "29-30,", "28->29"], "FinalSolution": ["-1", "5", "-1", "5", "2", "5"], "StartTime": 1552287780.4443748, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["2.33"], ["1"], ["1", "0k0"], ["1", "3"], ["1", "3", "Xc5"], ["1", "3", "-1"], ["1", "3", "-1", "3"], ["1", "3", "-1", "3", "1"], ["1", "3", "-1", "3", "1", "cDq"], ["2.33"], ["-1"], ["-1", "yNi"], ["-1", "5"], ["-1", "5", "-1"], ["-1", "5", "-1", "5"], ["-1", "5", "-1", "5", "2.33"], ["-1", "5", "-1", "5", "2"]]}, {"EndTime": 1552287784.4361873, "FinalMinimizedSolution": ["1", "1", "2", "1", "1", "1"], "FinalCoverage": [30, 2, 4, 1, 91, "29-30,", "28->29"], "FinalSolution": ["1", "1", "2", "1", "1", "1"], "StartTime": 1552287782.628162, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["2.33"], ["1"], ["1", "0k0"], ["1", "3"], ["1", "3", "Xc5"], ["1", "3", "-1"], ["1", "3", "-1", "3"], ["1", "3", "-1", "3", "1"], ["1", "3", "-1", "3", "1", "cDq"], ["2.33"], ["-1"], ["-1", "yNi"], ["-1", "5"], ["-1", "5", "-1"], ["-1", "5", "-1", "5"], ["-1", "5", "-1", "5", "2.33"], ["-1", "5", "-1", "5", "2"], ["2.33"], ["1", "1"], ["1", "1", "2.33"], ["1", "1", "2"], ["1", "1", "2", "1"], ["1", "1", "2", "1", "1"]]}, {"EndTime": 1552287786.2464879, "FinalMinimizedSolution": ["6", "6", "6", "6", "6", "6"], "FinalCoverage": [30, 2, 4, 1, 91, "29-30,", "28->29"], "FinalSolution": ["6", "6", "6", "6", "6", "6"], "StartTime": 1552287784.4366088, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["2.33"], ["1"], ["1", "0k0"], ["1", "3"], ["1", "3", "Xc5"], ["1", "3", "-1"], ["1", "3", "-1", "3"], ["1", "3", "-1", "3", "1"], ["1", "3", "-1", "3", "1", "cDq"], ["2.33"], ["-1"], ["-1", "yNi"], ["-1", "5"], ["-1", "5", "-1"], ["-1", "5", "-1", "5"], ["-1", "5", "-1", "5", "2.33"], ["-1", "5", "-1", "5", "2"], ["2.33"], ["1", "1"], ["1", "1", "2.33"], ["1", "1", "2"], ["1", "1", "2", "1"], ["1", "1", "2", "1", "1"], ["2.33"], ["6"], ["6", "6"], ["6", "6", "6"], ["6", "6", "6", "6"], ["6", "6", "6", "6", "6"]]}, {"EndTime": 1552287788.2492752, "FinalMinimizedSolution": ["3", "3", "3", "3", "3", "3"], "FinalCoverage": [30, 2, 4, 1, 91, "29-30,", "28->29"], "FinalSolution": ["3", "3", "3", "3", "3", "3"], "StartTime": 1552287786.2469463, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["2.33"], ["1"], ["1", "0k0"], ["1", "3"], ["1", "3", "Xc5"], ["1", "3", "-1"], ["1", "3", "-1", "3"], ["1", "3", "-1", "3", "1"], ["1", "3", "-1", "3", "1", "cDq"], ["2.33"], ["-1"], ["-1", "yNi"], ["-1", "5"], ["-1", "5", "-1"], ["-1", "5", "-1", "5"], ["-1", "5", "-1", "5", "2.33"], ["-1", "5", "-1", "5", "2"], ["2.33"], ["1", "1"], ["1", "1", "2.33"], ["1", "1", "2"], ["1", "1", "2", "1"], ["1", "1", "2", "1", "1"], ["2.33"], ["6"], ["6", "6"], ["6", "6", "6"], ["6", "6", "6", "6"], ["6", "6", "6", "6", "6"], ["2.33"], ["3"], ["3", "2.33"], ["3", "3"], ["3", "3", "3"], ["3", "3", "3", "3"], ["3", "3", "3", "3", "3"]]}]], [{"CorrectInputs": [[["29"], 1515737196], [["43"], 1515737257], [["1"], 1515738590]], "UniqueId": "8df39922-b4c7-43e4-bfcf-9d591c8386c2_0", "CoverageInfo": [14, 13, 6, 0, 5, "2-14"], "TimeStamp": 1515738539, "BadInput": ["12.2"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    mnum = int(input())\nValueError: invalid literal for int() with base 10: '12.2'\n", "ip": "2.220.115.197"}, [{"EndTime": 1552319949.342968, "FinalMinimizedSolution": ["10"], "FinalCoverage": [14, 0, 6, 1, 95, "11->6"], "FinalSolution": ["10"], "StartTime": 1552319948.475403, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["12.2"]]}, {"EndTime": 1552319950.2130609, "FinalMinimizedSolution": ["6"], "FinalCoverage": [14, 0, 6, 1, 95, "11->6"], "FinalSolution": ["6"], "StartTime": 1552319949.3431547, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["12.2"], ["12.2"]]}, {"EndTime": 1552319951.0832357, "FinalMinimizedSolution": ["1"], "FinalCoverage": [14, 2, 6, 2, 80, "9-10,", "8->9,", "11->6"], "FinalSolution": ["1"], "StartTime": 1552319950.2132564, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["12.2"], ["12.2"], ["12.2"]]}, {}, {"EndTime": 1552319956.985552, "FinalMinimizedSolution": ["5"], "FinalCoverage": [14, 0, 6, 1, 95, "11->6"], "FinalSolution": ["5"], "StartTime": 1552319956.2821252, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["12.2"], ["12.2"], ["12.2"], ["12.2"], ["10 -0h"], ["12.2"]]}]], [{"CorrectInputs": [[["1"], 1516208115], [["7"], 1516208212], [["-5"], 1516208304]], "UniqueId": "3018249e-de0c-4666-ab6b-e08c3d776a7d_0", "CoverageInfo": [5, 4, 0, 0, 20, "2-5"], "TimeStamp": 1516208272, "BadInput": ["x"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    A=float(input(\"entrer A\"))\nValueError: could not convert string to float: 'x'\n", "ip": "195.5.241.110"}, [{"EndTime": 1552278105.2231538, "FinalMinimizedSolution": ["10.3"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["10.3"], "StartTime": 1552278104.3620832, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["x"]]}, {"EndTime": 1552278106.0826201, "FinalMinimizedSolution": ["9.2"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["9.2"], "StartTime": 1552278105.2233198, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["x"], ["x"]]}, {"EndTime": 1552278106.9440565, "FinalMinimizedSolution": ["4.5"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["4.5"], "StartTime": 1552278106.0827923, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["x"], ["x"], ["x"]]}, {"EndTime": 1552278107.803343, "FinalMinimizedSolution": ["8.0"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["8.0"], "StartTime": 1552278106.9442368, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["x"], ["x"], ["x"], ["x"]]}, {"EndTime": 1552278108.663721, "FinalMinimizedSolution": ["0.9"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["0.9"], "StartTime": 1552278107.8035305, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["x"], ["x"], ["x"], ["x"], ["x"]]}]], [{"CorrectInputs": [[["3", "5"], 1543706663]], "UniqueId": "3a75044d-295d-4c5c-a6e2-caa794f54b04_0", "CoverageInfo": [10, 6, 2, 0, 33, "3-6,", "11-12"], "TimeStamp": 1543706738, "BadInput": ["ciao"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 13, in <module>\n    main()\n  File \"temp2018.py\", line 2, in main\n    m=int(input('inserire un intero '))\nValueError: invalid literal for int() with base 10: 'ciao'\n", "ip": "95.235.191.212"}, [{"EndTime": 1552357316.6362524, "FinalMinimizedSolution": ["-1", "ciao"], "FinalCoverage": [10, 0, 2, 1, 92, "11->exit"], "FinalSolution": ["-1", "ciao"], "StartTime": 1552357315.5788777, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["ciao"], ["-1"]]}, {"EndTime": 1552357317.689464, "FinalMinimizedSolution": ["10", "10"], "FinalCoverage": [10, 0, 2, 1, 92, "11->exit"], "FinalSolution": ["10", "10"], "StartTime": 1552357316.6364272, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["ciao"], ["-1"], ["ciao"], ["10"]]}, {"EndTime": 1552357318.7425244, "FinalMinimizedSolution": ["2", "ciao"], "FinalCoverage": [10, 0, 2, 1, 92, "11->exit"], "FinalSolution": ["2", "ciao"], "StartTime": 1552357317.689655, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["ciao"], ["-1"], ["ciao"], ["10"], ["ciao"], ["2"]]}, {"EndTime": 1552357319.799458, "FinalMinimizedSolution": ["4", "b93"], "FinalCoverage": [10, 0, 2, 1, 92, "11->exit"], "FinalSolution": ["4", "b93"], "StartTime": 1552357318.7427297, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["ciao"], ["-1"], ["ciao"], ["10"], ["ciao"], ["2"], ["ciao"], ["4"]]}, {"EndTime": 1552357320.660479, "FinalMinimizedSolution": ["3", "2"], "FinalCoverage": [10, 0, 2, 1, 92, "11->exit"], "FinalSolution": ["3", "2"], "StartTime": 1552357319.7996733, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["ciao"], ["-1"], ["ciao"], ["10"], ["ciao"], ["2"], ["ciao"], ["4"], ["ciao"]]}]], [{"CorrectInputs": [[["\"hi\""], 1540030877]], "UniqueId": "b9b55576-1cb3-4991-a94e-915dafd59f35_0", "CoverageInfo": [13, 4, 4, 2, 65, "10,", "12,", "16-18,", "9->10,", "11->12"], "TimeStamp": 1540030924, "BadInput": ["hi"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 21, in <module>\n    item_move_bottom(my_list)\n  File \"temp2018.py\", line 15, in item_move_bottom\n    addlist.insert(max(len(addlist),item))\nTypeError: unorderable types: str() > int()\n", "ip": "24.17.202.245"}, [{"EndTime": 1552346773.9064543, "FinalMinimizedSolution": [], "FinalCoverage": [13, 5, 4, 1, 53, "11-16,", "9->11"], "FinalSolution": [], "StartTime": 1552346773.228639, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["hi"]]}, {"EndTime": 1552346774.6899855, "FinalMinimizedSolution": [], "FinalCoverage": [13, 5, 4, 1, 53, "11-16,", "9->11"], "FinalSolution": ["2", "hi"], "StartTime": 1552346773.9066167, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["hi"], ["hi"]]}, {"EndTime": 1552346775.4729388, "FinalMinimizedSolution": [], "FinalCoverage": [13, 5, 4, 1, 53, "11-16,", "9->11"], "FinalSolution": ["DeshOP 5acer Movimiento", "hi"], "StartTime": 1552346774.6901512, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["hi"], ["hi"], ["hi"]]}, {"EndTime": 1552346776.2557003, "FinalMinimizedSolution": [], "FinalCoverage": [13, 5, 4, 1, 53, "11-16,", "9->11"], "FinalSolution": ["2.12", "hi"], "StartTime": 1552346775.4731388, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["hi"], ["hi"], ["hi"], ["hi"]]}, {"EndTime": 1552346776.987532, "FinalMinimizedSolution": [], "FinalCoverage": [13, 5, 4, 1, 53, "11-16,", "9->11"], "FinalSolution": ["IUz"], "StartTime": 1552346776.2558837, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["hi"], ["hi"], ["hi"], ["hi"], ["hi"]]}]], [{"CorrectInputs": [[["10"], 1542357894]], "UniqueId": "0787caa7-1ba5-41d1-ac46-70e4bdf4941e_0", "CoverageInfo": [17, 5, 12, 2, 69, "11-14,", "22,", "7->11,", "19->exit"], "TimeStamp": 1542358044, "BadInput": ["100"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 21, in <module>\n    finalList=(sieve_of_sundaram (n))\n  File \"temp2018.py\", line 10, in sieve_of_sundaram\n    listValues.remove(i+j+(2*i*j))\nValueError: list.remove(x): x not in list\n", "ip": "128.195.96.191"}, [{"EndTime": 1552367238.4961097, "FinalMinimizedSolution": ["3"], "FinalCoverage": [17, 1, 12, 2, 90, "10,", "9->10,", "19->exit"], "FinalSolution": ["3"], "StartTime": 1552367237.4369006, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["100"], []]}, {"EndTime": 1552367239.610184, "FinalMinimizedSolution": ["0"], "FinalCoverage": [17, 6, 12, 4, 52, "6,", "8-10,", "12-13,", "5->6,", "7->8,", "11->12,", "19->exit"], "FinalSolution": ["0", "100"], "StartTime": 1552367238.4962914, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["100"], [], ["100"], ["__main__", "100"]]}, {"EndTime": 1552367240.6644027, "FinalMinimizedSolution": ["8"], "FinalCoverage": [17, 0, 12, 1, 97, "19->exit"], "FinalSolution": ["8"], "StartTime": 1552367239.610386, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["100"], [], ["100"], ["__main__", "100"], ["100"], ["__main__"]]}, {"EndTime": 1552367242.0166, "FinalMinimizedSolution": ["2"], "FinalCoverage": [17, 1, 12, 2, 90, "10,", "9->10,", "19->exit"], "FinalSolution": ["2", "100", "100"], "StartTime": 1552367240.664637, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["100"], [], ["100"], ["__main__", "100"], ["100"], ["__main__"], ["100"], ["100", "100"], ["__main__", "100", "100"]]}, {"EndTime": 1552367243.0752013, "FinalMinimizedSolution": ["1"], "FinalCoverage": [17, 1, 12, 2, 90, "10,", "9->10,", "19->exit"], "FinalSolution": ["1"], "StartTime": 1552367242.0168462, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["100"], [], ["100"], ["__main__", "100"], ["100"], ["__main__"], ["100"], ["100", "100"], ["__main__", "100", "100"], ["100"], ["T5T"]]}]], [{"CorrectInputs": [[["321"], 1537235748]], "UniqueId": "87723db2-3914-4f6a-c072-0f7ec7a70d44_0", "CoverageInfo": [13, 1, 6, 2, 84, "15,", "12->15,", "13->12"], "TimeStamp": 1537235788, "BadInput": ["321adsa"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 14, in <module>\n    a = int(string[i : i + 1 + search_nb(string[i:])] )\nValueError: invalid literal for int() with base 10: '321a'\n", "ip": "109.252.73.40"}, [{"EndTime": 1552342719.6855662, "FinalMinimizedSolution": [], "FinalCoverage": [13, 1, 6, 2, 84, "7,", "6->7,", "13->12"], "FinalSolution": ["5"], "StartTime": 1552342718.3798752, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["321adsa"], ["6dsa"], ["6sa"], ["10a"]]}, {"EndTime": 1552342720.9872434, "FinalMinimizedSolution": [], "FinalCoverage": [13, 1, 6, 2, 84, "7,", "6->7,", "13->12"], "FinalSolution": ["4"], "StartTime": 1552342719.6857712, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["321adsa"], ["6dsa"], ["6sa"], ["10a"], ["321adsa"], ["4dsa"], ["2sa"], ["8a"]]}, {"EndTime": 1552342722.532933, "FinalMinimizedSolution": [], "FinalCoverage": [13, 1, 6, 2, 84, "7,", "6->7,", "13->12"], "FinalSolution": ["5", "8sa"], "StartTime": 1552342720.9874675, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["321adsa"], ["6dsa"], ["6sa"], ["10a"], ["321adsa"], ["4dsa"], ["2sa"], ["8a"], ["321adsa"], ["4dsa", "4dsa"], ["4dsa", "8sa"], ["0sa", "8sa"], ["1a", "8sa"]]}, {"EndTime": 1552342723.2153316, "FinalMinimizedSolution": [], "FinalCoverage": [13, 7, 6, 1, 37, "2,", "5-8,", "13-14,", "12->13"], "FinalSolution": [], "StartTime": 1552342722.5332294, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["321adsa"], ["6dsa"], ["6sa"], ["10a"], ["321adsa"], ["4dsa"], ["2sa"], ["8a"], ["321adsa"], ["4dsa", "4dsa"], ["4dsa", "8sa"], ["0sa", "8sa"], ["1a", "8sa"], ["321adsa"]]}, {"EndTime": 1552342724.5196376, "FinalMinimizedSolution": [], "FinalCoverage": [13, 1, 6, 2, 84, "7,", "6->7,", "13->12"], "FinalSolution": ["0"], "StartTime": 1552342723.2155821, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["321adsa"], ["6dsa"], ["6sa"], ["10a"], ["321adsa"], ["4dsa"], ["2sa"], ["8a"], ["321adsa"], ["4dsa", "4dsa"], ["4dsa", "8sa"], ["0sa", "8sa"], ["1a", "8sa"], ["321adsa"], ["321adsa"], ["1dsa"], ["7sa"], ["6a"]]}]], [{"CorrectInputs": [[["ruba"], 1515356135]], "UniqueId": "fa3b8c08-53aa-4898-c71a-a623d245e88e_0", "CoverageInfo": [23, 3, 12, 1, 89, "24-26,", "23->24"], "TimeStamp": 1515356203, "BadInput": ["rumlkpop"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 10, in <module>\n    jeu.append(scrabble[randint(0,long)])\nIndexError: string index out of range\n", "ip": "92.88.12.249"}, [{"EndTime": 1552422132.5505059, "FinalMinimizedSolution": [], "FinalCoverage": [23, 10, 12, 1, 46, "20-30,", "19->20"], "FinalSolution": [], "StartTime": 1552422132.1863728, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["rumlkpop"]]}, {"EndTime": 1552422133.001063, "FinalMinimizedSolution": [], "FinalCoverage": [23, 3, 12, 1, 89, "24-26,", "23->24"], "FinalSolution": ["rumlkpop V2P"], "StartTime": 1552422132.5506644, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["rumlkpop"], ["rumlkpop"]]}, {"EndTime": 1552422133.2070365, "FinalMinimizedSolution": [], "FinalCoverage": null, "FinalSolution": ["NUd", "c"], "StartTime": 1552422133.0012047, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["rumlkpop"], ["rumlkpop"], ["rumlkpop"], ["c"]]}, {"EndTime": 1552422133.620906, "FinalMinimizedSolution": [], "FinalCoverage": [23, 3, 12, 1, 89, "24-26,", "23->24"], "FinalSolution": ["83f"], "StartTime": 1552422133.2071302, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["rumlkpop"], ["rumlkpop"], ["rumlkpop"], ["c"], ["rumlkpop"]]}, {"EndTime": 1552422134.0490308, "FinalMinimizedSolution": [], "FinalCoverage": [23, 3, 12, 1, 89, "24-26,", "23->24"], "FinalSolution": ["j", "rumlkpop"], "StartTime": 1552422133.6210504, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["rumlkpop"], ["rumlkpop"], ["rumlkpop"], ["c"], ["rumlkpop"], ["rumlkpop"]]}]], [{"CorrectInputs": [[["5"], 1542108339]], "UniqueId": "231ccdf7-2222-493a-c4bb-fcce8a2aaeed_0", "CoverageInfo": [6, 0, 0, 0, 100], "TimeStamp": 1542108361, "BadInput": ["fewfewf"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 6, in <module>\n    print(ans)\nNameError: name 'ans' is not defined\n", "ip": "2607:fea8:bcdf:fbdc:3085:e311:2835:83f3"}, [{"InputHistory": [["fewfewf"], ["fewfewf 67Q"], ["fewfewf", "67Q"], ["fewfewf", "fewfewf", "67Q"], ["fewfewf", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q", "iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q", "3AD", "iV8"], [], ["9KX"], ["spy", "9KX"], ["HrG"], ["-W8", "HrG"], ["hGU", "HrG"], ["sds"], ["h4B"], ["h4B 1XZ"], ["h4B h4B 1XZ"], ["h4B fewfewf 1XZ"], ["h4B", "fewfewf", "1XZ"], ["h4B", "papel", "fewfewf", "1XZ"], ["h4B", "papel", "fewfewf", "fewfewf", "1XZ"], ["J1J"], ["a4b"], ["9tq"], ["fewfewf", "9tq"], ["oQg"], ["papel", "oQg"], ["papel", "papel", "oQg"], ["papel", "papel UjO", "oQg"], ["papel UjO", "oQg"], ["papel UjO", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "papel", "fewfewf", "oQg"], ["7xP"], ["QtT"], ["", "QtT"], ["mZ7"], ["h6Y", "mZ7"], ["S77", "h6Y", "mZ7"], ["h6Y", "fewfewf", "mZ7"], ["fewfewf", "mZ7"], ["fewfewf", "fewfewf", "mZ7"], ["fewfewf", "fewfewf", "fewfewf", "mZ7"], ["t72"], ["hv6"], ["DYh"], ["-5B"], ["UOt"], ["papel", "UOt"], ["Mno"], ["fewfewf", "Mno"], ["fewfewf", "C5E", "Mno"], ["ESp"], ["ZKm"], ["nxi"], ["p52", "nxi"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552264328.1531608, "StartTime": 1552264316.8725884}, {"InputHistory": [["fewfewf"], ["fewfewf 67Q"], ["fewfewf", "67Q"], ["fewfewf", "fewfewf", "67Q"], ["fewfewf", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q", "iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q", "3AD", "iV8"], [], ["9KX"], ["spy", "9KX"], ["HrG"], ["-W8", "HrG"], ["hGU", "HrG"], ["sds"], ["h4B"], ["h4B 1XZ"], ["h4B h4B 1XZ"], ["h4B fewfewf 1XZ"], ["h4B", "fewfewf", "1XZ"], ["h4B", "papel", "fewfewf", "1XZ"], ["h4B", "papel", "fewfewf", "fewfewf", "1XZ"], ["J1J"], ["a4b"], ["9tq"], ["fewfewf", "9tq"], ["oQg"], ["papel", "oQg"], ["papel", "papel", "oQg"], ["papel", "papel UjO", "oQg"], ["papel UjO", "oQg"], ["papel UjO", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "papel", "fewfewf", "oQg"], ["7xP"], ["QtT"], ["", "QtT"], ["mZ7"], ["h6Y", "mZ7"], ["S77", "h6Y", "mZ7"], ["h6Y", "fewfewf", "mZ7"], ["fewfewf", "mZ7"], ["fewfewf", "fewfewf", "mZ7"], ["fewfewf", "fewfewf", "fewfewf", "mZ7"], ["t72"], ["hv6"], ["DYh"], ["-5B"], ["UOt"], ["papel", "UOt"], ["Mno"], ["fewfewf", "Mno"], ["fewfewf", "C5E", "Mno"], ["ESp"], ["ZKm"], ["nxi"], ["p52", "nxi"], ["fewfewf"], ["F9u"], ["papel", "F9u"], ["5dH"], ["fVk"], ["VbG"], ["V5X"], ["0Ap"], ["9R1", "0Ap"], ["5nT", "9R1", "0Ap"], ["fewfewf", "5nT", "9R1", "0Ap"], ["fewfewf", "5nT", "9R1"], ["fewfewf", "5nT", "EV0", "9R1"], ["fewfewf", "5nT", "EV0", "EV0", "9R1"], ["fewfewf", "5nT", "EV0", "EV0", "Dwe", "9R1"], ["fewfewf", "Dwe", "5nT", "EV0", "EV0", "Dwe", "9R1"], ["fewfewf", "Dwe", "5nT", "EV0", "3mE", "EV0", "Dwe", "9R1"], ["4v7"], ["6Sj", "4v7"], ["l14", "6Sj", "4v7"], ["6Sj", "l14", "6Sj", "4v7"], ["Oo5", "6Sj", "l14", "6Sj", "4v7"], ["", "Oo5", "6Sj", "l14", "6Sj", "4v7"], ["UEQ"], ["Ozr"], ["Ozr ARo"], [""], ["-LH"], ["-LH", "-LH"], ["-LH", "-LH", "-LH"], ["fewfewf", "-LH", "-LH", "-LH"], ["4s5"], ["fewfewf", "4s5"], ["7Vx"], ["UF8"], ["UF8 UT4"], ["", ""], ["", "fewfewf", ""], ["xss"], ["I5n"], ["x6a"], ["fewfewf", "x6a"], ["fewfewf", "867", "x6a"], ["V24", "fewfewf", "867", "x6a"], ["V24", "fewfewf", "867", "k3U", "x6a"], ["V24", "867", "k3U", "x6a"], ["V24", "867", "k3U", "Sm9", "x6a"], ["V24", "867", "k3U", "Sm9", "2wR", "x6a"], ["zub"], ["eyL", "zub"], ["fewfewf", "zub"], ["IfJ"], ["fewfewf", "IfJ"], ["IfJ 7l9"], ["IfJ "], ["fewfewf "], ["fewfewf fewfewf "], ["fewfewf jhP "], ["fewfewf", "jhP", ""], ["fewfewf", "jhP", "", ""]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552264338.4248314, "StartTime": 1552264328.153774}, {"InputHistory": [["fewfewf"], ["fewfewf 67Q"], ["fewfewf", "67Q"], ["fewfewf", "fewfewf", "67Q"], ["fewfewf", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q", "iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q", "3AD", "iV8"], [], ["9KX"], ["spy", "9KX"], ["HrG"], ["-W8", "HrG"], ["hGU", "HrG"], ["sds"], ["h4B"], ["h4B 1XZ"], ["h4B h4B 1XZ"], ["h4B fewfewf 1XZ"], ["h4B", "fewfewf", "1XZ"], ["h4B", "papel", "fewfewf", "1XZ"], ["h4B", "papel", "fewfewf", "fewfewf", "1XZ"], ["J1J"], ["a4b"], ["9tq"], ["fewfewf", "9tq"], ["oQg"], ["papel", "oQg"], ["papel", "papel", "oQg"], ["papel", "papel UjO", "oQg"], ["papel UjO", "oQg"], ["papel UjO", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "papel", "fewfewf", "oQg"], ["7xP"], ["QtT"], ["", "QtT"], ["mZ7"], ["h6Y", "mZ7"], ["S77", "h6Y", "mZ7"], ["h6Y", "fewfewf", "mZ7"], ["fewfewf", "mZ7"], ["fewfewf", "fewfewf", "mZ7"], ["fewfewf", "fewfewf", "fewfewf", "mZ7"], ["t72"], ["hv6"], ["DYh"], ["-5B"], ["UOt"], ["papel", "UOt"], ["Mno"], ["fewfewf", "Mno"], ["fewfewf", "C5E", "Mno"], ["ESp"], ["ZKm"], ["nxi"], ["p52", "nxi"], ["fewfewf"], ["F9u"], ["papel", "F9u"], ["5dH"], ["fVk"], ["VbG"], ["V5X"], ["0Ap"], ["9R1", "0Ap"], ["5nT", "9R1", "0Ap"], ["fewfewf", "5nT", "9R1", "0Ap"], ["fewfewf", "5nT", "9R1"], ["fewfewf", "5nT", "EV0", "9R1"], ["fewfewf", "5nT", "EV0", "EV0", "9R1"], ["fewfewf", "5nT", "EV0", "EV0", "Dwe", "9R1"], ["fewfewf", "Dwe", "5nT", "EV0", "EV0", "Dwe", "9R1"], ["fewfewf", "Dwe", "5nT", "EV0", "3mE", "EV0", "Dwe", "9R1"], ["4v7"], ["6Sj", "4v7"], ["l14", "6Sj", "4v7"], ["6Sj", "l14", "6Sj", "4v7"], ["Oo5", "6Sj", "l14", "6Sj", "4v7"], ["", "Oo5", "6Sj", "l14", "6Sj", "4v7"], ["UEQ"], ["Ozr"], ["Ozr ARo"], [""], ["-LH"], ["-LH", "-LH"], ["-LH", "-LH", "-LH"], ["fewfewf", "-LH", "-LH", "-LH"], ["4s5"], ["fewfewf", "4s5"], ["7Vx"], ["UF8"], ["UF8 UT4"], ["", ""], ["", "fewfewf", ""], ["xss"], ["I5n"], ["x6a"], ["fewfewf", "x6a"], ["fewfewf", "867", "x6a"], ["V24", "fewfewf", "867", "x6a"], ["V24", "fewfewf", "867", "k3U", "x6a"], ["V24", "867", "k3U", "x6a"], ["V24", "867", "k3U", "Sm9", "x6a"], ["V24", "867", "k3U", "Sm9", "2wR", "x6a"], ["zub"], ["eyL", "zub"], ["fewfewf", "zub"], ["IfJ"], ["fewfewf", "IfJ"], ["IfJ 7l9"], ["IfJ "], ["fewfewf "], ["fewfewf fewfewf "], ["fewfewf jhP "], ["fewfewf", "jhP", ""], ["fewfewf", "jhP", "", ""], ["fewfewf"], ["fewfewf h6X"], ["fewfewf", "h6X"], ["fewfewf", "fewfewf", "h6X"], ["fewfewf", "fewfewf"], ["2CX"], ["fewfewf", "2CX"], ["wLi"], ["pq1", "wLi"], ["85T", "pq1", "wLi"], ["fewfewf", "85T", "pq1", "wLi"], ["fewfewf", "papel", "85T", "pq1", "wLi"], ["fewfewf", "papel", "85T", "85T", "pq1", "wLi"], ["fewfewf 5-M", "papel", "85T", "85T", "pq1", "wLi"], ["4tn"], ["4tn", "4tn"], ["4tn", "Myf", "4tn"], ["4tn", "Myf"], ["4tn", "Myf T9r"], ["4tn", ""], [" I4G"], ["-P6", "", ""], ["-P6", "", "2l7", ""], ["-P6", "", "papel", "2l7", ""], ["-P6", "", "papel", "2l7", "EbJ", ""], ["-P6", "", "EbJ", "papel", "2l7", "EbJ", ""], ["9X6"], ["", "9X6"], ["", "fewfewf", "9X6"], ["9tT"], ["9tT wD5"], [" wD5"], ["", "wD5"], ["", "wD5 Sy3"], ["", "wD5", "Sy3"], [" Wf2", "wD5", "Sy3"], [" Wf2", "wD5", "Sy3 yk-"], ["zkM Wf2", "wD5", "Sy3 yk-"], ["wD5 Wf2", "wD5", "Sy3 yk-"], ["88b"], ["papel", "88b"], ["papel", "88b E0-"], ["papel", "-A1 E0-"], ["papel", "-A1 fewfewf"], ["papel frB", "-A1 fewfewf"], ["DvG frB", "-A1 fewfewf"], ["jUB frB", "-A1 fewfewf"], ["", "-A1 fewfewf"], ["", "-A1 "], ["", "-A1", ""], [" HqU"], ["fewfewf HqU"], ["fewfewf", "HqU"], ["j9e"], ["j9e 49H"], ["fewfewf 49H"], ["8bz 49H"], ["8bz fewfewf"], ["papel fewfewf"], ["", " Lhy"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552264349.6639485, "StartTime": 1552264338.4259377}, {"EndTime": 1552264353.9991338, "FinalMinimizedSolution": ["381"], "FinalCoverage": [6, 2, 0, 0, 67, "4-5"], "FinalSolution": ["381"], "StartTime": 1552264349.6655846, "FoundSolution": true, "NumProbesMade": 22, "InputHistory": [["fewfewf"], ["fewfewf 67Q"], ["fewfewf", "67Q"], ["fewfewf", "fewfewf", "67Q"], ["fewfewf", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q", "iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q", "3AD", "iV8"], [], ["9KX"], ["spy", "9KX"], ["HrG"], ["-W8", "HrG"], ["hGU", "HrG"], ["sds"], ["h4B"], ["h4B 1XZ"], ["h4B h4B 1XZ"], ["h4B fewfewf 1XZ"], ["h4B", "fewfewf", "1XZ"], ["h4B", "papel", "fewfewf", "1XZ"], ["h4B", "papel", "fewfewf", "fewfewf", "1XZ"], ["J1J"], ["a4b"], ["9tq"], ["fewfewf", "9tq"], ["oQg"], ["papel", "oQg"], ["papel", "papel", "oQg"], ["papel", "papel UjO", "oQg"], ["papel UjO", "oQg"], ["papel UjO", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "papel", "fewfewf", "oQg"], ["7xP"], ["QtT"], ["", "QtT"], ["mZ7"], ["h6Y", "mZ7"], ["S77", "h6Y", "mZ7"], ["h6Y", "fewfewf", "mZ7"], ["fewfewf", "mZ7"], ["fewfewf", "fewfewf", "mZ7"], ["fewfewf", "fewfewf", "fewfewf", "mZ7"], ["t72"], ["hv6"], ["DYh"], ["-5B"], ["UOt"], ["papel", "UOt"], ["Mno"], ["fewfewf", "Mno"], ["fewfewf", "C5E", "Mno"], ["ESp"], ["ZKm"], ["nxi"], ["p52", "nxi"], ["fewfewf"], ["F9u"], ["papel", "F9u"], ["5dH"], ["fVk"], ["VbG"], ["V5X"], ["0Ap"], ["9R1", "0Ap"], ["5nT", "9R1", "0Ap"], ["fewfewf", "5nT", "9R1", "0Ap"], ["fewfewf", "5nT", "9R1"], ["fewfewf", "5nT", "EV0", "9R1"], ["fewfewf", "5nT", "EV0", "EV0", "9R1"], ["fewfewf", "5nT", "EV0", "EV0", "Dwe", "9R1"], ["fewfewf", "Dwe", "5nT", "EV0", "EV0", "Dwe", "9R1"], ["fewfewf", "Dwe", "5nT", "EV0", "3mE", "EV0", "Dwe", "9R1"], ["4v7"], ["6Sj", "4v7"], ["l14", "6Sj", "4v7"], ["6Sj", "l14", "6Sj", "4v7"], ["Oo5", "6Sj", "l14", "6Sj", "4v7"], ["", "Oo5", "6Sj", "l14", "6Sj", "4v7"], ["UEQ"], ["Ozr"], ["Ozr ARo"], [""], ["-LH"], ["-LH", "-LH"], ["-LH", "-LH", "-LH"], ["fewfewf", "-LH", "-LH", "-LH"], ["4s5"], ["fewfewf", "4s5"], ["7Vx"], ["UF8"], ["UF8 UT4"], ["", ""], ["", "fewfewf", ""], ["xss"], ["I5n"], ["x6a"], ["fewfewf", "x6a"], ["fewfewf", "867", "x6a"], ["V24", "fewfewf", "867", "x6a"], ["V24", "fewfewf", "867", "k3U", "x6a"], ["V24", "867", "k3U", "x6a"], ["V24", "867", "k3U", "Sm9", "x6a"], ["V24", "867", "k3U", "Sm9", "2wR", "x6a"], ["zub"], ["eyL", "zub"], ["fewfewf", "zub"], ["IfJ"], ["fewfewf", "IfJ"], ["IfJ 7l9"], ["IfJ "], ["fewfewf "], ["fewfewf fewfewf "], ["fewfewf jhP "], ["fewfewf", "jhP", ""], ["fewfewf", "jhP", "", ""], ["fewfewf"], ["fewfewf h6X"], ["fewfewf", "h6X"], ["fewfewf", "fewfewf", "h6X"], ["fewfewf", "fewfewf"], ["2CX"], ["fewfewf", "2CX"], ["wLi"], ["pq1", "wLi"], ["85T", "pq1", "wLi"], ["fewfewf", "85T", "pq1", "wLi"], ["fewfewf", "papel", "85T", "pq1", "wLi"], ["fewfewf", "papel", "85T", "85T", "pq1", "wLi"], ["fewfewf 5-M", "papel", "85T", "85T", "pq1", "wLi"], ["4tn"], ["4tn", "4tn"], ["4tn", "Myf", "4tn"], ["4tn", "Myf"], ["4tn", "Myf T9r"], ["4tn", ""], [" I4G"], ["-P6", "", ""], ["-P6", "", "2l7", ""], ["-P6", "", "papel", "2l7", ""], ["-P6", "", "papel", "2l7", "EbJ", ""], ["-P6", "", "EbJ", "papel", "2l7", "EbJ", ""], ["9X6"], ["", "9X6"], ["", "fewfewf", "9X6"], ["9tT"], ["9tT wD5"], [" wD5"], ["", "wD5"], ["", "wD5 Sy3"], ["", "wD5", "Sy3"], [" Wf2", "wD5", "Sy3"], [" Wf2", "wD5", "Sy3 yk-"], ["zkM Wf2", "wD5", "Sy3 yk-"], ["wD5 Wf2", "wD5", "Sy3 yk-"], ["88b"], ["papel", "88b"], ["papel", "88b E0-"], ["papel", "-A1 E0-"], ["papel", "-A1 fewfewf"], ["papel frB", "-A1 fewfewf"], ["DvG frB", "-A1 fewfewf"], ["jUB frB", "-A1 fewfewf"], ["", "-A1 fewfewf"], ["", "-A1 "], ["", "-A1", ""], [" HqU"], ["fewfewf HqU"], ["fewfewf", "HqU"], ["j9e"], ["j9e 49H"], ["fewfewf 49H"], ["8bz 49H"], ["8bz fewfewf"], ["papel fewfewf"], ["", " Lhy"], ["fewfewf"], ["fewfewf 3G9"], ["papel 3G9"], ["papel", "fewfewf"], ["", "papel", "fewfewf"], ["", "papel", "fewfewf", "fewfewf"], ["", "fewfewf", "fewfewf"], ["", "fewfewf", "fewfewf T51"], ["26F"], ["26F pe3"], ["26F fewfewf"], ["26F fewfewf fewfewf"], ["26F 26F fewfewf fewfewf fewfewf"], ["", "Jd0", ""], ["Jd0", ""], ["Jd0", " sg3"], ["Jd0 Ev4", " sg3"], ["Jd0 Ev4", "-10 sg3"], ["", "-10 sg3"], ["", "", "-10 sg3"], ["", "", "9ZK sg3"], ["", "", "9ZK", "sg3"]]}, {"InputHistory": [["fewfewf"], ["fewfewf 67Q"], ["fewfewf", "67Q"], ["fewfewf", "fewfewf", "67Q"], ["fewfewf", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q", "iV8"], ["fewfewf", "fewfewf 62l", "papel", "fewfewf", "67Q", "3AD", "iV8"], [], ["9KX"], ["spy", "9KX"], ["HrG"], ["-W8", "HrG"], ["hGU", "HrG"], ["sds"], ["h4B"], ["h4B 1XZ"], ["h4B h4B 1XZ"], ["h4B fewfewf 1XZ"], ["h4B", "fewfewf", "1XZ"], ["h4B", "papel", "fewfewf", "1XZ"], ["h4B", "papel", "fewfewf", "fewfewf", "1XZ"], ["J1J"], ["a4b"], ["9tq"], ["fewfewf", "9tq"], ["oQg"], ["papel", "oQg"], ["papel", "papel", "oQg"], ["papel", "papel UjO", "oQg"], ["papel UjO", "oQg"], ["papel UjO", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "fewfewf", "oQg"], ["papel UjO", "29s", "fewfewf", "papel", "fewfewf", "oQg"], ["7xP"], ["QtT"], ["", "QtT"], ["mZ7"], ["h6Y", "mZ7"], ["S77", "h6Y", "mZ7"], ["h6Y", "fewfewf", "mZ7"], ["fewfewf", "mZ7"], ["fewfewf", "fewfewf", "mZ7"], ["fewfewf", "fewfewf", "fewfewf", "mZ7"], ["t72"], ["hv6"], ["DYh"], ["-5B"], ["UOt"], ["papel", "UOt"], ["Mno"], ["fewfewf", "Mno"], ["fewfewf", "C5E", "Mno"], ["ESp"], ["ZKm"], ["nxi"], ["p52", "nxi"], ["fewfewf"], ["F9u"], ["papel", "F9u"], ["5dH"], ["fVk"], ["VbG"], ["V5X"], ["0Ap"], ["9R1", "0Ap"], ["5nT", "9R1", "0Ap"], ["fewfewf", "5nT", "9R1", "0Ap"], ["fewfewf", "5nT", "9R1"], ["fewfewf", "5nT", "EV0", "9R1"], ["fewfewf", "5nT", "EV0", "EV0", "9R1"], ["fewfewf", "5nT", "EV0", "EV0", "Dwe", "9R1"], ["fewfewf", "Dwe", "5nT", "EV0", "EV0", "Dwe", "9R1"], ["fewfewf", "Dwe", "5nT", "EV0", "3mE", "EV0", "Dwe", "9R1"], ["4v7"], ["6Sj", "4v7"], ["l14", "6Sj", "4v7"], ["6Sj", "l14", "6Sj", "4v7"], ["Oo5", "6Sj", "l14", "6Sj", "4v7"], ["", "Oo5", "6Sj", "l14", "6Sj", "4v7"], ["UEQ"], ["Ozr"], ["Ozr ARo"], [""], ["-LH"], ["-LH", "-LH"], ["-LH", "-LH", "-LH"], ["fewfewf", "-LH", "-LH", "-LH"], ["4s5"], ["fewfewf", "4s5"], ["7Vx"], ["UF8"], ["UF8 UT4"], ["", ""], ["", "fewfewf", ""], ["xss"], ["I5n"], ["x6a"], ["fewfewf", "x6a"], ["fewfewf", "867", "x6a"], ["V24", "fewfewf", "867", "x6a"], ["V24", "fewfewf", "867", "k3U", "x6a"], ["V24", "867", "k3U", "x6a"], ["V24", "867", "k3U", "Sm9", "x6a"], ["V24", "867", "k3U", "Sm9", "2wR", "x6a"], ["zub"], ["eyL", "zub"], ["fewfewf", "zub"], ["IfJ"], ["fewfewf", "IfJ"], ["IfJ 7l9"], ["IfJ "], ["fewfewf "], ["fewfewf fewfewf "], ["fewfewf jhP "], ["fewfewf", "jhP", ""], ["fewfewf", "jhP", "", ""], ["fewfewf"], ["fewfewf h6X"], ["fewfewf", "h6X"], ["fewfewf", "fewfewf", "h6X"], ["fewfewf", "fewfewf"], ["2CX"], ["fewfewf", "2CX"], ["wLi"], ["pq1", "wLi"], ["85T", "pq1", "wLi"], ["fewfewf", "85T", "pq1", "wLi"], ["fewfewf", "papel", "85T", "pq1", "wLi"], ["fewfewf", "papel", "85T", "85T", "pq1", "wLi"], ["fewfewf 5-M", "papel", "85T", "85T", "pq1", "wLi"], ["4tn"], ["4tn", "4tn"], ["4tn", "Myf", "4tn"], ["4tn", "Myf"], ["4tn", "Myf T9r"], ["4tn", ""], [" I4G"], ["-P6", "", ""], ["-P6", "", "2l7", ""], ["-P6", "", "papel", "2l7", ""], ["-P6", "", "papel", "2l7", "EbJ", ""], ["-P6", "", "EbJ", "papel", "2l7", "EbJ", ""], ["9X6"], ["", "9X6"], ["", "fewfewf", "9X6"], ["9tT"], ["9tT wD5"], [" wD5"], ["", "wD5"], ["", "wD5 Sy3"], ["", "wD5", "Sy3"], [" Wf2", "wD5", "Sy3"], [" Wf2", "wD5", "Sy3 yk-"], ["zkM Wf2", "wD5", "Sy3 yk-"], ["wD5 Wf2", "wD5", "Sy3 yk-"], ["88b"], ["papel", "88b"], ["papel", "88b E0-"], ["papel", "-A1 E0-"], ["papel", "-A1 fewfewf"], ["papel frB", "-A1 fewfewf"], ["DvG frB", "-A1 fewfewf"], ["jUB frB", "-A1 fewfewf"], ["", "-A1 fewfewf"], ["", "-A1 "], ["", "-A1", ""], [" HqU"], ["fewfewf HqU"], ["fewfewf", "HqU"], ["j9e"], ["j9e 49H"], ["fewfewf 49H"], ["8bz 49H"], ["8bz fewfewf"], ["papel fewfewf"], ["", " Lhy"], ["fewfewf"], ["fewfewf 3G9"], ["papel 3G9"], ["papel", "fewfewf"], ["", "papel", "fewfewf"], ["", "papel", "fewfewf", "fewfewf"], ["", "fewfewf", "fewfewf"], ["", "fewfewf", "fewfewf T51"], ["26F"], ["26F pe3"], ["26F fewfewf"], ["26F fewfewf fewfewf"], ["26F 26F fewfewf fewfewf fewfewf"], ["", "Jd0", ""], ["Jd0", ""], ["Jd0", " sg3"], ["Jd0 Ev4", " sg3"], ["Jd0 Ev4", "-10 sg3"], ["", "-10 sg3"], ["", "", "-10 sg3"], ["", "", "9ZK sg3"], ["", "", "9ZK", "sg3"], ["fewfewf"], ["fewfewf", "fewfewf", "fewfewf"], ["0Fs", "fewfewf", "fewfewf", "fewfewf"], ["btg"], ["96f"], ["Q8U"], ["QZd", "Q8U"], ["0ME"], ["p36"], ["p36 7s4"], ["p36 fewfewf"], ["i37"], ["xQu"], ["fewfewf", "xQu"], ["2-4"], ["aB5", "2-4"], ["aB5", "aB5", "2-4"], ["aB5", "fewfewf", "aB5", "2-4"], ["aB5", "fewfewf", "fewfewf", "aB5", "2-4"], ["gaC", "aB5", "fewfewf", "aB5", "2-4"], ["opF"], ["opF oVC"], ["opF fewfewf"], ["opF "], ["opF Ed1"], ["opF opF Ed1"], [" BaY"], ["fewfewf BaY"], ["fewfewf fewfewf BaY"], ["fewfewf", "fewfewf", "BaY"], ["fewfewf", "fewfewf", "BaY Kcc"], ["fewfewf", "fewfewf G-d", "BaY Kcc"], ["fewfewf", "fewfewf fewfewf", "BaY Kcc"], ["fewfewf", "fewfewf fewfewf", "BaY "], ["fewfewf 50T", "fewfewf fewfewf", "BaY "], ["fewfewf 50T", "", "BaY "], ["fewfewf", "50T", "", "BaY "], ["fewfewf", "50T", " jZ2", "BaY "], ["DN7"], ["fewfewf", "DN7"], ["82T"], ["zcb", "82T"], ["3-5", "zcb", "82T"], ["3-5", "zcb", "3-5", "82T"], ["zcb", "3-5", "82T"], ["", "zcb", "3-5", "82T"], ["", "zcb", "3-5", "fewfewf", "82T"], ["", "82T", "zcb", "3-5", "fewfewf", "82T"], ["", "82T", "zcb", "3-5", "fewfewf Ki7", "82T"], ["", "D6x", "82T", "zcb", "3-5", "fewfewf Ki7", "82T"], ["D6x", "82T", "zcb", "3-5", "fewfewf Ki7", "82T"], ["papel", "D6x", "82T", "zcb", "3-5", "fewfewf Ki7", "82T"], ["papel", "D6x", "82T", "zcb", "3-5", "fewfewf Ki7", "off", "82T"], ["papel", "P-s", "D6x", "82T", "zcb", "3-5", "fewfewf Ki7", "off", "82T"], ["62p"], ["62p Poi"], ["62p fewfewf"], ["62p IU1"], ["62p -qL"], ["7VO -qL"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552264364.7620327, "StartTime": 1552264354.0009449}]], [{"CorrectInputs": [[["5", "10", "15"], 1537355205], [["70", "10", "15"], 1537355361]], "UniqueId": "da8037fe-74b0-426e-ea96-e5ef85fc2f51_0", "CoverageInfo": [9, 8, 4, 0, 8, "2-11"], "TimeStamp": 1537355436, "BadInput": ["x"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    x=int(input(\"enter a num x=\"))\nValueError: invalid literal for int() with base 10: 'x'\n", "ip": "2402:4000:2083:5ef3:3dea:46e2:42c0:acf"}, [{"EndTime": 1552342735.2581134, "FinalMinimizedSolution": ["-1", "-1", "3"], "FinalCoverage": [9, 3, 4, 1, 54, "5-8,", "4->5"], "FinalSolution": ["-1", "-1", "3"], "StartTime": 1552342733.8211944, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["x"], ["-1"], ["-1", "-1"], ["-1", "-1", "hbR"]]}, {"EndTime": 1552342736.5038183, "FinalMinimizedSolution": ["6", "-1", "-1"], "FinalCoverage": [9, 2, 4, 2, 69, "8-10,", "4->10,", "5->8"], "FinalSolution": ["6", "-1", "-1"], "StartTime": 1552342735.2583237, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["x"], ["-1"], ["-1", "-1"], ["-1", "-1", "hbR"], ["x"], ["m9j", "-1"], ["6", "-1"]]}, {"EndTime": 1552342737.943287, "FinalMinimizedSolution": ["5", "5", "9"], "FinalCoverage": [9, 3, 4, 1, 54, "5-8,", "4->5"], "FinalSolution": ["5", "5", "9"], "StartTime": 1552342736.5040436, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["x"], ["-1"], ["-1", "-1"], ["-1", "-1", "hbR"], ["x"], ["m9j", "-1"], ["6", "-1"], ["x"], ["5"], ["5", "5"], ["5", "5", "x"]]}, {"EndTime": 1552342739.3805168, "FinalMinimizedSolution": ["4", "2", "4"], "FinalCoverage": [9, 2, 4, 2, 69, "6,", "10,", "4->10,", "5->6"], "FinalSolution": ["4", "2", "4"], "StartTime": 1552342737.9435718, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["x"], ["-1"], ["-1", "-1"], ["-1", "-1", "hbR"], ["x"], ["m9j", "-1"], ["6", "-1"], ["x"], ["5"], ["5", "5"], ["5", "5", "x"], ["x"], ["4"], ["4", "BQ1"], ["4", "2"]]}, {"EndTime": 1552342741.010424, "FinalMinimizedSolution": ["1", "1", "0"], "FinalCoverage": [9, 3, 4, 1, 54, "5-8,", "4->5"], "FinalSolution": ["1", "1", "0"], "StartTime": 1552342739.380809, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["x"], ["-1"], ["-1", "-1"], ["-1", "-1", "hbR"], ["x"], ["m9j", "-1"], ["6", "-1"], ["x"], ["5"], ["5", "5"], ["5", "5", "x"], ["x"], ["4"], ["4", "BQ1"], ["4", "2"], ["x"], ["1"], ["1", "x"], ["1", "1"], ["1", "1", "x"]]}]], [{"CorrectInputs": [[["1", "end"], 1531756036], [["5", "end"], 1531756209]], "UniqueId": "6b1bd5d3-476c-43e7-c8be-6d92d8862e83_0", "CoverageInfo": [14, 3, 14, 3, 71, "5,", "13-14,", "4->5,", "10->13,", "11->10"], "TimeStamp": 1531756238, "BadInput": ["1 4 3 7 8", "end"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    b[i][j] = a[i-m+1][j]+a[i][j-len(a)+1]+a[i-1][j]+a[i][j-1]\nIndexError: list index out of range\n", "ip": "95.161.208.234"}, [{"EndTime": 1552294841.83208, "FinalMinimizedSolution": ["end"], "FinalCoverage": [14, 5, 14, 4, 61, "5,", "7-8,", "12,", "14,", "4->5,", "6->7,", "11->12,", "13->14"], "FinalSolution": ["end"], "StartTime": 1552294840.7736094, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1 4 3 7 8", "end"], []]}, {"EndTime": 1552294843.3260112, "FinalMinimizedSolution": ["end"], "FinalCoverage": [14, 5, 14, 4, 61, "5,", "7-8,", "12,", "14,", "4->5,", "6->7,", "11->12,", "13->14"], "FinalSolution": ["end", "end"], "StartTime": 1552294841.832255, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1 4 3 7 8", "end"], [], ["1 4 3 7 8", "end"], ["1 4 3 7 8"], ["1 4 3 7 8", "1 4 3 7 8"], ["1 4 3 7 8", "1 4 3 7 8", "end"]]}, {"EndTime": 1552294845.253328, "FinalMinimizedSolution": ["1", "end"], "FinalCoverage": [14, 0, 14, 1, 96, "4->6"], "FinalSolution": ["1", "end", "4", "999", "10", "7", "8", "end"], "StartTime": 1552294843.3262165, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["1 4 3 7 8", "end"], [], ["1 4 3 7 8", "end"], ["1 4 3 7 8"], ["1 4 3 7 8", "1 4 3 7 8"], ["1 4 3 7 8", "1 4 3 7 8", "end"], ["1 4 3 7 8", "end"], ["1 4 999 7 8", "end"], ["1", "4", "999", "7", "8", "end"], ["1", "4", "999", "G07", "7", "8", "end"], ["1", "4", "999", "10", "7", "8", "end"]]}, {"InputHistory": [["1 4 3 7 8", "end"], [], ["1 4 3 7 8", "end"], ["1 4 3 7 8"], ["1 4 3 7 8", "1 4 3 7 8"], ["1 4 3 7 8", "1 4 3 7 8", "end"], ["1 4 3 7 8", "end"], ["1 4 999 7 8", "end"], ["1", "4", "999", "7", "8", "end"], ["1", "4", "999", "G07", "7", "8", "end"], ["1", "4", "999", "10", "7", "8", "end"], ["1 4 3 7 8", "end"], ["1 end 3 7 8", "end"], ["1 end 3 7 8", "5"], ["1 7 3 7 8", "5"], ["1 7 3 7 8", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "DAH"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5", "5", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5", "5", "5", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5", "5", "5", "5", "5", "5", "end"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1", "4", "3", "7", "8", "5", "1", "5", "5", "5", "5", "5", "5", "5", "5", "5", "end"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1", "4", "3", "7", "8", "5", "1", "5", "TH1", "5", "5", "5", "5", "5", "5", "5", "5", "end"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1", "4", "3", "7", "8", "5", "1", "5", "9", "5", "5", "5", "5", "5", "5", "5", "5", "end"], ["4No"], ["4"], ["4", "4"], ["4", "4", "1 4 3 7 8"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8", "end"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8", "end QnV"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8", "7 QnV"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8", "7 8"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8", "7 8", "1 4 3 7 8"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8", "7 8", "1 4 3 7 8", "end"], ["4", "4", "1", "4", "3", "7", "8", "1 4 3 7 8", "4", "1 4 3 7 8", "7 8", "1 4 3 7 8", "end"], ["4", "4", "1", "4", "3", "7", "8", "1 4 3 56234523485723854755454545478690 78690 8", "4", "1 4 3 7 8", "7 8", "1 4 3 7 8", "end"], ["4", "4", "1", "4", "3", "7", "8", "1 4 3 56234523485723854755454545478690 78690 8", "4", "1 4 3 7 8", "7", "8", "1 4 3 7 8", "end"], ["4", "4", "1", "4", "3", "7", "8", "1 4 3 56234523485723854755454545478690 78690 8", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4", "1", "4", "3", "7", "8", "1 4 3 56234523485723854755454545478690 78690 8", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4", "1", "4", "3", "7", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4", "1", "3", "7", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4", "1", "3", "7", "8", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4 RF0", "1", "3", "7", "8", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4 10", "1", "3", "7", "8", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4 10", "1", "3", "7", "8", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1 2 3 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4 10", "1", "3", "7", "8", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 10", "1", "3", "7", "8", "4 10", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 10", "1", "3", "7", "8", "4 10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "3", "7", "8", "4 10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "3", "8", "7", "8", "4 10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "-1", "3", "8", "7", "8", "4 10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "-1", "3", "8", "7", "8", "4 10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "nwX", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "-1", "3", "8", "7", "8", "4 10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "nwX", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "-1", "3", "8", "7", "8", "4", "10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "nwX", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "-1", "3", "8", "7", "8", "4", "10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "nwX", "ts3", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "-1", "3", "8", "7", "8", "4", "10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "nwX", "ts3", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "-1", "3", "8", "7", "8", "4", "10", "end", "8", "1 4 3 56234523485723854755454545478690 end 8", "end", "4", "1", "2", "3", "nwX", "ts3", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "-1", "3", "8", "8", "4", "10", "end", "8", "1 4 3 56234523485723854755454545478690 end 8", "end", "4", "1", "2", "3", "nwX", "ts3", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552294855.9422293, "StartTime": 1552294845.2536058}, {"InputHistory": [["1 4 3 7 8", "end"], [], ["1 4 3 7 8", "end"], ["1 4 3 7 8"], ["1 4 3 7 8", "1 4 3 7 8"], ["1 4 3 7 8", "1 4 3 7 8", "end"], ["1 4 3 7 8", "end"], ["1 4 999 7 8", "end"], ["1", "4", "999", "7", "8", "end"], ["1", "4", "999", "G07", "7", "8", "end"], ["1", "4", "999", "10", "7", "8", "end"], ["1 4 3 7 8", "end"], ["1 end 3 7 8", "end"], ["1 end 3 7 8", "5"], ["1 7 3 7 8", "5"], ["1 7 3 7 8", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "DAH"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5", "5", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5", "5", "5", "5", "5", "5"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1 4 3 7 8", "5", "1", "5", "5", "5", "5", "5", "5", "5", "5", "5", "end"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1", "4", "3", "7", "8", "5", "1", "5", "5", "5", "5", "5", "5", "5", "5", "5", "end"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1", "4", "3", "7", "8", "5", "1", "5", "TH1", "5", "5", "5", "5", "5", "5", "5", "5", "end"], ["1 7 3 7 8", "5", "5", "1 7 3 7 8", "1", "4", "3", "7", "8", "5", "1", "5", "9", "5", "5", "5", "5", "5", "5", "5", "5", "end"], ["4No"], ["4"], ["4", "4"], ["4", "4", "1 4 3 7 8"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8", "end"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8", "end QnV"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8", "7 QnV"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8", "7 8"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8", "7 8", "1 4 3 7 8"], ["4", "4", "1 4 3 7 8", "1 4 3 7 8", "4", "1 4 3 7 8", "7 8", "1 4 3 7 8", "end"], ["4", "4", "1", "4", "3", "7", "8", "1 4 3 7 8", "4", "1 4 3 7 8", "7 8", "1 4 3 7 8", "end"], ["4", "4", "1", "4", "3", "7", "8", "1 4 3 56234523485723854755454545478690 78690 8", "4", "1 4 3 7 8", "7 8", "1 4 3 7 8", "end"], ["4", "4", "1", "4", "3", "7", "8", "1 4 3 56234523485723854755454545478690 78690 8", "4", "1 4 3 7 8", "7", "8", "1 4 3 7 8", "end"], ["4", "4", "1", "4", "3", "7", "8", "1 4 3 56234523485723854755454545478690 78690 8", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4", "1", "4", "3", "7", "8", "1 4 3 56234523485723854755454545478690 78690 8", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4", "1", "4", "3", "7", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4", "1", "3", "7", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4", "1", "3", "7", "8", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4 RF0", "1", "3", "7", "8", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4 10", "1", "3", "7", "8", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4 10", "1", "3", "7", "8", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1 2 3 4 3 4 8", "7", "8", "1 4 3 7 8", "end"], ["4 10", "1", "3", "7", "8", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 10", "1", "3", "7", "8", "4 10", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 10", "1", "3", "7", "8", "4 10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "3", "7", "8", "4 10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "3", "8", "7", "8", "4 10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "-1", "3", "8", "7", "8", "4 10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "-1", "3", "8", "7", "8", "4 10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "nwX", "4", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "-1", "3", "8", "7", "8", "4 10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "nwX", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "-1", "3", "8", "7", "8", "4", "10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "nwX", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "1", "-1", "3", "8", "7", "8", "4", "10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "nwX", "ts3", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "-1", "3", "8", "7", "8", "4", "10", "end", "8", "1 4 3 56234523485723854755454545478690 78690 8", "end", "4", "1", "2", "3", "nwX", "ts3", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "-1", "3", "8", "7", "8", "4", "10", "end", "8", "1 4 3 56234523485723854755454545478690 end 8", "end", "4", "1", "2", "3", "nwX", "ts3", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["4 2", "-1", "3", "8", "8", "4", "10", "end", "8", "1 4 3 56234523485723854755454545478690 end 8", "end", "4", "1", "2", "3", "nwX", "ts3", "3", "4", "8", "7", "8", "1 4 3 7 8", "end"], ["1 4 3 7 8", "end"], ["end 4 3 7 8"], ["5 4 3 7 8"], ["5 4 3 7 8", "5 4 3 7 8"], ["5 4 3 7 8", "5 4 3 7 8", "1Qf"], ["5 4 3 7 8", "5 4 3 7 8", "9"], ["5 4 3 7 8", "5 4 3 7 8", "9", "9"], ["5 4 3 7 8", "5 4 3 7 8", "9", "9", "9"], ["5 4 3 7 8", "5 4 3 7 8", "9", "9", "9", "end"], ["5 4 3 end 8", "5 4 3 7 8", "9", "9", "9", "end"], ["5 4 3 end 8", "5 4 3 7 8", "9", "9", "9", "6"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "6"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "6", "1 4 3 7 8"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "6", "1 4 3 7 8", "5 4 3 7 8"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "6", "1 4 3 7 8", "5 4 3 7 8", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "x , y", "6", "1 4 3 7 8", "5 4 3 7 8", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 , y", "6", "1 4 3 7 8", "5 4 3 7 8", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 y", "6", "1 4 3 7 8", "5 4 3 7 8", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 4 3 7 8", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 4 3 7 8", "end wy0"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 4 3 7 8", "-1 wy0"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 4 3 7 8", "-1 10"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 4 3 7 8", "-1 10", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 end 3 7 8", "-1 10", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 end 3 7 8", "-1 10", "-1"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 5 3 7 8", "-1 10", "-1"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 5 3 7 8", "-1 10", "-1", "1 4 3 7 8"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 5 3 7 8", "-1 10", "-1", "1 4 3 7 8", "9"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 5 3 7 8", "-1 10", "-1", "1 4 3 7 8", "9", "-1 10"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 5 3 7 8", "-1 10", "-1", "1 4 3 7 8", "9", "-1 10", "-1 10"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 5 3 7 8", "-1 10", "-1", "1 4 3 7 8", "9", "-1 10", "-1 10", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 5 3 7 8", "-1 10", "-1", "1 4 3 7 8", "9", "asssdddd 10", "-1 10", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "10 1 7", "6", "1 4 3 7 8", "5 5 3 7 8", "-1 10", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5 5 3 7 8", "-1 10", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5 5 3 7 8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5 5 3 7 8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 end", "2", "end"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 end", "2", "8"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9", "1 4 3 7 8"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9", "1 4 3 7 8", "jv1"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9", "1 4 3 7 8", "4"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9", "1 4 3 7 8", "4", "-1 10"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9", "1 4 3 7 8", "4", "-1 10", "3"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9", "1 4 3 7 8", "4", "-1 10", "3", "-1 10"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9", "1 4 3 7 8", "4", "-1 10", "3", "-1 10", "3"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9", "1 4 3 7 8", "4", "-1 10", "3", "-1 10", "3", "5 10"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9", "1 4 3 7 8", "4", "-1 10", "3", "-1 10", "3", "5 10", "1 4 3 7 8"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9", "1 4 3 7 8", "4", "-1 10", "3", "-1 10", "3", "5 10", "1 4 3 7 8", "5 4 3 9 8"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9", "1 4 3 7 8", "4", "-1 10", "3", "-1 10", "3", "5 10", "1 4 3 7 8", "5 4 3 9 8", "-1 10"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9", "1 4 3 7 8", "4", "-1 10", "3", "-1 10", "3", "5 10", "1 4 3 7 8", "5 4 3 9 8", "-1 10", "5 10"], ["5 4 3 9 8", "5 4 3 7 8", "9", "9", "9", "", "6", "1 4 3 7 8", "5", "5", "3", "7", "8", "-1 10", "3", "-1", "1 4 3 7 8", "9", "5 10", "-1 10", "2", "8", "5 4 3 9 8", "3", "5", "-1", "2", "-1 10", "9", "1 4 3 7 8", "4", "-1 10", "3", "-1 10", "3", "5 10", "1 4 3 7 8", "5 4 3 9 8", "-1 10", "5 10", "5 4 3 7 8"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552294866.8739698, "StartTime": 1552294855.9430058}]], [{"CorrectInputs": [[[""], 1539535798]], "UniqueId": "8c14987e-1e21-477a-a3b7-864ef36b3679_0", "CoverageInfo": [9, 2, 6, 2, 73, "5,", "10,", "4->5,", "7->10"], "TimeStamp": 1539535865, "BadInput": ["4 -1 9 3"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 8, in <module>\n    b.append(int(a[i - 1]) + int(a[i + 1]))\nIndexError: list index out of range\n", "ip": "213.230.101.79"}, [{"EndTime": 1552420660.5840104, "FinalMinimizedSolution": [], "FinalCoverage": [9, 3, 6, 2, 67, "5,", "8-9,", "4->5,", "7->8"], "FinalSolution": [""], "StartTime": 1552420659.093197, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["4 -1 9 3"], ["4 -1 9 end"], ["4 -1 9 6"], ["4 -1 9 4 -1 9 6"], ["4 -1 9 4 -1 67t 6"], ["4 -1 9 4 -1 10 6"]]}, {"EndTime": 1552420661.216995, "FinalMinimizedSolution": [], "FinalCoverage": [9, 3, 6, 2, 67, "5,", "8-9,", "4->5,", "7->8"], "FinalSolution": [], "StartTime": 1552420660.5842218, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["4 -1 9 3"], ["4 -1 9 end"], ["4 -1 9 6"], ["4 -1 9 4 -1 9 6"], ["4 -1 9 4 -1 67t 6"], ["4 -1 9 4 -1 10 6"], ["4 -1 9 3"]]}, {"EndTime": 1552420662.0225852, "FinalMinimizedSolution": [], "FinalCoverage": [9, 3, 6, 1, 60, "7-9,", "4->7"], "FinalSolution": ["2", ""], "StartTime": 1552420661.2172232, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["4 -1 9 3"], ["4 -1 9 end"], ["4 -1 9 6"], ["4 -1 9 4 -1 9 6"], ["4 -1 9 4 -1 67t 6"], ["4 -1 9 4 -1 10 6"], ["4 -1 9 3"], ["4 -1 9 3"], ["4 tFS 9 3"], ["4 1 9 3"]]}, {"EndTime": 1552420662.5189369, "FinalMinimizedSolution": [], "FinalCoverage": [9, 3, 6, 1, 60, "7-9,", "4->7"], "FinalSolution": ["4", "-1", "9", "3"], "StartTime": 1552420662.022799, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["4 -1 9 3"], ["4 -1 9 end"], ["4 -1 9 6"], ["4 -1 9 4 -1 9 6"], ["4 -1 9 4 -1 67t 6"], ["4 -1 9 4 -1 10 6"], ["4 -1 9 3"], ["4 -1 9 3"], ["4 tFS 9 3"], ["4 1 9 3"], ["4 -1 9 3"]]}, {"EndTime": 1552420664.5573263, "FinalMinimizedSolution": [], "FinalCoverage": [9, 3, 6, 1, 60, "7-9,", "4->7"], "FinalSolution": ["4", "4", "4", "4", "-1", "9", "3", "9", "4", "4", "-1", "9", "3", "9", "3", "9", "3", "9", "4", "4", "-1", "9", "4", "-1", "9", "3", "9", "3"], "StartTime": 1552420662.519113, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["4 -1 9 3"], ["4 -1 9 end"], ["4 -1 9 6"], ["4 -1 9 4 -1 9 6"], ["4 -1 9 4 -1 67t 6"], ["4 -1 9 4 -1 10 6"], ["4 -1 9 3"], ["4 -1 9 3"], ["4 tFS 9 3"], ["4 1 9 3"], ["4 -1 9 3"], ["4 -1 9 3"], ["4 4 -1 9 3 9 3"], ["4 4 -1 9 3 9 4 4 -1 9 3 9 3"], ["4 4 4 4 -1 9 3 9 4 4 -1 9 3 9 3 9 3 9 4 4 -1 9 3 9 3"], ["4 4 4 4 -1 9 3 9 4 4 -1 9 3 9 3 9 3 9 4 4 dEW 9 3 9 3"], ["4 4 4 4 -1 9 3 9 4 4 -1 9 3 9 3 9 3 9 4 4 -1 9 4 -1 9 3 9 3"]]}]], [{"CorrectInputs": [[["Koda"], 1539713985]], "UniqueId": "d2c0d9fb-bb6f-4339-d1c7-6d01a863c445_0", "CoverageInfo": [7, 1, 4, 1, 82, "8,", "5->8"], "TimeStamp": 1539714107, "BadInput": ["Baloo"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 6, in <module>\n    print(petName, 'the', value, 'is in the dictionary.')\nNameError: name 'value' is not defined\n", "ip": "68.156.159.10"}, [{"EndTime": 1552351271.206116, "FinalMinimizedSolution": [], "FinalCoverage": [7, 1, 4, 1, 82, "6,", "5->6"], "FinalSolution": ["Baloo is a"], "StartTime": 1552351270.4791923, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["Baloo"]]}, {"EndTime": 1552351271.8831341, "FinalMinimizedSolution": [], "FinalCoverage": [7, 1, 4, 1, 82, "6,", "5->6"], "FinalSolution": [], "StartTime": 1552351271.2062843, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["Baloo"], ["Baloo"]]}, {"EndTime": 1552351272.6662397, "FinalMinimizedSolution": [], "FinalCoverage": [7, 1, 4, 1, 82, "6,", "5->6"], "FinalSolution": ["AA", "Baloo"], "StartTime": 1552351271.8832984, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["Baloo"], ["Baloo"], ["Baloo"]]}, {"EndTime": 1552351273.5549293, "FinalMinimizedSolution": [], "FinalCoverage": null, "FinalSolution": ["lion", "Baloo"], "StartTime": 1552351272.666415, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["Baloo"], ["Baloo"], ["Baloo"], ["Baloo"]]}, {"EndTime": 1552351274.285148, "FinalMinimizedSolution": [], "FinalCoverage": [7, 1, 4, 1, 82, "6,", "5->6"], "FinalSolution": ["71E"], "StartTime": 1552351273.555085, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["Baloo"], ["Baloo"], ["Baloo"], ["Baloo"], ["Baloo"]]}]], [{"CorrectInputs": [[["1", "10", "1 1 1 2 3 3 4 4 4 4"], 1539487688], [["1", "4", "2 3 2 2"], 1539488012]], "UniqueId": "7f07c799-2636-4505-b0ae-366b1b5bc241_0", "CoverageInfo": [33, 29, 20, 1, 9, "5-34,", "3->exit"], "TimeStamp": 1539487988, "BadInput": ["4", "2 3 2 2"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 4, in <module>\n    b = int(input())\nValueError: invalid literal for int() with base 10: '2 3 2 2'\n", "ip": "27.106.30.148"}, [{"EndTime": 1552421070.5283275, "FinalMinimizedSolution": ["4", "2", "2", "4", "2 3 2 2", "2", "2", "2", "2 3 2 2"], "FinalCoverage": [33, 1, 20, 2, 94, "25,", "22->12,", "24->25"], "FinalSolution": ["4", "2", "2", "4", "2 3 2 2", "2", "2", "2", "2 3 2 2"], "StartTime": 1552421068.7073693, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["4", "2 3 2 2"], ["4", "2"], ["4", "2", "2"], ["4", "2", "2", "4"], ["4", "2", "2", "4", "2 3 2 2"], ["4", "2", "2", "4", "2 3 2 2", "2"], ["4", "2", "2", "4", "2 3 2 2", "2", "2"], ["4", "2", "2", "4", "2 3 2 2", "2", "2", "2"]]}, {"EndTime": 1552421072.3451385, "FinalMinimizedSolution": ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4", "2 3 2 2", "1", "1"], "FinalCoverage": [33, 1, 20, 2, 94, "25,", "22->12,", "24->25"], "FinalSolution": ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4", "2 3 2 2", "1", "1"], "StartTime": 1552421070.5286407, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["4", "2 3 2 2"], ["4", "2"], ["4", "2", "2"], ["4", "2", "2", "4"], ["4", "2", "2", "4", "2 3 2 2"], ["4", "2", "2", "4", "2 3 2 2", "2"], ["4", "2", "2", "4", "2 3 2 2", "2", "2"], ["4", "2", "2", "4", "2 3 2 2", "2", "2", "2"], ["4", "2 3 2 2"], ["4", "1"], ["4", "1", "2 3 2 2"], ["4", "1", "2 3 2 2", "4"], ["4", "1", "2 3 2 2", "4", "2 3 2 2"], ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4"], ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4", "2 3 2 2"], ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4", "2 3 2 2", "1"]]}, {"EndTime": 1552421074.7076907, "FinalMinimizedSolution": ["4", "9", "2 3 2 2", "0", "9", "6", "2 3 2 2", "6", "9"], "FinalCoverage": [33, 1, 20, 2, 94, "25,", "22->12,", "24->25"], "FinalSolution": ["4", "9", "2 3 2 2", "0", "9", "6", "2 3 2 2", "6", "9"], "StartTime": 1552421072.3455408, "FoundSolution": true, "NumProbesMade": 11, "InputHistory": [["4", "2 3 2 2"], ["4", "2"], ["4", "2", "2"], ["4", "2", "2", "4"], ["4", "2", "2", "4", "2 3 2 2"], ["4", "2", "2", "4", "2 3 2 2", "2"], ["4", "2", "2", "4", "2 3 2 2", "2", "2"], ["4", "2", "2", "4", "2 3 2 2", "2", "2", "2"], ["4", "2 3 2 2"], ["4", "1"], ["4", "1", "2 3 2 2"], ["4", "1", "2 3 2 2", "4"], ["4", "1", "2 3 2 2", "4", "2 3 2 2"], ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4"], ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4", "2 3 2 2"], ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4", "2 3 2 2", "1"], ["4", "2 3 2 2"], ["4", "9"], ["4", "9", "2 3 2 2"], ["4", "9", "2 3 2 2", "pd2"], ["4", "9", "2 3 2 2", "0"], ["4", "9", "2 3 2 2", "0", "9"], ["4", "9", "2 3 2 2", "0", "9", "2 3 2 2"], ["4", "9", "2 3 2 2", "0", "9", "6"], ["4", "9", "2 3 2 2", "0", "9", "6", "2 3 2 2"], ["4", "9", "2 3 2 2", "0", "9", "6", "2 3 2 2", "2 3 2 2"], ["4", "9", "2 3 2 2", "0", "9", "6", "2 3 2 2", "6"]]}, {"EndTime": 1552421076.80747, "FinalMinimizedSolution": ["4", "5", "5", "8", "4", "4", "5", "5", "7"], "FinalCoverage": [33, 11, 20, 4, 64, "17-18,", "24-33,", "16->17,", "19->21,", "22->12,", "23->24"], "FinalSolution": ["4", "5", "5", "8", "4", "4", "5", "5", "7"], "StartTime": 1552421074.708197, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["4", "2 3 2 2"], ["4", "2"], ["4", "2", "2"], ["4", "2", "2", "4"], ["4", "2", "2", "4", "2 3 2 2"], ["4", "2", "2", "4", "2 3 2 2", "2"], ["4", "2", "2", "4", "2 3 2 2", "2", "2"], ["4", "2", "2", "4", "2 3 2 2", "2", "2", "2"], ["4", "2 3 2 2"], ["4", "1"], ["4", "1", "2 3 2 2"], ["4", "1", "2 3 2 2", "4"], ["4", "1", "2 3 2 2", "4", "2 3 2 2"], ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4"], ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4", "2 3 2 2"], ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4", "2 3 2 2", "1"], ["4", "2 3 2 2"], ["4", "9"], ["4", "9", "2 3 2 2"], ["4", "9", "2 3 2 2", "pd2"], ["4", "9", "2 3 2 2", "0"], ["4", "9", "2 3 2 2", "0", "9"], ["4", "9", "2 3 2 2", "0", "9", "2 3 2 2"], ["4", "9", "2 3 2 2", "0", "9", "6"], ["4", "9", "2 3 2 2", "0", "9", "6", "2 3 2 2"], ["4", "9", "2 3 2 2", "0", "9", "6", "2 3 2 2", "2 3 2 2"], ["4", "9", "2 3 2 2", "0", "9", "6", "2 3 2 2", "6"], ["4", "2 3 2 2"], ["4", "5"], ["4", "5", "5"], ["4", "5", "5", "27C"], ["4", "5", "5", "8"], ["4", "5", "5", "8", "4"], ["4", "5", "5", "8", "4", "4"], ["4", "5", "5", "8", "4", "4", "5"], ["4", "5", "5", "8", "4", "4", "5", "5"], ["4", "5", "5", "8", "4", "4", "5", "5", "gt3"]]}, {"EndTime": 1552421078.8676245, "FinalMinimizedSolution": ["4", "4", "2 3 2 2", "2", "4", "4", "4", "4", "4"], "FinalCoverage": [33, 1, 20, 2, 94, "25,", "22->12,", "24->25"], "FinalSolution": ["4", "4", "2 3 2 2", "2", "4", "4", "4", "4", "4"], "StartTime": 1552421076.8081062, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["4", "2 3 2 2"], ["4", "2"], ["4", "2", "2"], ["4", "2", "2", "4"], ["4", "2", "2", "4", "2 3 2 2"], ["4", "2", "2", "4", "2 3 2 2", "2"], ["4", "2", "2", "4", "2 3 2 2", "2", "2"], ["4", "2", "2", "4", "2 3 2 2", "2", "2", "2"], ["4", "2 3 2 2"], ["4", "1"], ["4", "1", "2 3 2 2"], ["4", "1", "2 3 2 2", "4"], ["4", "1", "2 3 2 2", "4", "2 3 2 2"], ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4"], ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4", "2 3 2 2"], ["4", "1", "2 3 2 2", "4", "2 3 2 2", "4", "2 3 2 2", "1"], ["4", "2 3 2 2"], ["4", "9"], ["4", "9", "2 3 2 2"], ["4", "9", "2 3 2 2", "pd2"], ["4", "9", "2 3 2 2", "0"], ["4", "9", "2 3 2 2", "0", "9"], ["4", "9", "2 3 2 2", "0", "9", "2 3 2 2"], ["4", "9", "2 3 2 2", "0", "9", "6"], ["4", "9", "2 3 2 2", "0", "9", "6", "2 3 2 2"], ["4", "9", "2 3 2 2", "0", "9", "6", "2 3 2 2", "2 3 2 2"], ["4", "9", "2 3 2 2", "0", "9", "6", "2 3 2 2", "6"], ["4", "2 3 2 2"], ["4", "5"], ["4", "5", "5"], ["4", "5", "5", "27C"], ["4", "5", "5", "8"], ["4", "5", "5", "8", "4"], ["4", "5", "5", "8", "4", "4"], ["4", "5", "5", "8", "4", "4", "5"], ["4", "5", "5", "8", "4", "4", "5", "5"], ["4", "5", "5", "8", "4", "4", "5", "5", "gt3"], ["4", "2 3 2 2"], ["4", "4"], ["4", "4", "2 3 2 2"], ["4", "4", "2 3 2 2", "2 3 2 2"], ["4", "4", "2 3 2 2", "2"], ["4", "4", "2 3 2 2", "2", "4"], ["4", "4", "2 3 2 2", "2", "4", "4"], ["4", "4", "2 3 2 2", "2", "4", "4", "4"], ["4", "4", "2 3 2 2", "2", "4", "4", "4", "4"]]}]], [{"CorrectInputs": [[["1"], 1541479550], [["5"], 1541479576], [["2"], 1541479775]], "UniqueId": "9a819a98-4a58-4dee-b48e-a47c450fc37d_0", "CoverageInfo": [6, 5, 4, 0, 10, "2-7"], "TimeStamp": 1541479765, "BadInput": ["q"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    spam = int(input('number?'))\nValueError: invalid literal for int() with base 10: 'q'\n", "ip": "204.16.188.4"}, [{"EndTime": 1552356995.9830709, "FinalMinimizedSolution": ["10"], "FinalCoverage": [6, 2, 4, 2, 60, "3,", "5,", "2->3,", "4->5"], "FinalSolution": ["10"], "StartTime": 1552356995.1206872, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["q"]]}, {"EndTime": 1552356996.8483658, "FinalMinimizedSolution": ["3"], "FinalCoverage": [6, 2, 4, 2, 60, "3,", "5,", "2->3,", "4->5"], "FinalSolution": ["3"], "StartTime": 1552356995.9832313, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["q"], ["q"]]}, {"EndTime": 1552356997.7129545, "FinalMinimizedSolution": ["2"], "FinalCoverage": [6, 2, 4, 2, 60, "3,", "7,", "2->3,", "4->7"], "FinalSolution": ["2"], "StartTime": 1552356996.8485353, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["q"], ["q"], ["q"]]}, {"EndTime": 1552356998.5780323, "FinalMinimizedSolution": ["6"], "FinalCoverage": [6, 2, 4, 2, 60, "3,", "5,", "2->3,", "4->5"], "FinalSolution": ["6"], "StartTime": 1552356997.7131646, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["q"], ["q"], ["q"], ["q"]]}, {"EndTime": 1552356999.6849325, "FinalMinimizedSolution": ["10"], "FinalCoverage": [6, 2, 4, 2, 60, "3,", "5,", "2->3,", "4->5"], "FinalSolution": ["10", "2"], "StartTime": 1552356998.5782201, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["q"], ["q"], ["q"], ["q"], ["q"], ["t7u", "2"]]}]], [{"CorrectInputs": [[["4", "15", "12", "0", "17"], 1524078590], [["1", "4"], 1524078828]], "UniqueId": "a25c3b7c-8eb6-4f17-ad55-9fea4ae2c876_0", "CoverageInfo": [10, 9, 6, 0, 6, "2-11"], "TimeStamp": 1524078794, "BadInput": ["4 6 3 3"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    z=int(input())\nValueError: invalid literal for int() with base 10: '4 6 3 3'\n", "ip": "94.29.124.101"}, [{"EndTime": 1552354901.4753206, "FinalMinimizedSolution": ["1", "1"], "FinalCoverage": [10, 2, 6, 2, 75, "8-9,", "5->7,", "7->8"], "FinalSolution": ["1", "1"], "StartTime": 1552354900.425874, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["4 6 3 3"], ["1"]]}, {"EndTime": 1552354903.2846901, "FinalMinimizedSolution": ["3", "3", "3", "2"], "FinalCoverage": [10, 2, 6, 1, 81, "8-9,", "7->8"], "FinalSolution": ["3", "3", "3", "2"], "StartTime": 1552354901.4754994, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["4 6 3 3"], ["1"], ["4 6 3 3"], ["3"], ["3", "vvv"], ["3", "3"], ["3", "3", "3"], ["3", "3", "3", "4jE"]]}, {"EndTime": 1552354904.1504261, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [10, 7, 6, 1, 25, "4-11,", "3->4"], "FinalSolution": ["-1"], "StartTime": 1552354903.284928, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["4 6 3 3"], ["1"], ["4 6 3 3"], ["3"], ["3", "vvv"], ["3", "3"], ["3", "3", "3"], ["3", "3", "3", "4jE"], ["4 6 3 3"]]}, {"EndTime": 1552354905.2057276, "FinalMinimizedSolution": ["0"], "FinalCoverage": [10, 7, 6, 1, 25, "4-11,", "3->4"], "FinalSolution": ["0"], "StartTime": 1552354904.15066, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["4 6 3 3"], ["1"], ["4 6 3 3"], ["3"], ["3", "vvv"], ["3", "3"], ["3", "3", "3"], ["3", "3", "3", "4jE"], ["4 6 3 3"], ["4 6 3 3"], []]}, {"EndTime": 1552354908.1521091, "FinalMinimizedSolution": ["7", "5", "9", "5", "8", "7", "8", "-1"], "FinalCoverage": [10, 2, 6, 1, 81, "8-9,", "7->8"], "FinalSolution": ["7", "5", "9", "5", "8", "7", "8", "-1"], "StartTime": 1552354905.2059746, "FoundSolution": true, "NumProbesMade": 12, "InputHistory": [["4 6 3 3"], ["1"], ["4 6 3 3"], ["3"], ["3", "vvv"], ["3", "3"], ["3", "3", "3"], ["3", "3", "3", "4jE"], ["4 6 3 3"], ["4 6 3 3"], [], ["4 6 3 3"], ["7"], ["7", "R-T"], ["7", "5"], ["7", "5", "4 6 3 3"], ["7", "5", "9"], ["7", "5", "9", "5"], ["7", "5", "9", "5", "4 6 3 3"], ["7", "5", "9", "5", "8"], ["7", "5", "9", "5", "8", "7"], ["7", "5", "9", "5", "8", "7", "8"], ["7", "5", "9", "5", "8", "7", "8", "4 6 3 3"]]}]], [{"CorrectInputs": [[["000000000"], 1544468648]], "UniqueId": "546b597d-fba0-44c8-ce6c-9ad011715213_0", "CoverageInfo": [20, 19, 14, 1, 6, "5-31,", "2->5"], "TimeStamp": 1544468759, "BadInput": ["0 1 0 0 1 0 10 01"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 2, in <module>\n    S=[int(i) for i in input().split(',')]\n  File \"temp2018.py\", line 2, in <listcomp>\n    S=[int(i) for i in input().split(',')]\nValueError: invalid literal for int() with base 10: '0 1 0 0 1 0 10 01'\n", "ip": "87.229.242.210"}, [{"EndTime": 1552285418.1688325, "FinalMinimizedSolution": ["6"], "FinalCoverage": [20, 13, 14, 3, 35, "9-11,", "18-31,", "8->9,", "12->17,", "17->18"], "FinalSolution": ["6"], "StartTime": 1552285417.3067749, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["0 1 0 0 1 0 10 01"]]}, {"EndTime": 1552285419.03395, "FinalMinimizedSolution": ["8"], "FinalCoverage": [20, 13, 14, 3, 35, "9-11,", "18-31,", "8->9,", "12->17,", "17->18"], "FinalSolution": ["8"], "StartTime": 1552285418.1689956, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["0 1 0 0 1 0 10 01"], ["0 1 0 0 1 0 10 01"]]}, {"EndTime": 1552285419.8984945, "FinalMinimizedSolution": ["7"], "FinalCoverage": [20, 13, 14, 3, 35, "9-11,", "18-31,", "8->9,", "12->17,", "17->18"], "FinalSolution": ["7"], "StartTime": 1552285419.0341308, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["0 1 0 0 1 0 10 01"], ["0 1 0 0 1 0 10 01"], ["0 1 0 0 1 0 10 01"]]}, {"EndTime": 1552285420.7638855, "FinalMinimizedSolution": ["2"], "FinalCoverage": [20, 13, 14, 3, 35, "9-11,", "18-31,", "8->9,", "12->17,", "17->18"], "FinalSolution": ["2"], "StartTime": 1552285419.8986852, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["0 1 0 0 1 0 10 01"], ["0 1 0 0 1 0 10 01"], ["0 1 0 0 1 0 10 01"], ["0 1 0 0 1 0 10 01"]]}, {"EndTime": 1552285421.62876, "FinalMinimizedSolution": ["1"], "FinalCoverage": [20, 13, 14, 3, 35, "9-11,", "18-31,", "8->9,", "12->17,", "17->18"], "FinalSolution": ["1"], "StartTime": 1552285420.7640831, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["0 1 0 0 1 0 10 01"], ["0 1 0 0 1 0 10 01"], ["0 1 0 0 1 0 10 01"], ["0 1 0 0 1 0 10 01"], ["0 1 0 0 1 0 10 01"]]}]], [{"CorrectInputs": [[["2"], 1534114307]], "UniqueId": "fc6de508-5cfd-41dd-b1b8-be3a3609d298_0", "CoverageInfo": [5, 0, 0, 0, 100], "TimeStamp": 1534114392, "BadInput": ["0"], "ErrorType": "ZeroDivisionError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 6, in <module>\n    print ( div42by (Value) )\n  File \"temp2018.py\", line 2, in div42by\n    return (42 / int(divideBy))\nZeroDivisionError: division by zero\n", "ip": "2001:8f8:1623:37fe:25f4:17db:d895:95e5"}, [{"EndTime": 1552272718.7064223, "FinalMinimizedSolution": ["1"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["1"], "StartTime": 1552272717.4691405, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["0"], ["0", "0"], ["0 QH-"]]}, {"EndTime": 1552272719.8079116, "FinalMinimizedSolution": ["10"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["10", "0"], "StartTime": 1552272718.7066138, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0"], ["0", "0"], ["0 QH-"], ["0"], ["qUD", "0"]]}, {"EndTime": 1552272720.8575397, "FinalMinimizedSolution": ["10"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["10"], "StartTime": 1552272719.8081245, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0"], ["0", "0"], ["0 QH-"], ["0"], ["qUD", "0"], ["0"], []]}, {"EndTime": 1552272722.071276, "FinalMinimizedSolution": ["5"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["5"], "StartTime": 1552272720.857749, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["0"], ["0", "0"], ["0 QH-"], ["0"], ["qUD", "0"], ["0"], [], ["0"], ["AKu"], ["-2V"]]}, {"EndTime": 1552272723.3608563, "FinalMinimizedSolution": ["6"], "FinalCoverage": [5, 0, 0, 0, 100], "FinalSolution": ["6", "0"], "StartTime": 1552272722.071523, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["0"], ["0", "0"], ["0 QH-"], ["0"], ["qUD", "0"], ["0"], [], ["0"], ["AKu"], ["-2V"], ["0"], ["INf"], ["CG5", "0"]]}]], [{"CorrectInputs": [[["TL"], 1527295105]], "UniqueId": "97ca87b4-b343-4c05-bb41-be214125d16e_0", "CoverageInfo": [21, 9, 6, 5, 48, "5-14,", "19-20,", "26,", "31-35,", "18->19,", "18->20,", "25->26,", "30->31,", "30->32"], "TimeStamp": 1527295202, "BadInput": ["m"], "ErrorType": "KeyError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 37, in <module>\n    user_move()\n  File \"temp2018.py\", line 30, in user_move\n    if occpd(user_input):\n  File \"temp2018.py\", line 18, in occpd\n    if current_positions[user_input] == \"X\" or current_positions[user_input] == \"O\":\nKeyError: 'M'\n", "ip": "156.219.111.211"}, [{"EndTime": 1552412453.0558743, "FinalMinimizedSolution": ["CC"], "FinalCoverage": [21, 3, 6, 3, 78, "19,", "28,", "31,", "18->19,", "25->28,", "30->31"], "FinalSolution": ["CC", "m"], "StartTime": 1552412452.1235354, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["m"]]}, {"EndTime": 1552412459.670384, "FinalMinimizedSolution": ["TC"], "FinalCoverage": [21, 3, 6, 3, 78, "19,", "28,", "31,", "18->19,", "25->28,", "30->31"], "FinalSolution": ["TC"], "StartTime": 1552412453.0560536, "FoundSolution": true, "NumProbesMade": 31, "InputHistory": [["m"], ["m"], ["222 1", "m"], ["  1", "m"], ["", "m"], [""], [], ["J-9"], [" "], [" TC"], ["O TC"], ["oh-"], ["X"], [" ", "X"], [" ", "1 1 1 1", "X"], ["", "1 1 1 1", "X"], ["5 6", "", "1 1 1 1", "X"], ["5 6", "5,3", "", "1 1 1 1", "X"], ["5 6", "5,3", "", "1 1 1 1", " ", "X"], ["5 6", "5,3", "yes", "", "1 1 1 1", " ", "X"], ["5 6", "5,3", "yes", "", "", " ", "X"], ["5 6", "5,3", "yes", "", "", " ", "GtP", "X"], ["5 6", " ", "5,3", "yes", "", "", " ", "GtP", "X"], ["\"\"\n        {TL}   |   {TC}   |   {TR}\n        ----+-------+----\n        {CL}   |   {CC}   |   {CR}\n        ----+-------+----\n        {BL}   |   {BC}   |   {BR}\n        \n    \"\""], ["\"\"\n        {TL}   |   {TC}   7   {TR}\n        ----+-------+----\n        {CL}   |   {CC}   |   {CR}\n        ----+-------+----\n        {BL}   |   {BC}   |   {BR}\n        \n    \"\""], ["\"\"\n", "", "", "", "", "", "", "", "{TL}", "", "", "|", "", "", "{TC}", "", "", "7", "", "", "{TR}\n", "", "", "", "", "", "", "", "----+-------+----\n", "", "", "", "", "", "", "", "{CL}", "", "", "|", "", "", "{CC}", "", "", "|", "", "", "{CR}\n", "", "", "", "", "", "", "", "----+-------+----\n", "", "", "", "", "", "", "", "{BL}", "", "", "|", "", "", "{BC}", "", "", "|", "", "", "{BR}\n", "", "", "", "", "", "", "", "\n", "", "", "", "\"\""], ["vUa"], ["37 "], ["37  "], ["37", "", ""], [" ", "37", "", ""], [" ", "37", "", "  "]]}, {"EndTime": 1552412461.903569, "FinalMinimizedSolution": ["BL"], "FinalCoverage": [21, 3, 6, 3, 78, "19,", "28,", "31,", "18->19,", "25->28,", "30->31"], "FinalSolution": ["BL"], "StartTime": 1552412459.6710415, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["m"], ["m"], ["222 1", "m"], ["  1", "m"], ["", "m"], [""], [], ["J-9"], [" "], [" TC"], ["O TC"], ["oh-"], ["X"], [" ", "X"], [" ", "1 1 1 1", "X"], ["", "1 1 1 1", "X"], ["5 6", "", "1 1 1 1", "X"], ["5 6", "5,3", "", "1 1 1 1", "X"], ["5 6", "5,3", "", "1 1 1 1", " ", "X"], ["5 6", "5,3", "yes", "", "1 1 1 1", " ", "X"], ["5 6", "5,3", "yes", "", "", " ", "X"], ["5 6", "5,3", "yes", "", "", " ", "GtP", "X"], ["5 6", " ", "5,3", "yes", "", "", " ", "GtP", "X"], ["\"\"\n        {TL}   |   {TC}   |   {TR}\n        ----+-------+----\n        {CL}   |   {CC}   |   {CR}\n        ----+-------+----\n        {BL}   |   {BC}   |   {BR}\n        \n    \"\""], ["\"\"\n        {TL}   |   {TC}   7   {TR}\n        ----+-------+----\n        {CL}   |   {CC}   |   {CR}\n        ----+-------+----\n        {BL}   |   {BC}   |   {BR}\n        \n    \"\""], ["\"\"\n", "", "", "", "", "", "", "", "{TL}", "", "", "|", "", "", "{TC}", "", "", "7", "", "", "{TR}\n", "", "", "", "", "", "", "", "----+-------+----\n", "", "", "", "", "", "", "", "{CL}", "", "", "|", "", "", "{CC}", "", "", "|", "", "", "{CR}\n", "", "", "", "", "", "", "", "----+-------+----\n", "", "", "", "", "", "", "", "{BL}", "", "", "|", "", "", "{BC}", "", "", "|", "", "", "{BR}\n", "", "", "", "", "", "", "", "\n", "", "", "", "\"\""], ["vUa"], ["37 "], ["37  "], ["37", "", ""], [" ", "37", "", ""], [" ", "37", "", "  "], ["m"], ["comfama", "m"], ["comfama", "m  "], ["comfama", "m CL "], ["comfama", ""], ["b3j"], ["uuL", "b3j"], ["uuL"]]}, {"EndTime": 1552412464.5080514, "FinalMinimizedSolution": ["BR"], "FinalCoverage": [21, 3, 6, 3, 78, "19,", "28,", "31,", "18->19,", "25->28,", "30->31"], "FinalSolution": ["BR"], "StartTime": 1552412461.9042814, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["m"], ["m"], ["222 1", "m"], ["  1", "m"], ["", "m"], [""], [], ["J-9"], [" "], [" TC"], ["O TC"], ["oh-"], ["X"], [" ", "X"], [" ", "1 1 1 1", "X"], ["", "1 1 1 1", "X"], ["5 6", "", "1 1 1 1", "X"], ["5 6", "5,3", "", "1 1 1 1", "X"], ["5 6", "5,3", "", "1 1 1 1", " ", "X"], ["5 6", "5,3", "yes", "", "1 1 1 1", " ", "X"], ["5 6", "5,3", "yes", "", "", " ", "X"], ["5 6", "5,3", "yes", "", "", " ", "GtP", "X"], ["5 6", " ", "5,3", "yes", "", "", " ", "GtP", "X"], ["\"\"\n        {TL}   |   {TC}   |   {TR}\n        ----+-------+----\n        {CL}   |   {CC}   |   {CR}\n        ----+-------+----\n        {BL}   |   {BC}   |   {BR}\n        \n    \"\""], ["\"\"\n        {TL}   |   {TC}   7   {TR}\n        ----+-------+----\n        {CL}   |   {CC}   |   {CR}\n        ----+-------+----\n        {BL}   |   {BC}   |   {BR}\n        \n    \"\""], ["\"\"\n", "", "", "", "", "", "", "", "{TL}", "", "", "|", "", "", "{TC}", "", "", "7", "", "", "{TR}\n", "", "", "", "", "", "", "", "----+-------+----\n", "", "", "", "", "", "", "", "{CL}", "", "", "|", "", "", "{CC}", "", "", "|", "", "", "{CR}\n", "", "", "", "", "", "", "", "----+-------+----\n", "", "", "", "", "", "", "", "{BL}", "", "", "|", "", "", "{BC}", "", "", "|", "", "", "{BR}\n", "", "", "", "", "", "", "", "\n", "", "", "", "\"\""], ["vUa"], ["37 "], ["37  "], ["37", "", ""], [" ", "37", "", ""], [" ", "37", "", "  "], ["m"], ["comfama", "m"], ["comfama", "m  "], ["comfama", "m CL "], ["comfama", ""], ["b3j"], ["uuL", "b3j"], ["uuL"], ["m"], ["m  "], ["NY3  "], ["NY3", "", ""], ["NY3", "", " ", ""], ["NY3", "", "", ""], ["NY3", "\"\"\n        {TL}   |   {TC}   |   {TR}\n        ----+-------+----\n        {CL}   |   {CC}   |   {CR}\n        ----+-------+----\n        {BL}   |   {BC}   |   {BR}\n        \n    \"\"", "", ""], ["NY3", "", " ", "", ""], ["NY3", " BL", " ", "", ""], ["NY3", " BL", "  ", "", ""]]}, {"EndTime": 1552412466.2172108, "FinalMinimizedSolution": ["TR"], "FinalCoverage": [21, 3, 6, 3, 78, "19,", "28,", "31,", "18->19,", "25->28,", "30->31"], "FinalSolution": ["TR", "VyP"], "StartTime": 1552412464.5088787, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["m"], ["m"], ["222 1", "m"], ["  1", "m"], ["", "m"], [""], [], ["J-9"], [" "], [" TC"], ["O TC"], ["oh-"], ["X"], [" ", "X"], [" ", "1 1 1 1", "X"], ["", "1 1 1 1", "X"], ["5 6", "", "1 1 1 1", "X"], ["5 6", "5,3", "", "1 1 1 1", "X"], ["5 6", "5,3", "", "1 1 1 1", " ", "X"], ["5 6", "5,3", "yes", "", "1 1 1 1", " ", "X"], ["5 6", "5,3", "yes", "", "", " ", "X"], ["5 6", "5,3", "yes", "", "", " ", "GtP", "X"], ["5 6", " ", "5,3", "yes", "", "", " ", "GtP", "X"], ["\"\"\n        {TL}   |   {TC}   |   {TR}\n        ----+-------+----\n        {CL}   |   {CC}   |   {CR}\n        ----+-------+----\n        {BL}   |   {BC}   |   {BR}\n        \n    \"\""], ["\"\"\n        {TL}   |   {TC}   7   {TR}\n        ----+-------+----\n        {CL}   |   {CC}   |   {CR}\n        ----+-------+----\n        {BL}   |   {BC}   |   {BR}\n        \n    \"\""], ["\"\"\n", "", "", "", "", "", "", "", "{TL}", "", "", "|", "", "", "{TC}", "", "", "7", "", "", "{TR}\n", "", "", "", "", "", "", "", "----+-------+----\n", "", "", "", "", "", "", "", "{CL}", "", "", "|", "", "", "{CC}", "", "", "|", "", "", "{CR}\n", "", "", "", "", "", "", "", "----+-------+----\n", "", "", "", "", "", "", "", "{BL}", "", "", "|", "", "", "{BC}", "", "", "|", "", "", "{BR}\n", "", "", "", "", "", "", "", "\n", "", "", "", "\"\""], ["vUa"], ["37 "], ["37  "], ["37", "", ""], [" ", "37", "", ""], [" ", "37", "", "  "], ["m"], ["comfama", "m"], ["comfama", "m  "], ["comfama", "m CL "], ["comfama", ""], ["b3j"], ["uuL", "b3j"], ["uuL"], ["m"], ["m  "], ["NY3  "], ["NY3", "", ""], ["NY3", "", " ", ""], ["NY3", "", "", ""], ["NY3", "\"\"\n        {TL}   |   {TC}   |   {TR}\n        ----+-------+----\n        {CL}   |   {CC}   |   {CR}\n        ----+-------+----\n        {BL}   |   {BC}   |   {BR}\n        \n    \"\"", "", ""], ["NY3", "", " ", "", ""], ["NY3", " BL", " ", "", ""], ["NY3", " BL", "  ", "", ""], ["m"], ["PxR", "m"], ["2", "PxR", "m"], ["2", "CR", "PxR", "m"], ["VyP"]]}]], [{"CorrectInputs": [[["4 8 0 3 4 2 0 3"], 1536756724], [["10"], 1536756788]], "UniqueId": "6f165559-2e61-46c8-cd96-477c961c157c_0", "CoverageInfo": [11, 1, 10, 2, 86, "6,", "4->exit,", "5->6"], "TimeStamp": 1536756835, "BadInput": ["1 1 2 2 3 3"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 8, in <module>\n    while a[i] == a[k+1]:\nIndexError: list index out of range\n", "ip": "94.230.116.71"}, [{"EndTime": 1552417525.5846043, "FinalMinimizedSolution": [], "FinalCoverage": [11, 7, 10, 1, 33, "5-12,", "4->5"], "FinalSolution": [""], "StartTime": 1552417524.8590763, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 1 2 2 3 3"]]}, {"EndTime": 1552417527.2722409, "FinalMinimizedSolution": [], "FinalCoverage": [11, 5, 10, 2, 48, "7-12,", "4->exit,", "5->7"], "FinalSolution": ["1", "1", "2", "2", "3", "3", "", "", "2", "2", "3", "3"], "StartTime": 1552417525.584782, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["1 1 2 2 3 3"], ["1 1 2 2 3 3"], ["1   2 2 3 3"], ["1 1 2 2 3 3   2 2 3 3"]]}, {"EndTime": 1552417527.9488943, "FinalMinimizedSolution": [], "FinalCoverage": [11, 7, 10, 1, 33, "5-12,", "4->5"], "FinalSolution": [], "StartTime": 1552417527.2724674, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 1 2 2 3 3"], ["1 1 2 2 3 3"], ["1   2 2 3 3"], ["1 1 2 2 3 3   2 2 3 3"], ["1 1 2 2 3 3"]]}, {"EndTime": 1552417530.834379, "FinalMinimizedSolution": [], "FinalCoverage": [11, 5, 10, 2, 48, "7-12,", "4->exit,", "5->7"], "FinalSolution": ["1", "1", "2", "2", "3", "3", "1", "1", "2", "2", "3", "3", "1", "1", "2", "2", "3", "3", "1", "1", "2", "2", "3", "3", "2", "2", "3", "3", "2", "3", "3"], "StartTime": 1552417527.9491022, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1 1 2 2 3 3"], ["1 1 2 2 3 3"], ["1   2 2 3 3"], ["1 1 2 2 3 3   2 2 3 3"], ["1 1 2 2 3 3"], ["1 1 2 2 3 3"], ["1 1 2 2 3 3 1 2 2 3 3"], ["1 1 2 2 3 3 1 1 2 2 3 3 2 2 3 3"], ["1 1 2 2 3 3 1 1 2 2 3 3 1 1 2 2 3 3 1 1 2 2 3 3 2 2 3 3 2 3 3"]]}, {"EndTime": 1552417531.9986799, "FinalMinimizedSolution": [], "FinalCoverage": [11, 7, 10, 1, 33, "5-12,", "4->5"], "FinalSolution": [" ", ""], "StartTime": 1552417530.8346694, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["1 1 2 2 3 3"], ["1 1 2 2 3 3"], ["1   2 2 3 3"], ["1 1 2 2 3 3   2 2 3 3"], ["1 1 2 2 3 3"], ["1 1 2 2 3 3"], ["1 1 2 2 3 3 1 2 2 3 3"], ["1 1 2 2 3 3 1 1 2 2 3 3 2 2 3 3"], ["1 1 2 2 3 3 1 1 2 2 3 3 1 1 2 2 3 3 1 1 2 2 3 3 2 2 3 3 2 3 3"], ["1 1 2 2 3 3"], ["1 1 2 1 3 3"], ["1 1 2 1 3 3 1 2 1 3 3"]]}]], [{"CorrectInputs": [[["1", "4 7", "4 7"], 1536145250]], "UniqueId": "6a0d0e0d-9023-4df5-826d-706208649425_0", "CoverageInfo": [29, 20, 26, 4, 31, "13-35,", "4->exit,", "9->35,", "11->9,", "12->13"], "TimeStamp": 1536145283, "BadInput": ["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    if let == 'X' and not visited[x][y]:\nIndexError: list index out of range\n", "ip": "24.84.204.255"}, [{"EndTime": 1552351877.3887725, "FinalMinimizedSolution": ["0"], "FinalCoverage": [29, 27, 26, 1, 5, "5-35,", "4->5"], "FinalSolution": ["0", "1", "4 7", "OOOO37O", "O9O4OO-1", "5268O-1O", "O013OOO"], "StartTime": 1552351873.3429892, "FoundSolution": true, "NumProbesMade": 16, "InputHistory": [["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXX3OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OX13OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXO-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXX8O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XX68O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "X268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXO4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "O9O4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOX7O", "O9O4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOO37O", "O9O4OO-1", "5268O-1O", "O013OOO"]]}, {"EndTime": 1552351878.4525907, "FinalMinimizedSolution": ["1", "4 7", ""], "FinalCoverage": [29, 21, 26, 1, 27, "11-33,", "9->11"], "FinalSolution": ["1", "4 7", ""], "StartTime": 1552351877.3892293, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXX3OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OX13OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXO-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXX8O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XX68O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "X268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXO4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "O9O4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOX7O", "O9O4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOO37O", "O9O4OO-1", "5268O-1O", "O013OOO"], ["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO 4 XXXXOXO OXXXOOO"]]}, {"EndTime": 1552351879.7049806, "FinalMinimizedSolution": ["1", "4 1", ""], "FinalCoverage": [29, 21, 26, 1, 27, "11-33,", "9->11"], "FinalSolution": ["1", "4 1", ""], "StartTime": 1552351878.4530272, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXX3OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OX13OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXO-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXX8O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XX68O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "X268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXO4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "O9O4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOX7O", "O9O4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOO37O", "O9O4OO-1", "5268O-1O", "O013OOO"], ["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO 4 XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO 4 7 XXXXOXO OXXXOOO"], ["1", "4 1", "OOOOXXO 4 7 XXXXOXO OXXXOOO"]]}, {"EndTime": 1552351881.905905, "FinalMinimizedSolution": ["0"], "FinalCoverage": [29, 27, 26, 1, 5, "5-35,", "4->5"], "FinalSolution": ["0"], "StartTime": 1552351879.7054756, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXX3OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OX13OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXO-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXX8O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XX68O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "X268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXO4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "O9O4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOX7O", "O9O4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOO37O", "O9O4OO-1", "5268O-1O", "O013OOO"], ["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO 4 XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO 4 7 XXXXOXO OXXXOOO"], ["1", "4 1", "OOOOXXO 4 7 XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["OOOOXXO", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["OOOOXXO", "1", "4 7", "10", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["2", "1", "4 7", "10", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["2", "10", "1", "4 7", "10", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["2", "10", "1", "", "10", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["2", "10", "1", " X", "10", "OXOXOOX", "XXXXOXO", "OXXXOOO"], []]}, {"EndTime": 1552351883.1584892, "FinalMinimizedSolution": ["1", "2 7", ""], "FinalCoverage": [29, 21, 26, 1, 27, "11-33,", "9->11"], "FinalSolution": ["1", "2 7", ""], "StartTime": 1552351881.9064794, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXX3OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OX13OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXO-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXX8O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "XX68O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "X268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOOX", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXOXOO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "OXO4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOXXO", "O9O4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOOX7O", "O9O4OO-1", "5268O-1O", "O013OOO"], ["X", "1", "4 7", "OOOO37O", "O9O4OO-1", "5268O-1O", "O013OOO"], ["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO 4 XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO 4 7 XXXXOXO OXXXOOO"], ["1", "4 1", "OOOOXXO 4 7 XXXXOXO OXXXOOO"], ["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["OOOOXXO", "1", "4 7", "OOOOXXO", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["OOOOXXO", "1", "4 7", "10", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["2", "1", "4 7", "10", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["2", "10", "1", "4 7", "10", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["2", "10", "1", "", "10", "OXOXOOX", "XXXXOXO", "OXXXOOO"], ["2", "10", "1", " X", "10", "OXOXOOX", "XXXXOXO", "OXXXOOO"], [], ["1", "4 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "a 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"], ["1", "2 7", "OOOOXXO OXOXOOX XXXXOXO OXXXOOO"]]}]], [{"CorrectInputs": [[["1"], 1544077101]], "UniqueId": "d974c85e-028f-4eb6-a463-e7adfadb617e_0", "CoverageInfo": [15, 13, 8, 0, 9, "3-16"], "TimeStamp": 1544077139, "BadInput": ["f"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 2, in <module>\n    num = int(input(\"input a number 1 through 12\"))\nValueError: invalid literal for int() with base 10: 'f'\n", "ip": "69.119.82.22"}, [{"EndTime": 1552418147.4236703, "FinalMinimizedSolution": ["6"], "FinalCoverage": [15, 0, 8, 1, 96, "3->2"], "FinalSolution": ["6"], "StartTime": 1552418146.5568933, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["f"]]}, {"EndTime": 1552418148.2961164, "FinalMinimizedSolution": ["1"], "FinalCoverage": [15, 0, 8, 1, 96, "3->2"], "FinalSolution": ["1"], "StartTime": 1552418147.4238458, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["f"], ["f"]]}, {"EndTime": 1552418150.4859416, "FinalMinimizedSolution": ["-1", "-1", "-1", "-1", "0", "6"], "FinalCoverage": [15, 0, 8, 0, 100], "FinalSolution": ["-1", "-1", "-1", "-1", "0", "6"], "StartTime": 1552418148.2962985, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["f"], ["f"], ["f"], ["-1"], ["-1", "-1"], ["-1", "-1", "-1"], ["-1", "-1", "-1", "-1"], ["-1", "-1", "-1", "-1", "X6b"], ["-1", "-1", "-1", "-1", "0"], ["-1", "-1", "-1", "-1", "0", "f"]]}, {"EndTime": 1552418151.3512406, "FinalMinimizedSolution": ["2"], "FinalCoverage": [15, 0, 8, 1, 96, "3->2"], "FinalSolution": ["2"], "StartTime": 1552418150.4862437, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["f"], ["f"], ["f"], ["-1"], ["-1", "-1"], ["-1", "-1", "-1"], ["-1", "-1", "-1", "-1"], ["-1", "-1", "-1", "-1", "X6b"], ["-1", "-1", "-1", "-1", "0"], ["-1", "-1", "-1", "-1", "0", "f"], ["f"]]}, {"EndTime": 1552418152.4046955, "FinalMinimizedSolution": ["570", "1"], "FinalCoverage": [15, 0, 8, 0, 100], "FinalSolution": ["570", "1"], "StartTime": 1552418151.3515294, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["f"], ["f"], ["f"], ["-1"], ["-1", "-1"], ["-1", "-1", "-1"], ["-1", "-1", "-1", "-1"], ["-1", "-1", "-1", "-1", "X6b"], ["-1", "-1", "-1", "-1", "0"], ["-1", "-1", "-1", "-1", "0", "f"], ["f"], ["f"], []]}]], [{"CorrectInputs": [[["aaaabbcaa"], 1536693117], [["aaaaaaaabbbbcc"], 1536693153]], "UniqueId": "20bf0d69-8943-4f21-ced3-8a9ff8f9a657_0", "CoverageInfo": [95, 26, 40, 19, 67, "24,", "27-31,", "39-42,", "49-54,", "63-66,", "73-76,", "94-95,", "23->24,", "25->37,", "26->27,", "32->25,", "37->47,", "38->39,", "43->37,", "47->61,", "48->49,", "55->47,", "61->71,", "62->63,", "67->61,", "71->83,", "72->73,", "77->71,", "83->95,", "88->93,", "93->94"], "TimeStamp": 1536693212, "BadInput": ["aabbccdd"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 88, in <module>\n    if cod[i]!=cod[j]:\nIndexError: string index out of range\n", "ip": "77.241.45.1"}, [{"EndTime": 1552345131.9442215, "FinalMinimizedSolution": ["Jjx 3"], "FinalCoverage": [95, 42, 40, 13, 49, "24,", "32-36,", "39-42,", "55-60,", "63-66,", "72-82,", "84-94,", "23->24,", "25->37,", "26->32,", "37->47,", "38->39,", "43->37,", "47->61,", "48->55,", "61->71,", "62->63,", "67->61,", "71->72,", "83->84"], "FinalSolution": ["Jjx 3"], "StartTime": 1552345126.1263452, "FoundSolution": true, "NumProbesMade": 27, "InputHistory": [["aabbccdd"], ["3.44", "aabbccdd"], [], ["T9O"], ["G72"], ["G72", "G72"], ["G72", "G72", "G72"], ["G72", "G72", "G72", "G72"], ["G72", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:        print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["1", "G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["1", "G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:      Mut  print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["6jc"], ["6jc I7g"], ["6jc aabbccdd"], ["6jc aabbccdd aabbccdd"], ["6jc 6jc aabbccdd aabbccdd aabbccdd"], [""], [" ohR"], [" 0Wr"], [" eJj"], [" aabbccdd"], [" 3"]]}, {"EndTime": 1552345132.8311005, "FinalMinimizedSolution": ["aabbccdd xKQ"], "FinalCoverage": [95, 25, 40, 18, 68, "24,", "27-31,", "39-42,", "49-54,", "63-66,", "73-76,", "94,", "23->24,", "25->37,", "26->27,", "32->25,", "37->47,", "38->39,", "43->37,", "47->61,", "48->49,", "55->47,", "61->71,", "62->63,", "67->61,", "71->83,", "72->73,", "77->71,", "88->93,", "93->94"], "FinalSolution": ["aabbccdd xKQ"], "StartTime": 1552345131.9446547, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["aabbccdd"], ["3.44", "aabbccdd"], [], ["T9O"], ["G72"], ["G72", "G72"], ["G72", "G72", "G72"], ["G72", "G72", "G72", "G72"], ["G72", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:        print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["1", "G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["1", "G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:      Mut  print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["6jc"], ["6jc I7g"], ["6jc aabbccdd"], ["6jc aabbccdd aabbccdd"], ["6jc 6jc aabbccdd aabbccdd aabbccdd"], [""], [" ohR"], [" 0Wr"], [" eJj"], [" aabbccdd"], [" 3"], ["aabbccdd"]]}, {"EndTime": 1552345142.9980803, "FinalMinimizedSolution": ["Star Star aabbccdd 1 1"], "FinalCoverage": [95, 21, 40, 15, 70, "24,", "32-36,", "39-42,", "55-60,", "63-66,", "94,", "23->24,", "25->37,", "26->32,", "37->47,", "38->39,", "43->37,", "47->61,", "48->55,", "61->71,", "62->63,", "67->61,", "71->83,", "72->77,", "88->93,", "93->94"], "FinalSolution": ["Star Star aabbccdd 1 1", " QwF \u20ac", "10 5", "aabbccdd S7F"], "StartTime": 1552345132.8315353, "FoundSolution": true, "NumProbesMade": 49, "InputHistory": [["aabbccdd"], ["3.44", "aabbccdd"], [], ["T9O"], ["G72"], ["G72", "G72"], ["G72", "G72", "G72"], ["G72", "G72", "G72", "G72"], ["G72", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:        print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["1", "G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["1", "G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:      Mut  print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["6jc"], ["6jc I7g"], ["6jc aabbccdd"], ["6jc aabbccdd aabbccdd"], ["6jc 6jc aabbccdd aabbccdd aabbccdd"], [""], [" ohR"], [" 0Wr"], [" eJj"], [" aabbccdd"], [" 3"], ["aabbccdd"], ["aabbccdd"], ["dJR"], ["bw1"], ["k p y t h o", "bw1"], ["k p y t h o", "bw1 FO0"], ["k p y t h o", "bw1 VMG"], ["k p y t h o", "R8P VMG"], ["k p y t k p y t h o o", "R8P VMG"], ["", "R8P VMG"], ["aabbccdd", "", "R8P VMG"], ["aabbccdd", "", "R8P", "VMG"], ["XZU"], ["bbb", "XZU"], ["bbb", "aabbccdd", "XZU"], ["bbb", "aabbccdd"], ["bbb"], ["kyF"], ["k-9", "kyF"], ["k-9", "kyF egx"], ["J62"], ["J62 gxq"], [" WJx"], [" WJx WJx"], ["a WJx WJx"], ["H1p", ""], ["070", ""], ["070", "17", ""], ["070 I-p", "17", ""], ["8Xu"], ["-dx"], ["-dx 3u1"], ["-dx aabbccdd"], ["-dx", "aabbccdd"], ["-dx", "10", "aabbccdd"], ["-dx", "10", "aabbccdd Jnc"], ["-dx", "-dx", "10", "aabbccdd Jnc"], ["-dx 9sa", "10", "aabbccdd Jnc"], ["-dx 9sa", "10", "aabbccdd Verena"], ["-dx 9sa", "10", "aabbccdd S7F"], ["jXc 9sa", "10", "aabbccdd S7F"], ["jXc 9sa", " 5 \u20ac", "10", "aabbccdd S7F"], ["jXc 9sa", " 5 \u20ac", "10 Yv8", "aabbccdd S7F"], ["Alejandro 9sa", " 5 \u20ac", "10 Yv8", "aabbccdd S7F"], ["Alejandro 1", " 5 \u20ac", "10 Yv8", "aabbccdd S7F"], ["() 1", " 5 \u20ac", "10 Yv8", "aabbccdd S7F"], ["() 1", " 5 \u20ac", "10 5", "aabbccdd S7F"], ["() 1", " QwF \u20ac", "10 5", "aabbccdd S7F"], ["Star Trek 1", " QwF \u20ac", "10 5", "aabbccdd S7F"], ["Star Star Trek 1 1", " QwF \u20ac", "10 5", "aabbccdd S7F"]]}, {"EndTime": 1552345143.882355, "FinalMinimizedSolution": ["aabbccdd 1cF"], "FinalCoverage": [95, 25, 40, 18, 68, "24,", "27-31,", "39-42,", "49-54,", "63-66,", "73-76,", "94,", "23->24,", "25->37,", "26->27,", "32->25,", "37->47,", "38->39,", "43->37,", "47->61,", "48->49,", "55->47,", "61->71,", "62->63,", "67->61,", "71->83,", "72->73,", "77->71,", "88->93,", "93->94"], "FinalSolution": ["aabbccdd 1cF"], "StartTime": 1552345142.9989538, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["aabbccdd"], ["3.44", "aabbccdd"], [], ["T9O"], ["G72"], ["G72", "G72"], ["G72", "G72", "G72"], ["G72", "G72", "G72", "G72"], ["G72", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:        print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["1", "G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["1", "G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:      Mut  print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["6jc"], ["6jc I7g"], ["6jc aabbccdd"], ["6jc aabbccdd aabbccdd"], ["6jc 6jc aabbccdd aabbccdd aabbccdd"], [""], [" ohR"], [" 0Wr"], [" eJj"], [" aabbccdd"], [" 3"], ["aabbccdd"], ["aabbccdd"], ["dJR"], ["bw1"], ["k p y t h o", "bw1"], ["k p y t h o", "bw1 FO0"], ["k p y t h o", "bw1 VMG"], ["k p y t h o", "R8P VMG"], ["k p y t k p y t h o o", "R8P VMG"], ["", "R8P VMG"], ["aabbccdd", "", "R8P VMG"], ["aabbccdd", "", "R8P", "VMG"], ["XZU"], ["bbb", "XZU"], ["bbb", "aabbccdd", "XZU"], ["bbb", "aabbccdd"], ["bbb"], ["kyF"], ["k-9", "kyF"], ["k-9", "kyF egx"], ["J62"], ["J62 gxq"], [" WJx"], [" WJx WJx"], ["a WJx WJx"], ["H1p", ""], ["070", ""], ["070", "17", ""], ["070 I-p", "17", ""], ["8Xu"], ["-dx"], ["-dx 3u1"], ["-dx aabbccdd"], ["-dx", "aabbccdd"], ["-dx", "10", "aabbccdd"], ["-dx", "10", "aabbccdd Jnc"], ["-dx", "-dx", "10", "aabbccdd Jnc"], ["-dx 9sa", "10", "aabbccdd Jnc"], ["-dx 9sa", "10", "aabbccdd Verena"], ["-dx 9sa", "10", "aabbccdd S7F"], ["jXc 9sa", "10", "aabbccdd S7F"], ["jXc 9sa", " 5 \u20ac", "10", "aabbccdd S7F"], ["jXc 9sa", " 5 \u20ac", "10 Yv8", "aabbccdd S7F"], ["Alejandro 9sa", " 5 \u20ac", "10 Yv8", "aabbccdd S7F"], ["Alejandro 1", " 5 \u20ac", "10 Yv8", "aabbccdd S7F"], ["() 1", " 5 \u20ac", "10 Yv8", "aabbccdd S7F"], ["() 1", " 5 \u20ac", "10 5", "aabbccdd S7F"], ["() 1", " QwF \u20ac", "10 5", "aabbccdd S7F"], ["Star Trek 1", " QwF \u20ac", "10 5", "aabbccdd S7F"], ["Star Star Trek 1 1", " QwF \u20ac", "10 5", "aabbccdd S7F"], ["aabbccdd"]]}, {"EndTime": 1552345154.1561234, "FinalMinimizedSolution": ["Harry Potter"], "FinalCoverage": [95, 24, 40, 17, 68, "24,", "32-36,", "39-42,", "49-54,", "63-66,", "85-87,", "94,", "23->24,", "25->37,", "26->32,", "37->47,", "38->39,", "43->37,", "47->61,", "48->49,", "55->47,", "61->71,", "62->63,", "67->61,", "71->83,", "72->77,", "84->85,", "88->93,", "93->94"], "FinalSolution": ["Harry Potter", "k7Y", "k7Y", "O-p", "3 Ingenieria Comercial; 40; 18 Ingenieria Comercial; 20; 20 Ingenieria Comercial; 40; 22"], "StartTime": 1552345143.8832126, "FoundSolution": true, "NumProbesMade": 51, "InputHistory": [["aabbccdd"], ["3.44", "aabbccdd"], [], ["T9O"], ["G72"], ["G72", "G72"], ["G72", "G72", "G72"], ["G72", "G72", "G72", "G72"], ["G72", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:        print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 2", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 3 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["1", "G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:        print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["1", "G72", "1 4 qig 3", "a = [int(i) for i in input().split()] for i in range(len(a)-1):     if i==0:  G72      print(a[i+1]+a[len(a)-1])    elif len(a)-1>i>0:      Mut  print(a[i-1]+a[i+1])    elif i==len(a)-1:        print(a[i-1]+a[0])    ", "G72", "G72", "G72", "G72"], ["6jc"], ["6jc I7g"], ["6jc aabbccdd"], ["6jc aabbccdd aabbccdd"], ["6jc 6jc aabbccdd aabbccdd aabbccdd"], [""], [" ohR"], [" 0Wr"], [" eJj"], [" aabbccdd"], [" 3"], ["aabbccdd"], ["aabbccdd"], ["dJR"], ["bw1"], ["k p y t h o", "bw1"], ["k p y t h o", "bw1 FO0"], ["k p y t h o", "bw1 VMG"], ["k p y t h o", "R8P VMG"], ["k p y t k p y t h o o", "R8P VMG"], ["", "R8P VMG"], ["aabbccdd", "", "R8P VMG"], ["aabbccdd", "", "R8P", "VMG"], ["XZU"], ["bbb", "XZU"], ["bbb", "aabbccdd", "XZU"], ["bbb", "aabbccdd"], ["bbb"], ["kyF"], ["k-9", "kyF"], ["k-9", "kyF egx"], ["J62"], ["J62 gxq"], [" WJx"], [" WJx WJx"], ["a WJx WJx"], ["H1p", ""], ["070", ""], ["070", "17", ""], ["070 I-p", "17", ""], ["8Xu"], ["-dx"], ["-dx 3u1"], ["-dx aabbccdd"], ["-dx", "aabbccdd"], ["-dx", "10", "aabbccdd"], ["-dx", "10", "aabbccdd Jnc"], ["-dx", "-dx", "10", "aabbccdd Jnc"], ["-dx 9sa", "10", "aabbccdd Jnc"], ["-dx 9sa", "10", "aabbccdd Verena"], ["-dx 9sa", "10", "aabbccdd S7F"], ["jXc 9sa", "10", "aabbccdd S7F"], ["jXc 9sa", " 5 \u20ac", "10", "aabbccdd S7F"], ["jXc 9sa", " 5 \u20ac", "10 Yv8", "aabbccdd S7F"], ["Alejandro 9sa", " 5 \u20ac", "10 Yv8", "aabbccdd S7F"], ["Alejandro 1", " 5 \u20ac", "10 Yv8", "aabbccdd S7F"], ["() 1", " 5 \u20ac", "10 Yv8", "aabbccdd S7F"], ["() 1", " 5 \u20ac", "10 5", "aabbccdd S7F"], ["() 1", " QwF \u20ac", "10 5", "aabbccdd S7F"], ["Star Trek 1", " QwF \u20ac", "10 5", "aabbccdd S7F"], ["Star Star Trek 1 1", " QwF \u20ac", "10 5", "aabbccdd S7F"], ["aabbccdd"], ["aabbccdd"], ["24m"], ["r53", "24m"], ["r53 XlT", "24m"], ["r53 XlT"], ["aabbccdd", ""], ["aabbccdd", " 8Cl"], ["aabbccdd", "", "8Cl"], ["aabbccdd", "1,61", "", "8Cl"], ["1,61", "aabbccdd", "1,61", "", "8Cl"], ["1,61", "aabbccdd", "1,61", "add global a", "", "8Cl"], ["1,61", "aabbccdd", "1,61", "add global a", " 6NO", "8Cl"], ["1,61", "aabbccdd", "1,61", "add global a", " 1,61", "8Cl"], ["46", "1,61", "aabbccdd", "1,61", "add global a", " 1,61", "8Cl"], ["46", "1,61", "5 140 82 89 134 90 110 112 106 88 90", "aabbccdd", "1,61", "add global a", " 1,61", "8Cl"], ["46", "1,61", "5 140 82 89 134 90 110 112 106 88 90", "aabbccdd", "1,61", "add", "global", "a", " 1,61", "8Cl"], ["46", "1,61", "5 140 82 89 134 90 110 112 106 88 90", "aabbccdd", "1,61", "add", "global", "()))))){}[]", "a", " 1,61", "8Cl"], ["Haw"], ["U3N", "Haw"], ["7mT"], ["7mT hab"], ["aabbccdd", "aabbccdd", ""], ["1P3"], ["1P3 8kx"], ["1P3 27"], ["1P3 1P3 27"], ["1P3 1P3 12p"], ["1P3", "1P3", "12p"], ["1P3", "1P3", "zN6", "12p"], ["1P3", "1P3", "zN6", "1 2 2", "12p"], ["1P3", "1P3", "1P3", "zN6", "1 2 2", "12p"], ["1P3", "1P3", "d4q", "1P3", "zN6", "1 2 2", "12p"], ["w84"], ["Tuz"], ["0", "Tuz"], ["Tuz", "0", "Tuz"], ["0", "Tuz", "0", "Tuz"], ["T70", "0", "Tuz", "0", "Tuz"], ["T70", "0", "Tuz", "Tuz"], ["T70", "0", "Tuz", "10,1,2", "Tuz"], ["T70", "C2Q", "0", "Tuz", "10,1,2", "Tuz"], ["kG1"], ["azertyuiop", "kG1"], ["8Db"], ["k7Y", "8Db"], ["k7Y", "O-p", "8Db"], ["k7Y", "k7Y", "O-p", "8Db"], ["k7Y", "k7Y", "O-p", "aabbccdd", "8Db"], ["k7Y", "k7Y", "O-p", "3 Ingenieria Comercial; 40; 18 Ingenieria Comercial; 20; 20 Ingenieria Comercial; 40; 22", "aabbccdd", "8Db"], ["k7Y", "k7Y", "O-p", "3 Ingenieria Comercial; 40; 18 Ingenieria Comercial; 20; 20 Ingenieria Comercial; 40; 22", "8Db"], ["k7Y", "k7Y", "O-p", "3 Ingenieria Comercial; 40; 18 Ingenieria Comercial; 20; 20 Ingenieria Comercial; 40; 22"]]}]], [{"CorrectInputs": [[[""], 1540583256]], "UniqueId": "a380d1cc-cb51-4181-fec3-809c845e1803_0", "CoverageInfo": [14, 3, 8, 5, 64, "11-12,", "17,", "9->exit,", "10->11,", "10->12,", "15->exit,", "19->exit"], "TimeStamp": 1540583264, "BadInput": ["SORRIA E ABRACA OS TEUS PAIS "], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 20, in <module>\n    main()\n  File \"temp2018.py\", line 16, in main\n    conso=cons(a)\n  File \"temp2018.py\", line 10, in cons\n    if i[a]==i[a]-1:\nTypeError: 'int' object is not subscriptable\n", "ip": "200.137.75.2"}, [{"EndTime": 1552361468.1424599, "FinalMinimizedSolution": [], "FinalCoverage": [14, 8, 8, 2, 36, "7-12,", "16-17,", "15->16,", "19->exit"], "FinalSolution": [], "StartTime": 1552361465.7663975, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA", "E", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", "", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", " Bp8", ""]]}, {"EndTime": 1552361471.146447, "FinalMinimizedSolution": [], "FinalCoverage": [14, 8, 8, 2, 36, "7-12,", "16-17,", "15->16,", "19->exit"], "FinalSolution": [""], "StartTime": 1552361468.1428237, "FoundSolution": true, "NumProbesMade": 13, "InputHistory": [["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA", "E", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", "", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", " Bp8", ""], ["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA", "E", "", "ABRACA", "OS", "TEUS", "PAIS", ""], ["SORRIA", "E", "SORRIA", "", "ABRACA", "OS", "TEUS", "PAIS", ""], ["SORRIA", "E", "E", "SORRIA", "", "ABRACA", "OS", "TEUS", "PAIS", ""], ["SORRIA", "E", "E", "SORRIA", "", "ABRACA", "sai", "OS", "TEUS", "PAIS", ""], ["lNF"], ["__main__", "lNF"], ["__main__"], ["__main__ N7N"], ["__main__ N7N N7N"], ["__main__ FID3963 N7N"], ["__main__ FID3963 pommes"], ["__main__ FID3963 7DC"]]}, {"InputHistory": [["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA", "E", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", "", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", " Bp8", ""], ["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA", "E", "", "ABRACA", "OS", "TEUS", "PAIS", ""], ["SORRIA", "E", "SORRIA", "", "ABRACA", "OS", "TEUS", "PAIS", ""], ["SORRIA", "E", "E", "SORRIA", "", "ABRACA", "OS", "TEUS", "PAIS", ""], ["SORRIA", "E", "E", "SORRIA", "", "ABRACA", "sai", "OS", "TEUS", "PAIS", ""], ["lNF"], ["__main__", "lNF"], ["__main__"], ["__main__ N7N"], ["__main__ N7N N7N"], ["__main__ FID3963 N7N"], ["__main__ FID3963 pommes"], ["__main__ FID3963 7DC"], ["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA E ABRACA OS SORRIA E ABRACA OS TEUS PAIS  PAIS "], ["SORRIA E ABRACA OS SORRIA E bca OS TEUS PAIS  PAIS "], ["SORRIA E ABRACA OS SORRIA E bca OS TEUS __main__  PAIS "], ["SORRIA E ABRACA OS SORRIA E bca OS TEUS __main__ __main__ PAIS "], ["SORRIA E ABRACA OS SORRIA __main__ bca OS TEUS __main__ __main__ PAIS "], ["SORRIA", "E", "ABRACA", "OS", "SORRIA", "__main__", "bca", "OS", "TEUS", "__main__", "__main__", "PAIS", ""], ["SORRIA", "E", "ABRACA", "OS", "SORRIA", "__main__", "bca", "OS", "TEUS", "__main__", "__main__", "__main__", "PAIS", ""], ["NC6", "__main__"], ["NC6 XLX", "__main__"], ["__main__ __main__"], ["__main__ __main__ __main__"], ["__main__", "__main__", "__main__"], ["Cwu"], ["0", "Cwu"], ["__main__", "0", "Cwu"], ["__main__", "__main__", "0", "Cwu"], ["__main__", "__main__", "0", "8tn", "Cwu"], ["__main__ VAj", "__main__", "0", "8tn", "Cwu"], ["__main__ VAj", "__main__", "__main__", "0", "8tn", "Cwu"], ["__main__ VAj", "__main__", "SORRIA E ABRACA OS TEUS PAIS ", "__main__", "0", "8tn", "Cwu"], ["FPt"], ["FPt __main__"], ["AD", ""], ["AD", "17", ""], ["AD", "`150", "17", ""], ["AD", "`150 IEM", "17", ""], ["AD", "`150 a a", "17", ""], ["AD", "`150 __main__ a", "17", ""], ["AD", "", "17", ""], ["AsQ"], ["__main__", "__main__"], ["xV2"], ["2", "xV2"], ["xV2 s2a"], ["xV2 __main__"], ["oD5"], ["oD5 21-"], ["oD5", "21-"], ["oD5", "49G", "21-"], ["dAB"], ["SORRIA E ABRACA OS TEUS PAIS ", "__main__"], ["SORRIA E 3m4 OS TEUS PAIS ", "__main__"], ["SORRIA E 3m4 __main__ TEUS PAIS ", "__main__"], ["SORRIA", "E", "3m4", "__main__", "TEUS", "PAIS", "", "__main__"], ["SORRIA", "E", "3m4", "TEUS", "PAIS", "", "__main__"], ["SORRIA", "E", "3m4 GVM", "TEUS", "PAIS", "", "__main__"], ["SORRIA", "E", "3m4 GVM", "TEUS", "PAIS", "", "TEUS", "__main__"], ["SORRIA", "E", "__main__ GVM", "TEUS", "PAIS", "", "TEUS", "__main__"], ["SORRIA", "E", "2,3,4,5 GVM", "TEUS", "PAIS", "", "TEUS", "__main__"], ["LiY"], ["7", "__main__"], ["1 ", "__main__"], ["64L"], ["SORRIA E ABRACA OS TEUS PAIS ", "64L"], ["SORRIA", "E", "ABRACA", "OS", "TEUS", "PAIS", "", "64L"], ["8zD", "SORRIA", "E", "ABRACA", "OS", "TEUS", "PAIS", "", "64L"], ["8zD", "SORRIA", "E", "2", "ABRACA", "OS", "TEUS", "PAIS", "", "64L"], ["8zD", "SORRIA", "E", "2", "ABRACA", "gh", "OS", "TEUS", "PAIS", "", "64L"], ["8zD", "SORRIA", "E 3Wq", "2", "ABRACA", "gh", "OS", "TEUS", "PAIS", "", "64L"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552361482.127129, "StartTime": 1552361471.146957}, {"EndTime": 1552361487.1822267, "FinalMinimizedSolution": [], "FinalCoverage": [14, 8, 8, 2, 36, "7-12,", "16-17,", "15->16,", "19->exit"], "FinalSolution": ["", "-5 2 -5 2 9", "__main__", "t-U"], "StartTime": 1552361482.1281893, "FoundSolution": true, "NumProbesMade": 23, "InputHistory": [["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA", "E", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", "", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", " Bp8", ""], ["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA", "E", "", "ABRACA", "OS", "TEUS", "PAIS", ""], ["SORRIA", "E", "SORRIA", "", "ABRACA", "OS", "TEUS", "PAIS", ""], ["SORRIA", "E", "E", "SORRIA", "", "ABRACA", "OS", "TEUS", "PAIS", ""], ["SORRIA", "E", "E", "SORRIA", "", "ABRACA", "sai", "OS", "TEUS", "PAIS", ""], ["lNF"], ["__main__", "lNF"], ["__main__"], ["__main__ N7N"], ["__main__ N7N N7N"], ["__main__ FID3963 N7N"], ["__main__ FID3963 pommes"], ["__main__ FID3963 7DC"], ["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA E ABRACA OS SORRIA E ABRACA OS TEUS PAIS  PAIS "], ["SORRIA E ABRACA OS SORRIA E bca OS TEUS PAIS  PAIS "], ["SORRIA E ABRACA OS SORRIA E bca OS TEUS __main__  PAIS "], ["SORRIA E ABRACA OS SORRIA E bca OS TEUS __main__ __main__ PAIS "], ["SORRIA E ABRACA OS SORRIA __main__ bca OS TEUS __main__ __main__ PAIS "], ["SORRIA", "E", "ABRACA", "OS", "SORRIA", "__main__", "bca", "OS", "TEUS", "__main__", "__main__", "PAIS", ""], ["SORRIA", "E", "ABRACA", "OS", "SORRIA", "__main__", "bca", "OS", "TEUS", "__main__", "__main__", "__main__", "PAIS", ""], ["NC6", "__main__"], ["NC6 XLX", "__main__"], ["__main__ __main__"], ["__main__ __main__ __main__"], ["__main__", "__main__", "__main__"], ["Cwu"], ["0", "Cwu"], ["__main__", "0", "Cwu"], ["__main__", "__main__", "0", "Cwu"], ["__main__", "__main__", "0", "8tn", "Cwu"], ["__main__ VAj", "__main__", "0", "8tn", "Cwu"], ["__main__ VAj", "__main__", "__main__", "0", "8tn", "Cwu"], ["__main__ VAj", "__main__", "SORRIA E ABRACA OS TEUS PAIS ", "__main__", "0", "8tn", "Cwu"], ["FPt"], ["FPt __main__"], ["AD", ""], ["AD", "17", ""], ["AD", "`150", "17", ""], ["AD", "`150 IEM", "17", ""], ["AD", "`150 a a", "17", ""], ["AD", "`150 __main__ a", "17", ""], ["AD", "", "17", ""], ["AsQ"], ["__main__", "__main__"], ["xV2"], ["2", "xV2"], ["xV2 s2a"], ["xV2 __main__"], ["oD5"], ["oD5 21-"], ["oD5", "21-"], ["oD5", "49G", "21-"], ["dAB"], ["SORRIA E ABRACA OS TEUS PAIS ", "__main__"], ["SORRIA E 3m4 OS TEUS PAIS ", "__main__"], ["SORRIA E 3m4 __main__ TEUS PAIS ", "__main__"], ["SORRIA", "E", "3m4", "__main__", "TEUS", "PAIS", "", "__main__"], ["SORRIA", "E", "3m4", "TEUS", "PAIS", "", "__main__"], ["SORRIA", "E", "3m4 GVM", "TEUS", "PAIS", "", "__main__"], ["SORRIA", "E", "3m4 GVM", "TEUS", "PAIS", "", "TEUS", "__main__"], ["SORRIA", "E", "__main__ GVM", "TEUS", "PAIS", "", "TEUS", "__main__"], ["SORRIA", "E", "2,3,4,5 GVM", "TEUS", "PAIS", "", "TEUS", "__main__"], ["LiY"], ["7", "__main__"], ["1 ", "__main__"], ["64L"], ["SORRIA E ABRACA OS TEUS PAIS ", "64L"], ["SORRIA", "E", "ABRACA", "OS", "TEUS", "PAIS", "", "64L"], ["8zD", "SORRIA", "E", "ABRACA", "OS", "TEUS", "PAIS", "", "64L"], ["8zD", "SORRIA", "E", "2", "ABRACA", "OS", "TEUS", "PAIS", "", "64L"], ["8zD", "SORRIA", "E", "2", "ABRACA", "gh", "OS", "TEUS", "PAIS", "", "64L"], ["8zD", "SORRIA", "E 3Wq", "2", "ABRACA", "gh", "OS", "TEUS", "PAIS", "", "64L"], ["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA E ABRACA OS TEUS __main__ "], ["SQf", ""], ["1", "SQf", ""], ["w", "1", "SQf", ""], ["w", "1", "__main__", "SQf", ""], ["w", "1", "__main__", "SQf cJj", ""], ["w", "1", "SQf cJj", ""], ["w", "1", "__main__ cJj", ""], ["dKt"], ["y0-"], ["5LI"], ["5LI 2x8"], ["__main__ 2x8"], ["__main__", "2x8"], ["2mS", "__main__", "2x8"], ["2mS __main__", "__main__", "2x8"], ["2mS __main__", "__main__ __main__", "2x8"], ["t-U"], ["SORRIA E ABRACA OS TEUS PAIS ", "t-U"], ["SORRIA E ABRACA OS TEUS PAIS ", "-5 2 9", "t-U"], ["SORRIA E ABRACA OS TEUS PAIS ", "-5 2 -5 2 9", "t-U"], ["SORRIA E ABRACA OS TEUS PAIS ", "-5 2 -5 2 9", "__main__", "t-U"]]}, {"EndTime": 1552361487.9680355, "FinalMinimizedSolution": [], "FinalCoverage": [14, 8, 8, 2, 36, "7-12,", "16-17,", "15->16,", "19->exit"], "FinalSolution": ["", ""], "StartTime": 1552361487.183609, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA", "E", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS", ""], ["E", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", "PAIS WmG", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", "", ""], ["E", "__main__", "5", "ABRACA", "OS __main__", "TEUS", "arara", " Bp8", ""], ["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA", "E", "", "ABRACA", "OS", "TEUS", "PAIS", ""], ["SORRIA", "E", "SORRIA", "", "ABRACA", "OS", "TEUS", "PAIS", ""], ["SORRIA", "E", "E", "SORRIA", "", "ABRACA", "OS", "TEUS", "PAIS", ""], ["SORRIA", "E", "E", "SORRIA", "", "ABRACA", "sai", "OS", "TEUS", "PAIS", ""], ["lNF"], ["__main__", "lNF"], ["__main__"], ["__main__ N7N"], ["__main__ N7N N7N"], ["__main__ FID3963 N7N"], ["__main__ FID3963 pommes"], ["__main__ FID3963 7DC"], ["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA E ABRACA OS SORRIA E ABRACA OS TEUS PAIS  PAIS "], ["SORRIA E ABRACA OS SORRIA E bca OS TEUS PAIS  PAIS "], ["SORRIA E ABRACA OS SORRIA E bca OS TEUS __main__  PAIS "], ["SORRIA E ABRACA OS SORRIA E bca OS TEUS __main__ __main__ PAIS "], ["SORRIA E ABRACA OS SORRIA __main__ bca OS TEUS __main__ __main__ PAIS "], ["SORRIA", "E", "ABRACA", "OS", "SORRIA", "__main__", "bca", "OS", "TEUS", "__main__", "__main__", "PAIS", ""], ["SORRIA", "E", "ABRACA", "OS", "SORRIA", "__main__", "bca", "OS", "TEUS", "__main__", "__main__", "__main__", "PAIS", ""], ["NC6", "__main__"], ["NC6 XLX", "__main__"], ["__main__ __main__"], ["__main__ __main__ __main__"], ["__main__", "__main__", "__main__"], ["Cwu"], ["0", "Cwu"], ["__main__", "0", "Cwu"], ["__main__", "__main__", "0", "Cwu"], ["__main__", "__main__", "0", "8tn", "Cwu"], ["__main__ VAj", "__main__", "0", "8tn", "Cwu"], ["__main__ VAj", "__main__", "__main__", "0", "8tn", "Cwu"], ["__main__ VAj", "__main__", "SORRIA E ABRACA OS TEUS PAIS ", "__main__", "0", "8tn", "Cwu"], ["FPt"], ["FPt __main__"], ["AD", ""], ["AD", "17", ""], ["AD", "`150", "17", ""], ["AD", "`150 IEM", "17", ""], ["AD", "`150 a a", "17", ""], ["AD", "`150 __main__ a", "17", ""], ["AD", "", "17", ""], ["AsQ"], ["__main__", "__main__"], ["xV2"], ["2", "xV2"], ["xV2 s2a"], ["xV2 __main__"], ["oD5"], ["oD5 21-"], ["oD5", "21-"], ["oD5", "49G", "21-"], ["dAB"], ["SORRIA E ABRACA OS TEUS PAIS ", "__main__"], ["SORRIA E 3m4 OS TEUS PAIS ", "__main__"], ["SORRIA E 3m4 __main__ TEUS PAIS ", "__main__"], ["SORRIA", "E", "3m4", "__main__", "TEUS", "PAIS", "", "__main__"], ["SORRIA", "E", "3m4", "TEUS", "PAIS", "", "__main__"], ["SORRIA", "E", "3m4 GVM", "TEUS", "PAIS", "", "__main__"], ["SORRIA", "E", "3m4 GVM", "TEUS", "PAIS", "", "TEUS", "__main__"], ["SORRIA", "E", "__main__ GVM", "TEUS", "PAIS", "", "TEUS", "__main__"], ["SORRIA", "E", "2,3,4,5 GVM", "TEUS", "PAIS", "", "TEUS", "__main__"], ["LiY"], ["7", "__main__"], ["1 ", "__main__"], ["64L"], ["SORRIA E ABRACA OS TEUS PAIS ", "64L"], ["SORRIA", "E", "ABRACA", "OS", "TEUS", "PAIS", "", "64L"], ["8zD", "SORRIA", "E", "ABRACA", "OS", "TEUS", "PAIS", "", "64L"], ["8zD", "SORRIA", "E", "2", "ABRACA", "OS", "TEUS", "PAIS", "", "64L"], ["8zD", "SORRIA", "E", "2", "ABRACA", "gh", "OS", "TEUS", "PAIS", "", "64L"], ["8zD", "SORRIA", "E 3Wq", "2", "ABRACA", "gh", "OS", "TEUS", "PAIS", "", "64L"], ["SORRIA E ABRACA OS TEUS PAIS "], ["SORRIA E ABRACA OS TEUS __main__ "], ["SQf", ""], ["1", "SQf", ""], ["w", "1", "SQf", ""], ["w", "1", "__main__", "SQf", ""], ["w", "1", "__main__", "SQf cJj", ""], ["w", "1", "SQf cJj", ""], ["w", "1", "__main__ cJj", ""], ["dKt"], ["y0-"], ["5LI"], ["5LI 2x8"], ["__main__ 2x8"], ["__main__", "2x8"], ["2mS", "__main__", "2x8"], ["2mS __main__", "__main__", "2x8"], ["2mS __main__", "__main__ __main__", "2x8"], ["t-U"], ["SORRIA E ABRACA OS TEUS PAIS ", "t-U"], ["SORRIA E ABRACA OS TEUS PAIS ", "-5 2 9", "t-U"], ["SORRIA E ABRACA OS TEUS PAIS ", "-5 2 -5 2 9", "t-U"], ["SORRIA E ABRACA OS TEUS PAIS ", "-5 2 -5 2 9", "__main__", "t-U"], ["SORRIA E ABRACA OS TEUS PAIS "]]}]], [{"CorrectInputs": [[["2", "2", "2"], 1532173969]], "UniqueId": "499b9a34-85cc-4858-ec87-8ccfeca6d365_0", "CoverageInfo": [15, 1, 8, 3, 83, "14,", "9->14,", "10->9,", "11->10"], "TimeStamp": 1532174039, "BadInput": ["5", "5", "5", "5", "5", "5"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 16, in <module>\n    dub()\n  File \"temp2018.py\", line 11, in dub\n    if a[i] == a[j]:\nIndexError: list index out of range\n", "ip": "122.15.200.186"}, [{"EndTime": 1552291084.4081595, "FinalMinimizedSolution": ["1", "5"], "FinalCoverage": [15, 4, 8, 1, 61, "10-13,", "9->10"], "FinalSolution": ["1", "5", "5", "5", "5", "5", "5"], "StartTime": 1552291083.090905, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["5", "5", "5", "5", "5", "5"], ["d60", "5", "5", "5", "5", "5", "5"]]}, {"EndTime": 1552291089.4924293, "FinalMinimizedSolution": ["0"], "FinalCoverage": [15, 6, 8, 2, 48, "4-5,", "10-13,", "3->4,", "9->10"], "FinalSolution": ["0", "5", "5", "5", "5", "5"], "StartTime": 1552291084.408378, "FoundSolution": true, "NumProbesMade": 22, "InputHistory": [["5", "5", "5", "5", "5", "5"], ["d60", "5", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "5", "5"], [], ["6"], ["6", "5"], ["6", "5", "5"], ["6", "5", "5", "5"], ["6", "5", "5", "5", "Fir"], ["6", "5", "5", "5", "0"], ["6", "5", "5", "5", "0", "Qgi"], ["6", "5", "5", "5", "0", "4"], ["6", "5", "5", "5", "0", "4", "5"], ["6", "5", "5", "5", "4213", "0", "4", "5"], ["6", "5", "5", "5", "5", "4213", "0", "4", "5"], ["6", "5", "5", "5", "5", "4213", "0", "12 3", "4", "5"], ["PUz"], ["5"], ["5", "5"], ["5", "5", "5"], ["5", "5", "5", "-4p"], ["5", "5", "5", "5"], ["5", "5", "5", "5", "5"], ["5 1my", "5", "5", "5", "5", "5"]]}, {"EndTime": 1552291096.3497598, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [15, 6, 8, 2, 48, "4-5,", "10-13,", "3->4,", "9->10"], "FinalSolution": ["-1", "5", "5", "5", "5", "1", "5", "5", "5", "1", "5"], "StartTime": 1552291089.4929347, "FoundSolution": true, "NumProbesMade": 30, "InputHistory": [["5", "5", "5", "5", "5", "5"], ["d60", "5", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "5", "5"], [], ["6"], ["6", "5"], ["6", "5", "5"], ["6", "5", "5", "5"], ["6", "5", "5", "5", "Fir"], ["6", "5", "5", "5", "0"], ["6", "5", "5", "5", "0", "Qgi"], ["6", "5", "5", "5", "0", "4"], ["6", "5", "5", "5", "0", "4", "5"], ["6", "5", "5", "5", "4213", "0", "4", "5"], ["6", "5", "5", "5", "5", "4213", "0", "4", "5"], ["6", "5", "5", "5", "5", "4213", "0", "12 3", "4", "5"], ["PUz"], ["5"], ["5", "5"], ["5", "5", "5"], ["5", "5", "5", "-4p"], ["5", "5", "5", "5"], ["5", "5", "5", "5", "5"], ["5 1my", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "5", "3Y5", "5", "5"], ["5", "5", "5", "5", "5", "10", "5", "5"], ["5", "5", "5", "5", "de", "5", "10", "5", "5"], ["5", "5", "5", "5", "8", "5", "10", "5", "5"], ["oqK"], ["10"], ["10", "5"], ["10", "5", "5"], ["10", "5", "5", "5"], ["10", "5", "5", "5", "5"], ["10", "5", "5", "5", "5", "5"], ["10", "5", "5", "5", "5", "5", "5"], ["10", "5", "5", "5", "5", "5", "5", "5"], ["10", "5", "5", "5", "5", "5", "5", "5", "10"], ["10", "5", "5", "5", "5", "5", "5", "5", "10", "5"], ["10", "5", "5", "5", "5", "5", "5", "5", "10", "5", "5"], ["10", "5", "5", "5", "5", "5 JT9", "5", "5", "10", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "10", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "10 1x1", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "8", "5", "5"], ["10", "5", "5", "5", "5", "2", "-----", "5", "5", "8", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "5", "8", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "5", "8 K6u", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "5", "1", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "5", "1", "5"], ["10", "5", "5", "5", "5", "2 xvy", "5", "5", "5", "1", "5"], ["10", "5", "5", "5", "5", "1", "5", "5", "5", "1", "5"], ["10 DxQ", "5", "5", "5", "5", "1", "5", "5", "5", "1", "5"]]}, {"EndTime": 1552291103.9992225, "FinalMinimizedSolution": ["1", "5"], "FinalCoverage": [15, 4, 8, 1, 61, "10-13,", "9->10"], "FinalSolution": ["1", "5"], "StartTime": 1552291096.3507955, "FoundSolution": true, "NumProbesMade": 37, "InputHistory": [["5", "5", "5", "5", "5", "5"], ["d60", "5", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "5", "5"], [], ["6"], ["6", "5"], ["6", "5", "5"], ["6", "5", "5", "5"], ["6", "5", "5", "5", "Fir"], ["6", "5", "5", "5", "0"], ["6", "5", "5", "5", "0", "Qgi"], ["6", "5", "5", "5", "0", "4"], ["6", "5", "5", "5", "0", "4", "5"], ["6", "5", "5", "5", "4213", "0", "4", "5"], ["6", "5", "5", "5", "5", "4213", "0", "4", "5"], ["6", "5", "5", "5", "5", "4213", "0", "12 3", "4", "5"], ["PUz"], ["5"], ["5", "5"], ["5", "5", "5"], ["5", "5", "5", "-4p"], ["5", "5", "5", "5"], ["5", "5", "5", "5", "5"], ["5 1my", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "5", "3Y5", "5", "5"], ["5", "5", "5", "5", "5", "10", "5", "5"], ["5", "5", "5", "5", "de", "5", "10", "5", "5"], ["5", "5", "5", "5", "8", "5", "10", "5", "5"], ["oqK"], ["10"], ["10", "5"], ["10", "5", "5"], ["10", "5", "5", "5"], ["10", "5", "5", "5", "5"], ["10", "5", "5", "5", "5", "5"], ["10", "5", "5", "5", "5", "5", "5"], ["10", "5", "5", "5", "5", "5", "5", "5"], ["10", "5", "5", "5", "5", "5", "5", "5", "10"], ["10", "5", "5", "5", "5", "5", "5", "5", "10", "5"], ["10", "5", "5", "5", "5", "5", "5", "5", "10", "5", "5"], ["10", "5", "5", "5", "5", "5 JT9", "5", "5", "10", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "10", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "10 1x1", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "8", "5", "5"], ["10", "5", "5", "5", "5", "2", "-----", "5", "5", "8", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "5", "8", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "5", "8 K6u", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "5", "1", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "5", "1", "5"], ["10", "5", "5", "5", "5", "2 xvy", "5", "5", "5", "1", "5"], ["10", "5", "5", "5", "5", "1", "5", "5", "5", "1", "5"], ["10 DxQ", "5", "5", "5", "5", "1", "5", "5", "5", "1", "5"], ["5", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "rC6", "5", "5"], ["5", "5", "5", "5", "6", "5", "5"], ["5", "5", "5", "5", "senior", "6", "5", "5"], ["5", "5", "5", "5", "5", "6", "5", "5"], ["5", "5 qmn", "5", "5", "5", "6", "5", "5"], ["5", "-1", "5", "5", "5", "6", "5", "5"], ["5", "-1", "5", "5", "5", "6", "5", "5 O7e"], ["5", "-1 4X7", "5", "5", "5", "6", "5", "5 O7e"], ["5", "6", "5", "5", "5", "6", "5", "5 O7e"], ["5", "6", "5", "EXE", "5", "5", "6", "5", "5 O7e"], ["5", "6", "5", "4", "5", "5", "6", "5", "5 O7e"], ["A6W"], ["9"], ["9", "5"], ["9", "5", "9LJ"], ["9", "5", "5"], ["9", "5", "5", "5"], ["9", "5", "5", "5", "5hZ"], ["9", "5", "5", "5", "8"], ["9", "5", "5", "5", "8", "9"], ["9", "5", "5", "5", "8", "9", "9"], ["9", "5", "5", "5", "8", "9", "9", "5"], ["9", "5", "5", "5", "8", "9", "9", "5", "5"], ["9", "5", "5", "5", "8", "9", "9", "5", "5", "9"], ["5", "9", "5", "5", "5", "8", "9", "9", "5", "5", "9"], ["5", "9", "e4y", "5", "5", "5", "8", "9", "9", "5", "5", "9"], ["5", "9", "5", "5", "5", "5", "8", "9", "9", "5", "5", "9"], ["5", "9", "5", "5", "5", "5 kz1", "8", "9", "9", "5", "5", "9"], ["5", "9", "5", "5", "5", "0", "8", "9", "9", "5", "5", "9"], ["5", "9", "5", "5", "5", "5", "0", "8", "9", "9", "5", "5", "9"], ["5", "9", "5", "5", "5", "5", "0", "8", "9", "9", "5", "5"], ["5", "9", "5", "5", "5", "5", "0", "8", "Z-0", "9", "9", "5", "5"], ["5", "9", "5", "5", "5", "5", "0", "8", "Z-0", "9", "9", "5"], ["5", "9", "5", "5", "5", "5", "0", "8", "Z-0", "9", "9", "1 1 1 1 1 ", "5"], ["WVT"], ["1"]]}, {"EndTime": 1552291105.2065775, "FinalMinimizedSolution": ["1", "10"], "FinalCoverage": [15, 4, 8, 1, 61, "10-13,", "9->10"], "FinalSolution": ["1", "10", "5", "5", "5"], "StartTime": 1552291104.0008657, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["5", "5", "5", "5", "5", "5"], ["d60", "5", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "5", "5"], [], ["6"], ["6", "5"], ["6", "5", "5"], ["6", "5", "5", "5"], ["6", "5", "5", "5", "Fir"], ["6", "5", "5", "5", "0"], ["6", "5", "5", "5", "0", "Qgi"], ["6", "5", "5", "5", "0", "4"], ["6", "5", "5", "5", "0", "4", "5"], ["6", "5", "5", "5", "4213", "0", "4", "5"], ["6", "5", "5", "5", "5", "4213", "0", "4", "5"], ["6", "5", "5", "5", "5", "4213", "0", "12 3", "4", "5"], ["PUz"], ["5"], ["5", "5"], ["5", "5", "5"], ["5", "5", "5", "-4p"], ["5", "5", "5", "5"], ["5", "5", "5", "5", "5"], ["5 1my", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "5", "3Y5", "5", "5"], ["5", "5", "5", "5", "5", "10", "5", "5"], ["5", "5", "5", "5", "de", "5", "10", "5", "5"], ["5", "5", "5", "5", "8", "5", "10", "5", "5"], ["oqK"], ["10"], ["10", "5"], ["10", "5", "5"], ["10", "5", "5", "5"], ["10", "5", "5", "5", "5"], ["10", "5", "5", "5", "5", "5"], ["10", "5", "5", "5", "5", "5", "5"], ["10", "5", "5", "5", "5", "5", "5", "5"], ["10", "5", "5", "5", "5", "5", "5", "5", "10"], ["10", "5", "5", "5", "5", "5", "5", "5", "10", "5"], ["10", "5", "5", "5", "5", "5", "5", "5", "10", "5", "5"], ["10", "5", "5", "5", "5", "5 JT9", "5", "5", "10", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "10", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "10 1x1", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "8", "5", "5"], ["10", "5", "5", "5", "5", "2", "-----", "5", "5", "8", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "5", "8", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "5", "8 K6u", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "5", "1", "5", "5"], ["10", "5", "5", "5", "5", "2", "5", "5", "5", "1", "5"], ["10", "5", "5", "5", "5", "2 xvy", "5", "5", "5", "1", "5"], ["10", "5", "5", "5", "5", "1", "5", "5", "5", "1", "5"], ["10 DxQ", "5", "5", "5", "5", "1", "5", "5", "5", "1", "5"], ["5", "5", "5", "5", "5", "5"], ["5", "5", "5", "5", "rC6", "5", "5"], ["5", "5", "5", "5", "6", "5", "5"], ["5", "5", "5", "5", "senior", "6", "5", "5"], ["5", "5", "5", "5", "5", "6", "5", "5"], ["5", "5 qmn", "5", "5", "5", "6", "5", "5"], ["5", "-1", "5", "5", "5", "6", "5", "5"], ["5", "-1", "5", "5", "5", "6", "5", "5 O7e"], ["5", "-1 4X7", "5", "5", "5", "6", "5", "5 O7e"], ["5", "6", "5", "5", "5", "6", "5", "5 O7e"], ["5", "6", "5", "EXE", "5", "5", "6", "5", "5 O7e"], ["5", "6", "5", "4", "5", "5", "6", "5", "5 O7e"], ["A6W"], ["9"], ["9", "5"], ["9", "5", "9LJ"], ["9", "5", "5"], ["9", "5", "5", "5"], ["9", "5", "5", "5", "5hZ"], ["9", "5", "5", "5", "8"], ["9", "5", "5", "5", "8", "9"], ["9", "5", "5", "5", "8", "9", "9"], ["9", "5", "5", "5", "8", "9", "9", "5"], ["9", "5", "5", "5", "8", "9", "9", "5", "5"], ["9", "5", "5", "5", "8", "9", "9", "5", "5", "9"], ["5", "9", "5", "5", "5", "8", "9", "9", "5", "5", "9"], ["5", "9", "e4y", "5", "5", "5", "8", "9", "9", "5", "5", "9"], ["5", "9", "5", "5", "5", "5", "8", "9", "9", "5", "5", "9"], ["5", "9", "5", "5", "5", "5 kz1", "8", "9", "9", "5", "5", "9"], ["5", "9", "5", "5", "5", "0", "8", "9", "9", "5", "5", "9"], ["5", "9", "5", "5", "5", "5", "0", "8", "9", "9", "5", "5", "9"], ["5", "9", "5", "5", "5", "5", "0", "8", "9", "9", "5", "5"], ["5", "9", "5", "5", "5", "5", "0", "8", "Z-0", "9", "9", "5", "5"], ["5", "9", "5", "5", "5", "5", "0", "8", "Z-0", "9", "9", "5"], ["5", "9", "5", "5", "5", "5", "0", "8", "Z-0", "9", "9", "1 1 1 1 1 ", "5"], ["WVT"], ["1"], ["5", "5", "5", "5", "5", "5"], ["5 cSa", "5", "5", "5", "5"]]}]], [{"CorrectInputs": [[["5"], 1539065467]], "UniqueId": "54540ff0-40d9-486d-e742-09f520bc0060_0", "CoverageInfo": [7, 2, 4, 2, 64, "5,", "7,", "2->5,", "6->7"], "TimeStamp": 1539065683, "BadInput": ["0"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 8, in <module>\n    print(b)\nNameError: name 'b' is not defined\n", "ip": "2.25.120.8"}, [{"EndTime": 1552273417.3683455, "FinalMinimizedSolution": ["2"], "FinalCoverage": [7, 1, 4, 1, 82, "3,", "2->3"], "FinalSolution": ["2"], "StartTime": 1552273416.3198335, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0"], ["0 mkv"]]}, {"EndTime": 1552273418.2814448, "FinalMinimizedSolution": ["3"], "FinalCoverage": [7, 1, 4, 1, 82, "3,", "2->3"], "FinalSolution": ["3", "0"], "StartTime": 1552273417.3685257, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["0"], ["0 mkv"], ["0"]]}, {"EndTime": 1552273419.32941, "FinalMinimizedSolution": ["10"], "FinalCoverage": [7, 1, 4, 1, 82, "3,", "2->3"], "FinalSolution": ["10"], "StartTime": 1552273418.2816408, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0"], ["0 mkv"], ["0"], ["0"], []]}, {"EndTime": 1552273420.3346002, "FinalMinimizedSolution": ["4"], "FinalCoverage": [7, 1, 4, 1, 82, "3,", "2->3"], "FinalSolution": ["4", "0"], "StartTime": 1552273419.3296154, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0"], ["0 mkv"], ["0"], ["0"], [], ["0"], ["peE", "0"]]}, {"EndTime": 1552273421.0359097, "FinalMinimizedSolution": ["4"], "FinalCoverage": [7, 1, 4, 1, 82, "3,", "2->3"], "FinalSolution": ["4", "0 BEi"], "StartTime": 1552273420.3347342, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0"], ["0 mkv"], ["0"], ["0"], [], ["0"], ["peE", "0"], ["0"], ["af4", "0"]]}]], [{"CorrectInputs": [[["1", "([<>)]"], 1537915926]], "UniqueId": "9c348a4c-871b-40da-ba27-6b8411321567_0", "CoverageInfo": [18, 17, 12, 0, 3, "2-24"], "TimeStamp": 1537923266, "BadInput": ["{"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    t = int(input())\nValueError: invalid literal for int() with base 10: '{'\n", "ip": "128.164.67.84"}, [{"EndTime": 1552281927.044251, "FinalMinimizedSolution": ["5", ")}>]", "5", "5", "{", ")}>]"], "FinalCoverage": null, "FinalSolution": ["5", ")}>]", "5", "5", "{", ")}>]"], "StartTime": 1552281925.8527012, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["{"], ["5"], ["5", ")}>]"], ["5", ")}>]", "5"], ["5", ")}>]", "5", "5"], ["5", ")}>]", "5", "5", "{"]]}, {"EndTime": 1552281927.8739235, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [18, 15, 12, 1, 13, "5-24,", "4->5"], "FinalSolution": ["-1"], "StartTime": 1552281927.0444412, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["{"], ["5"], ["5", ")}>]"], ["5", ")}>]", "5"], ["5", ")}>]", "5", "5"], ["5", ")}>]", "5", "5", "{"], ["{"]]}, {"EndTime": 1552281929.5138059, "FinalMinimizedSolution": ["4", "20S", "c8-", "20S", "({<["], "FinalCoverage": [18, 4, 12, 1, 77, "15-19,", "14->15"], "FinalSolution": ["4", "20S", "c8-", "20S", "({<["], "StartTime": 1552281927.874142, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["{"], ["5"], ["5", ")}>]"], ["5", ")}>]", "5"], ["5", ")}>]", "5", "5"], ["5", ")}>]", "5", "5", "{"], ["{"], ["{"], ["4"], ["4", "20S"], ["4", "20S", "c8-"], ["4", "20S", "c8-", "20S"]]}, {"EndTime": 1552281929.9522924, "FinalMinimizedSolution": ["0"], "FinalCoverage": null, "FinalSolution": ["0"], "StartTime": 1552281929.5140839, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["{"], ["5"], ["5", ")}>]"], ["5", ")}>]", "5"], ["5", ")}>]", "5", "5"], ["5", ")}>]", "5", "5", "{"], ["{"], ["{"], ["4"], ["4", "20S"], ["4", "20S", "c8-"], ["4", "20S", "c8-", "20S"], ["{"], []]}, {"EndTime": 1552281932.5145874, "FinalMinimizedSolution": ["9", "{", "{", "9", "{", ")}>]", ")}>]", "{", "{", "{"], "FinalCoverage": [18, 1, 12, 1, 93, "19,", "15->19"], "FinalSolution": ["9", "{", "{", "9", "{", ")}>]", ")}>]", "{", "{", "{"], "StartTime": 1552281929.9525123, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["{"], ["5"], ["5", ")}>]"], ["5", ")}>]", "5"], ["5", ")}>]", "5", "5"], ["5", ")}>]", "5", "5", "{"], ["{"], ["{"], ["4"], ["4", "20S"], ["4", "20S", "c8-"], ["4", "20S", "c8-", "20S"], ["{"], [], ["{"], ["9"], ["9", "{"], ["9", "{", "{"], ["9", "{", "{", "9"], ["9", "{", "{", "9", "{"], ["9", "{", "{", "9", "{", ")}>]"], ["9", "{", "{", "9", "{", ")}>]", ")}>]"], ["9", "{", "{", "9", "{", ")}>]", ")}>]", "{"], ["9", "{", "{", "9", "{", ")}>]", ")}>]", "{", "{"]]}]], [{"CorrectInputs": [[["2 4", "13", "2 2 1 0", "0 1 1 2"], 1525153652], [["2 3", "10", "2 1 0", "1 1 2"], 1525154809], [["2 3", "4", "2 1 0", "1 1 2"], 1525155395]], "UniqueId": "cd29574e-a84d-40c7-e464-c71e9822d9fa_0", "CoverageInfo": [88, 78, 68, 0, 8, "2-7,", "10-18,", "21-30,", "33-42,", "57-124"], "TimeStamp": 1525154737, "BadInput": ["2 3", "2 1 0"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 55, in <module>\n    periodo=int(input())\nValueError: invalid literal for int() with base 10: '2 1 0'\n", "ip": "179.222.167.51"}, [{"EndTime": 1552357081.7506196, "FinalMinimizedSolution": ["2 3", "0", "2 1 0", "2 3"], "FinalCoverage": [88, 56, 68, 1, 29, "2-7,", "10-18,", "21-30,", "33-42,", "88-124,", "86->88"], "FinalSolution": ["2 3", "0", "2 1 0", "2 3"], "StartTime": 1552357080.4721084, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["2 3", "2 1 0"], ["2 3", "0"], ["2 3", "0", "2 1 0"]]}, {"InputHistory": [["2 3", "2 1 0"], ["2 3", "0"], ["2 3", "0", "2 1 0"], ["2 3", "2 1 0"], ["2 3", "7"], ["2 3", "7", "p9i"], ["2 3", "7", "3"], ["2 3", "7", "3", "2 3"], ["2 3", "7", "3", "2", "3"], ["2 3", "7", "3", "2", "Tony 4 20 1", "3"], ["2 Tony 4 20 1", "7", "3", "2", "Tony 4 20 1", "3"], ["2 Tony 4 20 1", "7", "3", "2", "4 4 20 1", "3"], ["2 7 4 20 1", "7", "3", "2", "4 4 20 1", "3"], ["2 7 4 20 1", "7", "3", "2", "4 4 20 1", " ", "3"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838610"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386109"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838610959"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386109591"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838610959143"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386109591437"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-110"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-110210"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102108"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102108-1"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102108-14"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552357092.9872832, "StartTime": 1552357081.7508225}, {"InputHistory": [["2 3", "2 1 0"], ["2 3", "0"], ["2 3", "0", "2 1 0"], ["2 3", "2 1 0"], ["2 3", "7"], ["2 3", "7", "p9i"], ["2 3", "7", "3"], ["2 3", "7", "3", "2 3"], ["2 3", "7", "3", "2", "3"], ["2 3", "7", "3", "2", "Tony 4 20 1", "3"], ["2 Tony 4 20 1", "7", "3", "2", "Tony 4 20 1", "3"], ["2 Tony 4 20 1", "7", "3", "2", "4 4 20 1", "3"], ["2 7 4 20 1", "7", "3", "2", "4 4 20 1", "3"], ["2 7 4 20 1", "7", "3", "2", "4 4 20 1", " ", "3"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838610"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386109"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838610959"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386109591"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838610959143"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386109591437"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-110"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-110210"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102108"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102108-1"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102108-14"], ["2 3", "2 1 0"], ["2 3", "3"], ["2 3", "3", "3"], ["2 3", "3", "3", "3"], ["2", "3", "3", "3", "3"], ["2", "3", "3", "3"], ["2", "3", "3 HSl", "3"], ["2", "3", "3 end", "3"], [], ["T6t"], ["2"], ["-5 12", "2"], ["", "2"], ["", "2 3", "2"], ["", "2 3", "''\n0 nada\n1 humano\n2 zumbi\n''", "2"], ["", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2"], ["2", "", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2"], ["2", "", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8", "2"], ["2", "", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2"], ["2", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2"], ["''\n0 nada\n1 humano\n2 zumbi\n''", "2", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2"], ["''\n0 nada\n1 humano\n2 zumbi\n''", "2", "", "''\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["''\n0 nada\n1 humano\n2 zumbi\n''", "2", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["''\n0 nada\n1 humano\n2 zumbi\n3", "2", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0 nada\n1 humano\n2 zumbi\n3", "2", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0 2 humano\n2 zumbi\n3", "2", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0 2 humano\n2 zumbi\n3", "2", "80", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "80", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "80", "", "6\n0", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "80", "", "6\n0", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "80", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "80", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2 ''\n0 nada\n1 humano\n2 zumbi\n''"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2 ''\n0 nada\n1 humano\n2 zumbi\n''"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9 ''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 humano\n2 zumbi\n''"], ["2 3   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9 ''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 humano\n2 zumbi\n''"], ["2 3   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9 ''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n2 zumbi\n''"], ["2 3   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9 ''\n0 nada\n1 5\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n2 zumbi\n''"], ["2 3   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n2 zumbi\n''"], ["2 3   1\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n2 zumbi\n''"], ["2 3   1\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n''"], ["2 3   1\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n''"], ["2 3   1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n''"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n''"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n-1"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 ''\n0 nada\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 0\n0 nada\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 0\n0 nada\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n3\n1 8\n7\n-1"], ["2 3 2 0\n0 nada\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n3\n1 5\n4\n8", "2Y8 gbR", "2 -1\n3\n1 8\n7\n-1"], ["2 3 2 0\n5\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n3\n1 5\n4\n8", "2Y8 gbR", "2 -1\n3\n1 8\n7\n-1"], ["2 3 2 0\n5\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n3\n1 5\n4\n8", "2Y8 gbR", "sat -1\n3\n1 8\n7\n-1"], ["SRq"], ["4"], ["joven", "4"], ["3", "4"], ["3"], [" ", "3"], [" a", "3"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552357104.4372973, "StartTime": 1552357092.9884214}, {"EndTime": 1552357112.944991, "FinalMinimizedSolution": ["2 2 1 0", "10\n0 3\n1 3\n2 zumbi\n0"], "FinalCoverage": [88, 12, 68, 9, 83, "6,", "14-17,", "25-26,", "30,", "40,", "100,", "103,", "109,", "5->6,", "13->14,", "24->25,", "27->30,", "39->40,", "99->100,", "102->103,", "105->108,", "108->109"], "FinalSolution": ["2 2 1 0", "10\n0 3\n1 3\n2 zumbi\n0", "6", "2 3", "6"], "StartTime": 1552357104.4393451, "FoundSolution": true, "NumProbesMade": 40, "InputHistory": [["2 3", "2 1 0"], ["2 3", "0"], ["2 3", "0", "2 1 0"], ["2 3", "2 1 0"], ["2 3", "7"], ["2 3", "7", "p9i"], ["2 3", "7", "3"], ["2 3", "7", "3", "2 3"], ["2 3", "7", "3", "2", "3"], ["2 3", "7", "3", "2", "Tony 4 20 1", "3"], ["2 Tony 4 20 1", "7", "3", "2", "Tony 4 20 1", "3"], ["2 Tony 4 20 1", "7", "3", "2", "4 4 20 1", "3"], ["2 7 4 20 1", "7", "3", "2", "4 4 20 1", "3"], ["2 7 4 20 1", "7", "3", "2", "4 4 20 1", " ", "3"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838610"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386109"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838610959"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386109591"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838610959143"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386109591437"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-110"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-110210"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102108"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102108-1"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102108-14"], ["2 3", "2 1 0"], ["2 3", "3"], ["2 3", "3", "3"], ["2 3", "3", "3", "3"], ["2", "3", "3", "3", "3"], ["2", "3", "3", "3"], ["2", "3", "3 HSl", "3"], ["2", "3", "3 end", "3"], [], ["T6t"], ["2"], ["-5 12", "2"], ["", "2"], ["", "2 3", "2"], ["", "2 3", "''\n0 nada\n1 humano\n2 zumbi\n''", "2"], ["", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2"], ["2", "", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2"], ["2", "", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8", "2"], ["2", "", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2"], ["2", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2"], ["''\n0 nada\n1 humano\n2 zumbi\n''", "2", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2"], ["''\n0 nada\n1 humano\n2 zumbi\n''", "2", "", "''\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["''\n0 nada\n1 humano\n2 zumbi\n''", "2", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["''\n0 nada\n1 humano\n2 zumbi\n3", "2", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0 nada\n1 humano\n2 zumbi\n3", "2", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0 2 humano\n2 zumbi\n3", "2", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0 2 humano\n2 zumbi\n3", "2", "80", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "80", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "80", "", "6\n0", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "80", "", "6\n0", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "80", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "80", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2 ''\n0 nada\n1 humano\n2 zumbi\n''"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2 ''\n0 nada\n1 humano\n2 zumbi\n''"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9 ''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 humano\n2 zumbi\n''"], ["2 3   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9 ''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 humano\n2 zumbi\n''"], ["2 3   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9 ''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n2 zumbi\n''"], ["2 3   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9 ''\n0 nada\n1 5\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n2 zumbi\n''"], ["2 3   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n2 zumbi\n''"], ["2 3   1\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n2 zumbi\n''"], ["2 3   1\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n''"], ["2 3   1\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n''"], ["2 3   1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n''"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n''"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n-1"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 ''\n0 nada\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 0\n0 nada\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 0\n0 nada\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n3\n1 8\n7\n-1"], ["2 3 2 0\n0 nada\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n3\n1 5\n4\n8", "2Y8 gbR", "2 -1\n3\n1 8\n7\n-1"], ["2 3 2 0\n5\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n3\n1 5\n4\n8", "2Y8 gbR", "2 -1\n3\n1 8\n7\n-1"], ["2 3 2 0\n5\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n3\n1 5\n4\n8", "2Y8 gbR", "sat -1\n3\n1 8\n7\n-1"], ["SRq"], ["4"], ["joven", "4"], ["3", "4"], ["3"], [" ", "3"], [" a", "3"], ["2 3", "2 1 0"], ["2 3", "1"], ["2 3", "1", "2Nx"], ["2 3", "1", "9"], ["2 3", "1", "9", "hM5"], ["2 3", "1", "9", "10"], ["2 3", "1", "2 3", "9"], ["  3", "1", "2 3", "9"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "2 3", "9"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "2 F4L", "9"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "2 F4L", "9 V9-"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "2 F4L", "9", "V9-"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "2 F4L", "V9-"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "z-C F4L", "V9-"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "z-C F4L", "V9- GKb"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "z-C F4L", "V9-", "GKb"], ["  3", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "z-C F4L", "V9-", "GKb"], ["  3", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "  F4L", "V9-", "GKb"], ["  3", "1", "3", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "  F4L", "V9-", "GKb"], ["  3", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "  F4L", "V9-", "GKb", "GKb"], ["  3", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "2 1 0  F4L", "V9-", "GKb", "GKb"], ["  3", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "2 1 0  F4L", "111001010", "V9-", "GKb", "GKb"], ["  3", "Harry 37.21", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "2 1 0  F4L", "111001010", "V9-", "GKb", "GKb"], ["  3", "", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "2 1 0  F4L", "111001010", "V9-", "GKb", "GKb"], ["mL1"], ["-1"], ["2.3", "-1"], ["6", "-1"], ["6"], ["2 3", "6"], ["2 3", "6", "6"], ["2 3", "6", "6", "6"], ["2 3", "6", "2 3", "6", "6"], ["2 3", "6 9pj", "2 3", "6", "6"], ["2 3", "6", "2 3", "6"], ["2 3", "''\n0 nada\n1 humano\n2 zumbi\n''", "6", "2 3", "6"], ["2 3", "''\n0 nada\n1 humano\n2 zumbi\n0", "6", "2 3", "6"], ["2 3", "10\n0 nada\n1 humano\n2 zumbi\n0", "6", "2 3", "6"], ["2 3", "10\n0 3\n1 humano\n2 zumbi\n0", "6", "2 3", "6"], ["2 3", "10\n0 3\n1 3\n2 zumbi\n0", "6", "2 3", "6"]]}, {"EndTime": 1552357114.2242873, "FinalMinimizedSolution": ["2 3", "-1", "2 1 0", "2 3"], "FinalCoverage": [88, 56, 68, 1, 29, "2-7,", "10-18,", "21-30,", "33-42,", "88-124,", "86->88"], "FinalSolution": ["2 3", "-1", "2 1 0", "2 3"], "StartTime": 1552357112.9476967, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["2 3", "2 1 0"], ["2 3", "0"], ["2 3", "0", "2 1 0"], ["2 3", "2 1 0"], ["2 3", "7"], ["2 3", "7", "p9i"], ["2 3", "7", "3"], ["2 3", "7", "3", "2 3"], ["2 3", "7", "3", "2", "3"], ["2 3", "7", "3", "2", "Tony 4 20 1", "3"], ["2 Tony 4 20 1", "7", "3", "2", "Tony 4 20 1", "3"], ["2 Tony 4 20 1", "7", "3", "2", "4 4 20 1", "3"], ["2 7 4 20 1", "7", "3", "2", "4 4 20 1", "3"], ["2 7 4 20 1", "7", "3", "2", "4 4 20 1", " ", "3"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838610"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386109"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838610959"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386109591"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "3510492053229796795310836410417838610959143"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "35104920532297967953108364104178386109591437"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-110"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-110210"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102108"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102108-1"], ["2 7 4 20 1", "7", "3", " ", "2", "4 4 20 1", " ", "351049205322979679531083641041783861095914375-1102108-14"], ["2 3", "2 1 0"], ["2 3", "3"], ["2 3", "3", "3"], ["2 3", "3", "3", "3"], ["2", "3", "3", "3", "3"], ["2", "3", "3", "3"], ["2", "3", "3 HSl", "3"], ["2", "3", "3 end", "3"], [], ["T6t"], ["2"], ["-5 12", "2"], ["", "2"], ["", "2 3", "2"], ["", "2 3", "''\n0 nada\n1 humano\n2 zumbi\n''", "2"], ["", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2"], ["2", "", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2"], ["2", "", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8", "2"], ["2", "", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2"], ["2", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2"], ["''\n0 nada\n1 humano\n2 zumbi\n''", "2", "", "''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2"], ["''\n0 nada\n1 humano\n2 zumbi\n''", "2", "", "''\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["''\n0 nada\n1 humano\n2 zumbi\n''", "2", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["''\n0 nada\n1 humano\n2 zumbi\n3", "2", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0 nada\n1 humano\n2 zumbi\n3", "2", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0 2 humano\n2 zumbi\n3", "2", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0 2 humano\n2 zumbi\n3", "2", "80", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "80", "", "6\n0 nada\n1 humano\n2 zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "80", "", "6\n0", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "80", "", "6\n0", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "80", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "80", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2 ''\n0 nada\n1 humano\n2 zumbi\n''"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9", "2Y8 gbR", "2 ''\n0 nada\n1 humano\n2 zumbi\n''"], ["10\n0   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9 ''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 humano\n2 zumbi\n''"], ["2 3   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9 ''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 humano\n2 zumbi\n''"], ["2 3   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9 ''\n0 nada\n1 humano\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n2 zumbi\n''"], ["2 3   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "humano\n2", "zumbi\n9 ''\n0 nada\n1 5\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n2 zumbi\n''"], ["2 3   humano\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n2 zumbi\n''"], ["2 3   1\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n2 zumbi\n''"], ["2 3   1\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n2 zumbi\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n''"], ["2 3   1\n2 zumbi\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n''"], ["2 3   1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n''"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n''"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 ''\n0 nada\n1 8\n7\n-1"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n''", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 ''\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 ''\n0 nada\n1 8\n7\n''  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 ''\n0 nada\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 0\n0 nada\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n0 nada\n1 8\n7\n-1"], ["2 3 2 0\n0 nada\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n0 nada\n1 5\n4\n8", "2Y8 gbR", "2 -1\n3\n1 8\n7\n-1"], ["2 3 2 0\n0 nada\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n3\n1 5\n4\n8", "2Y8 gbR", "2 -1\n3\n1 8\n7\n-1"], ["2 3 2 0\n5\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n3\n1 5\n4\n8", "2Y8 gbR", "2 -1\n3\n1 8\n7\n-1"], ["2 3 2 0\n5\n1 8\n7\n4  1\n3\n3", "2", "2,3", "", "6\n0", " ", "nada\n1", "9\n2", "zumbi\n9 9\n3\n1 5\n4\n8", "2Y8 gbR", "sat -1\n3\n1 8\n7\n-1"], ["SRq"], ["4"], ["joven", "4"], ["3", "4"], ["3"], [" ", "3"], [" a", "3"], ["2 3", "2 1 0"], ["2 3", "1"], ["2 3", "1", "2Nx"], ["2 3", "1", "9"], ["2 3", "1", "9", "hM5"], ["2 3", "1", "9", "10"], ["2 3", "1", "2 3", "9"], ["  3", "1", "2 3", "9"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "2 3", "9"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "2 F4L", "9"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "2 F4L", "9 V9-"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "2 F4L", "9", "V9-"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "2 F4L", "V9-"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "z-C F4L", "V9-"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "z-C F4L", "V9- GKb"], ["  3", "1 ''\n0 nada\n1 humano\n2 zumbi\n''", "z-C F4L", "V9-", "GKb"], ["  3", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "z-C F4L", "V9-", "GKb"], ["  3", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "  F4L", "V9-", "GKb"], ["  3", "1", "3", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "  F4L", "V9-", "GKb"], ["  3", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "  F4L", "V9-", "GKb", "GKb"], ["  3", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "2 1 0  F4L", "V9-", "GKb", "GKb"], ["  3", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "2 1 0  F4L", "111001010", "V9-", "GKb", "GKb"], ["  3", "Harry 37.21", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "2 1 0  F4L", "111001010", "V9-", "GKb", "GKb"], ["  3", "", "1", "''\n0", "nada\n1", "humano\n2", "zumbi\n''", "2 1 0  F4L", "111001010", "V9-", "GKb", "GKb"], ["mL1"], ["-1"], ["2.3", "-1"], ["6", "-1"], ["6"], ["2 3", "6"], ["2 3", "6", "6"], ["2 3", "6", "6", "6"], ["2 3", "6", "2 3", "6", "6"], ["2 3", "6 9pj", "2 3", "6", "6"], ["2 3", "6", "2 3", "6"], ["2 3", "''\n0 nada\n1 humano\n2 zumbi\n''", "6", "2 3", "6"], ["2 3", "''\n0 nada\n1 humano\n2 zumbi\n0", "6", "2 3", "6"], ["2 3", "10\n0 nada\n1 humano\n2 zumbi\n0", "6", "2 3", "6"], ["2 3", "10\n0 3\n1 humano\n2 zumbi\n0", "6", "2 3", "6"], ["2 3", "10\n0 3\n1 3\n2 zumbi\n0", "6", "2 3", "6"], ["2 3", "2 1 0"], ["2 3", "-1"], ["2 3", "-1", "2 1 0"]]}]], [{"CorrectInputs": [[["123456"], 1542844812], [["1 2 3 4 5 6"], 1542844841], [["123 321 333 111 1 1 4 5 6 000 99 "], 1542844901]], "UniqueId": "330148e2-fa79-4562-cc56-c4f6ebdeaaad_0", "CoverageInfo": [3, 2, 4, 1, 29, "2-3,", "1->2"], "TimeStamp": 1542844881, "BadInput": ["abc a b c d 1 2 3 123 321"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    ls = [int(i) for i in input().split()]\n  File \"temp2018.py\", line 1, in <listcomp>\n    ls = [int(i) for i in input().split()]\nValueError: invalid literal for int() with base 10: 'abc'\n", "ip": "5.165.30.251"}, [{"EndTime": 1552362299.9752536, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["4 7 7 2 3 1 2 3 123 321"], "StartTime": 1552362298.4845972, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["abc a b c d 1 2 3 123 321"], ["4 a b c d 1 2 3 123 321"], ["4 7 b c d 1 2 3 123 321"], ["4 7 7 c d 1 2 3 123 321"], ["4 7 7 2 d 1 2 3 123 321"]]}, {"EndTime": 1552362301.4581425, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["0 1 0 10 10 1 2 3 123 321"], "StartTime": 1552362299.9754715, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["abc a b c d 1 2 3 123 321"], ["4 a b c d 1 2 3 123 321"], ["4 7 b c d 1 2 3 123 321"], ["4 7 7 c d 1 2 3 123 321"], ["4 7 7 2 d 1 2 3 123 321"], ["abc a b c d 1 2 3 123 321"], ["0 a b c d 1 2 3 123 321"], ["0 1 b c d 1 2 3 123 321"], ["0 1 0 c d 1 2 3 123 321"], ["0 1 0 10 d 1 2 3 123 321"]]}, {"EndTime": 1552362302.9444447, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["6 2 2 0 4 1 2 3 123 321"], "StartTime": 1552362301.4583967, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["abc a b c d 1 2 3 123 321"], ["4 a b c d 1 2 3 123 321"], ["4 7 b c d 1 2 3 123 321"], ["4 7 7 c d 1 2 3 123 321"], ["4 7 7 2 d 1 2 3 123 321"], ["abc a b c d 1 2 3 123 321"], ["0 a b c d 1 2 3 123 321"], ["0 1 b c d 1 2 3 123 321"], ["0 1 0 c d 1 2 3 123 321"], ["0 1 0 10 d 1 2 3 123 321"], ["abc a b c d 1 2 3 123 321"], ["6 a b c d 1 2 3 123 321"], ["6 2 b c d 1 2 3 123 321"], ["6 2 2 c d 1 2 3 123 321"], ["6 2 2 0 d 1 2 3 123 321"]]}, {"EndTime": 1552362304.4332433, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["1 2 1 2 1 1 2 3 123 321"], "StartTime": 1552362302.9447484, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["abc a b c d 1 2 3 123 321"], ["4 a b c d 1 2 3 123 321"], ["4 7 b c d 1 2 3 123 321"], ["4 7 7 c d 1 2 3 123 321"], ["4 7 7 2 d 1 2 3 123 321"], ["abc a b c d 1 2 3 123 321"], ["0 a b c d 1 2 3 123 321"], ["0 1 b c d 1 2 3 123 321"], ["0 1 0 c d 1 2 3 123 321"], ["0 1 0 10 d 1 2 3 123 321"], ["abc a b c d 1 2 3 123 321"], ["6 a b c d 1 2 3 123 321"], ["6 2 b c d 1 2 3 123 321"], ["6 2 2 c d 1 2 3 123 321"], ["6 2 2 0 d 1 2 3 123 321"], ["abc a b c d 1 2 3 123 321"], ["1 a b c d 1 2 3 123 321"], ["1 2 b c d 1 2 3 123 321"], ["1 2 1 c d 1 2 3 123 321"], ["1 2 1 2 d 1 2 3 123 321"]]}, {"EndTime": 1552362305.5426505, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 4, 0, 100], "FinalSolution": ["7 1 6 9 4 1 2 3 123 321"], "StartTime": 1552362304.4335983, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["abc a b c d 1 2 3 123 321"], ["4 a b c d 1 2 3 123 321"], ["4 7 b c d 1 2 3 123 321"], ["4 7 7 c d 1 2 3 123 321"], ["4 7 7 2 d 1 2 3 123 321"], ["abc a b c d 1 2 3 123 321"], ["0 a b c d 1 2 3 123 321"], ["0 1 b c d 1 2 3 123 321"], ["0 1 0 c d 1 2 3 123 321"], ["0 1 0 10 d 1 2 3 123 321"], ["abc a b c d 1 2 3 123 321"], ["6 a b c d 1 2 3 123 321"], ["6 2 b c d 1 2 3 123 321"], ["6 2 2 c d 1 2 3 123 321"], ["6 2 2 0 d 1 2 3 123 321"], ["abc a b c d 1 2 3 123 321"], ["1 a b c d 1 2 3 123 321"], ["1 2 b c d 1 2 3 123 321"], ["1 2 1 c d 1 2 3 123 321"], ["1 2 1 2 d 1 2 3 123 321"], ["abc a b c d 1 2 3 123 321"], ["7 a b c d 1 2 3 123 321"], ["7 1 b c d 1 2 3 123 321"], ["7 1 6 c d 1 2 3 123 321"], ["7 1 6 9 d 1 2 3 123 321"]]}]], [{"CorrectInputs": [[["26"], 1544347704], [["25"], 1544347929], [["27"], 1544348044]], "UniqueId": "ffb2d426-1ea6-4339-e3d8-37aea62547dc_0", "CoverageInfo": [9, 8, 8, 0, 6, "2-10"], "TimeStamp": 1544347909, "BadInput": ["26.7"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    cube = int(input(\"please enter the no\"))\nValueError: invalid literal for int() with base 10: '26.7'\n", "ip": "2607:fea8:2cdf:f781:e5a7:7b3:9f2b:9f37"}, [{"EndTime": 1552278227.6293902, "FinalMinimizedSolution": ["5"], "FinalCoverage": null, "FinalSolution": ["5"], "StartTime": 1552278227.3815343, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["26.7"]]}, {"EndTime": 1552278228.4902668, "FinalMinimizedSolution": ["2"], "FinalCoverage": [9, 2, 8, 2, 65, "8-9,", "2->5,", "5->8"], "FinalSolution": ["2"], "StartTime": 1552278227.6295125, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["26.7"], ["26.7"]]}, {"EndTime": 1552278229.35248, "FinalMinimizedSolution": ["8"], "FinalCoverage": [9, 2, 8, 3, 71, "6,", "9,", "2->5,", "5->6,", "8->9"], "FinalSolution": ["8"], "StartTime": 1552278228.4904377, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["26.7"], ["26.7"], ["26.7"]]}, {"EndTime": 1552278229.6013114, "FinalMinimizedSolution": ["1"], "FinalCoverage": null, "FinalSolution": ["1"], "StartTime": 1552278229.3526547, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["26.7"], ["26.7"], ["26.7"], ["26.7"]]}, {"EndTime": 1552278230.4839652, "FinalMinimizedSolution": ["7"], "FinalCoverage": [9, 2, 8, 2, 65, "8-9,", "2->5,", "5->8"], "FinalSolution": ["7"], "StartTime": 1552278229.601453, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["26.7"], ["26.7"], ["26.7"], ["26.7"], ["26.7"]]}]], [{"CorrectInputs": [[["111", "11", "0.1", "111", "1111"], 1517391562], [["123", "4", ".99", "125", "123"], 1517391629], [["10", "2", ".5", "10", "3"], 1517391703]], "UniqueId": "e37a1a2c-2a9e-4528-b618-08df27fc185b_0", "CoverageInfo": [20, 17, 0, 0, 15, "7-31"], "TimeStamp": 1517391776, "BadInput": ["0.2", "1"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 4, in <module>\n    volume = 3.14 * ((int(diameter) * 10 / 2) ** 2) * int(thick)\nValueError: invalid literal for int() with base 10: '0.2'\n", "ip": "2601:144:1:d550:551a:d8d3:4030:6e91"}, [{"EndTime": 1552264637.1210911, "FinalMinimizedSolution": ["5", "1", "0.2", "5", "2"], "FinalCoverage": [20, 0, 0, 0, 100], "FinalSolution": ["5", "1", "0.2", "5", "2"], "StartTime": 1552264635.3153412, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["0.2", "1"], ["5", "1"], ["5", "1", "0.2"], ["5", "1", "0.2", "0.2"], ["5", "1", "0.2", "0.2", "0.2"], ["5", "1", "0.2", "0.2", "2"]]}, {"EndTime": 1552264638.1242428, "FinalMinimizedSolution": ["7", "1", "1", "1", "4"], "FinalCoverage": null, "FinalSolution": ["7", "1", "1", "1", "4"], "StartTime": 1552264637.1213856, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["0.2", "1"], ["5", "1"], ["5", "1", "0.2"], ["5", "1", "0.2", "0.2"], ["5", "1", "0.2", "0.2", "0.2"], ["5", "1", "0.2", "0.2", "2"], ["0.2", "1"], ["7", "1"], ["7", "1", "1"], ["7", "1", "1", "1"], ["7", "1", "1", "1", "mm^3"]]}, {"EndTime": 1552264640.120719, "FinalMinimizedSolution": ["-1", "1", "9.5", "3", "8"], "FinalCoverage": [20, 0, 0, 0, 100], "FinalSolution": ["-1", "1", "9.5", "3", "8"], "StartTime": 1552264638.1245103, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["0.2", "1"], ["5", "1"], ["5", "1", "0.2"], ["5", "1", "0.2", "0.2"], ["5", "1", "0.2", "0.2", "0.2"], ["5", "1", "0.2", "0.2", "2"], ["0.2", "1"], ["7", "1"], ["7", "1", "1"], ["7", "1", "1", "1"], ["7", "1", "1", "1", "mm^3"], ["0.2", "1"], ["-1", "1"], ["-1", "1", "cent(s)"], ["-1", "1", "9.5"], ["-1", "1", "9.5", "9.5"], ["-1", "1", "9.5", "9.5", "0.2"], ["-1", "1", "9.5", "3", "0.2"]]}, {"EndTime": 1552264641.9296522, "FinalMinimizedSolution": ["5", "9", "1", "5", "7"], "FinalCoverage": [20, 0, 0, 0, 100], "FinalSolution": ["5", "9", "1", "5", "7"], "StartTime": 1552264640.121139, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["0.2", "1"], ["5", "1"], ["5", "1", "0.2"], ["5", "1", "0.2", "0.2"], ["5", "1", "0.2", "0.2", "0.2"], ["5", "1", "0.2", "0.2", "2"], ["0.2", "1"], ["7", "1"], ["7", "1", "1"], ["7", "1", "1", "1"], ["7", "1", "1", "1", "mm^3"], ["0.2", "1"], ["-1", "1"], ["-1", "1", "cent(s)"], ["-1", "1", "9.5"], ["-1", "1", "9.5", "9.5"], ["-1", "1", "9.5", "9.5", "0.2"], ["-1", "1", "9.5", "3", "0.2"], ["0.2", "1"], ["5", "0.2", "1"], ["5", "9", "1"], ["5", "9", "1", "0.2"], ["5", "9", "1", "0.2", "0.2"], ["5", "9", "1", "0.2", "7"]]}, {"EndTime": 1552264643.5464811, "FinalMinimizedSolution": ["5", "4", "1", "10", "5"], "FinalCoverage": [20, 0, 0, 0, 100], "FinalSolution": ["5", "4", "1", "10", "5"], "StartTime": 1552264641.930101, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["0.2", "1"], ["5", "1"], ["5", "1", "0.2"], ["5", "1", "0.2", "0.2"], ["5", "1", "0.2", "0.2", "0.2"], ["5", "1", "0.2", "0.2", "2"], ["0.2", "1"], ["7", "1"], ["7", "1", "1"], ["7", "1", "1", "1"], ["7", "1", "1", "1", "mm^3"], ["0.2", "1"], ["-1", "1"], ["-1", "1", "cent(s)"], ["-1", "1", "9.5"], ["-1", "1", "9.5", "9.5"], ["-1", "1", "9.5", "9.5", "0.2"], ["-1", "1", "9.5", "3", "0.2"], ["0.2", "1"], ["5", "0.2", "1"], ["5", "9", "1"], ["5", "9", "1", "0.2"], ["5", "9", "1", "0.2", "0.2"], ["5", "9", "1", "0.2", "7"], ["0.2", "1"], ["5", "mm^3", "1"], ["5", "4", "1"], ["5", "4", "1", "0.2"], ["5", "4", "1", "0.2", "5"]]}]], [{"CorrectInputs": [[["2/12/1234"], 1532747168]], "UniqueId": "1041e2a3-c8ea-424b-c49c-bd9b84182e48_0", "CoverageInfo": [7, 0, 2, 1, 89, "7->exit"], "TimeStamp": 1532747190, "BadInput": ["12/2/1234"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 8, in <module>\n    del day[0]\nTypeError: 'str' object doesn't support item deletion\n", "ip": "129.81.143.245"}, [{"EndTime": 1552416403.4452639, "FinalMinimizedSolution": ["February"], "FinalCoverage": [7, 1, 2, 1, 78, "8,", "7->8"], "FinalSolution": ["February"], "StartTime": 1552416401.828969, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["12/2/1234"], ["ifR", "12/2/1234"], ["ifR"], [], ["u15"]]}, {"EndTime": 1552416404.306478, "FinalMinimizedSolution": ["12/2/1234 March"], "FinalCoverage": [7, 1, 2, 1, 78, "8,", "7->8"], "FinalSolution": ["12/2/1234 March"], "StartTime": 1552416403.4454715, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["12/2/1234"], ["ifR", "12/2/1234"], ["ifR"], [], ["u15"], ["12/2/1234"]]}, {"EndTime": 1552416405.3564186, "FinalMinimizedSolution": ["March September"], "FinalCoverage": [7, 1, 2, 1, 78, "8,", "7->8"], "FinalSolution": ["March September"], "StartTime": 1552416404.3066876, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["12/2/1234"], ["ifR", "12/2/1234"], ["ifR"], [], ["u15"], ["12/2/1234"], ["12/2/1234"], ["March"]]}, {"EndTime": 1552416406.973011, "FinalMinimizedSolution": ["R5R v-I"], "FinalCoverage": [7, 1, 2, 1, 78, "8,", "7->8"], "FinalSolution": ["R5R v-I"], "StartTime": 1552416405.3566642, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["12/2/1234"], ["ifR", "12/2/1234"], ["ifR"], [], ["u15"], ["12/2/1234"], ["12/2/1234"], ["March"], ["12/2/1234"], ["9PX"], ["QZS"], ["1.5F", "QZS"], ["R5R"]]}, {"EndTime": 1552416408.4002392, "FinalMinimizedSolution": ["np0 July"], "FinalCoverage": [7, 1, 2, 1, 78, "8,", "7->8"], "FinalSolution": ["np0 July"], "StartTime": 1552416406.973298, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["12/2/1234"], ["ifR", "12/2/1234"], ["ifR"], [], ["u15"], ["12/2/1234"], ["12/2/1234"], ["March"], ["12/2/1234"], ["9PX"], ["QZS"], ["1.5F", "QZS"], ["R5R"], ["12/2/1234"], ["0V2"], ["12/2/1234", "0V2"], ["np0"]]}]], [{"CorrectInputs": [[["5"], 1536412340], [["1"], 1536412397], [["151096"], 1536412440]], "UniqueId": "e7e28678-63e4-4f6d-f1bc-7678ad642bee_0", "CoverageInfo": [6, 1, 2, 1, 75, "6,", "4->6"], "TimeStamp": 1536412368, "BadInput": ["1 5 10 9 6"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 5, in <module>\n    ac=ac+int(item)\nValueError: invalid literal for int() with base 10: ' '\n", "ip": "159.192.223.141"}, [{"EndTime": 1552297297.0473764, "FinalMinimizedSolution": [], "FinalCoverage": [6, 0, 2, 0, 100], "FinalSolution": ["16510107996"], "StartTime": 1552297296.122012, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1 5 10 9 6"], ["1 5 10 996"], ["1 5 107996"], ["1 510107996"]]}, {"EndTime": 1552297298.3412213, "FinalMinimizedSolution": [], "FinalCoverage": [6, 0, 2, 0, 100], "FinalSolution": ["1759106986"], "StartTime": 1552297297.0475574, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1 5 10 9 6"], ["1 5 10 996"], ["1 5 107996"], ["1 510107996"], ["1 5 10 9 6"], ["1 5 10 986"], ["1 5 106986"], ["1 59106986"]]}, {"EndTime": 1552297299.6400409, "FinalMinimizedSolution": [], "FinalCoverage": [6, 0, 2, 0, 100], "FinalSolution": ["1558106936"], "StartTime": 1552297298.3414226, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1 5 10 9 6"], ["1 5 10 996"], ["1 5 107996"], ["1 510107996"], ["1 5 10 9 6"], ["1 5 10 986"], ["1 5 106986"], ["1 59106986"], ["1 5 10 9 6"], ["1 5 10 936"], ["1 5 106936"], ["1 58106936"]]}, {"EndTime": 1552297300.9341772, "FinalMinimizedSolution": [], "FinalCoverage": [6, 0, 2, 0, 100], "FinalSolution": ["1251105966"], "StartTime": 1552297299.6402712, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1 5 10 9 6"], ["1 5 10 996"], ["1 5 107996"], ["1 510107996"], ["1 5 10 9 6"], ["1 5 10 986"], ["1 5 106986"], ["1 59106986"], ["1 5 10 9 6"], ["1 5 10 936"], ["1 5 106936"], ["1 58106936"], ["1 5 10 9 6"], ["1 5 10 966"], ["1 5 105966"], ["1 51105966"]]}, {"EndTime": 1552297302.229671, "FinalMinimizedSolution": [], "FinalCoverage": [6, 0, 2, 0, 100], "FinalSolution": ["1552108946"], "StartTime": 1552297300.9344258, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1 5 10 9 6"], ["1 5 10 996"], ["1 5 107996"], ["1 510107996"], ["1 5 10 9 6"], ["1 5 10 986"], ["1 5 106986"], ["1 59106986"], ["1 5 10 9 6"], ["1 5 10 936"], ["1 5 106936"], ["1 58106936"], ["1 5 10 9 6"], ["1 5 10 966"], ["1 5 105966"], ["1 51105966"], ["1 5 10 9 6"], ["1 5 10 946"], ["1 5 108946"], ["1 52108946"]]}]], [{"CorrectInputs": [[["10", "1"], 1517448140]], "UniqueId": "b1828699-13a0-4cfb-c4fb-835d618ca887_0", "CoverageInfo": [9, 7, 0, 0, 22, "3-9"], "TimeStamp": 1517449503, "BadInput": [".2"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 2, in <module>\n    centi_wheel = int(input('What is the diameter of the wheel (in centimeters)? '))\nValueError: invalid literal for int() with base 10: '.2'\n", "ip": "129.174.182.56"}, [{"EndTime": 1552413494.58132, "FinalMinimizedSolution": ["8", "8"], "FinalCoverage": [9, 0, 0, 0, 100], "FinalSolution": ["8", "8"], "StartTime": 1552413493.3357058, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [[".2"], ["8"], ["8", ".2"]]}, {"EndTime": 1552413495.8286197, "FinalMinimizedSolution": ["5", "0"], "FinalCoverage": [9, 0, 0, 0, 100], "FinalSolution": ["5", "0"], "StartTime": 1552413494.5815144, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [[".2"], ["8"], ["8", ".2"], [".2"], ["5"], ["5", ".2"]]}, {"EndTime": 1552413497.2580223, "FinalMinimizedSolution": ["4", "10"], "FinalCoverage": [9, 0, 0, 0, 100], "FinalSolution": ["4", "10"], "StartTime": 1552413495.828847, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [[".2"], ["8"], ["8", ".2"], [".2"], ["5"], ["5", ".2"], [".2"], [], ["4"], ["4", "mm^3"]]}, {"EndTime": 1552413498.311539, "FinalMinimizedSolution": ["0", "0"], "FinalCoverage": [9, 0, 0, 0, 100], "FinalSolution": ["0", "0"], "StartTime": 1552413497.258293, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [[".2"], ["8"], ["8", ".2"], [".2"], ["5"], ["5", ".2"], [".2"], [], ["4"], ["4", "mm^3"], [".2"], ["0"]]}, {"EndTime": 1552413499.5479503, "FinalMinimizedSolution": ["0", "5"], "FinalCoverage": [9, 0, 0, 0, 100], "FinalSolution": ["0", "5"], "StartTime": 1552413498.3118002, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [[".2"], ["8"], ["8", ".2"], [".2"], ["5"], ["5", ".2"], [".2"], [], ["4"], ["4", "mm^3"], [".2"], ["0"], [".2"], ["8 N9d"], ["FjW", "5"]]}]], [{"CorrectInputs": [[["3"], 1543529089]], "UniqueId": "88554c7c-7bce-49ff-86a9-fd079b352b89_0", "CoverageInfo": [15, 7, 12, 4, 44, "8,", "10-15,", "4->9,", "5->9,", "7->8,", "9->10"], "TimeStamp": 1543529186, "BadInput": ["1"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 16, in <module>\n    print(b)\nNameError: name 'b' is not defined\n", "ip": "31.43.53.107"}, [{"EndTime": 1552272269.5469468, "FinalMinimizedSolution": ["4"], "FinalCoverage": [15, 4, 12, 2, 63, "5-8,", "4->5,", "9->16"], "FinalSolution": ["4", "1"], "StartTime": 1552272268.4416933, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1"], ["k4O", "1"]]}, {"EndTime": 1552272270.894308, "FinalMinimizedSolution": ["7"], "FinalCoverage": [15, 4, 12, 2, 63, "5-8,", "4->5,", "9->16"], "FinalSolution": ["7", "4", "1"], "StartTime": 1552272269.5471334, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["1"], ["k4O", "1"], ["1"], ["ghH@l", "1"], [" ", "4", "1"]]}, {"EndTime": 1552272271.9452178, "FinalMinimizedSolution": ["9"], "FinalCoverage": [15, 4, 12, 2, 63, "5-8,", "4->5,", "9->16"], "FinalSolution": ["9"], "StartTime": 1552272270.8945255, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1"], ["k4O", "1"], ["1"], ["ghH@l", "1"], [" ", "4", "1"], ["1"], []]}, {"EndTime": 1552272273.4216483, "FinalMinimizedSolution": ["7"], "FinalCoverage": [15, 4, 12, 2, 63, "5-8,", "4->5,", "9->16"], "FinalSolution": ["7", "2"], "StartTime": 1552272271.9454458, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1"], ["k4O", "1"], ["1"], ["ghH@l", "1"], [" ", "4", "1"], ["1"], [], ["1"], ["B7e"], ["2"], ["sH6", "2"]]}, {"EndTime": 1552272274.8009293, "FinalMinimizedSolution": ["4"], "FinalCoverage": [15, 4, 12, 2, 63, "5-8,", "4->5,", "9->16"], "FinalSolution": ["4"], "StartTime": 1552272273.4219291, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1"], ["k4O", "1"], ["1"], ["ghH@l", "1"], [" ", "4", "1"], ["1"], [], ["1"], ["B7e"], ["2"], ["sH6", "2"], ["1"], ["1  "], ["1   "], ["1  2C7 "]]}]], [{"CorrectInputs": [[["commandes"], 1539702518]], "UniqueId": "0d6b7fb7-d00c-4d95-ce72-446ef8fc1d6f_0", "CoverageInfo": [7, 1, 4, 1, 82, "6,", "5->6"], "TimeStamp": 1539702532, "BadInput": ["bite"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 7, in <module>\n    print(a)\nNameError: name 'a' is not defined\n", "ip": "193.49.65.39"}, [{"EndTime": 1552350906.6675112, "FinalMinimizedSolution": ["me gusta n"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["me gusta n"], "StartTime": 1552350905.4204001, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["bite"], ["me gusta dormir,15", "bite"], ["me gusta dormir,15"]]}, {"EndTime": 1552350908.0961263, "FinalMinimizedSolution": ["n"], "FinalCoverage": [7, 0, 4, 1, 91, "5->3"], "FinalSolution": ["n"], "StartTime": 1552350906.6676936, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["bite"], ["me gusta dormir,15", "bite"], ["me gusta dormir,15"], ["bite"], ["105", "bite"], ["105", "n", "bite"], []]}, {"EndTime": 1552350909.0159376, "FinalMinimizedSolution": ["n"], "FinalCoverage": [7, 0, 4, 1, 91, "5->3"], "FinalSolution": ["n", "bite"], "StartTime": 1552350908.096337, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["bite"], ["me gusta dormir,15", "bite"], ["me gusta dormir,15"], ["bite"], ["105", "bite"], ["105", "n", "bite"], [], ["bite"]]}, {"EndTime": 1552350910.8244998, "FinalMinimizedSolution": ["K4S n"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["K4S n"], "StartTime": 1552350909.0161555, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["bite"], ["me gusta dormir,15", "bite"], ["me gusta dormir,15"], ["bite"], ["105", "bite"], ["105", "n", "bite"], [], ["bite"], ["bite"], ["b85"], ["3", "b85"], ["3 2PF", "b85"], ["3", "2PF", "b85"], ["K4S"]]}, {"EndTime": 1552350913.2015514, "FinalMinimizedSolution": ["0 n"], "FinalCoverage": [7, 0, 4, 0, 100], "FinalSolution": ["0 n"], "StartTime": 1552350910.824764, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["bite"], ["me gusta dormir,15", "bite"], ["me gusta dormir,15"], ["bite"], ["105", "bite"], ["105", "n", "bite"], [], ["bite"], ["bite"], ["b85"], ["3", "b85"], ["3 2PF", "b85"], ["3", "2PF", "b85"], ["K4S"], ["bite"], ["10", "bite"], ["10"], ["10", "10"], ["P3T"], ["P3T 2qG"], [""], [" I9Z"], ["0 I9Z"]]}]], [{"CorrectInputs": [[["2"], 1541745724]], "UniqueId": "81a195c7-6ddb-46b1-e537-7365b61922d4_0", "CoverageInfo": [6, 1, 2, 1, 75, "7,", "6->7"], "TimeStamp": 1541745759, "BadInput": ["1"], "ErrorType": "RecursionError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 25, in <module>\n    print_01_strings(0,'',int(input()))\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 9, in print_01_strings\n    return print_01_strings(k,s+\"1\",n-1)\n  File \"temp2018.py\", line 6, in print_01_strings\n    if k == n:\nRecursionError: maximum recursion depth exceeded in comparison\n", "ip": "82.17.140.65"}, [{"EndTime": 1552281197.749366, "FinalMinimizedSolution": ["6"], "FinalCoverage": [6, 0, 2, 0, 100], "FinalSolution": ["6", "5"], "StartTime": 1552281196.2572021, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1"], [], ["5"], ["l-6", "5"]]}, {"EndTime": 1552281202.2112644, "FinalMinimizedSolution": ["10"], "FinalCoverage": null, "FinalSolution": ["10"], "StartTime": 1552281197.7495792, "FoundSolution": true, "NumProbesMade": 18, "InputHistory": [["1"], [], ["5"], ["l-6", "5"], ["1"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n8"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the 0ue \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["- code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the 0ue \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the 0ue \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "indeed", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "is", "provided", "by", "the", "0ue", "\nAll", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "indeed", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the l66", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the l66", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "all", "the", "completions", "of", "this", "empty", "string", "resident", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["sH-"]]}, {"EndTime": 1552281204.7149162, "FinalMinimizedSolution": ["6"], "FinalCoverage": null, "FinalSolution": ["6"], "StartTime": 1552281202.2121797, "FoundSolution": true, "NumProbesMade": 12, "InputHistory": [["1"], [], ["5"], ["l-6", "5"], ["1"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n8"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the 0ue \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["- code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the 0ue \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the 0ue \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "indeed", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "is", "provided", "by", "the", "0ue", "\nAll", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "indeed", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the l66", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the l66", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "all", "the", "completions", "of", "this", "empty", "string", "resident", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["sH-"], ["1"], ["7f6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), ''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n'' is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), ''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n'' is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), ''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), ''\nThe code that starts execution of the program is \nprint_01_strings(0,10,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), 0\nThe code that starts execution of the program is \nprint_01_strings(0,10,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,8,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), 0\nThe code that starts execution of the program is \nprint_01_strings(0,10,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["5\nThe code that starts execution of the program is \nprint_01_strings(0,8,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), 0\nThe code that starts execution of the program is \nprint_01_strings(0,10,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], [""], ["9"], ["mU-"]]}, {"EndTime": 1552281206.2017126, "FinalMinimizedSolution": ["10\nThe code that starts execution of the program is \nprint_01_strings(0,-1,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n9"], "FinalCoverage": [6, 0, 2, 0, 100], "FinalSolution": ["10\nThe code that starts execution of the program is \nprint_01_strings(0,-1,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n9", "1"], "StartTime": 1552281204.7158835, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1"], [], ["5"], ["l-6", "5"], ["1"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n8"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the 0ue \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["- code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the 0ue \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the 0ue \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "indeed", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "is", "provided", "by", "the", "0ue", "\nAll", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "indeed", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the l66", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the l66", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "all", "the", "completions", "of", "this", "empty", "string", "resident", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["sH-"], ["1"], ["7f6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), ''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n'' is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), ''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n'' is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), ''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), ''\nThe code that starts execution of the program is \nprint_01_strings(0,10,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), 0\nThe code that starts execution of the program is \nprint_01_strings(0,10,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,8,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), 0\nThe code that starts execution of the program is \nprint_01_strings(0,10,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["5\nThe code that starts execution of the program is \nprint_01_strings(0,8,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), 0\nThe code that starts execution of the program is \nprint_01_strings(0,10,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], [""], ["9"], ["mU-"], ["1"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "1"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n9", "1"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,-1,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n9", "1"]]}, {"EndTime": 1552281207.2555635, "FinalMinimizedSolution": ["2"], "FinalCoverage": [6, 0, 2, 0, 100], "FinalSolution": ["2"], "StartTime": 1552281206.2027845, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1"], [], ["5"], ["l-6", "5"], ["1"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n8"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["9\nThe code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the 0ue \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["- code that starts execution of the program is \nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the 0ue \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings a r g t e all the completions of this empty string \nto the length int(input()), which is provided by the 0ue \nAll those completions are precisely the 0/1 strings \nof 1 int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "indeed", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "is", "provided", "by", "the", "0ue", "\nAll", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "indeed", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the l66", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "all", "the", "completions", "of", "this", "empty", "string", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["3\nprint_01_strings(0,4,int(input()))\nso", "the l66", "string", "here", "is", "not", "read", "from", "the", "input", "but", "is", "a", "\nconstant", "empty", "string.", "Then,", "the", "recursive", "function", "\nprint_01_strings", "a", "r", "g", "t", "e", "''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "all", "the", "completions", "of", "this", "empty", "string", "resident", "\nto", "the", "length", "int(input()),", "which", "hms", "is", "provided", "by", "the", "0ue", "\nAll", "1", "those", "completions", "are", "precisely", "the", "0/1", "strings", "\nof", "1", "int(input()).\n8"], ["sH-"], ["1"], ["7f6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), ''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n'' is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), ''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n'' is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), ''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), ''\nThe code that starts execution of the program is \nprint_01_strings(0,10,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), 0\nThe code that starts execution of the program is \nprint_01_strings(0,10,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,8,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), 0\nThe code that starts execution of the program is \nprint_01_strings(0,10,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], ["5\nThe code that starts execution of the program is \nprint_01_strings(0,8,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), 0\nThe code that starts execution of the program is \nprint_01_strings(0,10,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n10 is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n6"], [""], ["9"], ["mU-"], ["1"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n''", "1"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,'',int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n9", "1"], ["''\nThe code that starts execution of the program is \nprint_01_strings(0,-1,int(input()))\nso indeed the string here is not read from the input but is a \nconstant empty string. Then, the recursive function \nprint_01_strings prints all the completions of this empty string \nto the length int(input()), which is provided by the user. \nAll those completions are precisely the 0/1 strings \nof length int(input()).\n9", "1"], ["1"], ["1 Z5F"]]}]], [{"CorrectInputs": [[["33+2"], 1527507692]], "UniqueId": "cb2b40bf-3ccc-4737-f78d-3c50ca765165_0", "CoverageInfo": [49, 15, 10, 4, 68, "10-13,", "23-26,", "29,", "51-52,", "54-57,", "38->exit,", "40->50,", "50->51,", "53->54"], "TimeStamp": 1527507717, "BadInput": ["33+2*3"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 61, in <module>\n    pre = prefija(operacion)\n  File \"temp2018.py\", line 43, in prefija\n    numero = int(nume)\nValueError: invalid literal for int() with base 10: '2*'\n", "ip": "189.230.50.255"}, [{"EndTime": 1552264778.0421185, "FinalMinimizedSolution": [], "FinalCoverage": [49, 4, 10, 1, 92, "12-13,", "25-26,", "40->50"], "FinalSolution": ["33+103"], "StartTime": 1552264777.305694, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["33+2*3"]]}, {"EndTime": 1552264778.156418, "FinalMinimizedSolution": [], "FinalCoverage": null, "FinalSolution": ["33+93"], "StartTime": 1552264778.0422964, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["33+2*3"], ["33+2*3"]]}, {"EndTime": 1552264778.892107, "FinalMinimizedSolution": [], "FinalCoverage": [49, 4, 10, 1, 92, "12-13,", "25-26,", "40->50"], "FinalSolution": ["33+03"], "StartTime": 1552264778.1565433, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["33+2*3"], ["33+2*3"], ["33+2*3"]]}, {"EndTime": 1552264779.6264522, "FinalMinimizedSolution": [], "FinalCoverage": [49, 4, 10, 1, 92, "12-13,", "25-26,", "40->50"], "FinalSolution": ["33+63"], "StartTime": 1552264778.8922935, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["33+2*3"], ["33+2*3"], ["33+2*3"], ["33+2*3"]]}, {"EndTime": 1552264780.6861415, "FinalMinimizedSolution": [], "FinalCoverage": [49, 29, 10, 1, 36, "7,", "10-13,", "20,", "23-26,", "29,", "39-57,", "38->39"], "FinalSolution": [], "StartTime": 1552264779.6266696, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["33+2*3"], ["33+2*3"], ["33+2*3"], ["33+2*3"], ["33+2*3"], ["(", "33+103"], ["(", "q1d", "33+103"]]}]], [{"CorrectInputs": [[["Yes", "No"], 1537258365]], "UniqueId": "877cda22-a233-4ff5-aa7d-68988a760278_0", "CoverageInfo": [36, 29, 30, 2, 14, "11-44,", "5->41,", "7->18"], "TimeStamp": 1537258583, "BadInput": ["Yes", "no", "12"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 10, in <module>\n    isValid = false \nNameError: name 'false' is not defined\n", "ip": "192.222.237.239"}, [{"EndTime": 1552271936.146492, "FinalMinimizedSolution": ["Yes", "Yes"], "FinalCoverage": [36, 30, 30, 4, 15, "8-17,", "19-25,", "27-44,", "5->41,", "7->8,", "18->19,", "26->27"], "FinalSolution": ["Yes", "Yes", "no", "12"], "StartTime": 1552271935.1719098, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["Yes", "no", "12"]]}, {"EndTime": 1552271937.0664322, "FinalMinimizedSolution": ["Yes", "no k0T"], "FinalCoverage": [36, 30, 30, 4, 15, "8-17,", "19-25,", "27-44,", "5->41,", "7->8,", "18->19,", "26->27"], "FinalSolution": ["Yes", "no k0T", "12"], "StartTime": 1552271936.1466794, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["Yes", "no", "12"], ["Yes", "no", "12"]]}, {"EndTime": 1552271938.3898928, "FinalMinimizedSolution": [], "FinalCoverage": [36, 32, 30, 2, 9, "6-40,", "42,", "5->6,", "41->42"], "FinalSolution": ["Mixed", "Yes", "no", "-1.9", "12"], "StartTime": 1552271937.0666275, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["Yes", "no", "12"], ["Yes", "no", "12"], ["Yes", "no", "12"], ["Yes", "no", "AG", "12"], ["Yes", "no", "-1.9", "12"]]}, {"EndTime": 1552271939.4467099, "FinalMinimizedSolution": [], "FinalCoverage": [36, 32, 30, 2, 9, "6-40,", "42,", "5->6,", "41->42"], "FinalSolution": [], "StartTime": 1552271938.390125, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["Yes", "no", "12"], ["Yes", "no", "12"], ["Yes", "no", "12"], ["Yes", "no", "AG", "12"], ["Yes", "no", "-1.9", "12"], ["Yes", "no", "12"], ["Yes", "no", "GA", "12"], ["Yes", "no", "7.9", "12"]]}, {"EndTime": 1552271940.3697798, "FinalMinimizedSolution": ["Yes", "no Te4"], "FinalCoverage": [36, 30, 30, 4, 15, "8-17,", "19-25,", "27-44,", "5->41,", "7->8,", "18->19,", "26->27"], "FinalSolution": ["Yes", "no Te4", "12"], "StartTime": 1552271939.446963, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["Yes", "no", "12"], ["Yes", "no", "12"], ["Yes", "no", "12"], ["Yes", "no", "AG", "12"], ["Yes", "no", "-1.9", "12"], ["Yes", "no", "12"], ["Yes", "no", "GA", "12"], ["Yes", "no", "7.9", "12"], ["Yes", "no", "12"]]}]], [{"CorrectInputs": [[["North", "South"], 1544970642], [["David", "David"], 1544970700]], "UniqueId": "81da607c-d36f-4c25-8e7f-cfe7fadd4ea4_0", "CoverageInfo": [12, 3, 6, 3, 67, "7,", "13-14,", "4->7,", "8->14,", "9->13"], "TimeStamp": 1544970718, "BadInput": ["hhhhfhfhfhfhf", "jjj"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 9, in <module>\n    if i!=s2[x]:\nIndexError: string index out of range\n", "ip": "173.206.0.62"}, [{"EndTime": 1552277794.0517876, "FinalMinimizedSolution": ["-7I", "jjj"], "FinalCoverage": [12, 2, 6, 2, 78, "5,", "13,", "4->5,", "9->13"], "FinalSolution": ["-7I", "jjj"], "StartTime": 1552277792.81505, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["hhhhfhfhfhfhf", "jjj"], [], ["-7I"]]}, {"EndTime": 1552277795.3935122, "FinalMinimizedSolution": ["Cad", "hhhhfhfhfhfhf"], "FinalCoverage": [12, 2, 6, 2, 78, "7,", "13,", "4->7,", "9->13"], "FinalSolution": ["Cad", "hhhhfhfhfhfhf", "3/7", "jjj Mhw"], "StartTime": 1552277794.0519679, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["hhhhfhfhfhfhf", "jjj"], [], ["-7I"], ["hhhhfhfhfhfhf", "jjj"], ["hhhhfhfhfhfhf", "3/7", "jjj"], ["hhhhfhfhfhfhf", "3/7", "jjj Mhw"]]}, {"EndTime": 1552277796.6328497, "FinalMinimizedSolution": ["", "jjj"], "FinalCoverage": [12, 5, 6, 2, 50, "7,", "9-13,", "4->7,", "8->9"], "FinalSolution": ["", "jjj"], "StartTime": 1552277795.393731, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["hhhhfhfhfhfhf", "jjj"], [], ["-7I"], ["hhhhfhfhfhfhf", "jjj"], ["hhhhfhfhfhfhf", "3/7", "jjj"], ["hhhhfhfhfhfhf", "3/7", "jjj Mhw"], ["hhhhfhfhfhfhf", "jjj"], ["hhhhfhfhfhfhf jae", "jjj"], ["hhhhfhfhfhfhf jae", "b", "jjj"]]}, {"EndTime": 1552277797.6828055, "FinalMinimizedSolution": ["gno", "hhhhfhfhfhfhf"], "FinalCoverage": [12, 2, 6, 2, 78, "7,", "13,", "4->7,", "9->13"], "FinalSolution": ["gno", "hhhhfhfhfhfhf"], "StartTime": 1552277796.6330922, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["hhhhfhfhfhfhf", "jjj"], [], ["-7I"], ["hhhhfhfhfhfhf", "jjj"], ["hhhhfhfhfhfhf", "3/7", "jjj"], ["hhhhfhfhfhfhf", "3/7", "jjj Mhw"], ["hhhhfhfhfhfhf", "jjj"], ["hhhhfhfhfhfhf jae", "jjj"], ["hhhhfhfhfhfhf jae", "b", "jjj"], ["hhhhfhfhfhfhf", "jjj"], ["gno"]]}, {"EndTime": 1552277798.7837489, "FinalMinimizedSolution": ["hhhhfhfhfhfhf", "hhhhfhfhfhfhf"], "FinalCoverage": [12, 3, 6, 2, 72, "5,", "10-11,", "4->5,", "9->10"], "FinalSolution": ["hhhhfhfhfhfhf", "hhhhfhfhfhfhf", "jjj"], "StartTime": 1552277797.6830754, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["hhhhfhfhfhfhf", "jjj"], [], ["-7I"], ["hhhhfhfhfhfhf", "jjj"], ["hhhhfhfhfhfhf", "3/7", "jjj"], ["hhhhfhfhfhfhf", "3/7", "jjj Mhw"], ["hhhhfhfhfhfhf", "jjj"], ["hhhhfhfhfhfhf jae", "jjj"], ["hhhhfhfhfhfhf jae", "b", "jjj"], ["hhhhfhfhfhfhf", "jjj"], ["gno"], ["hhhhfhfhfhfhf", "jjj"], ["hhhhfhfhfhfhf", "0,00001", "jjj"]]}]], [{"CorrectInputs": [[["5", "5"], 1536696783]], "UniqueId": "ff87f114-798c-4d34-c7eb-b75c8cd711f1_0", "CoverageInfo": [3, 2, 0, 0, 33, "2-3"], "TimeStamp": 1536696812, "BadInput": ["5.5"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    numberOne    =int(input(\"Enter a number between 0 and 10\"))\nValueError: invalid literal for int() with base 10: '5.5'\n", "ip": "171.33.192.148"}, [{"EndTime": 1552292136.660801, "FinalMinimizedSolution": ["2", "4"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["2", "4"], "StartTime": 1552292135.418953, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["5.5"], ["2"], ["2", "J2n"]]}, {"EndTime": 1552292137.9039793, "FinalMinimizedSolution": ["7", "4"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["7", "4"], "StartTime": 1552292136.6609738, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["5.5"], ["2"], ["2", "J2n"], ["5.5"], ["7"], ["7", "a-1"]]}, {"EndTime": 1552292139.1535587, "FinalMinimizedSolution": ["9", "7"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["9", "7"], "StartTime": 1552292137.9041739, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["5.5"], ["2"], ["2", "J2n"], ["5.5"], ["7"], ["7", "a-1"], ["5.5"], ["9"], ["9", "zQ-"]]}, {"EndTime": 1552292140.3983748, "FinalMinimizedSolution": ["3", "3"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["3", "3"], "StartTime": 1552292139.1537843, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["5.5"], ["2"], ["2", "J2n"], ["5.5"], ["7"], ["7", "a-1"], ["5.5"], ["9"], ["9", "zQ-"], ["5.5"], ["7 3sb"], ["3"]]}, {"EndTime": 1552292141.4540093, "FinalMinimizedSolution": ["5", "2"], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["5", "2"], "StartTime": 1552292140.398613, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["5.5"], ["2"], ["2", "J2n"], ["5.5"], ["7"], ["7", "a-1"], ["5.5"], ["9"], ["9", "zQ-"], ["5.5"], ["7 3sb"], ["3"], ["5.5"], ["xvz", "2"]]}]], [{"CorrectInputs": [[["1 2 2 3 3 3 "], 1543281204]], "UniqueId": "ead94951-b6ee-49ad-f605-fc3535235111_0", "CoverageInfo": [27, 7, 12, 3, 74, "19-21,", "29-30,", "34-35,", "28->29,", "33->34,", "44->exit"], "TimeStamp": 1543281223, "BadInput": ["1 2 2 3 3 3 4 5"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 51, in <module>\n    print (\"{} occurs {} time\".format(    unique_list[y],count))\nIndexError: list index out of range\n", "ip": "206.169.197.162"}, [{"EndTime": 1552290019.4595997, "FinalMinimizedSolution": [], "FinalCoverage": [27, 20, 12, 0, 18, "18,", "24-51"], "FinalSolution": [], "StartTime": 1552290017.0869844, "FoundSolution": true, "NumProbesMade": 10, "InputHistory": [["1 2 2 3 3 3 4 5"], ["1", "2", "2", "3", "3", "3", "4", "5"], ["1", "2", "2", "3", "3", "3,5", "3", "4", "5"], ["1", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "G5W", "4", "5"], ["1", " ", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", " ", " ", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", " ", " ", "2", "2", "3", "", "3,5", "3", "4", "5"], ["1", " \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", " ", "2", "2", "3", "", "3,5", "3", "4", "5"], ["1", " \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", " ", "2", "2", "3", "", "3,5", "3", "4", "\"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "5"]]}, {"EndTime": 1552290019.580461, "FinalMinimizedSolution": [], "FinalCoverage": null, "FinalSolution": ["1 1.1 2.2 3.3 4.4 2 3 3 3 4 5"], "StartTime": 1552290019.4599442, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 2 2 3 3 3 4 5"], ["1", "2", "2", "3", "3", "3", "4", "5"], ["1", "2", "2", "3", "3", "3,5", "3", "4", "5"], ["1", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "G5W", "4", "5"], ["1", " ", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", " ", " ", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", " ", " ", "2", "2", "3", "", "3,5", "3", "4", "5"], ["1", " \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", " ", "2", "2", "3", "", "3,5", "3", "4", "5"], ["1", " \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", " ", "2", "2", "3", "", "3,5", "3", "4", "\"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "5"], ["1 2 2 3 3 3 4 5"]]}, {"EndTime": 1552290022.126706, "FinalMinimizedSolution": [], "FinalCoverage": [27, 20, 12, 0, 18, "18,", "24-51"], "FinalSolution": ["KjW"], "StartTime": 1552290019.58078, "FoundSolution": true, "NumProbesMade": 11, "InputHistory": [["1 2 2 3 3 3 4 5"], ["1", "2", "2", "3", "3", "3", "4", "5"], ["1", "2", "2", "3", "3", "3,5", "3", "4", "5"], ["1", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "G5W", "4", "5"], ["1", " ", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", " ", " ", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", " ", " ", "2", "2", "3", "", "3,5", "3", "4", "5"], ["1", " \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", " ", "2", "2", "3", "", "3,5", "3", "4", "5"], ["1", " \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", " ", "2", "2", "3", "", "3,5", "3", "4", "\"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "5"], ["1 2 2 3 3 3 4 5"], ["1 2 2 3 3 3 4 5"], ["1 2 2 3 3 10 5 4 5"], ["1 2 2 3 3 10 5 2 5"], ["1", "2", "2", "3", "3", "10", "5", "2", "5"], ["1", "2", "2", "3", "3", "a", "10", "5", "2", "5"], ["1", "2", "2", "3", "5", "3", "a", "10", "5", "2", "5"], ["1", "2", "2", "3", "5", "3", "a", "10", "5", "2", "17", "5"], ["1", "2", "3", "5", "3", "a", "10", "5", "2", "17", "5"], ["1", "1", "2", "3", "5", "3", "a", "10", "5", "2", "17", "5"], ["1", "1", "2", "3", "5", "3", "10", "5", "2", "17", "5"], ["1", "1", "2", "3", "5", "3", "10", "5", "2", "17", " ", "5"]]}, {"EndTime": 1552290022.85831, "FinalMinimizedSolution": [], "FinalCoverage": [27, 20, 12, 0, 18, "18,", "24-51"], "FinalSolution": ["1 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\" 2 3 3 3 4 5"], "StartTime": 1552290022.1272871, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 2 2 3 3 3 4 5"], ["1", "2", "2", "3", "3", "3", "4", "5"], ["1", "2", "2", "3", "3", "3,5", "3", "4", "5"], ["1", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "G5W", "4", "5"], ["1", " ", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", " ", " ", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", " ", " ", "2", "2", "3", "", "3,5", "3", "4", "5"], ["1", " \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", " ", "2", "2", "3", "", "3,5", "3", "4", "5"], ["1", " \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", " ", "2", "2", "3", "", "3,5", "3", "4", "\"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "5"], ["1 2 2 3 3 3 4 5"], ["1 2 2 3 3 3 4 5"], ["1 2 2 3 3 10 5 4 5"], ["1 2 2 3 3 10 5 2 5"], ["1", "2", "2", "3", "3", "10", "5", "2", "5"], ["1", "2", "2", "3", "3", "a", "10", "5", "2", "5"], ["1", "2", "2", "3", "5", "3", "a", "10", "5", "2", "5"], ["1", "2", "2", "3", "5", "3", "a", "10", "5", "2", "17", "5"], ["1", "2", "3", "5", "3", "a", "10", "5", "2", "17", "5"], ["1", "1", "2", "3", "5", "3", "a", "10", "5", "2", "17", "5"], ["1", "1", "2", "3", "5", "3", "10", "5", "2", "17", "5"], ["1", "1", "2", "3", "5", "3", "10", "5", "2", "17", " ", "5"], ["1 2 2 3 3 3 4 5"]]}, {"EndTime": 1552290022.973357, "FinalMinimizedSolution": [], "FinalCoverage": null, "FinalSolution": [""], "StartTime": 1552290022.8588934, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 2 2 3 3 3 4 5"], ["1", "2", "2", "3", "3", "3", "4", "5"], ["1", "2", "2", "3", "3", "3,5", "3", "4", "5"], ["1", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "G5W", "4", "5"], ["1", " ", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", " ", " ", "2", "2", "3", "3 \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "3,5", "3", "4", "5"], ["1", " ", " ", "2", "2", "3", "", "3,5", "3", "4", "5"], ["1", " \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", " ", "2", "2", "3", "", "3,5", "3", "4", "5"], ["1", " \"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", " ", "2", "2", "3", "", "3,5", "3", "4", "\"\"\nName: Diego Zambrano \nEmail: DZ0418@bu.edu\nClass: MET CS 521 O2\nDate: 11/25/2019\nHomework Problem # 4 10.3\nDescription of Problem:  \nprogram that reads some integers between 1 and 100 and counts the occurrences \nof each. \n\"\"", "5"], ["1 2 2 3 3 3 4 5"], ["1 2 2 3 3 3 4 5"], ["1 2 2 3 3 10 5 4 5"], ["1 2 2 3 3 10 5 2 5"], ["1", "2", "2", "3", "3", "10", "5", "2", "5"], ["1", "2", "2", "3", "3", "a", "10", "5", "2", "5"], ["1", "2", "2", "3", "5", "3", "a", "10", "5", "2", "5"], ["1", "2", "2", "3", "5", "3", "a", "10", "5", "2", "17", "5"], ["1", "2", "3", "5", "3", "a", "10", "5", "2", "17", "5"], ["1", "1", "2", "3", "5", "3", "a", "10", "5", "2", "17", "5"], ["1", "1", "2", "3", "5", "3", "10", "5", "2", "17", "5"], ["1", "1", "2", "3", "5", "3", "10", "5", "2", "17", " ", "5"], ["1 2 2 3 3 3 4 5"], ["1 2 2 3 3 3 4 5"]]}]], [{"CorrectInputs": [[["r\u00e9animation"], 1539827942], [["r\u00e9novations"], 1539872047]], "UniqueId": "8d436fc3-ac95-48c7-fbd3-0152d71caa06_0", "CoverageInfo": [24, 3, 10, 2, 85, "18,", "23-24,", "17->18,", "22->23"], "TimeStamp": 1539871999, "BadInput": ["r\u00e9novation"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 22, in <module>\n    if prop[i] == deviner[i] and lettres[prop[i]] > 0:\nIndexError: string index out of range\n", "ip": "90.5.108.153"}, [{"EndTime": 1552414874.636686, "FinalMinimizedSolution": ["r\u00e9novation pollution"], "FinalCoverage": null, "FinalSolution": ["r\u00e9novation pollution"], "StartTime": 1552414873.6602774, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["r\u00e9novation"]]}, {"EndTime": 1552414875.5120625, "FinalMinimizedSolution": ["1 2 3 4 5 pollution"], "FinalCoverage": [24, 5, 10, 3, 76, "18,", "23-24,", "26-27,", "17->18,", "22->23,", "25->26"], "FinalSolution": ["1 2 3 4 5 pollution"], "StartTime": 1552414874.636831, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["r\u00e9novation"], ["r\u00e9novation"]]}, {"EndTime": 1552414876.5756626, "FinalMinimizedSolution": ["indon\u00e9sienne"], "FinalCoverage": [24, 3, 10, 2, 85, "18,", "23-24,", "17->18,", "22->23"], "FinalSolution": ["indon\u00e9sienne"], "StartTime": 1552414875.5122483, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["r\u00e9novation"], ["r\u00e9novation"], ["r\u00e9novation"], []]}, {"EndTime": 1552414877.8847525, "FinalMinimizedSolution": ["-94 tropical"], "FinalCoverage": [24, 3, 10, 2, 85, "18,", "23-24,", "17->18,", "22->23"], "FinalSolution": ["-94 tropical", "02-"], "StartTime": 1552414876.575861, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["r\u00e9novation"], ["r\u00e9novation"], ["r\u00e9novation"], [], ["r\u00e9novation"], ["02-"], ["-94", "02-"]]}, {"EndTime": 1552414879.5727994, "FinalMinimizedSolution": ["r\u00e9alisation"], "FinalCoverage": [24, 1, 10, 1, 94, "18,", "17->18"], "FinalSolution": ["r\u00e9alisation", "QT2"], "StartTime": 1552414877.8849783, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["r\u00e9novation"], ["r\u00e9novation"], ["r\u00e9novation"], [], ["r\u00e9novation"], ["02-"], ["-94", "02-"], ["r\u00e9novation"], ["B9V"], ["9uB", "B9V"], ["9uB", "oWN", "B9V"], ["QT2"]]}]], [{"CorrectInputs": [[["1", "2.5", "2", " "], 1533313723]], "UniqueId": "12b4ca97-a526-45ac-d946-f48c2b487f84_0", "CoverageInfo": [9, 3, 4, 2, 62, "7,", "9-11,", "4->11,", "6->7"], "TimeStamp": 1533314175, "BadInput": ["\u201c2.5\u201d"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 8, in <module>\n    sum += float(enter)\nValueError: could not convert string to float: '\u201c2.5\u201d'\n", "ip": "203.219.66.146"}, [{"EndTime": 1552421819.924076, "FinalMinimizedSolution": ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4", "3.9", "6.4", " "], "FinalCoverage": [9, 0, 4, 1, 92, "4->11"], "FinalSolution": ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4", "3.9", "6.4", " "], "StartTime": 1552421816.9306355, "FoundSolution": true, "NumProbesMade": 24, "InputHistory": [["\u201c2.5\u201d"], ["6.4"], ["6.4", "6.4"], ["6.4", "6.4", "\u201c2.5\u201d"], ["6.4", "6.4", "3.9"], ["6.4", "6.4", "3.9", "6.4"], ["6.4", "6.4", "3.9", "6.4", "\u201c2.5\u201d"], ["6.4", "6.4", "3.9", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4", "3.9"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4", "3.9", "6.4"]]}, {"EndTime": 1552421822.2876894, "FinalMinimizedSolution": ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", " "], "FinalCoverage": [9, 0, 4, 1, 92, "4->11"], "FinalSolution": ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", " "], "StartTime": 1552421819.9248006, "FoundSolution": true, "NumProbesMade": 19, "InputHistory": [["\u201c2.5\u201d"], ["6.4"], ["6.4", "6.4"], ["6.4", "6.4", "\u201c2.5\u201d"], ["6.4", "6.4", "3.9"], ["6.4", "6.4", "3.9", "6.4"], ["6.4", "6.4", "3.9", "6.4", "\u201c2.5\u201d"], ["6.4", "6.4", "3.9", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4", "3.9"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4", "3.9", "6.4"], ["\u201c2.5\u201d"], ["7.1"], ["7.1", "zX2"], ["7.1", "0.9"], ["7.1", "0.9", "\u201c2.5\u201d"], ["7.1", "0.9", "7.7"], ["7.1", "0.9", "7.7", "\u201c2.5\u201d"], ["7.1", "0.9", "7.7", "10.3"], ["7.1", "0.9", "7.7", "10.3", "\u201c2.5\u201d"], ["7.1", "0.9", "7.7", "10.3", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1"]]}, {"EndTime": 1552421828.796974, "FinalMinimizedSolution": ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10", "5.6", "4.6", "3.10", " "], "FinalCoverage": [9, 0, 4, 1, 92, "4->11"], "FinalSolution": ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10", "5.6", "4.6", "3.10", " "], "StartTime": 1552421822.2885652, "FoundSolution": true, "NumProbesMade": 57, "InputHistory": [["\u201c2.5\u201d"], ["6.4"], ["6.4", "6.4"], ["6.4", "6.4", "\u201c2.5\u201d"], ["6.4", "6.4", "3.9"], ["6.4", "6.4", "3.9", "6.4"], ["6.4", "6.4", "3.9", "6.4", "\u201c2.5\u201d"], ["6.4", "6.4", "3.9", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4", "3.9"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4", "3.9", "6.4"], ["\u201c2.5\u201d"], ["7.1"], ["7.1", "zX2"], ["7.1", "0.9"], ["7.1", "0.9", "\u201c2.5\u201d"], ["7.1", "0.9", "7.7"], ["7.1", "0.9", "7.7", "\u201c2.5\u201d"], ["7.1", "0.9", "7.7", "10.3"], ["7.1", "0.9", "7.7", "10.3", "\u201c2.5\u201d"], ["7.1", "0.9", "7.7", "10.3", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["\u201c2.5\u201d"], ["4.9"], ["4.9", "\u201c2.5\u201d"], ["4.9", "-1.5"], ["4.9", "-1.5", "2Uf"], ["4.9", "-1.5", "3.10"], ["4.9", "-1.5", "3.10", "OM5"], ["4.9", "-1.5", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "\u201c2.5\u201d"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "\u201c2.5\u201d"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "\u201c2.5\u201d"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10", "5.6", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10", "5.6", "4.6", "3.10"]]}, {"EndTime": 1552421829.5651429, "FinalMinimizedSolution": ["8.8", "8.8", " "], "FinalCoverage": [9, 0, 4, 1, 92, "4->11"], "FinalSolution": ["8.8", "8.8", " "], "StartTime": 1552421828.7987523, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["\u201c2.5\u201d"], ["6.4"], ["6.4", "6.4"], ["6.4", "6.4", "\u201c2.5\u201d"], ["6.4", "6.4", "3.9"], ["6.4", "6.4", "3.9", "6.4"], ["6.4", "6.4", "3.9", "6.4", "\u201c2.5\u201d"], ["6.4", "6.4", "3.9", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4", "3.9"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4", "3.9", "6.4"], ["\u201c2.5\u201d"], ["7.1"], ["7.1", "zX2"], ["7.1", "0.9"], ["7.1", "0.9", "\u201c2.5\u201d"], ["7.1", "0.9", "7.7"], ["7.1", "0.9", "7.7", "\u201c2.5\u201d"], ["7.1", "0.9", "7.7", "10.3"], ["7.1", "0.9", "7.7", "10.3", "\u201c2.5\u201d"], ["7.1", "0.9", "7.7", "10.3", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["\u201c2.5\u201d"], ["4.9"], ["4.9", "\u201c2.5\u201d"], ["4.9", "-1.5"], ["4.9", "-1.5", "2Uf"], ["4.9", "-1.5", "3.10"], ["4.9", "-1.5", "3.10", "OM5"], ["4.9", "-1.5", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "\u201c2.5\u201d"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "\u201c2.5\u201d"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "\u201c2.5\u201d"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10", "5.6", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10", "5.6", "4.6", "3.10"], ["\u201c2.5\u201d"], ["8.8"], ["8.8", "\u201c2.5\u201d"], ["8.8", "8.8"]]}, {"InputHistory": [["\u201c2.5\u201d"], ["6.4"], ["6.4", "6.4"], ["6.4", "6.4", "\u201c2.5\u201d"], ["6.4", "6.4", "3.9"], ["6.4", "6.4", "3.9", "6.4"], ["6.4", "6.4", "3.9", "6.4", "\u201c2.5\u201d"], ["6.4", "6.4", "3.9", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4", "3.9"], ["6.4", "6.4", "3.9", "6.4", "1.0", "6.4", "6.4", "1.0", "1.0", "6.4", "6.4", "6.4", "1.0", "3.9", "6.4", "6.4", "6.4", "1.0", "6.4", "3.9", "6.4"], ["\u201c2.5\u201d"], ["7.1"], ["7.1", "zX2"], ["7.1", "0.9"], ["7.1", "0.9", "\u201c2.5\u201d"], ["7.1", "0.9", "7.7"], ["7.1", "0.9", "7.7", "\u201c2.5\u201d"], ["7.1", "0.9", "7.7", "10.3"], ["7.1", "0.9", "7.7", "10.3", "\u201c2.5\u201d"], ["7.1", "0.9", "7.7", "10.3", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["7.1", "0.9", "7.7", "10.3", "9.1", "7.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1", "9.1"], ["\u201c2.5\u201d"], ["4.9"], ["4.9", "\u201c2.5\u201d"], ["4.9", "-1.5"], ["4.9", "-1.5", "2Uf"], ["4.9", "-1.5", "3.10"], ["4.9", "-1.5", "3.10", "OM5"], ["4.9", "-1.5", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "\u201c2.5\u201d"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "\u201c2.5\u201d"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "\u201c2.5\u201d"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10", "5.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10", "5.6", "4.6"], ["4.9", "-1.5", "3.10", "5.6", "-1.5", "4.9", "3.10", "4.6", "4.6", "4.6", "4.9", "3.10", "5.6", "5.6", "5.6", "3.10", "4.6", "-1.5", "5.6", "3.10", "3.8", "3.10", "4.6", "5.6", "3.10", "5.6", "3.10", "3.4", "-1.5", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "5.6", "3.10", "5.6", "5.6", "3.10", "5.6", "5.6", "5.6", "3.10", "3.10", "5.6", "4.6", "3.10"], ["\u201c2.5\u201d"], ["8.8"], ["8.8", "\u201c2.5\u201d"], ["8.8", "8.8"], ["\u201c2.5\u201d"], ["9.10"], ["9.10", "\u201c2.5\u201d"], ["9.10", "6.9"], ["9.10", "6.9", "9.10"], ["9.10", "6.9", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "pjC"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "\u201c2.5\u201d"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0", "9.10", "9.10", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "6.9"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "6.9", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10"], ["9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "9.10", "9.10", "9.10", "-1.5", "9.10", "10.0", "9.10", "9.10", "10.0", "9.10", "9.10", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10", "6.9", "9.10", "9.10", "9.10"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552421835.8142576, "StartTime": 1552421829.5668328}]], [{"CorrectInputs": [[["4", "3 4 5", "4 5 3", "1 1 1", "5 3 4"], 1538663532], [["5", "100 100 100", "73 82 91", "73 50 64", "14 18 15", "28 19 21"], 1538663730]], "UniqueId": "ad4f2193-fa5b-42b1-9752-1dee5789cbfc_0", "CoverageInfo": [18, 11, 4, 1, 36, "14-34,", "11->24"], "TimeStamp": 1538663816, "BadInput": ["5", "7.5 6.3 7.0"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    b,c,d=map(int,input().split())\nValueError: invalid literal for int() with base 10: '7.5'\n", "ip": "185.138.131.203"}, [{"EndTime": 1552272439.2255106, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [18, 11, 4, 2, 41, "12-22,", "26-34,", "11->12,", "24->26"], "FinalSolution": ["-1", "", "1 4 4", " "], "StartTime": 1552272435.9411898, "FoundSolution": true, "NumProbesMade": 13, "InputHistory": [["5", "7.5 6.3 7.0"], ["5", "4 6.3 7.0"], ["5", "4 9 7.0"], ["5", "4 9 9"], ["5", "4 9 9", "7.5 6.3 7.0"], ["5", "4 9 9", "1 6.3 7.0"], ["5", "4 9 9", "1 4 7.0"], ["5", "4 9 9", "1 4 4"], ["5", "4 9 9", "1 4 4", " "], ["5", "4 9 NvZ", "1 4 4", " "], ["5", "4 9 4", "1 4 4", " "], ["5", "", "1 4 4", " "], ["5 3zw", "", "1 4 4", " "]]}, {"EndTime": 1552272442.9567356, "FinalMinimizedSolution": ["5", "9 9 7", "0 8 8", "5 5 5", "5 5 5", "5 5 5"], "FinalCoverage": [18, 0, 4, 0, 100], "FinalSolution": ["5", "9 9 7", "0 8 8", "5 5 5", "5 5 5", "5 5 5"], "StartTime": 1552272439.2258549, "FoundSolution": true, "NumProbesMade": 19, "InputHistory": [["5", "7.5 6.3 7.0"], ["5", "4 6.3 7.0"], ["5", "4 9 7.0"], ["5", "4 9 9"], ["5", "4 9 9", "7.5 6.3 7.0"], ["5", "4 9 9", "1 6.3 7.0"], ["5", "4 9 9", "1 4 7.0"], ["5", "4 9 9", "1 4 4"], ["5", "4 9 9", "1 4 4", " "], ["5", "4 9 NvZ", "1 4 4", " "], ["5", "4 9 4", "1 4 4", " "], ["5", "", "1 4 4", " "], ["5 3zw", "", "1 4 4", " "], ["5", "7.5 6.3 7.0"], ["5", "9 6.3 7.0"], ["5", "9 9 7.0"], ["5", "9 9 7"], ["5", "9 9 7", "7.5 6.3 7.0"], ["5", "9 9 7", "6 6.3 7.0"], ["5", "9 9 7", "6 -1 7.0"], ["5", "9 9 7", "6 -1 8"], ["5", "9 9 7", "6 ABCDabcd 8"], ["5", "9 9 7", "6 0 8"], ["5", "9 9 7", "43 0 8"], ["5", "9 9 7", "  0 8"], ["5", "9 9 7", "0 8 8"], ["5", "9 9 7", "0 8 8", "5"], ["5", "9 9 7", "0 8 8", "5 5"], ["5", "9 9 7", "0 8 8", "5 5 5"], ["5", "9 9 7", "0 8 8", "5 5 5", "5"], ["5", "9 9 7", "0 8 8", "5 5 5", "5 5"], ["5", "9 9 7", "0 8 8", "5 5 5", "5 5 5"]]}, {"EndTime": 1552272445.0558236, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [18, 11, 4, 2, 41, "12-22,", "26-34,", "11->12,", "24->26"], "FinalSolution": ["-1", "5", "3279-1"], "StartTime": 1552272442.9572976, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["5", "7.5 6.3 7.0"], ["5", "4 6.3 7.0"], ["5", "4 9 7.0"], ["5", "4 9 9"], ["5", "4 9 9", "7.5 6.3 7.0"], ["5", "4 9 9", "1 6.3 7.0"], ["5", "4 9 9", "1 4 7.0"], ["5", "4 9 9", "1 4 4"], ["5", "4 9 9", "1 4 4", " "], ["5", "4 9 NvZ", "1 4 4", " "], ["5", "4 9 4", "1 4 4", " "], ["5", "", "1 4 4", " "], ["5 3zw", "", "1 4 4", " "], ["5", "7.5 6.3 7.0"], ["5", "9 6.3 7.0"], ["5", "9 9 7.0"], ["5", "9 9 7"], ["5", "9 9 7", "7.5 6.3 7.0"], ["5", "9 9 7", "6 6.3 7.0"], ["5", "9 9 7", "6 -1 7.0"], ["5", "9 9 7", "6 -1 8"], ["5", "9 9 7", "6 ABCDabcd 8"], ["5", "9 9 7", "6 0 8"], ["5", "9 9 7", "43 0 8"], ["5", "9 9 7", "  0 8"], ["5", "9 9 7", "0 8 8"], ["5", "9 9 7", "0 8 8", "5"], ["5", "9 9 7", "0 8 8", "5 5"], ["5", "9 9 7", "0 8 8", "5 5 5"], ["5", "9 9 7", "0 8 8", "5 5 5", "5"], ["5", "9 9 7", "0 8 8", "5 5 5", "5 5"], ["5", "9 9 7", "0 8 8", "5 5 5", "5 5 5"], ["5", "7.5 6.3 7.0"], ["5", "3 6.3 7.0"], ["5", "3 7 7.0"], ["5", "3 7 -1"], [" ", "5", "3 7 -1"], [" ", "5", "3 79-1"], [" ", "5", "3279-1"]]}, {"EndTime": 1552272447.5333698, "FinalMinimizedSolution": ["0"], "FinalCoverage": [18, 11, 4, 2, 41, "12-22,", "26-34,", "11->12,", "24->26"], "FinalSolution": ["0", "5", "5 -1 8"], "StartTime": 1552272445.056381, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["5", "7.5 6.3 7.0"], ["5", "4 6.3 7.0"], ["5", "4 9 7.0"], ["5", "4 9 9"], ["5", "4 9 9", "7.5 6.3 7.0"], ["5", "4 9 9", "1 6.3 7.0"], ["5", "4 9 9", "1 4 7.0"], ["5", "4 9 9", "1 4 4"], ["5", "4 9 9", "1 4 4", " "], ["5", "4 9 NvZ", "1 4 4", " "], ["5", "4 9 4", "1 4 4", " "], ["5", "", "1 4 4", " "], ["5 3zw", "", "1 4 4", " "], ["5", "7.5 6.3 7.0"], ["5", "9 6.3 7.0"], ["5", "9 9 7.0"], ["5", "9 9 7"], ["5", "9 9 7", "7.5 6.3 7.0"], ["5", "9 9 7", "6 6.3 7.0"], ["5", "9 9 7", "6 -1 7.0"], ["5", "9 9 7", "6 -1 8"], ["5", "9 9 7", "6 ABCDabcd 8"], ["5", "9 9 7", "6 0 8"], ["5", "9 9 7", "43 0 8"], ["5", "9 9 7", "  0 8"], ["5", "9 9 7", "0 8 8"], ["5", "9 9 7", "0 8 8", "5"], ["5", "9 9 7", "0 8 8", "5 5"], ["5", "9 9 7", "0 8 8", "5 5 5"], ["5", "9 9 7", "0 8 8", "5 5 5", "5"], ["5", "9 9 7", "0 8 8", "5 5 5", "5 5"], ["5", "9 9 7", "0 8 8", "5 5 5", "5 5 5"], ["5", "7.5 6.3 7.0"], ["5", "3 6.3 7.0"], ["5", "3 7 7.0"], ["5", "3 7 -1"], [" ", "5", "3 7 -1"], [" ", "5", "3 79-1"], [" ", "5", "3279-1"], ["5", "7.5 6.3 7.0"], ["5", "1 6.3 7.0"], ["5", "1 5 7.0"], ["5", "1 5 8"], ["5", "1 5 8 5 8"], ["5", "1 5 8 5"], ["5", "1 Hello_World! 8"], ["5", "1 -1 8"], ["5", "5 -1 8"]]}, {"EndTime": 1552272448.5850077, "FinalMinimizedSolution": ["0"], "FinalCoverage": [18, 11, 4, 2, 41, "12-22,", "26-34,", "11->12,", "24->26"], "FinalSolution": ["0"], "StartTime": 1552272447.5340014, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["5", "7.5 6.3 7.0"], ["5", "4 6.3 7.0"], ["5", "4 9 7.0"], ["5", "4 9 9"], ["5", "4 9 9", "7.5 6.3 7.0"], ["5", "4 9 9", "1 6.3 7.0"], ["5", "4 9 9", "1 4 7.0"], ["5", "4 9 9", "1 4 4"], ["5", "4 9 9", "1 4 4", " "], ["5", "4 9 NvZ", "1 4 4", " "], ["5", "4 9 4", "1 4 4", " "], ["5", "", "1 4 4", " "], ["5 3zw", "", "1 4 4", " "], ["5", "7.5 6.3 7.0"], ["5", "9 6.3 7.0"], ["5", "9 9 7.0"], ["5", "9 9 7"], ["5", "9 9 7", "7.5 6.3 7.0"], ["5", "9 9 7", "6 6.3 7.0"], ["5", "9 9 7", "6 -1 7.0"], ["5", "9 9 7", "6 -1 8"], ["5", "9 9 7", "6 ABCDabcd 8"], ["5", "9 9 7", "6 0 8"], ["5", "9 9 7", "43 0 8"], ["5", "9 9 7", "  0 8"], ["5", "9 9 7", "0 8 8"], ["5", "9 9 7", "0 8 8", "5"], ["5", "9 9 7", "0 8 8", "5 5"], ["5", "9 9 7", "0 8 8", "5 5 5"], ["5", "9 9 7", "0 8 8", "5 5 5", "5"], ["5", "9 9 7", "0 8 8", "5 5 5", "5 5"], ["5", "9 9 7", "0 8 8", "5 5 5", "5 5 5"], ["5", "7.5 6.3 7.0"], ["5", "3 6.3 7.0"], ["5", "3 7 7.0"], ["5", "3 7 -1"], [" ", "5", "3 7 -1"], [" ", "5", "3 79-1"], [" ", "5", "3279-1"], ["5", "7.5 6.3 7.0"], ["5", "1 6.3 7.0"], ["5", "1 5 7.0"], ["5", "1 5 8"], ["5", "1 5 8 5 8"], ["5", "1 5 8 5"], ["5", "1 Hello_World! 8"], ["5", "1 -1 8"], ["5", "5 -1 8"], ["5", "7.5 6.3 7.0"], ["4 6.3 7.0"]]}]], [{"CorrectInputs": [[[""], 1525682972]], "UniqueId": "3771bf24-9fcd-4138-9cc1-95c18199b100_0", "CoverageInfo": [13, 4, 10, 5, 61, "7,", "9,", "11,", "13,", "3->13,", "4->6,", "6->7,", "8->9,", "10->11"], "TimeStamp": 1525682985, "BadInput": ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    s1=s1+n+g+l+a\nNameError: name 'g' is not defined\n", "ip": "185.138.131.204"}, [{"EndTime": 1552343604.6663408, "FinalMinimizedSolution": [], "FinalCoverage": [13, 9, 10, 1, 22, "4-12,", "3->4"], "FinalSolution": [], "StartTime": 1552343603.9909785, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"]]}, {"EndTime": 1552343606.7226207, "FinalMinimizedSolution": [], "FinalCoverage": [13, 9, 10, 1, 22, "4-12,", "3->4"], "FinalSolution": [""], "StartTime": 1552343604.6665058, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0431", "\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430", "\u0431", "\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430", "\u0431", "\u0431", "\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["3SI"], ["1", "3SI"], ["3SI \u0410"]]}, {"EndTime": 1552343617.7424023, "FinalMinimizedSolution": [], "FinalCoverage": [13, 9, 10, 1, 22, "4-12,", "3->4"], "FinalSolution": ["", "\u0411"], "StartTime": 1552343606.7228687, "FoundSolution": true, "NumProbesMade": 59, "InputHistory": [["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0431", "\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430", "\u0431", "\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430", "\u0431", "\u0431", "\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["3SI"], ["1", "3SI"], ["3SI \u0410"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 \u0431"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 7"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421", "7"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421", "7 \u0411"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421", "7", "\u0411"], ["56x"], ["50", "56x"], ["56x u8z"], ["56x", "u8z"], ["56x", "\u0430", "u8z"], ["\u0410", "56x", "\u0430", "u8z"], ["aaa", "\u0410", "56x", "\u0430", "u8z"], ["aaa", "\u0410", "56x", "\u0430"], ["aaa", "\u0410", "\u0430", "56x", "\u0430"], ["aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "D", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "D", "1,5", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430", "D", "1,5", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430", "D", "1,5", "1.5", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430", "D 1mo", "1,5", "1.5", "\u0430"], ["95-"], ["\u0431", "95-"], ["\u0431", "\u0431", "95-"], ["ddL", "\u0431", "\u0431", "95-"], ["ddL", "\u0431", "95-"], ["ddL", "banana", "\u0431", "95-"], ["ddL", "\u0430", "banana", "\u0431", "95-"], ["ddL", "\u0430", "\u0431", "95-"], ["ddL", "\u0430", "95-"], ["ddL", "\u0430", "17", "95-"], ["ddL", "\u0430", "nathan rezende", "17", "95-"], ["ddL", "\u0430", "nathan rezende", "17", "tLW", "95-"], ["ddL", "\u0430", "nathan \u0430", "17", "tLW", "95-"], ["ddL", "25M", "\u0430", "nathan \u0430", "17", "tLW", "95-"], ["ddL", "25M", "\u0430", "nathan 27500", "17", "tLW", "95-"], ["ddL", "25M", "\u0430", "nathan 27500", "17", "qsd", "tLW", "95-"], ["ddL", "\u0430", "nathan 27500", "17", "qsd", "tLW", "95-"], ["ddL", "tLW", "\u0430", "nathan 27500", "17", "qsd", "tLW", "95-"], ["ddL", "tLW", "\u0430", "nathan 27500", "nathan 27500", "17", "qsd", "tLW", "95-"], ["W-h"], ["\u0431", "W-h"], ["\u0431", "W-h kvc"], ["\u0431", "194 kvc"], ["\u0411"], ["\u0411 \u0411"], ["8AF \u0411"], ["8AF ZK-"], ["8AF", "ZK-"], ["KqT"], ["\u0431"], ["\u0431 \u0410"], ["\u0431", "\u0410"], ["\u0431 \u0411"], ["\u0431 \u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], [" \u0431"], [" \u0410"], [" \u0411"]]}, {"InputHistory": [["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0431", "\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430", "\u0431", "\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430", "\u0431", "\u0431", "\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["3SI"], ["1", "3SI"], ["3SI \u0410"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 \u0431"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 7"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421", "7"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421", "7 \u0411"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421", "7", "\u0411"], ["56x"], ["50", "56x"], ["56x u8z"], ["56x", "u8z"], ["56x", "\u0430", "u8z"], ["\u0410", "56x", "\u0430", "u8z"], ["aaa", "\u0410", "56x", "\u0430", "u8z"], ["aaa", "\u0410", "56x", "\u0430"], ["aaa", "\u0410", "\u0430", "56x", "\u0430"], ["aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "D", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "D", "1,5", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430", "D", "1,5", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430", "D", "1,5", "1.5", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430", "D 1mo", "1,5", "1.5", "\u0430"], ["95-"], ["\u0431", "95-"], ["\u0431", "\u0431", "95-"], ["ddL", "\u0431", "\u0431", "95-"], ["ddL", "\u0431", "95-"], ["ddL", "banana", "\u0431", "95-"], ["ddL", "\u0430", "banana", "\u0431", "95-"], ["ddL", "\u0430", "\u0431", "95-"], ["ddL", "\u0430", "95-"], ["ddL", "\u0430", "17", "95-"], ["ddL", "\u0430", "nathan rezende", "17", "95-"], ["ddL", "\u0430", "nathan rezende", "17", "tLW", "95-"], ["ddL", "\u0430", "nathan \u0430", "17", "tLW", "95-"], ["ddL", "25M", "\u0430", "nathan \u0430", "17", "tLW", "95-"], ["ddL", "25M", "\u0430", "nathan 27500", "17", "tLW", "95-"], ["ddL", "25M", "\u0430", "nathan 27500", "17", "qsd", "tLW", "95-"], ["ddL", "\u0430", "nathan 27500", "17", "qsd", "tLW", "95-"], ["ddL", "tLW", "\u0430", "nathan 27500", "17", "qsd", "tLW", "95-"], ["ddL", "tLW", "\u0430", "nathan 27500", "nathan 27500", "17", "qsd", "tLW", "95-"], ["W-h"], ["\u0431", "W-h"], ["\u0431", "W-h kvc"], ["\u0431", "194 kvc"], ["\u0411"], ["\u0411 \u0411"], ["8AF \u0411"], ["8AF ZK-"], ["8AF", "ZK-"], ["KqT"], ["\u0431"], ["\u0431 \u0410"], ["\u0431", "\u0410"], ["\u0431 \u0411"], ["\u0431 \u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], [" \u0431"], [" \u0410"], [" \u0411"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 \u0430"], ["\u0430", ""], ["\u0430", "\u0430", ""], ["\u0431", ""], ["JpH"], ["\u0410", "JpH"], ["\u0410", "- 6", "JpH"], ["\u0410 \u0411", "- 6", "JpH"], ["\u0410 \u0411 \u0411", "- 6", "JpH"], ["\u0410 \u0411 \u0411", "- \u0430", "JpH"], ["\u0410 \u0411 \u0411", "", "JpH"], ["\u0410 \u0411 \u0411", "10^-5", "", "JpH"], ["\u0410 \u0411 \u0411", "2 2 8", "10^-5", "", "JpH"], ["\u0410 \u0411 5Nl", "2 2 8", "10^-5", "", "JpH"], ["\u0410 \u0411 5Nl", "2 2 8", "\u0411", "10^-5", "", "JpH"], ["\u0410 \u0411 5Nl", "2", "2", "8", "\u0411", "10^-5", "", "JpH"], ["\u0410 \u0411 5Nl", "2", "2", "\u0411", "10^-5", "", "JpH"], ["\u0410 \u0411 5Nl", "2", "2", "\u0411", "10^-5", "iA1", "", "JpH"], ["\u0410 \u0411 5Nl", "2", "2", "\u0411", "10^-5", "iA1 5ne", "", "JpH"], ["\u0410 \u0411 5Nl", "2", "2", "\u0411", "10^-5", "", "", "JpH"], ["\u0410 \u0411 5Nl", "2", "2", "2", "\u0411", "10^-5", "", "", "JpH"], ["\u0410 -1. 5Nl", "2", "2", "2", "\u0411", "10^-5", "", "", "JpH"], ["\u0410 -1. 5Nl", "2", "2", "2", "\u0411", "JpH", "10^-5", "", "", "JpH"], ["\u0410", "-1.", "5Nl", "2", "2", "2", "\u0411", "JpH", "10^-5", "", "", "JpH"], ["\u0430"], ["\u0410"], ["\u0410", "\u0410"], ["ZW-", "\u0410"], ["0t1"], ["Vz-"], ["Vz- \u0430"], ["Vz- \u0410"], ["Vz- \u0411"], ["10 \u0411"], ["10 1,2,3"], ["10 \u0431"], ["\u0430 \u0431"], ["\u0430 df;2;er;5"], ["x^9 df;2;er;5"], ["x^9 q12"], ["x^9 \u0431"], ["\u0410 \u0431"], ["JkK \u0431"], ["JkK", "\u0431"], ["0J3", "\u0410"], ["1 2", "\u0431"], ["1 4 8 0 3 4 2 0 3", "\u0431"], ["1 4 8 0 3 4 2 0 3", "\u0431 \u0430"], ["1 4 8 0 3 4 2 0 3", "6C8 \u0430"], ["1 4 8 0 3 4 2 aaabbccc 3", "6C8 \u0430"], ["1 4 8 0 3 4 2 aaabbccc 3", ""], ["1 4 8 0 3 4 2 aaabbccc 3"], ["1 4 8 Carlos 3 4 2 aaabbccc 3"], ["1 4 8 Carlos 3 4 2 aaabbccc puppy"], ["1 4 0 Carlos 3 4 2 aaabbccc puppy"], ["1", "4", "0", "Carlos", "3", "4", "2", "aaabbccc", "puppy"], ["1", "4", "0", "Carlos", "43", "3", "4", "2", "aaabbccc", "puppy"], ["\u0431 3Np"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552343628.7239885, "StartTime": 1552343617.7433114}, {"EndTime": 1552343637.177373, "FinalMinimizedSolution": [], "FinalCoverage": [13, 9, 10, 1, 22, "4-12,", "3->4"], "FinalSolution": ["", "10", "\u0410", "HCs"], "StartTime": 1552343628.7254016, "FoundSolution": true, "NumProbesMade": 41, "InputHistory": [["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0431", "\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430", "\u0431", "\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430", "\u0431", "\u0431", "\u0410", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["3SI"], ["1", "3SI"], ["3SI \u0410"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 \u0431"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 7"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421", "7"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421", "7 \u0411"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421", "7", "\u0411"], ["56x"], ["50", "56x"], ["56x u8z"], ["56x", "u8z"], ["56x", "\u0430", "u8z"], ["\u0410", "56x", "\u0430", "u8z"], ["aaa", "\u0410", "56x", "\u0430", "u8z"], ["aaa", "\u0410", "56x", "\u0430"], ["aaa", "\u0410", "\u0430", "56x", "\u0430"], ["aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "D", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "D", "1,5", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430", "D", "1,5", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430", "D", "1,5", "1.5", "\u0430"], ["dd", "aaa", "\u0410", "\u0430", "56x", "10,4,5,1,2,3", "\u0430", "D 1mo", "1,5", "1.5", "\u0430"], ["95-"], ["\u0431", "95-"], ["\u0431", "\u0431", "95-"], ["ddL", "\u0431", "\u0431", "95-"], ["ddL", "\u0431", "95-"], ["ddL", "banana", "\u0431", "95-"], ["ddL", "\u0430", "banana", "\u0431", "95-"], ["ddL", "\u0430", "\u0431", "95-"], ["ddL", "\u0430", "95-"], ["ddL", "\u0430", "17", "95-"], ["ddL", "\u0430", "nathan rezende", "17", "95-"], ["ddL", "\u0430", "nathan rezende", "17", "tLW", "95-"], ["ddL", "\u0430", "nathan \u0430", "17", "tLW", "95-"], ["ddL", "25M", "\u0430", "nathan \u0430", "17", "tLW", "95-"], ["ddL", "25M", "\u0430", "nathan 27500", "17", "tLW", "95-"], ["ddL", "25M", "\u0430", "nathan 27500", "17", "qsd", "tLW", "95-"], ["ddL", "\u0430", "nathan 27500", "17", "qsd", "tLW", "95-"], ["ddL", "tLW", "\u0430", "nathan 27500", "17", "qsd", "tLW", "95-"], ["ddL", "tLW", "\u0430", "nathan 27500", "nathan 27500", "17", "qsd", "tLW", "95-"], ["W-h"], ["\u0431", "W-h"], ["\u0431", "W-h kvc"], ["\u0431", "194 kvc"], ["\u0411"], ["\u0411 \u0411"], ["8AF \u0411"], ["8AF ZK-"], ["8AF", "ZK-"], ["KqT"], ["\u0431"], ["\u0431 \u0410"], ["\u0431", "\u0410"], ["\u0431 \u0411"], ["\u0431 \u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], [" \u0431"], [" \u0410"], [" \u0411"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0430", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 \u0430"], ["\u0430", ""], ["\u0430", "\u0430", ""], ["\u0431", ""], ["JpH"], ["\u0410", "JpH"], ["\u0410", "- 6", "JpH"], ["\u0410 \u0411", "- 6", "JpH"], ["\u0410 \u0411 \u0411", "- 6", "JpH"], ["\u0410 \u0411 \u0411", "- \u0430", "JpH"], ["\u0410 \u0411 \u0411", "", "JpH"], ["\u0410 \u0411 \u0411", "10^-5", "", "JpH"], ["\u0410 \u0411 \u0411", "2 2 8", "10^-5", "", "JpH"], ["\u0410 \u0411 5Nl", "2 2 8", "10^-5", "", "JpH"], ["\u0410 \u0411 5Nl", "2 2 8", "\u0411", "10^-5", "", "JpH"], ["\u0410 \u0411 5Nl", "2", "2", "8", "\u0411", "10^-5", "", "JpH"], ["\u0410 \u0411 5Nl", "2", "2", "\u0411", "10^-5", "", "JpH"], ["\u0410 \u0411 5Nl", "2", "2", "\u0411", "10^-5", "iA1", "", "JpH"], ["\u0410 \u0411 5Nl", "2", "2", "\u0411", "10^-5", "iA1 5ne", "", "JpH"], ["\u0410 \u0411 5Nl", "2", "2", "\u0411", "10^-5", "", "", "JpH"], ["\u0410 \u0411 5Nl", "2", "2", "2", "\u0411", "10^-5", "", "", "JpH"], ["\u0410 -1. 5Nl", "2", "2", "2", "\u0411", "10^-5", "", "", "JpH"], ["\u0410 -1. 5Nl", "2", "2", "2", "\u0411", "JpH", "10^-5", "", "", "JpH"], ["\u0410", "-1.", "5Nl", "2", "2", "2", "\u0411", "JpH", "10^-5", "", "", "JpH"], ["\u0430"], ["\u0410"], ["\u0410", "\u0410"], ["ZW-", "\u0410"], ["0t1"], ["Vz-"], ["Vz- \u0430"], ["Vz- \u0410"], ["Vz- \u0411"], ["10 \u0411"], ["10 1,2,3"], ["10 \u0431"], ["\u0430 \u0431"], ["\u0430 df;2;er;5"], ["x^9 df;2;er;5"], ["x^9 q12"], ["x^9 \u0431"], ["\u0410 \u0431"], ["JkK \u0431"], ["JkK", "\u0431"], ["0J3", "\u0410"], ["1 2", "\u0431"], ["1 4 8 0 3 4 2 0 3", "\u0431"], ["1 4 8 0 3 4 2 0 3", "\u0431 \u0430"], ["1 4 8 0 3 4 2 0 3", "6C8 \u0430"], ["1 4 8 0 3 4 2 aaabbccc 3", "6C8 \u0430"], ["1 4 8 0 3 4 2 aaabbccc 3", ""], ["1 4 8 0 3 4 2 aaabbccc 3"], ["1 4 8 Carlos 3 4 2 aaabbccc 3"], ["1 4 8 Carlos 3 4 2 aaabbccc puppy"], ["1 4 0 Carlos 3 4 2 aaabbccc puppy"], ["1", "4", "0", "Carlos", "3", "4", "2", "aaabbccc", "puppy"], ["1", "4", "0", "Carlos", "43", "3", "4", "2", "aaabbccc", "puppy"], ["\u0431 3Np"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0431", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0431", "", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421"], ["\u0431", "", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Qlr"], ["\u0431", "\u0431", "", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Qlr"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Qlr", "\u0431", "\u0431", "", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Qlr"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Qlr", "\u0431", "\u0431 BTz", "", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Qlr"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Qlr", "\u0431", "\u0431 BTz", "", "\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 95-"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Qlr", "\u0431", "\u0431 BTz", "", "123400.345 95-"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Qlr", "\u0431", "\u0431 BTz", "papel", "", "123400.345 95-"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Qlr", "\u0431", "+Papas BTz", "papel", "", "123400.345 95-"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Qlr", "\u0431", "+Papas BTz", "papel", "", "123400.345 Oej"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Qlr", "\u0431", "+Papas BTz", "papel", "", "123400.345", "Oej"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Qlr", "+Papas BTz", "papel", "", "123400.345", "Oej"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Y--", "+Papas BTz", "papel", "", "123400.345", "Oej"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421 Y--", "+Papas BTz", "papel", "", "123400.345"], ["vfb"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421", "vfb"], ["\u0430\u0430\u0431\u0431\u0410\u0410\u0411\u0411\u0441\u0441\u0421\u0421", "vfb \u0410"], ["p6n"], ["2", "\u0410"], ["61x", "2", "\u0410"], ["61x \u0431", "2", "\u0410"], ["61x \u0431", "2", "CDE", "\u0410"], ["61x \u0431", "2", "CDE", "\u0410", "\u0410"], ["61x \u0431", "resident", "2", "CDE", "\u0410", "\u0410"], ["61x \u0431", "resident", "2 \u0411", "CDE", "\u0410", "\u0410"], ["61x", "\u0431", "resident", "2 \u0411", "CDE", "\u0410", "\u0410"], ["61x", "\u0431", "resident", "2 \u0411", "CDE", "\u0411", "\u0410", "\u0410"], ["61x", "\u0431", "resident", "2 \u0411", "CDE", "\u0411", "\u0410", "0", "\u0410"], ["61x", "023", "\u0431", "resident", "2 \u0411", "CDE", "\u0411", "\u0410", "0", "\u0410"], ["61x 1KP", "023", "\u0431", "resident", "2 \u0411", "CDE", "\u0411", "\u0410", "0", "\u0410"], ["61x 1KP", "023", "\u0431", "resident", "2 \u0411", "CDE", "\u0411", "0", "\u0410"], ["ZCe"], ["Godofredo Stark", "ZCe"], ["Godofredo Stark", "ZCe HCs"], ["\u0410 Stark", "ZCe HCs"], ["\u0410 g5n", "ZCe HCs"], ["\u0410 g5n", "10 HCs"], ["\u0410 g5n", "10", "HCs"], ["\u0410 g5n", "10", "\u0410", "HCs"]]}]], [{"CorrectInputs": [[["123"], 1540506166], [["1 2 3 4 5 6"], 1540506175]], "UniqueId": "13032aa3-2453-4957-ecd7-99e50fba29d6_0", "CoverageInfo": [3, 1, 0, 0, 67, "3"], "TimeStamp": 1540506282, "BadInput": ["3.6 3.3 3.4 3.5 3.6"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 2, in <module>\n    numbers = list(map(int, s.split()))\nValueError: invalid literal for int() with base 10: '3.6'\n", "ip": "50.28.153.135"}, [{"EndTime": 1552296922.4033043, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["0 6 7 5 6"], "StartTime": 1552296920.997418, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 6"], ["0 3.3 3.4 3.5 6"], ["0 6 3.4 3.5 6"], ["0 6 7 3.5 6"]]}, {"EndTime": 1552296923.5084188, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["-1 4 1 8 10"], "StartTime": 1552296922.4034126, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 6"], ["0 3.3 3.4 3.5 6"], ["0 6 3.4 3.5 6"], ["0 6 7 3.5 6"], ["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 10"], ["-1 3.3 3.4 3.5 10"], ["-1 4 3.4 3.5 10"], ["-1 4 1 3.5 10"]]}, {"EndTime": 1552296924.999324, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["-1 1 9 10 1"], "StartTime": 1552296923.5086381, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 6"], ["0 3.3 3.4 3.5 6"], ["0 6 3.4 3.5 6"], ["0 6 7 3.5 6"], ["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 10"], ["-1 3.3 3.4 3.5 10"], ["-1 4 3.4 3.5 10"], ["-1 4 1 3.5 10"], ["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 1"], ["-1 3.3 3.4 3.5 1"], ["-1 1 3.4 3.5 1"], ["-1 1 9 3.5 1"]]}, {"EndTime": 1552296926.4879668, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["2 2 1 7 4"], "StartTime": 1552296924.9995754, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 6"], ["0 3.3 3.4 3.5 6"], ["0 6 3.4 3.5 6"], ["0 6 7 3.5 6"], ["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 10"], ["-1 3.3 3.4 3.5 10"], ["-1 4 3.4 3.5 10"], ["-1 4 1 3.5 10"], ["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 1"], ["-1 3.3 3.4 3.5 1"], ["-1 1 3.4 3.5 1"], ["-1 1 9 3.5 1"], ["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 4"], ["2 3.3 3.4 3.5 4"], ["2 2 3.4 3.5 4"], ["2 2 1 3.5 4"]]}, {"EndTime": 1552296927.932134, "FinalMinimizedSolution": [], "FinalCoverage": [3, 0, 0, 0, 100], "FinalSolution": ["5 8 1 1 4"], "StartTime": 1552296926.4882433, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 6"], ["0 3.3 3.4 3.5 6"], ["0 6 3.4 3.5 6"], ["0 6 7 3.5 6"], ["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 10"], ["-1 3.3 3.4 3.5 10"], ["-1 4 3.4 3.5 10"], ["-1 4 1 3.5 10"], ["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 1"], ["-1 3.3 3.4 3.5 1"], ["-1 1 3.4 3.5 1"], ["-1 1 9 3.5 1"], ["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 3.4 3.5 4"], ["2 3.3 3.4 3.5 4"], ["2 2 3.4 3.5 4"], ["2 2 1 3.5 4"], ["3.6 3.3 3.4 3.5 3.6"], ["3.6 3.3 h41 3.5 4"], ["5 3.3 h41 3.5 4"], ["5 8 h41 3.5 4"], ["5 8 1 3.5 4"]]}]], [{"CorrectInputs": [[["while i1 == i2:"], 1544723677]], "UniqueId": "2a878bd5-1e41-45ae-aea8-311bbb4ddc73_0", "CoverageInfo": [11, 4, 6, 2, 53, "8-11,", "5->exit,", "6->11"], "TimeStamp": 1544723722, "BadInput": ["aaaabbcaa"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 7, in <module>\n    i1 += 1\nTypeError: Can't convert 'int' object to str implicitly\n", "ip": "210.195.132.174"}, [{"EndTime": 1552281684.70933, "FinalMinimizedSolution": ["abc"], "FinalCoverage": [11, 4, 6, 1, 59, "7-10,", "6->7"], "FinalSolution": ["abc", "aaaabbcaa"], "StartTime": 1552281683.7956512, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["aaaabbcaa"]]}, {"EndTime": 1552281686.1338933, "FinalMinimizedSolution": ["EhT"], "FinalCoverage": [11, 4, 6, 1, 59, "7-10,", "6->7"], "FinalSolution": ["EhT"], "StartTime": 1552281684.7094896, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["aaaabbcaa"], ["aaaabbcaa"], ["aaaabbcaa kpI"], [""], []]}, {"EndTime": 1552281687.0530798, "FinalMinimizedSolution": ["6R8"], "FinalCoverage": [11, 4, 6, 1, 59, "7-10,", "6->7"], "FinalSolution": ["6R8", "aaaabbcaa"], "StartTime": 1552281686.134077, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["aaaabbcaa"], ["aaaabbcaa"], ["aaaabbcaa kpI"], [""], [], ["aaaabbcaa"]]}, {"EndTime": 1552281687.9717498, "FinalMinimizedSolution": ["parar"], "FinalCoverage": [11, 4, 6, 1, 59, "7-10,", "6->7"], "FinalSolution": ["parar", "aaaabbcaa"], "StartTime": 1552281687.0533426, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["aaaabbcaa"], ["aaaabbcaa"], ["aaaabbcaa kpI"], [""], [], ["aaaabbcaa"], ["aaaabbcaa"]]}, {"EndTime": 1552281689.2101078, "FinalMinimizedSolution": ["nNq"], "FinalCoverage": [11, 4, 6, 1, 59, "7-10,", "6->7"], "FinalSolution": ["nNq"], "StartTime": 1552281687.9719584, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["aaaabbcaa"], ["aaaabbcaa"], ["aaaabbcaa kpI"], [""], [], ["aaaabbcaa"], ["aaaabbcaa"], ["aaaabbcaa"], ["aaaabbcaa", "aaaabbcaa"], ["aaaabbcaa", "aaaabbcaa", "aaaabbcaa"]]}]], [{"CorrectInputs": [[["5", "10", "5", "12", "8", "3"], 1521506671]], "UniqueId": "787a143c-67c9-425f-f986-2eda1cc425e6_0", "CoverageInfo": [13, 3, 6, 2, 74, "3,", "13-15,", "2->3,", "10->13"], "TimeStamp": 1521506920, "BadInput": ["6", "10", "5", "12", "8", "3", "9"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 11, in <module>\n    valeur = (tabrichesse[nbhab/2]+tabrichesse[nbhab/2-1])/2\nTypeError: list indices must be integers or slices, not float\n", "ip": "134.214.188.162"}, [{"EndTime": 1552359430.2812078, "FinalMinimizedSolution": ["1", "-1"], "FinalCoverage": [13, 2, 6, 2, 79, "3,", "11,", "2->3,", "10->11"], "FinalSolution": ["1", "-1"], "StartTime": 1552359426.5731914, "FoundSolution": true, "NumProbesMade": 16, "InputHistory": [["6", "10", "5", "12", "8", "3", "9"], ["6", "10", "3", "5", "12", "8", "3", "9"], ["6", "10", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "10 gP6", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "be4", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "10", "5", "12", "8", "3", "9 ZI9"], [], ["4"], ["4", "3"], ["4", "3", "3"], ["4", "3", "3", "5"], ["4", "3", "3", "5", "3"], ["XVV"], ["-1"], ["iDu", "-1"]]}, {"EndTime": 1552359433.4251316, "FinalMinimizedSolution": ["9", "9", "8", "12", "9", "10", "9", "3", "9", "9"], "FinalCoverage": [13, 2, 6, 2, 79, "3,", "11,", "2->3,", "10->11"], "FinalSolution": ["9", "9", "8", "12", "9", "10", "9", "3", "9", "9"], "StartTime": 1552359430.2815993, "FoundSolution": true, "NumProbesMade": 13, "InputHistory": [["6", "10", "5", "12", "8", "3", "9"], ["6", "10", "3", "5", "12", "8", "3", "9"], ["6", "10", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "10 gP6", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "be4", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "10", "5", "12", "8", "3", "9 ZI9"], [], ["4"], ["4", "3"], ["4", "3", "3"], ["4", "3", "3", "5"], ["4", "3", "3", "5", "3"], ["XVV"], ["-1"], ["iDu", "-1"], ["6", "10", "5", "12", "8", "3", "9"], ["6", "10", "5", "12", "8", "3", "B", "9"], ["6", "10", "5", "12", "8", "3", "3", "9"], ["EO1"], ["9"], ["9", "9"], ["9", "9", "8"], ["9", "9", "8", "12"], ["9", "9", "8", "12", "9"], ["9", "9", "8", "12", "9", "10"], ["9", "9", "8", "12", "9", "10", "9"], ["9", "9", "8", "12", "9", "10", "9", "3"], ["9", "9", "8", "12", "9", "10", "9", "3", "9"]]}, {"EndTime": 1552359434.6710792, "FinalMinimizedSolution": ["1", "5"], "FinalCoverage": [13, 2, 6, 2, 79, "3,", "11,", "2->3,", "10->11"], "FinalSolution": ["1", "5"], "StartTime": 1552359433.4257293, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["6", "10", "5", "12", "8", "3", "9"], ["6", "10", "3", "5", "12", "8", "3", "9"], ["6", "10", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "10 gP6", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "be4", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "10", "5", "12", "8", "3", "9 ZI9"], [], ["4"], ["4", "3"], ["4", "3", "3"], ["4", "3", "3", "5"], ["4", "3", "3", "5", "3"], ["XVV"], ["-1"], ["iDu", "-1"], ["6", "10", "5", "12", "8", "3", "9"], ["6", "10", "5", "12", "8", "3", "B", "9"], ["6", "10", "5", "12", "8", "3", "3", "9"], ["EO1"], ["9"], ["9", "9"], ["9", "9", "8"], ["9", "9", "8", "12"], ["9", "9", "8", "12", "9"], ["9", "9", "8", "12", "9", "10"], ["9", "9", "8", "12", "9", "10", "9"], ["9", "9", "8", "12", "9", "10", "9", "3"], ["9", "9", "8", "12", "9", "10", "9", "3", "9"], ["6", "10", "5", "12", "8", "3", "9"], ["bs3"], ["1"]]}, {"EndTime": 1552359438.1105247, "FinalMinimizedSolution": ["5", "10", "10", "9", "-1", "3"], "FinalCoverage": [13, 2, 6, 2, 79, "3,", "11,", "2->3,", "10->11"], "FinalSolution": ["5", "10", "10", "9", "-1", "3", "9", "5 ve4"], "StartTime": 1552359434.6716764, "FoundSolution": true, "NumProbesMade": 14, "InputHistory": [["6", "10", "5", "12", "8", "3", "9"], ["6", "10", "3", "5", "12", "8", "3", "9"], ["6", "10", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "10 gP6", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "be4", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "10", "5", "12", "8", "3", "9 ZI9"], [], ["4"], ["4", "3"], ["4", "3", "3"], ["4", "3", "3", "5"], ["4", "3", "3", "5", "3"], ["XVV"], ["-1"], ["iDu", "-1"], ["6", "10", "5", "12", "8", "3", "9"], ["6", "10", "5", "12", "8", "3", "B", "9"], ["6", "10", "5", "12", "8", "3", "3", "9"], ["EO1"], ["9"], ["9", "9"], ["9", "9", "8"], ["9", "9", "8", "12"], ["9", "9", "8", "12", "9"], ["9", "9", "8", "12", "9", "10"], ["9", "9", "8", "12", "9", "10", "9"], ["9", "9", "8", "12", "9", "10", "9", "3"], ["9", "9", "8", "12", "9", "10", "9", "3", "9"], ["6", "10", "5", "12", "8", "3", "9"], ["bs3"], ["1"], ["6", "10", "5", "12", "8", "3", "9"], ["6", "10", "5", "8", "3", "9"], ["6", "10", "5", "8", "3", "9", "5"], ["6", "10", "5", "8", "1.5", "3", "9", "5"], ["6", "10", "5", "8", "-1", "3", "9", "5"], ["6", "ZTY", "10", "5", "8", "-1", "3", "9", "5"], ["6", "5", "10", "5", "8", "-1", "3", "9", "5"], ["6", "5", "10", "5", "8 J3n", "-1", "3", "9", "5"], ["6", "5", "10", "5", "3", "-1", "3", "9", "5"], ["6", "5", "10", "5", "-1", "3", "9", "5"], ["6", "5", "10", "10", "5", "-1", "3", "9", "5"], ["6", "5", "10", "10", "5 6O2", "-1", "3", "9", "5"], ["6", "5", "10", "10", "9", "-1", "3", "9", "5"], ["6", "5", "10", "10", "9", "-1", "3", "9", "5 ve4"]]}, {"EndTime": 1552359446.5565214, "FinalMinimizedSolution": ["3", "2", "6", "2"], "FinalCoverage": [13, 2, 6, 2, 79, "3,", "11,", "2->3,", "10->11"], "FinalSolution": ["3", "2", "6", "2"], "StartTime": 1552359438.1113818, "FoundSolution": true, "NumProbesMade": 41, "InputHistory": [["6", "10", "5", "12", "8", "3", "9"], ["6", "10", "3", "5", "12", "8", "3", "9"], ["6", "10", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "10 gP6", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "be4", "5", "12", "8", "3", "9 ZI9"], ["6", "8", "3", "10", "5", "12", "8", "3", "9 ZI9"], [], ["4"], ["4", "3"], ["4", "3", "3"], ["4", "3", "3", "5"], ["4", "3", "3", "5", "3"], ["XVV"], ["-1"], ["iDu", "-1"], ["6", "10", "5", "12", "8", "3", "9"], ["6", "10", "5", "12", "8", "3", "B", "9"], ["6", "10", "5", "12", "8", "3", "3", "9"], ["EO1"], ["9"], ["9", "9"], ["9", "9", "8"], ["9", "9", "8", "12"], ["9", "9", "8", "12", "9"], ["9", "9", "8", "12", "9", "10"], ["9", "9", "8", "12", "9", "10", "9"], ["9", "9", "8", "12", "9", "10", "9", "3"], ["9", "9", "8", "12", "9", "10", "9", "3", "9"], ["6", "10", "5", "12", "8", "3", "9"], ["bs3"], ["1"], ["6", "10", "5", "12", "8", "3", "9"], ["6", "10", "5", "8", "3", "9"], ["6", "10", "5", "8", "3", "9", "5"], ["6", "10", "5", "8", "1.5", "3", "9", "5"], ["6", "10", "5", "8", "-1", "3", "9", "5"], ["6", "ZTY", "10", "5", "8", "-1", "3", "9", "5"], ["6", "5", "10", "5", "8", "-1", "3", "9", "5"], ["6", "5", "10", "5", "8 J3n", "-1", "3", "9", "5"], ["6", "5", "10", "5", "3", "-1", "3", "9", "5"], ["6", "5", "10", "5", "-1", "3", "9", "5"], ["6", "5", "10", "10", "5", "-1", "3", "9", "5"], ["6", "5", "10", "10", "5 6O2", "-1", "3", "9", "5"], ["6", "5", "10", "10", "9", "-1", "3", "9", "5"], ["6", "5", "10", "10", "9", "-1", "3", "9", "5 ve4"], ["6", "10", "5", "12", "8", "3", "9"], ["6", "10", "5", "12", "8", "3"], ["6", "10", "5", "12", "8", "3", "8"], ["HFA"], ["6"], ["6", "5"], ["6", "5", "10"], ["6", "5", "10", "5"], ["6", "5", "10", "5", "10"], ["6", "5", "10", "5", "10", "10"], ["6", "5", "10", "5", "10", "10", "iJ9"], ["6", "5", "10", "5", "10", "10", "10"], ["0Z-"], ["uOk"], ["2"], ["2", "9"], ["2", "9", "8"], ["2", "1", "9", "8"], ["PD6"], ["10"], ["10", "12"], ["10", "12", "10"], ["10", "12", "10", "6"], ["10", "12", "10", "6", "3j5"], ["10", "12", "10", "6", "1"], ["10", "12", "10", "6", "1", "10"], ["10", "12", "10", "6", "1", "10", "10"], ["10", "12", "10", "6", "1", "10", "10", "10"], ["10", "12", "10", "6", "1", "10", "10", "10", "12"], ["10", "12", "10", "6", "1", "10", "10", "10", "12", "10"], ["10", "12", "10", "6", "1", "10", "10", "10", "12", "10", "10"], ["10", "12", "10", "6", "1", "10", "10", "10", "g9i", "12", "10", "10"], ["10", "12", "10", "6", "1", "10", "10", "10", "1", "12", "10", "10"], ["10", "12", "10", "6", "1", "10", "10", "10", "1", "12", "n1f", "10", "10"], ["10", "12", "10", "6", "1", "10", "10", "10", "1", "12", "9", "10", "10"], ["10", "12", "10", "6", "80-", "1", "10", "10", "10", "1", "12", "9", "10", "10"], ["10", "12", "10", "6", "6", "1", "10", "10", "10", "1", "12", "9", "10", "10"], ["Xlj"], ["6dI", "2"], ["3", "2"], ["3", "2", "6"]]}]], [{"CorrectInputs": [[["5 8 2 7 8 8 2 4", "8"], 1536749571]], "UniqueId": "c54349f6-18c5-42dc-e235-1735f33de9c9_0", "CoverageInfo": [8, 2, 6, 2, 71, "5,", "9,", "4->5,", "7->exit"], "TimeStamp": 1536749717, "BadInput": ["1", "1"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 8, in <module>\n    print(a.index(b,c,-1), end = ' ')\nValueError: 1 is not in list\n", "ip": "188.17.150.118"}, [{"EndTime": 1552355850.786101, "FinalMinimizedSolution": ["1", "8"], "FinalCoverage": [8, 3, 6, 1, 57, "7-9,", "4->7"], "FinalSolution": ["1", "8", "1"], "StartTime": 1552355849.67804, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "1"], ["1", "2 3", "1"]]}, {"EndTime": 1552355851.8409052, "FinalMinimizedSolution": ["1 1", "1"], "FinalCoverage": [8, 1, 6, 1, 86, "5,", "4->5"], "FinalSolution": ["1 1", "1"], "StartTime": 1552355850.7862854, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "1"], ["1", "2 3", "1"], ["1", "1"], ["1 J3h", "1"]]}, {"EndTime": 1552355853.272924, "FinalMinimizedSolution": ["9", "1"], "FinalCoverage": [8, 3, 6, 1, 57, "7-9,", "4->7"], "FinalSolution": ["9", "1"], "StartTime": 1552355851.841173, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1", "1"], ["1", "2 3", "1"], ["1", "1"], ["1 J3h", "1"], ["1", "1"], [], ["q8f"], ["9"]]}, {"EndTime": 1552355854.1915464, "FinalMinimizedSolution": ["1", "3"], "FinalCoverage": [8, 3, 6, 1, 57, "7-9,", "4->7"], "FinalSolution": ["1", "3", "1"], "StartTime": 1552355853.2732303, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1", "1"], ["1", "2 3", "1"], ["1", "1"], ["1 J3h", "1"], ["1", "1"], [], ["q8f"], ["9"], ["1", "1"]]}, {"EndTime": 1552355855.298452, "FinalMinimizedSolution": ["6", "1"], "FinalCoverage": [8, 3, 6, 1, 57, "7-9,", "4->7"], "FinalSolution": ["6", "1", "1"], "StartTime": 1552355854.1917858, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "1"], ["1", "2 3", "1"], ["1", "1"], ["1 J3h", "1"], ["1", "1"], [], ["q8f"], ["9"], ["1", "1"], ["1", "1"], ["cuN", "1", "1"]]}]], [{"CorrectInputs": [[["camp", "cam"], 1541332891]], "UniqueId": "3c1279e5-604f-42ec-8df7-3a368d0c2365_0", "CoverageInfo": [16, 5, 12, 3, 64, "9,", "15-19,", "6->9,", "11->16,", "12->15"], "TimeStamp": 1541333225, "BadInput": ["encourage", "enc"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    if m[i]==s2[i]:\nIndexError: string index out of range\n", "ip": "157.44.199.81"}, [{"EndTime": 1552419850.515207, "FinalMinimizedSolution": ["xBP", "t55"], "FinalCoverage": [16, 6, 12, 4, 57, "7-9,", "12-15,", "19,", "6->7,", "6->9,", "11->12,", "16->19"], "FinalSolution": ["xBP", "t55"], "StartTime": 1552419849.265744, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["encourage", "enc"], [], ["xBP"]]}, {"EndTime": 1552419851.8149354, "FinalMinimizedSolution": ["", "enc"], "FinalCoverage": [16, 8, 12, 3, 39, "5-9,", "12-15,", "19,", "4->5,", "11->12,", "16->19"], "FinalSolution": ["", "enc", "enc"], "StartTime": 1552419850.5154026, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["encourage", "enc"], [], ["xBP"], ["encourage", "enc"], ["encourage e2v", "enc"], ["encourage e2v", "enc", "enc"]]}, {"EndTime": 1552419852.7400095, "FinalMinimizedSolution": ["WERT", "encourage"], "FinalCoverage": [16, 6, 12, 4, 57, "7-9,", "12-15,", "19,", "6->7,", "6->9,", "11->12,", "16->19"], "FinalSolution": ["WERT", "encourage", "enc"], "StartTime": 1552419851.8151653, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["encourage", "enc"], [], ["xBP"], ["encourage", "enc"], ["encourage e2v", "enc"], ["encourage e2v", "enc", "enc"], ["encourage", "enc"]]}, {"EndTime": 1552419853.6637888, "FinalMinimizedSolution": ["Q6n", "encourage"], "FinalCoverage": [16, 4, 12, 4, 71, "9,", "13-15,", "17,", "6->9,", "12->13,", "12->15,", "16->17"], "FinalSolution": ["Q6n", "encourage", "enc"], "StartTime": 1552419852.740248, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["encourage", "enc"], [], ["xBP"], ["encourage", "enc"], ["encourage e2v", "enc"], ["encourage e2v", "enc", "enc"], ["encourage", "enc"], ["encourage", "enc"]]}, {"EndTime": 1552419854.5871131, "FinalMinimizedSolution": ["encourage", "9q5"], "FinalCoverage": [16, 6, 12, 4, 57, "7-9,", "12-15,", "19,", "6->7,", "6->9,", "11->12,", "16->19"], "FinalSolution": ["encourage", "9q5", "enc"], "StartTime": 1552419853.664035, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["encourage", "enc"], [], ["xBP"], ["encourage", "enc"], ["encourage e2v", "enc"], ["encourage e2v", "enc", "enc"], ["encourage", "enc"], ["encourage", "enc"], ["encourage", "enc"]]}]], [{"CorrectInputs": [[["2"], 1541650290], [["3"], 1541650368]], "UniqueId": "9c97ea1a-8b29-410e-8fcd-6bf006dd2559_0", "CoverageInfo": [7, 4, 6, 1, 31, "4-7,", "3->4"], "TimeStamp": 1541650344, "BadInput": ["0"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 9, in <module>\n    print(i)   # Line 1\nNameError: name 'i' is not defined\n", "ip": "35.8.204.197"}, [{"EndTime": 1552364152.9850066, "FinalMinimizedSolution": ["7"], "FinalCoverage": [7, 1, 6, 1, 85, "9,", "3->9"], "FinalSolution": ["7"], "StartTime": 1552364151.7449317, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["0"], ["0", "0"], []]}, {"EndTime": 1552364154.0911696, "FinalMinimizedSolution": ["8"], "FinalCoverage": [7, 1, 6, 1, 85, "9,", "3->9"], "FinalSolution": ["8", "0"], "StartTime": 1552364152.9852269, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0"], ["0", "0"], [], ["0"], ["0 rN2", "0"]]}, {"EndTime": 1552364155.1995392, "FinalMinimizedSolution": ["10"], "FinalCoverage": [7, 1, 6, 1, 85, "9,", "3->9"], "FinalSolution": ["10", "0"], "StartTime": 1552364154.0914104, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0"], ["0", "0"], [], ["0"], ["0 rN2", "0"], ["0"], ["Q0T", "0"]]}, {"EndTime": 1552364156.305273, "FinalMinimizedSolution": ["5"], "FinalCoverage": [7, 1, 6, 1, 85, "9,", "3->9"], "FinalSolution": ["5", "0"], "StartTime": 1552364155.1997755, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["0"], ["0", "0"], [], ["0"], ["0 rN2", "0"], ["0"], ["Q0T", "0"], ["0"], ["jsj", "0"]]}, {"EndTime": 1552364158.3585107, "FinalMinimizedSolution": ["8"], "FinalCoverage": [7, 1, 6, 1, 85, "9,", "3->9"], "FinalSolution": ["8", "7"], "StartTime": 1552364156.3055224, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["0"], ["0", "0"], [], ["0"], ["0 rN2", "0"], ["0"], ["Q0T", "0"], ["0"], ["jsj", "0"], ["0"], ["0 jM0"], ["-1"], ["RYn"], ["1 1", "7"], ["-1", "7"], ["-1 lUd", "7"]]}]], [{"CorrectInputs": [[["d8j5i7v9"], 1533321879]], "UniqueId": "44472e79-75d1-4212-c5f0-d55478589d35_0", "CoverageInfo": [20, 4, 6, 2, 77, "17-20,", "5->19,", "10->5"], "TimeStamp": 1533321899, "BadInput": ["a10"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 11, in <module>\n    o+=str(int(i))\nTypeError: unsupported operand type(s) for +=: 'int' and 'str'\n", "ip": "176.52.97.96"}, [{"EndTime": 1552415123.560484, "FinalMinimizedSolution": [], "FinalCoverage": [20, 2, 6, 1, 88, "17-18,", "10->5"], "FinalSolution": ["T9d", "a10"], "StartTime": 1552415122.777828, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["a10"]]}, {"EndTime": 1552415124.3426847, "FinalMinimizedSolution": [], "FinalCoverage": [20, 3, 6, 1, 85, "9,", "17-18,", "10->5"], "FinalSolution": ["1Jq", "a10"], "StartTime": 1552415123.560658, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["a10"], ["a10"]]}, {"EndTime": 1552415125.1240735, "FinalMinimizedSolution": [], "FinalCoverage": [20, 3, 6, 1, 85, "9,", "17-18,", "10->5"], "FinalSolution": ["xzP", "a10"], "StartTime": 1552415124.342869, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["a10"], ["a10"], ["a10"]]}, {"EndTime": 1552415127.3101957, "FinalMinimizedSolution": [], "FinalCoverage": [20, 13, 6, 1, 31, "6-18,", "5->6"], "FinalSolution": [], "StartTime": 1552415125.124268, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["a10"], ["a10"], ["a10"], ["a10"], ["a10 Dv2"], ["a10 a"], ["a10 a a"], ["a10 a 1 2 3 4 5 6 7 1 1 2 3 4 5 2 2 5 5"], ["a10", "a", "1", "2", "3", "4", "5", "6", "7", "1", "1", "2", "3", "4", "5", "2", "2", "5", "5"], ["a10", "a", "1", "2", "3", "4", "5", "7", "1", "1", "2", "3", "4", "5", "2", "2", "5", "5"], ["a10", "1", "2", "3", "4", "5", "7", "1", "1", "2", "3", "4", "5", "2", "2", "5", "5"], ["a10", "2", "3", "4", "5", "7", "1", "1", "2", "3", "4", "5", "2", "2", "5", "5"]]}, {"EndTime": 1552415128.0378392, "FinalMinimizedSolution": [], "FinalCoverage": [20, 3, 6, 1, 85, "9,", "17-18,", "10->5"], "FinalSolution": ["aOq"], "StartTime": 1552415127.3105779, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["a10"], ["a10"], ["a10"], ["a10"], ["a10 Dv2"], ["a10 a"], ["a10 a a"], ["a10 a 1 2 3 4 5 6 7 1 1 2 3 4 5 2 2 5 5"], ["a10", "a", "1", "2", "3", "4", "5", "6", "7", "1", "1", "2", "3", "4", "5", "2", "2", "5", "5"], ["a10", "a", "1", "2", "3", "4", "5", "7", "1", "1", "2", "3", "4", "5", "2", "2", "5", "5"], ["a10", "1", "2", "3", "4", "5", "7", "1", "1", "2", "3", "4", "5", "2", "2", "5", "5"], ["a10", "2", "3", "4", "5", "7", "1", "1", "2", "3", "4", "5", "2", "2", "5", "5"], ["a10"]]}]], [{"CorrectInputs": [[["September0919"], 1540637249]], "UniqueId": "4a11cdd2-36ca-439b-8ac2-980a22179d2f_0", "CoverageInfo": [16, 5, 12, 3, 64, "14-22,", "3->19,", "13->14,", "13->17"], "TimeStamp": 1540637323, "BadInput": ["September0919$@"], "ErrorType": "AttributeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 26, in <module>\n    goodPassword(aString)\n  File \"temp2018.py\", line 13, in goodPassword\n    elif i.isascii():\nAttributeError: 'str' object has no attribute 'isascii'\n", "ip": "209.51.68.147"}, [{"EndTime": 1552349689.8797123, "FinalMinimizedSolution": [], "FinalCoverage": [16, 10, 12, 2, 29, "4-17,", "20,", "3->4,", "19->20"], "FinalSolution": [""], "StartTime": 1552349688.0610003, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["September0919$@"], ["September0919$@ Vm4"], ["September0919$@ September0919$@ Vm4"], ["September0919$@ xzu Vm4"], ["September0919$@ xzu Vm4 xzu Vm4"], ["E xzu Vm4 xzu Vm4"], ["E xzu Vm4 mH1 Vm4"], ["1 xzu Vm4 mH1 Vm4"]]}, {"EndTime": 1552349691.039753, "FinalMinimizedSolution": [], "FinalCoverage": [16, 7, 12, 3, 50, "5,", "10-17,", "20,", "4->5,", "7->10,", "19->20"], "FinalSolution": ["ntd", ""], "StartTime": 1552349689.879926, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["September0919$@"], ["September0919$@ Vm4"], ["September0919$@ September0919$@ Vm4"], ["September0919$@ xzu Vm4"], ["September0919$@ xzu Vm4 xzu Vm4"], ["E xzu Vm4 xzu Vm4"], ["E xzu Vm4 mH1 Vm4"], ["1 xzu Vm4 mH1 Vm4"], ["September0919$@"], ["September0919$@ Dps"], ["September0919$@ HfP"]]}, {"EndTime": 1552349691.8247035, "FinalMinimizedSolution": [], "FinalCoverage": [16, 6, 12, 2, 57, "10-17,", "20,", "7->10,", "19->20"], "FinalSolution": ["LoB", "September0919$@"], "StartTime": 1552349691.039986, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["September0919$@"], ["September0919$@ Vm4"], ["September0919$@ September0919$@ Vm4"], ["September0919$@ xzu Vm4"], ["September0919$@ xzu Vm4 xzu Vm4"], ["E xzu Vm4 xzu Vm4"], ["E xzu Vm4 mH1 Vm4"], ["1 xzu Vm4 mH1 Vm4"], ["September0919$@"], ["September0919$@ Dps"], ["September0919$@ HfP"], ["September0919$@"]]}, {"EndTime": 1552349692.608095, "FinalMinimizedSolution": [], "FinalCoverage": [16, 5, 12, 3, 64, "5,", "13-17,", "20,", "4->5,", "10->13,", "19->20"], "FinalSolution": ["84f", "September0919$@"], "StartTime": 1552349691.8249445, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["September0919$@"], ["September0919$@ Vm4"], ["September0919$@ September0919$@ Vm4"], ["September0919$@ xzu Vm4"], ["September0919$@ xzu Vm4 xzu Vm4"], ["E xzu Vm4 xzu Vm4"], ["E xzu Vm4 mH1 Vm4"], ["1 xzu Vm4 mH1 Vm4"], ["September0919$@"], ["September0919$@ Dps"], ["September0919$@ HfP"], ["September0919$@"], ["September0919$@"]]}, {"EndTime": 1552349693.3924353, "FinalMinimizedSolution": [], "FinalCoverage": [16, 4, 12, 2, 71, "13-17,", "20,", "10->13,", "19->20"], "FinalSolution": ["E9f", "September0919$@"], "StartTime": 1552349692.6083384, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["September0919$@"], ["September0919$@ Vm4"], ["September0919$@ September0919$@ Vm4"], ["September0919$@ xzu Vm4"], ["September0919$@ xzu Vm4 xzu Vm4"], ["E xzu Vm4 xzu Vm4"], ["E xzu Vm4 mH1 Vm4"], ["1 xzu Vm4 mH1 Vm4"], ["September0919$@"], ["September0919$@ Dps"], ["September0919$@ HfP"], ["September0919$@"], ["September0919$@"], ["September0919$@"]]}]], [{"CorrectInputs": [[["1", "8 12"], 1531622008], [["1", "1000 190"], 1531622088]], "UniqueId": "dc1721ac-9057-4203-a7c8-b68e689cbb26_0", "CoverageInfo": [16, 11, 8, 2, 29, "4-5,", "8-17,", "6->2,", "7->8"], "TimeStamp": 1531622073, "BadInput": ["1", "entrada 1000 190"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 7, in <module>\n    a,b=[int(x) for x in input().split()]\n  File \"temp2018.py\", line 7, in <listcomp>\n    a,b=[int(x) for x in input().split()]\nValueError: invalid literal for int() with base 10: 'entrada'\n", "ip": "2804:14d:5490:934b:a03a:858c:c6b1:c973"}, [{"EndTime": 1552293250.8059757, "FinalMinimizedSolution": ["1", "-1 1000"], "FinalCoverage": [16, 4, 8, 2, 75, "12-13,", "15-16,", "8->12,", "14->15"], "FinalSolution": ["1", "-1 1000"], "StartTime": 1552293249.7516057, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "entrada 1000 190"], ["1", "-1 1000 190"]]}, {"EndTime": 1552293251.8617494, "FinalMinimizedSolution": ["1", "3 1000"], "FinalCoverage": [16, 2, 8, 1, 88, "12-13,", "8->12"], "FinalSolution": ["1", "3 1000"], "StartTime": 1552293250.8061492, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "entrada 1000 190"], ["1", "-1 1000 190"], ["1", "entrada 1000 190"], ["1", "3 1000 190"]]}, {"EndTime": 1552293252.9191065, "FinalMinimizedSolution": ["1", "8 1000"], "FinalCoverage": [16, 4, 8, 2, 75, "12-13,", "15-16,", "8->12,", "14->15"], "FinalSolution": ["1", "8 1000"], "StartTime": 1552293251.861944, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "entrada 1000 190"], ["1", "-1 1000 190"], ["1", "entrada 1000 190"], ["1", "3 1000 190"], ["1", "entrada 1000 190"], ["1", "8 1000 190"]]}, {"EndTime": 1552293253.9754565, "FinalMinimizedSolution": ["1", "9 1000"], "FinalCoverage": [16, 2, 8, 1, 88, "12-13,", "8->12"], "FinalSolution": ["1", "9 1000"], "StartTime": 1552293252.919315, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "entrada 1000 190"], ["1", "-1 1000 190"], ["1", "entrada 1000 190"], ["1", "3 1000 190"], ["1", "entrada 1000 190"], ["1", "8 1000 190"], ["1", "entrada 1000 190"], ["1", "9 1000 190"]]}, {"EndTime": 1552293255.0309727, "FinalMinimizedSolution": ["1", "2 1000"], "FinalCoverage": [16, 4, 8, 2, 75, "12-13,", "15-16,", "8->12,", "14->15"], "FinalSolution": ["1", "2 1000"], "StartTime": 1552293253.9756782, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "entrada 1000 190"], ["1", "-1 1000 190"], ["1", "entrada 1000 190"], ["1", "3 1000 190"], ["1", "entrada 1000 190"], ["1", "8 1000 190"], ["1", "entrada 1000 190"], ["1", "9 1000 190"], ["1", "entrada 1000 190"], ["1", "2 1000 190"]]}]], [{"CorrectInputs": [[["1", "3", "3 5 15"], 1538923262], [["1", "2", "57 96"], 1538923515]], "UniqueId": "d39e5d9a-220f-4926-b334-144617fc7229_0", "CoverageInfo": [33, 26, 18, 1, 16, "4-14,", "16-28,", "32-33,", "30->exit"], "TimeStamp": 1538923478, "BadInput": ["1", "57 96"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 31, in <module>\n    n = int(input())\nValueError: invalid literal for int() with base 10: '57 96'\n", "ip": "157.48.156.165"}, [{"EndTime": 1552350159.0426638, "FinalMinimizedSolution": ["0"], "FinalCoverage": [33, 27, 18, 1, 14, "4-14,", "16-28,", "31-33,", "30->31"], "FinalSolution": ["0"], "StartTime": 1552350154.8456693, "FoundSolution": true, "NumProbesMade": 19, "InputHistory": [["1", "57 96"], ["1", "5"], ["1", "5", "1"], ["1 b", "5", "1"], ["2", "5", "1"], ["2", "1"], ["2", "1", "bB9"], ["2", "1", "4"], ["2", "1", "4", "57 96"], ["2", "1", "4", "6"], ["2", "1", "4", "6", "1"], [], ["6"], ["6", "b"], ["6", "6"], ["6", "6", "57 96"], ["6", "6", "57 0"], ["wsm", "6", "6", "57 0"], ["4", "6", "6", "57 0"]]}, {"EndTime": 1552350166.3907278, "FinalMinimizedSolution": ["1", "1", "3"], "FinalCoverage": [33, 1, 18, 2, 94, "22,", "21->22,", "26->25"], "FinalSolution": ["1", "1", "3", "3", "1 1", "3", "9"], "StartTime": 1552350159.0430086, "FoundSolution": true, "NumProbesMade": 34, "InputHistory": [["1", "57 96"], ["1", "5"], ["1", "5", "1"], ["1 b", "5", "1"], ["2", "5", "1"], ["2", "1"], ["2", "1", "bB9"], ["2", "1", "4"], ["2", "1", "4", "57 96"], ["2", "1", "4", "6"], ["2", "1", "4", "6", "1"], [], ["6"], ["6", "b"], ["6", "6"], ["6", "6", "57 96"], ["6", "6", "57 0"], ["wsm", "6", "6", "57 0"], ["4", "6", "6", "57 0"], ["1", "57 96"], ["1", "-1"], ["1", "-1", "-1"], ["1", "yiv", "-1", "-1"], ["1", "5", "-1", "-1"], ["1", "2", "5", "-1", "-1"], ["b", "1", "2", "5", "-1", "-1"], ["7", "1", "2", "5", "-1", "-1"], ["b"], ["5"], ["5", "B-5"], ["5", "5"], ["5", "5", "57 96"], ["5", "5", "57 10.50"], ["5", "5", "57 9"], ["5", "5", "5", "57 9"], ["9", "b"], ["9", "1"], ["9", "1", "57 96"], ["9", "1", "57 96", "57 96"], ["9", "1", "57 96", "1"], ["9", "1", "57 96", "1", "57 96"], ["9", "1", "57 96", "1", "57 96", "57 96"], ["9", "1", "57 96", "1", "57 96", "9"], ["9", "1", "57 96", "1", "57 96", "9", "9"], ["9", "1", "57 96", "lp8", "1", "57 96", "9", "9"], ["9", "1", "57 96", "3", "1", "57 96", "9", "9"], ["9", "1", "57 96", "3", "1", "57 96", "9"], ["9", "1", "57 96", "3", "1 dV5", "57 96", "9"], ["9", "1", "57 96", "3", "1 1", "57 96", "9"], ["9", "1", "57 96", "b", "3", "1 1", "57 96", "9"], ["9", "1", "57 96", "3", "3", "1 1", "57 96", "9"], ["1", "57 96", "3", "3", "1 1", "57 96", "9"], ["1", "57 96", "3", "3", "1 1", "3", "9"]]}, {}, {"EndTime": 1552350180.21222, "FinalMinimizedSolution": ["3", "0", "3", "0", "-1", "0", "0"], "FinalCoverage": [33, 10, 18, 4, 69, "7-14,", "22,", "24,", "4->7,", "21->22,", "23->24,", "26->25"], "FinalSolution": ["3", "0", "3", "0", "-1", "0", "0"], "StartTime": 1552350172.9795568, "FoundSolution": true, "NumProbesMade": 37, "InputHistory": [["1", "57 96"], ["1", "5"], ["1", "5", "1"], ["1 b", "5", "1"], ["2", "5", "1"], ["2", "1"], ["2", "1", "bB9"], ["2", "1", "4"], ["2", "1", "4", "57 96"], ["2", "1", "4", "6"], ["2", "1", "4", "6", "1"], [], ["6"], ["6", "b"], ["6", "6"], ["6", "6", "57 96"], ["6", "6", "57 0"], ["wsm", "6", "6", "57 0"], ["4", "6", "6", "57 0"], ["1", "57 96"], ["1", "-1"], ["1", "-1", "-1"], ["1", "yiv", "-1", "-1"], ["1", "5", "-1", "-1"], ["1", "2", "5", "-1", "-1"], ["b", "1", "2", "5", "-1", "-1"], ["7", "1", "2", "5", "-1", "-1"], ["b"], ["5"], ["5", "B-5"], ["5", "5"], ["5", "5", "57 96"], ["5", "5", "57 10.50"], ["5", "5", "57 9"], ["5", "5", "5", "57 9"], ["9", "b"], ["9", "1"], ["9", "1", "57 96"], ["9", "1", "57 96", "57 96"], ["9", "1", "57 96", "1"], ["9", "1", "57 96", "1", "57 96"], ["9", "1", "57 96", "1", "57 96", "57 96"], ["9", "1", "57 96", "1", "57 96", "9"], ["9", "1", "57 96", "1", "57 96", "9", "9"], ["9", "1", "57 96", "lp8", "1", "57 96", "9", "9"], ["9", "1", "57 96", "3", "1", "57 96", "9", "9"], ["9", "1", "57 96", "3", "1", "57 96", "9"], ["9", "1", "57 96", "3", "1 dV5", "57 96", "9"], ["9", "1", "57 96", "3", "1 1", "57 96", "9"], ["9", "1", "57 96", "b", "3", "1 1", "57 96", "9"], ["9", "1", "57 96", "3", "3", "1 1", "57 96", "9"], ["1", "57 96", "3", "3", "1 1", "57 96", "9"], ["1", "57 96", "3", "3", "1 1", "3", "9"], ["1", "57 96"], ["1", "4"], ["1", "4", "1"], ["1", "57 96", "4", "1"], ["1", "3", "4", "1"], [" "], ["2"], ["852", "2"], ["852", "2", "2"], ["1", "57 96"], ["1", "2"], ["1", "2", "1"], ["1", "2 3 4", "2", "1"], ["1", "8", "2", "1"], ["8", "2", "1"], ["8", "2 PsR", "1"], ["8", "5", "1"], ["maickel = 2", "b"], ["c9M", "b"], ["8", "b"], ["8", "0"], ["8", "0", "8"], ["8", "0", "8", "1"], ["8", "0", "8", "1", "1"], ["8", "0", "8", "1", "1", "1"], ["8", "0", "8", "1", "1", "1", "1"], ["8", "0", "8", "1", "1", "1", "1", "0"], ["8", "0", "8", "1", "1", "1", "1", "0", "0"], ["8", "0", "8", "1", "1", "1", "1", "0", "0", "0"], ["8", "0", "8", "1", "1", "1", "1", "0", "0", "0", "8"], ["8", "0", "8", "1", "1", "1", "1", "0", "0", "0", "8", "8"], ["8", "0", "8", "1", "1", "1", "1", "0", "0", "0", "8", "8", "0"], ["8", "0", "8", "1", "1", "1", "1", "1", "0", "0", "0", "8", "8", "0"], ["8", "0", "8", "1", "1", "1", "1", "1", "0", "0", "0", "8", "8"], ["8", "0", "8", "1", "1", "1", "1", "0", "0", "8", "8"], ["8", "0", "8", "1 0", "1", "1", "1", "0", "0", "8", "8"], ["8", "0", "8", "5", "1", "1", "1", "0", "0", "8", "8"], ["8", "0", "8", "5", "1", "1", "1", "xMw", "0", "0", "8", "8"], ["8", "0", "8", "5", "1", "1", "xMw", "0", "0", "8", "8"], ["feets", "0"], ["3", "0"], ["3", "0", "3"], ["3", "0", "3", "0"], ["3", "0", "3", "0", "b"], ["3", "0", "3", "0", "-1"], ["3", "0", "3", "0", "-1", "0"]]}, {"EndTime": 1552350181.275205, "FinalMinimizedSolution": ["1", "1", "57 96"], "FinalCoverage": [33, 1, 18, 1, 96, "24,", "23->24"], "FinalSolution": ["1", "1", "57 96"], "StartTime": 1552350180.213617, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1", "57 96"], ["1", "5"], ["1", "5", "1"], ["1 b", "5", "1"], ["2", "5", "1"], ["2", "1"], ["2", "1", "bB9"], ["2", "1", "4"], ["2", "1", "4", "57 96"], ["2", "1", "4", "6"], ["2", "1", "4", "6", "1"], [], ["6"], ["6", "b"], ["6", "6"], ["6", "6", "57 96"], ["6", "6", "57 0"], ["wsm", "6", "6", "57 0"], ["4", "6", "6", "57 0"], ["1", "57 96"], ["1", "-1"], ["1", "-1", "-1"], ["1", "yiv", "-1", "-1"], ["1", "5", "-1", "-1"], ["1", "2", "5", "-1", "-1"], ["b", "1", "2", "5", "-1", "-1"], ["7", "1", "2", "5", "-1", "-1"], ["b"], ["5"], ["5", "B-5"], ["5", "5"], ["5", "5", "57 96"], ["5", "5", "57 10.50"], ["5", "5", "57 9"], ["5", "5", "5", "57 9"], ["9", "b"], ["9", "1"], ["9", "1", "57 96"], ["9", "1", "57 96", "57 96"], ["9", "1", "57 96", "1"], ["9", "1", "57 96", "1", "57 96"], ["9", "1", "57 96", "1", "57 96", "57 96"], ["9", "1", "57 96", "1", "57 96", "9"], ["9", "1", "57 96", "1", "57 96", "9", "9"], ["9", "1", "57 96", "lp8", "1", "57 96", "9", "9"], ["9", "1", "57 96", "3", "1", "57 96", "9", "9"], ["9", "1", "57 96", "3", "1", "57 96", "9"], ["9", "1", "57 96", "3", "1 dV5", "57 96", "9"], ["9", "1", "57 96", "3", "1 1", "57 96", "9"], ["9", "1", "57 96", "b", "3", "1 1", "57 96", "9"], ["9", "1", "57 96", "3", "3", "1 1", "57 96", "9"], ["1", "57 96", "3", "3", "1 1", "57 96", "9"], ["1", "57 96", "3", "3", "1 1", "3", "9"], ["1", "57 96"], ["1", "4"], ["1", "4", "1"], ["1", "57 96", "4", "1"], ["1", "3", "4", "1"], [" "], ["2"], ["852", "2"], ["852", "2", "2"], ["1", "57 96"], ["1", "2"], ["1", "2", "1"], ["1", "2 3 4", "2", "1"], ["1", "8", "2", "1"], ["8", "2", "1"], ["8", "2 PsR", "1"], ["8", "5", "1"], ["maickel = 2", "b"], ["c9M", "b"], ["8", "b"], ["8", "0"], ["8", "0", "8"], ["8", "0", "8", "1"], ["8", "0", "8", "1", "1"], ["8", "0", "8", "1", "1", "1"], ["8", "0", "8", "1", "1", "1", "1"], ["8", "0", "8", "1", "1", "1", "1", "0"], ["8", "0", "8", "1", "1", "1", "1", "0", "0"], ["8", "0", "8", "1", "1", "1", "1", "0", "0", "0"], ["8", "0", "8", "1", "1", "1", "1", "0", "0", "0", "8"], ["8", "0", "8", "1", "1", "1", "1", "0", "0", "0", "8", "8"], ["8", "0", "8", "1", "1", "1", "1", "0", "0", "0", "8", "8", "0"], ["8", "0", "8", "1", "1", "1", "1", "1", "0", "0", "0", "8", "8", "0"], ["8", "0", "8", "1", "1", "1", "1", "1", "0", "0", "0", "8", "8"], ["8", "0", "8", "1", "1", "1", "1", "0", "0", "8", "8"], ["8", "0", "8", "1 0", "1", "1", "1", "0", "0", "8", "8"], ["8", "0", "8", "5", "1", "1", "1", "0", "0", "8", "8"], ["8", "0", "8", "5", "1", "1", "1", "xMw", "0", "0", "8", "8"], ["8", "0", "8", "5", "1", "1", "xMw", "0", "0", "8", "8"], ["feets", "0"], ["3", "0"], ["3", "0", "3"], ["3", "0", "3", "0"], ["3", "0", "3", "0", "b"], ["3", "0", "3", "0", "-1"], ["3", "0", "3", "0", "-1", "0"], ["1", "57 96"], ["1", "1"]]}]], [{"CorrectInputs": [[["A G"], 1544409562], [["X V"], 1544410319]], "UniqueId": "2ae54cb4-9a6e-4690-fc6a-ef9f16a4fe81_0", "CoverageInfo": [15, 3, 8, 3, 74, "12-13,", "17,", "9->exit,", "10->17,", "11->12"], "TimeStamp": 1544409609, "BadInput": ["A Z"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 10, in <module>\n    if s[0] in d:\nIndexError: list index out of range\n", "ip": "178.218.27.85"}, [{"InputHistoryoNA"], ["B : A oNA"], ["B : A"], ["B :"], ["B 10,3"], [""], [" "], ["W : V", ""], ["W : E : D", ""], ["W : E : D", "", ""], ["W : E : D", "-1,5", "", ""], ["W : E : D", "-1,5", "", "Y : X A", ""]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552292598.899608, "StartTime": 1552292588.0572207}, {"EndTime": 1552292605.636575, "FinalMinimizedSolution": ["A F"], "FinalCoverage": [15, 1, 8, 2, 87, "17,", "9->exit,", "10->17"], "FinalSolution": ["A F"], "StartTime": 1552292598.8998654, "FoundSolution": true, "NumProbesMade": 32, "InputHistoryoNA"], ["B : A oNA"], ["B : A"], ["B :"], ["B 10,3"], [""], [" "], ["W : V", ""], ["W : E : D", ""], ["W : E : D", "", ""], ["W : E : D", "-1,5", "", ""], ["W : E : D", "-1,5", "", "Y : X A", ""], ["A Z"], ["A", "Z"], ["A", "Z Z"], ["A", "Z Z Z"], ["A", "Z Z Z Z"], ["A", "Z Z Z Z Z"], ["A", "Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z Z Z Z"], ["A"], ["A A"], ["A : C B", ""], ["A : C B", "95.4.", ""], ["p6-"], ["p6- p6-"], ["p6-", "p6-"], ["p6-", "p6- p6-"], ["p6-", "p6- p6- p6-"], ["p6-", "p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6- F : D"], ["p6- F :"], ["p6- F"]]}, {"InputHistoryoNA"], ["B : A oNA"], ["B : A"], ["B :"], ["B 10,3"], [""], [" "], ["W : V", ""], ["W : E : D", ""], ["W : E : D", "", ""], ["W : E : D", "-1,5", "", ""], ["W : E : D", "-1,5", "", "Y : X A", ""], ["A Z"], ["A", "Z"], ["A", "Z Z"], ["A", "Z Z Z"], ["A", "Z Z Z Z"], ["A", "Z Z Z Z Z"], ["A", "Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z Z Z Z"], ["A"], ["A A"], ["A : C B", ""], ["A : C B", "95.4.", ""], ["p6-"], ["p6- p6-"], ["p6-", "p6-"], ["p6-", "p6- p6-"], ["p6-", "p6- p6- p6-"], ["p6-", "p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6- F : D"], ["p6- F :"], ["p6- F"], ["A Z"], ["A F : D"], ["A F :"], [" W : V"], ["W 25 12"], ["W 25"], ["W 1"], ["D:B C 1"], ["D:B C"], ["A Z", ""], ["A Z", "A", ""], ["A Z", "A", " G : F"], ["A Z", "YsY", "A", " G : F"], ["A Z", "YsY", "A", "lp2 G : F"], ["A", "Z", "YsY", "A", "lp2 G : F"], ["A", "Z", "YsY", "A", "lp2 G : F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F F F F F"], ["A", "Z", "YsY", "A"], ["A", "Z", "YsY", "A A"], ["A", "Z", "YsY", "A A A"], ["A", "Z", "YsY", "A A A A"], ["A", "Z", "YsY", "A A A A A"], ["A", "Z", "YsY", "A A A A A A"], ["A", "Z", "YsY", "A A A A A A A"], ["A", "Z", "YsY", "A A A A A A A A"], ["A", "Z", "YsY", "A A A A A A A A A"], ["A", "Z", "YsY", "A A A A A A A A A A"], ["A", "Z", "YsY", "A A A A A A A A A A A"], ["A", "Z", "YsY"], ["A", "Z", "YsY YsY"], ["A", "Z", "YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY YsY YsY YsY YsY"], ["A", "A", "Z"], ["A", "A", "Z Z"], ["A", "A", "Z Z Z"], ["A", "A", "Z Z Z Z"], ["A", "A", "Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z Z Z Z Z"], ["A", "A"], ["A", "A A"], ["A", "A A A"], ["A", "A A A A"], ["A", "A A A A A"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552292617.0183647, "StartTime": 1552292605.6374393}, {"InputHistory": [["A Z"], ["\"99\" Z"], ["D : B C Z"], ["D : B C"], ["D : B"], ["D :"], ["D", ":"], ["D", ": :"], ["D", ": : :"], ["D", ": : : :"], ["D", ": : : : :"], ["D", ": : : : : :"], ["D", ": : : : : : :"], ["D", ": : : : : : : :"], ["D", ": : : : : : : : :"], ["D", ": : : : : : : : : :"], ["D", ": : : : : : : : : : :"], ["D"], ["D D"], ["D", "D"], ["D", "D D"], ["D", "D D D"], ["D", "D D D D"], ["D", "D D D D D"], ["D", "D D D D D D"], ["D", "D D D D D D D"], ["D", "D D D D D D D D"], ["D", "D D D D D D D D D"], ["D", "D D D D D D D D D D"], ["D", "D D D D D D D D D D D"], [], ["W : V F : D D"], ["W : V F : D"], ["W : V F :"], ["W : V F"], ["W : V"], ["W :"], ["W 100 100"], ["W 100"], ["9 100"], ["9 10 2 10 3"], ["9 10 2 10"], ["9 10 2"], ["9 10"], ["C : A 10"], ["C : A"], ["C :"], ["X :"], ["X oNA"], ["B : A oNA"], ["B : A"], ["B :"], ["B 10,3"], [""], [" "], ["W : V", ""], ["W : E : D", ""], ["W : E : D", "", ""], ["W : E : D", "-1,5", "", ""], ["W : E : D", "-1,5", "", "Y : X A", ""], ["A Z"], ["A", "Z"], ["A", "Z Z"], ["A", "Z Z Z"], ["A", "Z Z Z Z"], ["A", "Z Z Z Z Z"], ["A", "Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z Z Z Z"], ["A"], ["A A"], ["A : C B", ""], ["A : C B", "95.4.", ""], ["p6-"], ["p6- p6-"], ["p6-", "p6-"], ["p6-", "p6- p6-"], ["p6-", "p6- p6- p6-"], ["p6-", "p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6- F : D"], ["p6- F :"], ["p6- F"], ["A Z"], ["A F : D"], ["A F :"], [" W : V"], ["W 25 12"], ["W 25"], ["W 1"], ["D:B C 1"], ["D:B C"], ["A Z", ""], ["A Z", "A", ""], ["A Z", "A", " G : F"], ["A Z", "YsY", "A", " G : F"], ["A Z", "YsY", "A", "lp2 G : F"], ["A", "Z", "YsY", "A", "lp2 G : F"], ["A", "Z", "YsY", "A", "lp2 G : F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F F F F F"], ["A", "Z", "YsY", "A"], ["A", "Z", "YsY", "A A"], ["A", "Z", "YsY", "A A A"], ["A", "Z", "YsY", "A A A A"], ["A", "Z", "YsY", "A A A A A"], ["A", "Z", "YsY", "A A A A A A"], ["A", "Z", "YsY", "A A A A A A A"], ["A", "Z", "YsY", "A A A A A A A A"], ["A", "Z", "YsY", "A A A A A A A A A"], ["A", "Z", "YsY", "A A A A A A A A A A"], ["A", "Z", "YsY", "A A A A A A A A A A A"], ["A", "Z", "YsY"], ["A", "Z", "YsY YsY"], ["A", "Z", "YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY YsY YsY YsY YsY"], ["A", "A", "Z"], ["A", "A", "Z Z"], ["A", "A", "Z Z Z"], ["A", "A", "Z Z Z Z"], ["A", "A", "Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z Z Z Z Z"], ["A", "A"], ["A", "A A"], ["A", "A A A"], ["A", "A A A A"], ["A", "A A A A A"], ["A Z"], ["A V : Z Y"], ["A V : Z"], ["A V :"], ["A V"], ["\u02c7", "A"], ["\u02c7", "A A"], ["\u02c7", "A A A"], ["\u02c7", "A A A A"], ["\u02c7", "A A A A A"], ["\u02c7", "A A A A A A"], ["\u02c7", "A A A A A A A"], ["\u02c7", "A A A A A A A A"], ["\u02c7", "A A A A A A A A A"], ["\u02c7", "A A A A A A A A A A"], ["\u02c7", "A A A A A A A A A A A"], ["\u02c7"], ["\u02c7 \u02c7"], ["\u02c7 1001"], ["\u02c7 W : V"], ["\u02c7 W :"], ["\u02c7 W"], ["a W"], ["a", "W"], ["a", "W W"], ["a", "W W W"], ["a", "W W W W"], ["a", "W W W W W"], ["a", "W W W W W W"], ["a", "W W W W W W W"], ["a", "W W W W W W W W"], ["a", "W W W W W W W W W"], ["a", "W W W W W W W W W W"], ["a", "W W W W W W W W W W W"], ["a"], ["a a"], ["a 15"], ["a", "15"], ["a", "15 15"], ["a", "15 15 15"], ["a", "15 15 15 15"], ["a", "15 15 15 15 15"], ["a", "15 15 15 15 15 15"], ["a", "15 15 15 15 15 15 15"], ["a", "15 15 15 15 15 15 15 15"], ["a", "15 15 15 15 15 15 15 15 15"], ["a", "15 15 15 15 15 15 15 15 15 15"], ["a", "15 15 15 15 15 15 15 15 15 15 15"], ["m8k"], ["m8k m8k"], ["1 1 m8k"], ["1 1"], ["1", "1"], ["1", "1 1"], ["1", "1 1 1"], ["1", "1 1 1 1"], ["1", "1 1 1 1 1"], ["1", "1 1 1 1 1 1"], ["1", "1 1 1 1 1 1 1"], ["1", "1 1 1 1 1 1 1 1"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552292628.377075, "StartTime": 1552292617.0196817}, {"InputHistoryoNA"], ["B : A oNA"], ["B : A"], ["B :"], ["B 10,3"], [""], [" "], ["W : V", ""], ["W : E : D", ""], ["W : E : D", "", ""], ["W : E : D", "-1,5", "", ""], ["W : E : D", "-1,5", "", "Y : X A", ""], ["A Z"], ["A", "Z"], ["A", "Z Z"], ["A", "Z Z Z"], ["A", "Z Z Z Z"], ["A", "Z Z Z Z Z"], ["A", "Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z Z Z"], ["A", "Z Z Z Z Z Z Z Z Z Z Z"], ["A"], ["A A"], ["A : C B", ""], ["A : C B", "95.4.", ""], ["p6-"], ["p6- p6-"], ["p6-", "p6-"], ["p6-", "p6- p6-"], ["p6-", "p6- p6- p6-"], ["p6-", "p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6-", "p6- p6- p6- p6- p6- p6- p6- p6- p6- p6- p6-"], ["p6- F : D"], ["p6- F :"], ["p6- F"], ["A Z"], ["A F : D"], ["A F :"], [" W : V"], ["W 25 12"], ["W 25"], ["W 1"], ["D:B C 1"], ["D:B C"], ["A Z", ""], ["A Z", "A", ""], ["A Z", "A", " G : F"], ["A Z", "YsY", "A", " G : F"], ["A Z", "YsY", "A", "lp2 G : F"], ["A", "Z", "YsY", "A", "lp2 G : F"], ["A", "Z", "YsY", "A", "lp2 G : F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F F F F"], ["A", "Z", "YsY", "A", "lp2 G : F F F F F F F F"], ["A", "Z", "YsY", "A"], ["A", "Z", "YsY", "A A"], ["A", "Z", "YsY", "A A A"], ["A", "Z", "YsY", "A A A A"], ["A", "Z", "YsY", "A A A A A"], ["A", "Z", "YsY", "A A A A A A"], ["A", "Z", "YsY", "A A A A A A A"], ["A", "Z", "YsY", "A A A A A A A A"], ["A", "Z", "YsY", "A A A A A A A A A"], ["A", "Z", "YsY", "A A A A A A A A A A"], ["A", "Z", "YsY", "A A A A A A A A A A A"], ["A", "Z", "YsY"], ["A", "Z", "YsY YsY"], ["A", "Z", "YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY YsY YsY YsY"], ["A", "Z", "YsY YsY YsY YsY YsY YsY YsY YsY YsY YsY YsY"], ["A", "A", "Z"], ["A", "A", "Z Z"], ["A", "A", "Z Z Z"], ["A", "A", "Z Z Z Z"], ["A", "A", "Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z Z Z Z"], ["A", "A", "Z Z Z Z Z Z Z Z Z Z Z"], ["A", "A"], ["A", "A A"], ["A", "A A A"], ["A", "A A A A"], ["A", "A A A A A"], ["A Z"], ["A V : Z Y"], ["A V : Z"], ["A V :"], ["A V"], ["\u02c7", "A"], ["\u02c7", "A A"], ["\u02c7", "A A A"], ["\u02c7", "A A A A"], ["\u02c7", "A A A A A"], ["\u02c7", "A A A A A A"], ["\u02c7", "A A A A A A A"], ["\u02c7", "A A A A A A A A"], ["\u02c7", "A A A A A A A A A"], ["\u02c7", "A A A A A A A A A A"], ["\u02c7", "A A A A A A A A A A A"], ["\u02c7"], ["\u02c7 \u02c7"], ["\u02c7 1001"], ["\u02c7 W : V"], ["\u02c7 W :"], ["\u02c7 W"], ["a W"], ["a", "W"], ["a", "W W"], ["a", "W W W"], ["a", "W W W W"], ["a", "W W W W W"], ["a", "W W W W W W"], ["a", "W W W W W W W"], ["a", "W W W W W W W W"], ["a", "W W W W W W W W W"], ["a", "W W W W W W W W W W"], ["a", "W W W W W W W W W W W"], ["a"], ["a a"], ["a 15"], ["a", "15"], ["a", "15 15"], ["a", "15 15 15"], ["a", "15 15 15 15"], ["a", "15 15 15 15 15"], ["a", "15 15 15 15 15 15"], ["a", "15 15 15 15 15 15 15"], ["a", "15 15 15 15 15 15 15 15"], ["a", "15 15 15 15 15 15 15 15 15"], ["a", "15 15 15 15 15 15 15 15 15 15"], ["a", "15 15 15 15 15 15 15 15 15 15 15"], ["m8k"], ["m8k m8k"], ["1 1 m8k"], ["1 1"], ["1", "1"], ["1", "1 1"], ["1", "1 1 1"], ["1", "1 1 1 1"], ["1", "1 1 1 1 1"], ["1", "1 1 1 1 1 1"], ["1", "1 1 1 1 1 1 1"], ["1", "1 1 1 1 1 1 1 1"], ["A Z"], ["90Y", "A", "Z"], ["90Y", "A", "Z Z"], ["90Y", "A", "Z Z Z"], ["90Y", "A", "Z Z Z Z"], ["90Y", "A", "Z Z Z Z Z"], ["90Y", "A", "Z Z Z Z Z Z"], ["90Y", "A", "Z Z Z Z Z Z Z"], ["90Y", "A", "Z Z Z Z Z Z Z Z"], ["90Y", "A", "Z Z Z Z Z Z Z Z Z"], ["90Y", "A", "Z Z Z Z Z Z Z Z Z Z"], ["90Y", "A", "Z Z Z Z Z Z Z Z Z Z Z"], ["90Y", "A"], ["90Y", "A A"], ["90Y", "A A A"], ["90Y", "A A A A"], ["90Y", "A A A A A"], ["90Y", "A A A A A A"], ["90Y", "A A A A A A A"], ["90Y", "A A A A A A A A"], ["90Y", "A A A A A A A A A"], ["90Y", "A A A A A A A A A A"], ["90Y", "A A A A A A A A A A A"], ["90Y"], ["90Y 90Y"], ["90Y kati"], ["Y : X A"], ["Y : X"], ["Y :"], ["Y", ":"], ["Y", ": :"], ["Y", ": : :"], ["Y", ": : : :"], ["Y", ": : : : :"], ["Y", ": : : : : :"], ["Y", ": : : : : : :"], ["Y", ": : : : : : : :"], ["Y", ": : : : : : : : :"], ["Y", ": : : : : : : : : :"], ["Y", ": : : : : : : : : : :"], ["Y"], ["Y Y"], ["Y 10 20"], ["Y 10"], ["D : B C 10"], ["D B : A B C"], ["D B : A B"], ["D B : A"], ["D B :"], ["D B"], ["V : Z Y B"], ["V : Z Y"], ["V : Z"], ["V :"], ["vallon :"], ["K5t :"], ["FFE"], ["FFE FFE"], ["bZW FFE"], ["bZW 363466586900-5324"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552292639.6994631, "StartTime": 1552292628.3788393}]], [{"CorrectInputs": [[["8"], 1520957864]], "UniqueId": "b164d154-24a2-48b7-d5ce-e0cd0f020184_0", "CoverageInfo": [9, 4, 6, 3, 53, "7-8,", "11-13,", "6->7,", "10->11,", "10->13"], "TimeStamp": 1520957929, "BadInput": ["1"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 10, in <module>\n    if found==True:\nNameError: name 'found' is not defined\n", "ip": "194.63.239.242"}, [{"EndTime": 1552351864.8647456, "FinalMinimizedSolution": ["9"], "FinalCoverage": [9, 1, 6, 2, 80, "13,", "5->10,", "10->13"], "FinalSolution": ["9", "1"], "StartTime": 1552351863.9502907, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1"]]}, {"EndTime": 1552351867.0594594, "FinalMinimizedSolution": ["9"], "FinalCoverage": [9, 1, 6, 2, 80, "13,", "5->10,", "10->13"], "FinalSolution": ["9", "0ul", "1,2,3, 3,4,5", "1"], "StartTime": 1552351864.8649144, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["1"], ["1"], ["X87", "1"], ["3", "1"], ["3", "0ul", "1"], ["3", "0ul", "1,2,3, 3,4,5", "1"], ["3 Kd9", "0ul", "1,2,3, 3,4,5", "1"], ["3 v4M", "0ul", "1,2,3, 3,4,5", "1"]]}, {"EndTime": 1552351869.2790942, "FinalMinimizedSolution": ["9"], "FinalCoverage": [9, 1, 6, 2, 80, "13,", "5->10,", "10->13"], "FinalSolution": ["9", "2", "6", "1", "1"], "StartTime": 1552351867.059695, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["1"], ["1"], ["X87", "1"], ["3", "1"], ["3", "0ul", "1"], ["3", "0ul", "1,2,3, 3,4,5", "1"], ["3 Kd9", "0ul", "1,2,3, 3,4,5", "1"], ["3 v4M", "0ul", "1,2,3, 3,4,5", "1"], ["1"], ["1", "1"], ["Oow", "1", "1"], ["2", "1", "1"], ["2", "a", "1", "1"], ["a", "2", "a", "1", "1"], ["a", "2", "6", "1", "1"]]}, {"EndTime": 1552351871.653037, "FinalMinimizedSolution": ["9"], "FinalCoverage": [9, 1, 6, 2, 80, "13,", "5->10,", "10->13"], "FinalSolution": ["9"], "StartTime": 1552351869.2794058, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["1"], ["1"], ["X87", "1"], ["3", "1"], ["3", "0ul", "1"], ["3", "0ul", "1,2,3, 3,4,5", "1"], ["3 Kd9", "0ul", "1,2,3, 3,4,5", "1"], ["3 v4M", "0ul", "1,2,3, 3,4,5", "1"], ["1"], ["1", "1"], ["Oow", "1", "1"], ["2", "1", "1"], ["2", "a", "1", "1"], ["a", "2", "a", "1", "1"], ["a", "2", "6", "1", "1"], ["1"], ["5f4", "1"], ["0", "1"], ["0", "K5u", "1"], ["K5u", "0", "K5u", "1"], ["K5u", "0", "10", "1"], ["-1", "0", "10", "1"], ["-1", "0", "10", "0", "1"], []]}, {"EndTime": 1552351873.3284888, "FinalMinimizedSolution": ["9"], "FinalCoverage": [9, 1, 6, 2, 80, "13,", "5->10,", "10->13"], "FinalSolution": ["9", "9"], "StartTime": 1552351871.6534395, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [["1"], ["1"], ["X87", "1"], ["3", "1"], ["3", "0ul", "1"], ["3", "0ul", "1,2,3, 3,4,5", "1"], ["3 Kd9", "0ul", "1,2,3, 3,4,5", "1"], ["3 v4M", "0ul", "1,2,3, 3,4,5", "1"], ["1"], ["1", "1"], ["Oow", "1", "1"], ["2", "1", "1"], ["2", "a", "1", "1"], ["a", "2", "a", "1", "1"], ["a", "2", "6", "1", "1"], ["1"], ["5f4", "1"], ["0", "1"], ["0", "K5u", "1"], ["K5u", "0", "K5u", "1"], ["K5u", "0", "10", "1"], ["-1", "0", "10", "1"], ["-1", "0", "10", "0", "1"], [], ["1"], ["1 oVk"], ["3"], ["3", "3"], ["R-m"]]}]], [{"CorrectInputs": [[["4", "3", "7"], 1528999360]], "UniqueId": "cfc64210-88ed-4c15-bb36-dc9e94ca0a0a_0", "CoverageInfo": [10, 2, 4, 2, 71, "8-9,", "7->8,", "10->exit"], "TimeStamp": 1528999446, "BadInput": ["7", "8", "3"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    print('O numero menor \u00e9 {}'.format(Menor))\nNameError: name 'Menor' is not defined\n", "ip": "187.123.72.66"}, [{"EndTime": 1552284477.272967, "FinalMinimizedSolution": ["7", "-1", "8"], "FinalCoverage": [10, 2, 4, 2, 71, "11-12,", "7->10,", "10->11"], "FinalSolution": ["7", "-1", "8", "0", "5"], "StartTime": 1552284475.3615391, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["7", "8", "3"], ["7", "8", "3 Pmk"], ["7", "8", "5"], ["7", "8", "3,sri,87", "5"], ["7", "8", "0", "5"], ["7", "3oe", "8", "0", "5"]]}, {"EndTime": 1552284478.3769152, "FinalMinimizedSolution": ["4", "7", "8"], "FinalCoverage": [10, 4, 4, 2, 57, "8-9,", "11-12,", "7->8,", "10->11"], "FinalSolution": ["4", "7", "8", "3"], "StartTime": 1552284477.2732458, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["7", "8", "3"], ["7", "8", "3 Pmk"], ["7", "8", "5"], ["7", "8", "3,sri,87", "5"], ["7", "8", "0", "5"], ["7", "3oe", "8", "0", "5"], ["7", "8", "3"], ["wgY", "7", "8", "3"]]}, {"EndTime": 1552284480.6252244, "FinalMinimizedSolution": ["7", "6", "8"], "FinalCoverage": [10, 2, 4, 2, 71, "11-12,", "7->10,", "10->11"], "FinalSolution": ["7", "6", "8", "5", "3"], "StartTime": 1552284478.3772564, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["7", "8", "3"], ["7", "8", "3 Pmk"], ["7", "8", "5"], ["7", "8", "3,sri,87", "5"], ["7", "8", "0", "5"], ["7", "3oe", "8", "0", "5"], ["7", "8", "3"], ["wgY", "7", "8", "3"], ["7", "8", "3"], ["7", "8", "a", "3"], ["7", "8", "6", "3"], ["7", "6", "3"], ["7", "6", "5", "3"], ["7", "6", "7fl", "5", "3"], ["7", "6", "4", "5", "3"], ["7", "6", "4 7yi", "5", "3"]]}, {"EndTime": 1552284481.8725667, "FinalMinimizedSolution": ["7", "5", "7"], "FinalCoverage": [10, 2, 4, 2, 71, "11-12,", "7->10,", "10->11"], "FinalSolution": ["7", "5", "7"], "StartTime": 1552284480.6255815, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["7", "8", "3"], ["7", "8", "3 Pmk"], ["7", "8", "5"], ["7", "8", "3,sri,87", "5"], ["7", "8", "0", "5"], ["7", "3oe", "8", "0", "5"], ["7", "8", "3"], ["wgY", "7", "8", "3"], ["7", "8", "3"], ["7", "8", "a", "3"], ["7", "8", "6", "3"], ["7", "6", "3"], ["7", "6", "5", "3"], ["7", "6", "7fl", "5", "3"], ["7", "6", "4", "5", "3"], ["7", "6", "4 7yi", "5", "3"], ["7", "8", "3"], ["7", "8", "3 4UO"], ["7", "5"]]}, {"EndTime": 1552284482.7904806, "FinalMinimizedSolution": ["7", "8", "8"], "FinalCoverage": [10, 4, 4, 2, 57, "8-9,", "11-12,", "7->8,", "10->11"], "FinalSolution": ["7", "8", "8", "3"], "StartTime": 1552284481.872947, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["7", "8", "3"], ["7", "8", "3 Pmk"], ["7", "8", "5"], ["7", "8", "3,sri,87", "5"], ["7", "8", "0", "5"], ["7", "3oe", "8", "0", "5"], ["7", "8", "3"], ["wgY", "7", "8", "3"], ["7", "8", "3"], ["7", "8", "a", "3"], ["7", "8", "6", "3"], ["7", "6", "3"], ["7", "6", "5", "3"], ["7", "6", "7fl", "5", "3"], ["7", "6", "4", "5", "3"], ["7", "6", "4 7yi", "5", "3"], ["7", "8", "3"], ["7", "8", "3 4UO"], ["7", "5"], ["7", "8", "3"]]}]], [{"CorrectInputs": [[["8", "h", "h", "h", "l", "h", "l", "c"], 1526698491]], "UniqueId": "59fc5e3b-3eb7-4056-8759-8da3ca6b5062_0", "CoverageInfo": [19, 13, 12, 1, 23, "8-22,", "6->10"], "TimeStamp": 1526698509, "BadInput": ["50"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 7, in <module>\n    q = input('Is your secret number '+str(guess)+'?',end='')\nTypeError: input() takes no keyword arguments\n", "ip": "198.62.98.23"}, [{"EndTime": 1552278973.3903153, "FinalMinimizedSolution": ["4", "50", "fA4"], "FinalCoverage": [19, 7, 12, 5, 55, "7-9,", "13,", "15,", "18,", "22,", "6->7,", "10->20,", "12->13,", "14->15,", "21->22"], "FinalSolution": ["4", "50", "fA4"], "StartTime": 1552278971.9115536, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["50"], [], ["4"], ["4", "50"]]}, {"EndTime": 1552278974.6363523, "FinalMinimizedSolution": ["8", "50", "50"], "FinalCoverage": [19, 7, 12, 5, 55, "7-9,", "13,", "15,", "18,", "22,", "6->7,", "10->20,", "12->13,", "14->15,", "21->22"], "FinalSolution": ["8", "50", "50"], "StartTime": 1552278973.390513, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["50"], [], ["4"], ["4", "50"], ["50"], ["h", "50"], ["8", "50"]]}, {"EndTime": 1552278976.0286791, "FinalMinimizedSolution": ["1", "50", "50"], "FinalCoverage": [19, 7, 12, 5, 55, "7-9,", "13,", "15,", "18,", "22,", "6->7,", "10->20,", "12->13,", "14->15,", "21->22"], "FinalSolution": ["1", "50", "50"], "StartTime": 1552278974.6365697, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["50"], [], ["4"], ["4", "50"], ["50"], ["h", "50"], ["8", "50"], ["50"], ["50 D1L"], ["1"], ["1", "50"]]}, {"EndTime": 1552278977.2701406, "FinalMinimizedSolution": ["10", "50", "10"], "FinalCoverage": [19, 7, 12, 5, 55, "7-9,", "13,", "15,", "18,", "22,", "6->7,", "10->20,", "12->13,", "14->15,", "21->22"], "FinalSolution": ["10", "50", "10"], "StartTime": 1552278976.0289233, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["50"], [], ["4"], ["4", "50"], ["50"], ["h", "50"], ["8", "50"], ["50"], ["50 D1L"], ["1"], ["1", "50"], ["50"], ["G3G", "50"], ["10", "50"]]}, {"EndTime": 1552278978.700087, "FinalMinimizedSolution": ["5", "1", "50"], "FinalCoverage": [19, 7, 12, 5, 55, "7-9,", "13,", "15,", "18,", "22,", "6->7,", "10->20,", "12->13,", "14->15,", "21->22"], "FinalSolution": ["5", "1", "50"], "StartTime": 1552278977.2704084, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["50"], [], ["4"], ["4", "50"], ["50"], ["h", "50"], ["8", "50"], ["50"], ["50 D1L"], ["1"], ["1", "50"], ["50"], ["G3G", "50"], ["10", "50"], ["50"], ["-7V"], ["l", "1"], ["5", "1"]]}]], [{"CorrectInputs": [[["5", "5 4  4 6 7"], 1537670862]], "UniqueId": "e6fec5b8-8758-4a26-f240-041b80f108bd_0", "CoverageInfo": [9, 1, 8, 2, 82, "9,", "1->exit,", "6->9"], "TimeStamp": 1537671150, "BadInput": ["5", "57 57 -57 57 57"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 7, in <module>\n    if(arr[i]==max(arr)):\nIndexError: list index out of range\n", "ip": "202.142.69.63"}, [{"EndTime": 1552277752.389576, "FinalMinimizedSolution": ["0", "57 57 -57 57 57"], "FinalCoverage": [9, 3, 8, 3, 53, "5,", "7-8,", "1->exit,", "4->5,", "6->7"], "FinalSolution": ["0", "57 57 -57 57 57"], "StartTime": 1552277750.2124162, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["5", "57 57 -57 57 57"], [], ["6"], ["6", "__main__"], ["6", "8"], ["8", "6", "8"], ["zib"], ["0"]]}, {"InputHistory": [["5", "57 57 -57 57 57"], [], ["6"], ["6", "__main__"], ["6", "8"], ["8", "6", "8"], ["zib"], ["0"], ["5", "57 57 -57 57 57"], ["5", "57 57 u2- 57 57"], ["5", "57 57 8 57 57"], ["23", "5", "57 57 8 57 57"], ["23", "5", "57 57 8 13 14 57"], ["23", "5", "57 57 70 13 14 57"], ["5", "57 57 70 13 14 57"], ["__main__", "5", "57 57 70 13 14 57"], ["2", "5", "57 57 70 13 14 57"], ["57 57 70 13 14 57"], ["8"], ["8", "57 57 -57 57 57"], [" Para resolver la mayoria de tus dudas recuerda leer el foroooooooooooPara resolver", "8", "57 57 -57 57 57"], ["4", "8", "57 57 -57 57 57"], ["4", "8", "57 57 -57 57 4"], ["4", "__main__", "8", "57 57 -57 57 4"], ["4", "4", "8", "57 57 -57 57 4"], ["3Mu"], ["4"], ["4", "5"], ["10,1,2", "4", "5"], ["3", "4", "5"], ["__main__"], ["9"], ["9", "57 57 -57 57 57"], ["9", "57", "57", "-57", "57", "57"], ["57", "57", "-57", "57", "57"], ["57", "5", "57", "-57", "57", "57"], ["57", "5", "57", "-57", "-57", "57", "57"], ["57", "h9X", "5", "57", "-57", "-57", "57", "57"], ["57", "6", "5", "57", "-57", "-57", "57", "57"], ["57", "6", "57", "-57", "-57", "57", "57"], ["57", "6", "57", "-57", "35", "-57", "57", "57"], ["223"], ["223", "__main__"], ["223", "2"], ["2"], ["2", "k0x"], ["2", "7"], ["2 T0J", "7"], ["8", "7"], ["8", "-9997", "7"], ["8", "__main__", "-9997", "7"], ["8", "3", "-9997", "7"], ["s22"], ["oQs", "__main__"], ["9", "__main__"], ["9", "3"], ["9", "57 57 -57 57 57", "3"], ["__main__", "__main__"], ["__main__", "5"], ["10", "5"], ["10", "IRV", "5"], ["10", "7", "5"], ["10", "7"], ["10 __main__", "7"], ["5", "7"], ["1 1", "5", "7"], ["10", "5", "7"], ["10", "5", "7", "7"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552277763.7230177, "StartTime": 1552277752.3898034}, {"EndTime": 1552277767.417723, "FinalMinimizedSolution": ["-1", "57 57 -57 57 57"], "FinalCoverage": [9, 3, 8, 3, 53, "5,", "7-8,", "1->exit,", "4->5,", "6->7"], "FinalSolution": ["-1", "57 57 -57 57 57"], "StartTime": 1552277763.723758, "FoundSolution": true, "NumProbesMade": 16, "InputHistory": [["5", "57 57 -57 57 57"], [], ["6"], ["6", "__main__"], ["6", "8"], ["8", "6", "8"], ["zib"], ["0"], ["5", "57 57 -57 57 57"], ["5", "57 57 u2- 57 57"], ["5", "57 57 8 57 57"], ["23", "5", "57 57 8 57 57"], ["23", "5", "57 57 8 13 14 57"], ["23", "5", "57 57 70 13 14 57"], ["5", "57 57 70 13 14 57"], ["__main__", "5", "57 57 70 13 14 57"], ["2", "5", "57 57 70 13 14 57"], ["57 57 70 13 14 57"], ["8"], ["8", "57 57 -57 57 57"], [" Para resolver la mayoria de tus dudas recuerda leer el foroooooooooooPara resolver", "8", "57 57 -57 57 57"], ["4", "8", "57 57 -57 57 57"], ["4", "8", "57 57 -57 57 4"], ["4", "__main__", "8", "57 57 -57 57 4"], ["4", "4", "8", "57 57 -57 57 4"], ["3Mu"], ["4"], ["4", "5"], ["10,1,2", "4", "5"], ["3", "4", "5"], ["__main__"], ["9"], ["9", "57 57 -57 57 57"], ["9", "57", "57", "-57", "57", "57"], ["57", "57", "-57", "57", "57"], ["57", "5", "57", "-57", "57", "57"], ["57", "5", "57", "-57", "-57", "57", "57"], ["57", "h9X", "5", "57", "-57", "-57", "57", "57"], ["57", "6", "5", "57", "-57", "-57", "57", "57"], ["57", "6", "57", "-57", "-57", "57", "57"], ["57", "6", "57", "-57", "35", "-57", "57", "57"], ["223"], ["223", "__main__"], ["223", "2"], ["2"], ["2", "k0x"], ["2", "7"], ["2 T0J", "7"], ["8", "7"], ["8", "-9997", "7"], ["8", "__main__", "-9997", "7"], ["8", "3", "-9997", "7"], ["s22"], ["oQs", "__main__"], ["9", "__main__"], ["9", "3"], ["9", "57 57 -57 57 57", "3"], ["__main__", "__main__"], ["__main__", "5"], ["10", "5"], ["10", "IRV", "5"], ["10", "7", "5"], ["10", "7"], ["10 __main__", "7"], ["5", "7"], ["1 1", "5", "7"], ["10", "5", "7"], ["10", "5", "7", "7"], ["5", "57 57 -57 57 57"], ["__main__", "5", "57 57 -57 57 57"], ["10", "5", "57 57 -57 57 57"], ["10", "5", "57 57 - 57 57"], ["`1", "10", "5", "57 57 - 57 57"], ["3", "10", "5", "57 57 - 57 57"], ["3,500", "3", "10", "5", "57 57 - 57 57"], ["5", "3", "10", "5", "57 57 - 57 57"], ["5", "3", "10", "5", ""], ["3", "10", "5", ""], ["3", "10", "5", "91212129", ""], ["3", "10", "5", "5", "91212129", ""], ["__main__", "3", "10", "5", "5", "91212129", ""], ["2", "3", "10", "5", "5", "91212129", ""], ["Pb9"], ["-1"]]}, {"EndTime": 1552277773.1814287, "FinalMinimizedSolution": ["-1", "8"], "FinalCoverage": [9, 3, 8, 3, 53, "5,", "7-8,", "1->exit,", "4->5,", "6->7"], "FinalSolution": ["-1", "8"], "StartTime": 1552277767.4186988, "FoundSolution": true, "NumProbesMade": 27, "InputHistory": [["5", "57 57 -57 57 57"], [], ["6"], ["6", "__main__"], ["6", "8"], ["8", "6", "8"], ["zib"], ["0"], ["5", "57 57 -57 57 57"], ["5", "57 57 u2- 57 57"], ["5", "57 57 8 57 57"], ["23", "5", "57 57 8 57 57"], ["23", "5", "57 57 8 13 14 57"], ["23", "5", "57 57 70 13 14 57"], ["5", "57 57 70 13 14 57"], ["__main__", "5", "57 57 70 13 14 57"], ["2", "5", "57 57 70 13 14 57"], ["57 57 70 13 14 57"], ["8"], ["8", "57 57 -57 57 57"], [" Para resolver la mayoria de tus dudas recuerda leer el foroooooooooooPara resolver", "8", "57 57 -57 57 57"], ["4", "8", "57 57 -57 57 57"], ["4", "8", "57 57 -57 57 4"], ["4", "__main__", "8", "57 57 -57 57 4"], ["4", "4", "8", "57 57 -57 57 4"], ["3Mu"], ["4"], ["4", "5"], ["10,1,2", "4", "5"], ["3", "4", "5"], ["__main__"], ["9"], ["9", "57 57 -57 57 57"], ["9", "57", "57", "-57", "57", "57"], ["57", "57", "-57", "57", "57"], ["57", "5", "57", "-57", "57", "57"], ["57", "5", "57", "-57", "-57", "57", "57"], ["57", "h9X", "5", "57", "-57", "-57", "57", "57"], ["57", "6", "5", "57", "-57", "-57", "57", "57"], ["57", "6", "57", "-57", "-57", "57", "57"], ["57", "6", "57", "-57", "35", "-57", "57", "57"], ["223"], ["223", "__main__"], ["223", "2"], ["2"], ["2", "k0x"], ["2", "7"], ["2 T0J", "7"], ["8", "7"], ["8", "-9997", "7"], ["8", "__main__", "-9997", "7"], ["8", "3", "-9997", "7"], ["s22"], ["oQs", "__main__"], ["9", "__main__"], ["9", "3"], ["9", "57 57 -57 57 57", "3"], ["__main__", "__main__"], ["__main__", "5"], ["10", "5"], ["10", "IRV", "5"], ["10", "7", "5"], ["10", "7"], ["10 __main__", "7"], ["5", "7"], ["1 1", "5", "7"], ["10", "5", "7"], ["10", "5", "7", "7"], ["5", "57 57 -57 57 57"], ["__main__", "5", "57 57 -57 57 57"], ["10", "5", "57 57 -57 57 57"], ["10", "5", "57 57 - 57 57"], ["`1", "10", "5", "57 57 - 57 57"], ["3", "10", "5", "57 57 - 57 57"], ["3,500", "3", "10", "5", "57 57 - 57 57"], ["5", "3", "10", "5", "57 57 - 57 57"], ["5", "3", "10", "5", ""], ["3", "10", "5", ""], ["3", "10", "5", "91212129", ""], ["3", "10", "5", "5", "91212129", ""], ["__main__", "3", "10", "5", "5", "91212129", ""], ["2", "3", "10", "5", "5", "91212129", ""], ["Pb9"], ["-1"], ["5", "57 57 -57 57 57"], ["5", "5", "57 57 -57 57 57"], ["__main__", "__main__ __main__"], ["__main__", "__main__ 1"], ["__main__", "-1 1"], ["4", "-1 1"], ["4", "f 1"], ["4", "6 1"], ["4", ""], ["__main__", "4", ""], ["7", "4", ""], ["7", "4"], ["57 57 -57 57 57", "7", "4"], ["9", "7", "4"], ["9 __main__", "7", "4"], ["3", "7", "4"], ["3", "7", "9HJ", "4"], ["s", "3", "7", "9HJ", "4"], ["1", "3", "7", "9HJ", "4"], ["1", "3", "7", "9HJ", "4 geO"], ["__main__ yXB"], ["10"], ["10", "10"], ["2 7 6", "10", "10"], ["1", "10", "10"], ["1", "10", "10", "10"], ["__main__ 327"]]}, {"EndTime": 1552277777.777693, "FinalMinimizedSolution": ["0", "8"], "FinalCoverage": [9, 3, 8, 3, 53, "5,", "7-8,", "1->exit,", "4->5,", "6->7"], "FinalSolution": ["0", "8", "1", "-1", "8"], "StartTime": 1552277773.182656, "FoundSolution": true, "NumProbesMade": 20, "InputHistory": [["5", "57 57 -57 57 57"], [], ["6"], ["6", "__main__"], ["6", "8"], ["8", "6", "8"], ["zib"], ["0"], ["5", "57 57 -57 57 57"], ["5", "57 57 u2- 57 57"], ["5", "57 57 8 57 57"], ["23", "5", "57 57 8 57 57"], ["23", "5", "57 57 8 13 14 57"], ["23", "5", "57 57 70 13 14 57"], ["5", "57 57 70 13 14 57"], ["__main__", "5", "57 57 70 13 14 57"], ["2", "5", "57 57 70 13 14 57"], ["57 57 70 13 14 57"], ["8"], ["8", "57 57 -57 57 57"], [" Para resolver la mayoria de tus dudas recuerda leer el foroooooooooooPara resolver", "8", "57 57 -57 57 57"], ["4", "8", "57 57 -57 57 57"], ["4", "8", "57 57 -57 57 4"], ["4", "__main__", "8", "57 57 -57 57 4"], ["4", "4", "8", "57 57 -57 57 4"], ["3Mu"], ["4"], ["4", "5"], ["10,1,2", "4", "5"], ["3", "4", "5"], ["__main__"], ["9"], ["9", "57 57 -57 57 57"], ["9", "57", "57", "-57", "57", "57"], ["57", "57", "-57", "57", "57"], ["57", "5", "57", "-57", "57", "57"], ["57", "5", "57", "-57", "-57", "57", "57"], ["57", "h9X", "5", "57", "-57", "-57", "57", "57"], ["57", "6", "5", "57", "-57", "-57", "57", "57"], ["57", "6", "57", "-57", "-57", "57", "57"], ["57", "6", "57", "-57", "35", "-57", "57", "57"], ["223"], ["223", "__main__"], ["223", "2"], ["2"], ["2", "k0x"], ["2", "7"], ["2 T0J", "7"], ["8", "7"], ["8", "-9997", "7"], ["8", "__main__", "-9997", "7"], ["8", "3", "-9997", "7"], ["s22"], ["oQs", "__main__"], ["9", "__main__"], ["9", "3"], ["9", "57 57 -57 57 57", "3"], ["__main__", "__main__"], ["__main__", "5"], ["10", "5"], ["10", "IRV", "5"], ["10", "7", "5"], ["10", "7"], ["10 __main__", "7"], ["5", "7"], ["1 1", "5", "7"], ["10", "5", "7"], ["10", "5", "7", "7"], ["5", "57 57 -57 57 57"], ["__main__", "5", "57 57 -57 57 57"], ["10", "5", "57 57 -57 57 57"], ["10", "5", "57 57 - 57 57"], ["`1", "10", "5", "57 57 - 57 57"], ["3", "10", "5", "57 57 - 57 57"], ["3,500", "3", "10", "5", "57 57 - 57 57"], ["5", "3", "10", "5", "57 57 - 57 57"], ["5", "3", "10", "5", ""], ["3", "10", "5", ""], ["3", "10", "5", "91212129", ""], ["3", "10", "5", "5", "91212129", ""], ["__main__", "3", "10", "5", "5", "91212129", ""], ["2", "3", "10", "5", "5", "91212129", ""], ["Pb9"], ["-1"], ["5", "57 57 -57 57 57"], ["5", "5", "57 57 -57 57 57"], ["__main__", "__main__ __main__"], ["__main__", "__main__ 1"], ["__main__", "-1 1"], ["4", "-1 1"], ["4", "f 1"], ["4", "6 1"], ["4", ""], ["__main__", "4", ""], ["7", "4", ""], ["7", "4"], ["57 57 -57 57 57", "7", "4"], ["9", "7", "4"], ["9 __main__", "7", "4"], ["3", "7", "4"], ["3", "7", "9HJ", "4"], ["s", "3", "7", "9HJ", "4"], ["1", "3", "7", "9HJ", "4"], ["1", "3", "7", "9HJ", "4 geO"], ["__main__ yXB"], ["10"], ["10", "10"], ["2 7 6", "10", "10"], ["1", "10", "10"], ["1", "10", "10", "10"], ["__main__ 327"], ["5", "57 57 -57 57 57"], ["57 57 -57 57 57"], ["mWi", "4"], ["9", "4"], ["9", "2", "4"], ["9", "2", "57 57 -57 57 57", "4"], ["JYP"], ["2 4 8", "10"], ["4", "10"], ["4", "57 57 -57 57 57", "10"], ["A", "4", "57 57 -57 57 57", "10"], ["1", "4", "57 57 -57 57 57", "10"], ["1", "4", "57 57 -57 57 57"], ["1", "57 57 -57 57 57", "4", "57 57 -57 57 57"], ["__main__", "1", "57 57 -57 57 57", "4", "57 57 -57 57 57"], ["8", "1", "57 57 -57 57 57", "4", "57 57 -57 57 57"], ["8", "1", "57 57 -57 57 57", "57 57 -57 57 57"], ["57 57 -57 57 57", "8", "1", "57 57 -57 57 57", "57 57 -57 57 57"], ["57 57 -57 57 57", "8", "1", "57 57 -57 57 57", "8"], ["57 57 -57 57 57", "8", "1", "-1", "8"]]}]], [{"CorrectInputs": [[["12"], 1530873180]], "UniqueId": "64a262a4-608b-497a-cc18-7aa35bf30642_0", "CoverageInfo": [12, 9, 4, 0, 19, "4-13"], "TimeStamp": 1530873398, "BadInput": ["f"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 14, in <module>\n    collatz()\n  File \"temp2018.py\", line 3, in collatz\n    number = int(input('Enter the number: '))\nValueError: invalid literal for int() with base 10: 'f'\n", "ip": "66.41.58.23"}, [{"EndTime": 1552356393.2767854, "FinalMinimizedSolution": ["7"], "FinalCoverage": [12, 2, 4, 0, 88, "12-13"], "FinalSolution": ["7"], "StartTime": 1552356392.4114497, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["f"]]}, {}, {"EndTime": 1552356399.0673287, "FinalMinimizedSolution": ["3"], "FinalCoverage": [12, 2, 4, 0, 88, "12-13"], "FinalSolution": ["3"], "StartTime": 1552356398.302972, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["f"], ["f"], ["f"]]}, {"EndTime": 1552356399.9323802, "FinalMinimizedSolution": ["10"], "FinalCoverage": [12, 2, 4, 0, 88, "12-13"], "FinalSolution": ["10"], "StartTime": 1552356399.0675063, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["f"], ["f"], ["f"], ["f"]]}, {"EndTime": 1552356400.79699, "FinalMinimizedSolution": ["5"], "FinalCoverage": [12, 2, 4, 0, 88, "12-13"], "FinalSolution": ["5"], "StartTime": 1552356399.9325671, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["f"], ["f"], ["f"], ["f"], ["f"]]}]], [{"CorrectInputs": [[["88"], 1533136375], [["123456789"], 1533136459]], "UniqueId": "70bf7a01-dfa4-47f7-c99a-0f9ad679794d_0", "CoverageInfo": [11, 10, 10, 0, 5, "3-16"], "TimeStamp": 1533136489, "BadInput": ["dafsnnnjk"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 1, in <module>\n    score = int(input('Input score:'))\nValueError: invalid literal for int() with base 10: 'dafsnnnjk'\n", "ip": "220.137.192.64"}, [{"EndTime": 1552264882.6784585, "FinalMinimizedSolution": ["0"], "FinalCoverage": [11, 4, 10, 5, 57, "4,", "7,", "10,", "16,", "3->4,", "6->7,", "9->10,", "12->15,", "15->16"], "FinalSolution": ["0"], "StartTime": 1552264881.819481, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dafsnnnjk"]]}, {"EndTime": 1552264883.5405943, "FinalMinimizedSolution": ["10"], "FinalCoverage": [11, 4, 10, 5, 57, "4,", "7,", "10,", "16,", "3->4,", "6->7,", "9->10,", "12->15,", "15->16"], "FinalSolution": ["10"], "StartTime": 1552264882.678647, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dafsnnnjk"], ["dafsnnnjk"]]}, {"EndTime": 1552264884.4001207, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [11, 3, 10, 5, 62, "4,", "7,", "10,", "3->4,", "6->7,", "9->10,", "12->15,", "15->exit"], "FinalSolution": ["-1"], "StartTime": 1552264883.5407813, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dafsnnnjk"], ["dafsnnnjk"], ["dafsnnnjk"]]}, {"EndTime": 1552264885.2600346, "FinalMinimizedSolution": ["2"], "FinalCoverage": [11, 4, 10, 5, 57, "4,", "7,", "10,", "16,", "3->4,", "6->7,", "9->10,", "12->15,", "15->16"], "FinalSolution": ["2"], "StartTime": 1552264884.4003012, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dafsnnnjk"], ["dafsnnnjk"], ["dafsnnnjk"], ["dafsnnnjk"]]}, {"EndTime": 1552264886.1191049, "FinalMinimizedSolution": ["9"], "FinalCoverage": [11, 4, 10, 5, 57, "4,", "7,", "10,", "16,", "3->4,", "6->7,", "9->10,", "12->15,", "15->16"], "FinalSolution": ["9"], "StartTime": 1552264885.2602284, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["dafsnnnjk"], ["dafsnnnjk"], ["dafsnnnjk"], ["dafsnnnjk"], ["dafsnnnjk"]]}]], [{"CorrectInputs": [[["3", "2"], 1540746470]], "UniqueId": "0719ef53-2ac7-4fb6-f4fb-b5fc7c86d8e0_0", "CoverageInfo": [22, 19, 2, 0, 12, "6-12,", "18-22,", "27-34"], "TimeStamp": 1540746504, "BadInput": ["3.2"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 26, in <module>\n    a=int(input('Introduzca un numero entero'))\nValueError: invalid literal for int() with base 10: '3.2'\n", "ip": "85.251.133.29"}, [{"EndTime": 1552284647.5910056, "FinalMinimizedSolution": ["8", "8"], "FinalCoverage": null, "FinalSolution": ["8", "8"], "StartTime": 1552284647.1542714, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["3.2"], ["8"]]}, {"EndTime": 1552284648.832775, "FinalMinimizedSolution": ["3", "2"], "FinalCoverage": [22, 4, 2, 0, 83, "9-10,", "21-22"], "FinalSolution": ["3", "2"], "StartTime": 1552284647.5911434, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["3.2"], ["8"], ["3.2"], ["3"], ["3", "3.2"]]}, {"EndTime": 1552284649.2706456, "FinalMinimizedSolution": ["2", "2"], "FinalCoverage": null, "FinalSolution": ["2", "2"], "StartTime": 1552284648.832973, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["3.2"], ["8"], ["3.2"], ["3"], ["3", "3.2"], ["3.2"], ["2"]]}, {"EndTime": 1552284649.7109146, "FinalMinimizedSolution": ["7", "2"], "FinalCoverage": null, "FinalSolution": ["7", "2"], "StartTime": 1552284649.2708154, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["3.2"], ["8"], ["3.2"], ["3"], ["3", "3.2"], ["3.2"], ["2"], ["3.2"], ["3.2", "2"]]}, {"EndTime": 1552284650.1490617, "FinalMinimizedSolution": ["4", "4"], "FinalCoverage": null, "FinalSolution": ["4", "4"], "StartTime": 1552284649.7110896, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["3.2"], ["8"], ["3.2"], ["3"], ["3", "3.2"], ["3.2"], ["2"], ["3.2"], ["3.2", "2"], ["3.2"], ["4"]]}]], [{"CorrectInputs": [[["hai17"], 1522623117]], "UniqueId": "1a35331a-2ebe-4a43-8d1e-c56f7948290d_0", "CoverageInfo": [8, 4, 2, 1, 50, "3-4,", "8-9,", "2->3"], "TimeStamp": 1522623287, "BadInput": ["hai"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 7, in <module>\n    p=int(a[-1])+int('1')\nValueError: invalid literal for int() with base 10: 'i'\n", "ip": "223.182.223.43"}, [{"EndTime": 1552415119.3233366, "FinalMinimizedSolution": ["ha8"], "FinalCoverage": [8, 2, 2, 1, 70, "3-4,", "2->3"], "FinalSolution": ["ha8"], "StartTime": 1552415118.4625466, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["hai"]]}, {"EndTime": 1552415120.184465, "FinalMinimizedSolution": ["ha10"], "FinalCoverage": [8, 2, 2, 1, 70, "3-4,", "2->3"], "FinalSolution": ["ha10"], "StartTime": 1552415119.323509, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["hai"], ["hai"]]}, {"EndTime": 1552415121.0495977, "FinalMinimizedSolution": ["ha-1"], "FinalCoverage": [8, 2, 2, 1, 70, "3-4,", "2->3"], "FinalSolution": ["ha-1"], "StartTime": 1552415120.1846533, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["hai"], ["hai"], ["hai"]]}, {"EndTime": 1552415121.910854, "FinalMinimizedSolution": ["ha7"], "FinalCoverage": [8, 2, 2, 1, 70, "3-4,", "2->3"], "FinalSolution": ["ha7"], "StartTime": 1552415121.0497825, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["hai"], ["hai"], ["hai"], ["hai"]]}, {"EndTime": 1552415122.7747962, "FinalMinimizedSolution": ["ha0"], "FinalCoverage": [8, 2, 2, 1, 70, "3-4,", "2->3"], "FinalSolution": ["ha0"], "StartTime": 1552415121.911052, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["hai"], ["hai"], ["hai"], ["hai"], ["hai"]]}]], [{"CorrectInputs": [[["2:2:H"], 1525806002]], "UniqueId": "cbdba007-adbc-42ac-988f-abf5ef8c4503_0", "CoverageInfo": [14, 10, 6, 0, 20, "6-16"], "TimeStamp": 1525806106, "BadInput": ["2:A:H"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 5, in <module>\n    c = int(x[2])\nValueError: invalid literal for int() with base 10: 'A'\n", "ip": "49.177.77.236"}, [{"EndTime": 1552267977.7180982, "FinalMinimizedSolution": ["2:6:H"], "FinalCoverage": [14, 3, 6, 3, 70, "10,", "12,", "15,", "9->10,", "11->12,", "13->15"], "FinalSolution": ["2:6:H"], "StartTime": 1552267976.8577797, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["2:A:H"]]}, {"EndTime": 1552267981.5982866, "FinalMinimizedSolution": ["6 107E"], "FinalCoverage": [14, 3, 6, 3, 70, "10,", "12,", "14,", "9->10,", "11->12,", "13->14"], "FinalSolution": ["6 107E"], "StartTime": 1552267977.7182748, "FoundSolution": true, "NumProbesMade": 17, "InputHistory": [["2:A:H"], ["2:A:H"], ["3", "2:6:H"], ["3", "3", "2:6:H"], ["3", "3", "hdhe", "2:6:H"], ["105", "3", "3", "hdhe", "2:6:H"], ["105", "3", "3", "hdhe"], ["105", "3", "V", "3", "hdhe"], ["V", "105", "3", "V", "3", "hdhe"], ["V", "105", "3", "6", "3", "hdhe"], ["2", "105", "3", "6", "3", "hdhe"], ["2", "105", "3", "PASSWORD123!$", "6", "3", "hdhe"], ["105", "3", "PASSWORD123!$", "6", "3", "hdhe"], ["105", "3", "PASSWORD123!$", "3", "hdhe"], [], ["V"], ["6"], ["6 f7E"]]}, {"EndTime": 1552267982.4623075, "FinalMinimizedSolution": ["2:9:H"], "FinalCoverage": [14, 3, 6, 3, 70, "10,", "12,", "15,", "9->10,", "11->12,", "13->15"], "FinalSolution": ["2:9:H"], "StartTime": 1552267981.5986762, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["2:A:H"], ["2:A:H"], ["3", "2:6:H"], ["3", "3", "2:6:H"], ["3", "3", "hdhe", "2:6:H"], ["105", "3", "3", "hdhe", "2:6:H"], ["105", "3", "3", "hdhe"], ["105", "3", "V", "3", "hdhe"], ["V", "105", "3", "V", "3", "hdhe"], ["V", "105", "3", "6", "3", "hdhe"], ["2", "105", "3", "6", "3", "hdhe"], ["2", "105", "3", "PASSWORD123!$", "6", "3", "hdhe"], ["105", "3", "PASSWORD123!$", "6", "3", "hdhe"], ["105", "3", "PASSWORD123!$", "3", "hdhe"], [], ["V"], ["6"], ["6 f7E"], ["2:A:H"]]}, {"EndTime": 1552267983.3272471, "FinalMinimizedSolution": ["2:2:H"], "FinalCoverage": [14, 3, 6, 3, 70, "10,", "12,", "15,", "9->10,", "11->12,", "13->15"], "FinalSolution": ["2:2:H"], "StartTime": 1552267982.462727, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["2:A:H"], ["2:A:H"], ["3", "2:6:H"], ["3", "3", "2:6:H"], ["3", "3", "hdhe", "2:6:H"], ["105", "3", "3", "hdhe", "2:6:H"], ["105", "3", "3", "hdhe"], ["105", "3", "V", "3", "hdhe"], ["V", "105", "3", "V", "3", "hdhe"], ["V", "105", "3", "6", "3", "hdhe"], ["2", "105", "3", "6", "3", "hdhe"], ["2", "105", "3", "PASSWORD123!$", "6", "3", "hdhe"], ["105", "3", "PASSWORD123!$", "6", "3", "hdhe"], ["105", "3", "PASSWORD123!$", "3", "hdhe"], [], ["V"], ["6"], ["6 f7E"], ["2:A:H"], ["2:A:H"]]}, {"EndTime": 1552267984.1910174, "FinalMinimizedSolution": ["2:2:H V"], "FinalCoverage": [14, 3, 6, 3, 70, "10,", "12,", "15,", "9->10,", "11->12,", "13->15"], "FinalSolution": ["2:2:H V"], "StartTime": 1552267983.3276718, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["2:A:H"], ["2:A:H"], ["3", "2:6:H"], ["3", "3", "2:6:H"], ["3", "3", "hdhe", "2:6:H"], ["105", "3", "3", "hdhe", "2:6:H"], ["105", "3", "3", "hdhe"], ["105", "3", "V", "3", "hdhe"], ["V", "105", "3", "V", "3", "hdhe"], ["V", "105", "3", "6", "3", "hdhe"], ["2", "105", "3", "6", "3", "hdhe"], ["2", "105", "3", "PASSWORD123!$", "6", "3", "hdhe"], ["105", "3", "PASSWORD123!$", "6", "3", "hdhe"], ["105", "3", "PASSWORD123!$", "3", "hdhe"], [], ["V"], ["6"], ["6 f7E"], ["2:A:H"], ["2:A:H"], ["2:A:H"]]}]], [{"CorrectInputs": [[["10"], 1536909776]], "UniqueId": "cbce156a-c9a8-42cb-e8ca-c8480f13b271_0", "CoverageInfo": [12, 0, 6, 2, 89, "37->43,", "44->exit"], "TimeStamp": 1536909790, "BadInput": ["100"], "ErrorType": "TypeError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 45, in <module>\n    print('The human population was destroyed after just %d weeks.' % w+1)\nTypeError: Can't convert 'int' object to str implicitly\n", "ip": "2605:6000:3c82:e600:1:4ed7:576e:a69f"}, [{"EndTime": 1552267113.3575547, "FinalMinimizedSolution": ["2\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n5"], "FinalCoverage": [12, 3, 6, 2, 72, "40-41,", "45,", "39->40,", "44->45"], "FinalSolution": ["2\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n5", "100"], "StartTime": 1552267112.0686264, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n5", "100"]]}, {"EndTime": 1552267113.79663, "FinalMinimizedSolution": ["7"], "FinalCoverage": null, "FinalSolution": ["7"], "StartTime": 1552267113.3577578, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n5", "100"], ["100"], []]}, {"EndTime": 1552267115.0325992, "FinalMinimizedSolution": ["10\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n3"], "FinalCoverage": [12, 3, 6, 2, 72, "40-41,", "45,", "39->40,", "44->45"], "FinalSolution": ["10\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n3"], "StartTime": 1552267113.7967987, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n5", "100"], ["100"], [], ["100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\""], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n3"]]}, {"EndTime": 1552267117.7040997, "FinalMinimizedSolution": ["6"], "FinalCoverage": null, "FinalSolution": ["6"], "StartTime": 1552267115.0328355, "FoundSolution": true, "NumProbesMade": 16, "InputHistory": [["100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n5", "100"], ["100"], [], ["100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\""], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n3"], ["100"], ["100", "100"], ["100 \"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a \"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\" we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a \"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, \"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a \"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\" we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\" a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\" we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery", "week", "a", "vampire", "has", "to", "bite", "a", "human", "\nand", "turns", "them", "into", "another", "vampire.", "\nTherefore,", "the", "number", "of", "vampires", "after", "each", "week", "doubles.", "\n(", "If", "we", "start", "out", "with", "1", "vampire,", "after", "a", "week", "we", "have", "2", "vampires\n,", "after", "another", "week", "we", "have", "4", "vampires,", "then", "8,", "etc.\n\n1)", "Ask", "the", "user", "for", "how", "many", "weeks", "they", "want", "to", "run", "the", "simulation", "\nfor", "and", "then", "output", "the", "vampire", "population", "at", "the", "end.\n\nHow", "many", "weeks?", ":\n4\n\nThe", "earth", "has", "16", "vampires", "after", "4", "weeks.\n2)", "If", "the", "number", "of", "vampires", "is", "greater", "than", "the", "number", "of", "humans", "\nthen", "stop", "your", "loop.", "The", "final", "output", "will", "show", "that", "there", "are", "no", "\nhumans", "left", "and", "how", "many", "weeks", "it", "took", "to", "wipe", "us", "out.\n\nHow", "many", "weeks?", ":\n200\n\nThe", "human", "population", "was", "destroyed", "after", "just", "*x*", "weeks.\n\"\"", "", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery", "week", "a", "vampire", "has", "to", "bite", "a", "human", "\nand", "turns", "them", "into", "another", "vampire.", "\nTherefore,", "the", "number", "of", "vampires", "after", "each", "week", "doubles.", "\n(", "If", "we", "start", "out", "with", "1", "vampire,", "after", "a", "week", "we", "have", "2", "vampires\n,", "after", "another", "week", "we", "have", "4", "vampires,", "then", "8,", "etc.\n\n1)", "Ask", "the", "user", "for", "how", "many", "weeks", "they", "want", "to", "run", "the", "simulation", "\nfor", "and", "then", "output", "the", "vampire", "population", "at", "the", "end.\n\nHow", "many", "weeks?", ":\n4\n\nThe", "earth", "has", "16", "vampires", "after", "4", "weeks.\n2)", "If", "the", "number", "of", "vampires", "is", "greater", "than", "the", "number", "of", "humans", "\nthen", "stop", "your", "loop.", "The", "final", "output", "will", "show", "that", "there", "are", "no", "\nhumans", "left", "and", "how", "many", "weeks", "it", "took", "to", "wipe", "us", "out.\n\nHow", "many", "weeks?", ":\n200\n\nThe", "human", "population v53", "was", "destroyed", "after", "just", "*x*", "weeks.\n\"\"", "", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery", "week", "a", "vampire", "has", "to", "bite", "a", "human", "\nand", "turns", "them", "into", "another", "vampire.", "\nTherefore,", "the", "number", "of", "vampires", "after", "each", "week", "doubles.", "\n(", "If", "we", "", "start", "out", "with", "1", "vampire,", "after", "a", "week", "we", "have", "2", "vampires\n,", "after", "another", "week", "we", "have", "4", "vampires,", "then", "8,", "etc.\n\n1)", "Ask", "the", "user", "for", "how", "many", "weeks", "they", "want", "to", "run", "the", "simulation", "\nfor", "and", "then", "output", "the", "vampire", "population", "at", "the", "end.\n\nHow", "many", "weeks?", ":\n4\n\nThe", "earth", "has", "16", "vampires", "after", "4", "weeks.\n2)", "If", "the", "number", "of", "vampires", "is", "greater", "than", "the", "number", "of", "humans", "\nthen", "stop", "your", "loop.", "The", "final", "output", "will", "show", "that", "there", "are", "no", "\nhumans", "left", "and", "how", "many", "weeks", "it", "took", "to", "wipe", "us", "out.\n\nHow", "many", "weeks?", ":\n200\n\nThe", "human", "population v53", "was", "destroyed", "after", "just", "*x*", "weeks.\n\"\"", "", "100"], ["d12"], ["100", "7"], ["r20"]]}, {"EndTime": 1552267118.9427578, "FinalMinimizedSolution": ["3\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they 100 to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n10"], "FinalCoverage": [12, 3, 6, 2, 72, "40-41,", "45,", "39->40,", "44->45"], "FinalSolution": ["3\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they 100 to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n10"], "StartTime": 1552267117.705131, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n5", "100"], ["100"], [], ["100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\""], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n3"], ["100"], ["100", "100"], ["100 \"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a \"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\" we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a \"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, \"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a \"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\" we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\" a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\" we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery", "week", "a", "vampire", "has", "to", "bite", "a", "human", "\nand", "turns", "them", "into", "another", "vampire.", "\nTherefore,", "the", "number", "of", "vampires", "after", "each", "week", "doubles.", "\n(", "If", "we", "start", "out", "with", "1", "vampire,", "after", "a", "week", "we", "have", "2", "vampires\n,", "after", "another", "week", "we", "have", "4", "vampires,", "then", "8,", "etc.\n\n1)", "Ask", "the", "user", "for", "how", "many", "weeks", "they", "want", "to", "run", "the", "simulation", "\nfor", "and", "then", "output", "the", "vampire", "population", "at", "the", "end.\n\nHow", "many", "weeks?", ":\n4\n\nThe", "earth", "has", "16", "vampires", "after", "4", "weeks.\n2)", "If", "the", "number", "of", "vampires", "is", "greater", "than", "the", "number", "of", "humans", "\nthen", "stop", "your", "loop.", "The", "final", "output", "will", "show", "that", "there", "are", "no", "\nhumans", "left", "and", "how", "many", "weeks", "it", "took", "to", "wipe", "us", "out.\n\nHow", "many", "weeks?", ":\n200\n\nThe", "human", "population", "was", "destroyed", "after", "just", "*x*", "weeks.\n\"\"", "", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery", "week", "a", "vampire", "has", "to", "bite", "a", "human", "\nand", "turns", "them", "into", "another", "vampire.", "\nTherefore,", "the", "number", "of", "vampires", "after", "each", "week", "doubles.", "\n(", "If", "we", "start", "out", "with", "1", "vampire,", "after", "a", "week", "we", "have", "2", "vampires\n,", "after", "another", "week", "we", "have", "4", "vampires,", "then", "8,", "etc.\n\n1)", "Ask", "the", "user", "for", "how", "many", "weeks", "they", "want", "to", "run", "the", "simulation", "\nfor", "and", "then", "output", "the", "vampire", "population", "at", "the", "end.\n\nHow", "many", "weeks?", ":\n4\n\nThe", "earth", "has", "16", "vampires", "after", "4", "weeks.\n2)", "If", "the", "number", "of", "vampires", "is", "greater", "than", "the", "number", "of", "humans", "\nthen", "stop", "your", "loop.", "The", "final", "output", "will", "show", "that", "there", "are", "no", "\nhumans", "left", "and", "how", "many", "weeks", "it", "took", "to", "wipe", "us", "out.\n\nHow", "many", "weeks?", ":\n200\n\nThe", "human", "population v53", "was", "destroyed", "after", "just", "*x*", "weeks.\n\"\"", "", "100"], ["-1\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they want to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\"", "\"\"\nEvery", "week", "a", "vampire", "has", "to", "bite", "a", "human", "\nand", "turns", "them", "into", "another", "vampire.", "\nTherefore,", "the", "number", "of", "vampires", "after", "each", "week", "doubles.", "\n(", "If", "we", "", "start", "out", "with", "1", "vampire,", "after", "a", "week", "we", "have", "2", "vampires\n,", "after", "another", "week", "we", "have", "4", "vampires,", "then", "8,", "etc.\n\n1)", "Ask", "the", "user", "for", "how", "many", "weeks", "they", "want", "to", "run", "the", "simulation", "\nfor", "and", "then", "output", "the", "vampire", "population", "at", "the", "end.\n\nHow", "many", "weeks?", ":\n4\n\nThe", "earth", "has", "16", "vampires", "after", "4", "weeks.\n2)", "If", "the", "number", "of", "vampires", "is", "greater", "than", "the", "number", "of", "humans", "\nthen", "stop", "your", "loop.", "The", "final", "output", "will", "show", "that", "there", "are", "no", "\nhumans", "left", "and", "how", "many", "weeks", "it", "took", "to", "wipe", "us", "out.\n\nHow", "many", "weeks?", ":\n200\n\nThe", "human", "population v53", "was", "destroyed", "after", "just", "*x*", "weeks.\n\"\"", "", "100"], ["d12"], ["100", "7"], ["r20"], ["100"], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they 100 to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n\"\""], ["\"\"\nEvery week a vampire has to bite a human \nand turns them into another vampire. \nTherefore, the number of vampires after each week doubles. \n( If we start out with 1 vampire, after a week we have 2 vampires\n, after another week we have 4 vampires, then 8, etc.\n\n1) Ask the user for how many weeks they 100 to run the simulation \nfor and then output the vampire population at the end.\n\nHow many weeks? :\n4\n\nThe earth has 16 vampires after 4 weeks.\n2) If the number of vampires is greater than the number of humans \nthen stop your loop. The final output will show that there are no \nhumans left and how many weeks it took to wipe us out.\n\nHow many weeks? :\n200\n\nThe human population was destroyed after just *x* weeks.\n10"]]}]], [{"CorrectInputs": [[["5", "15", " "], 1533747512]], "UniqueId": "b503acfc-b93b-425e-ab9c-bd20903d7c9d_0", "CoverageInfo": [12, 7, 4, 1, 38, "5-11,", "4->5"], "TimeStamp": 1533747613, "BadInput": [" "], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 12, in <module>\n    print(average)\nNameError: name 'average' is not defined\n", "ip": "130.102.10.69"}, [{"EndTime": 1552362607.403815, "FinalMinimizedSolution": ["3.10", "-1.5", " "], "FinalCoverage": [12, 0, 4, 1, 94, "4->12"], "FinalSolution": ["3.10", "-1.5", " "], "StartTime": 1552362605.5943835, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [[" "], ["", ""], ["", "5.6"], ["", "3.10"], ["", "-1.5"], ["3.10", "-1.5"]]}, {"EndTime": 1552362609.0254595, "FinalMinimizedSolution": ["10.9", "10.9", "10.9", " "], "FinalCoverage": [12, 0, 4, 1, 94, "4->12"], "FinalSolution": ["10.9", "10.9", "10.9", " "], "StartTime": 1552362607.4040537, "FoundSolution": true, "NumProbesMade": 5, "InputHistory": [[" "], ["", ""], ["", "5.6"], ["", "3.10"], ["", "-1.5"], ["3.10", "-1.5"], [" "], [], ["10.9"], ["10.9", "10.9"], ["10.9", "10.9", "10.9"]]}, {"EndTime": 1552362610.4600596, "FinalMinimizedSolution": ["-1.4", "-1.4", " "], "FinalCoverage": [12, 0, 4, 1, 94, "4->12"], "FinalSolution": ["-1.4", "-1.4", " "], "StartTime": 1552362609.025744, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [[" "], ["", ""], ["", "5.6"], ["", "3.10"], ["", "-1.5"], ["3.10", "-1.5"], [" "], [], ["10.9"], ["10.9", "10.9"], ["10.9", "10.9", "10.9"], [" "], [" MKo"], ["-1.4"], ["-1.4", "-1.4"]]}, {"EndTime": 1552362611.7032173, "FinalMinimizedSolution": ["6.6", " "], "FinalCoverage": [12, 0, 4, 2, 88, "4->12,", "10->4"], "FinalSolution": ["6.6", " "], "StartTime": 1552362610.460367, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [[" "], ["", ""], ["", "5.6"], ["", "3.10"], ["", "-1.5"], ["3.10", "-1.5"], [" "], [], ["10.9"], ["10.9", "10.9"], ["10.9", "10.9", "10.9"], [" "], [" MKo"], ["-1.4"], ["-1.4", "-1.4"], [" "], ["  "], ["6.6"]]}, {"EndTime": 1552362612.944964, "FinalMinimizedSolution": ["0.10", " "], "FinalCoverage": [12, 0, 4, 2, 88, "4->12,", "10->4"], "FinalSolution": ["0.10", " "], "StartTime": 1552362611.7035406, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [[" "], ["", ""], ["", "5.6"], ["", "3.10"], ["", "-1.5"], ["3.10", "-1.5"], [" "], [], ["10.9"], ["10.9", "10.9"], ["10.9", "10.9", "10.9"], [" "], [" MKo"], ["-1.4"], ["-1.4", "-1.4"], [" "], ["  "], ["6.6"], [" "], [""], ["0.10"]]}]], [{"CorrectInputs": [[["5 6 2 5 ", "10 10"], 1540068710]], "UniqueId": "e345f8eb-df97-40cc-976d-5bac9d31a137_0", "CoverageInfo": [42, 30, 38, 5, 24, "10-21,", "23-37,", "40-53,", "9->10,", "22->23,", "38->exit,", "39->40,", "39->42"], "TimeStamp": 1540068734, "BadInput": ["3 4 2 5", "100 1"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 39, in <module>\n    if (maxs-mans)*time>=d:\nNameError: name 'mans' is not defined\n", "ip": "176.52.96.179"}, [{"InputHistory": [["3 4 2 5", "100 1"], ["3 4 2 5", "20 1"], ["R5w 4 2 5", "20 1"], ["2 4 2 5", "20 1"], ["2", "4", "2", "5", "20 1"], ["2", "4", "g3b", "2", "5", "20 1"], ["2", "4", "g3b", "2", "5", ""], ["2", "4", "yKx", "g3b", "2", "5", ""], ["0", "2", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "yKx", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "yKx", "4", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "ebM", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "ebM", "u75", "yKx", "g3b", "2", "5"], [], ["Ne4"], ["5"], ["5", "5"], ["5", "Ir9", "5"], ["5", "1", "5"], ["PdR"], ["8"], ["8", "100 1"], ["8", "100 1 1 1 1 1 2 2 2"], ["cPj"], ["9"], ["9", "8B-"], ["9", "2"], ["9", "180,000", "2"], ["9", "1", "2"], ["9", "1", "2", "2"], ["2t9"], ["h9X", "5"], ["0", "5"], ["0", "5", "5"], ["0", "5", "5 Vh9"], ["0", "5", "5", "Vh9"], ["0 5d0", "5", "5", "Vh9"], ["0 -1", "5", "5", "Vh9"], ["0 -1", "5", "Vh9"], ["0 abacate", "5", "Vh9"], ["0 9", "5", "Vh9"], ["0 9", "5", "RmA", "Vh9"], ["0 9", "4", "5", "RmA", "Vh9"], ["", "4", "5", "RmA", "Vh9"], ["", "RmA", "4", "5", "RmA", "Vh9"], ["", "RmA", "4", "5", "10", "Vh9"], ["", "8", "4", "5", "10", "Vh9"], ["", "cN7", "8", "4", "5", "10", "Vh9"], ["", "7", "8", "4", "5", "10", "Vh9"], ["3", "", "7", "8", "4", "5", "10", "Vh9"], ["-13"], ["-13", "MRc"], ["-13", "7"], ["8x-"], ["9 9in"], ["9 -1"], ["9 -1", "QWB"], ["9 -1", "5"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552275209.1783369, "StartTime": 1552275197.8390007}, {"InputHistory": [["3 4 2 5", "100 1"], ["3 4 2 5", "20 1"], ["R5w 4 2 5", "20 1"], ["2 4 2 5", "20 1"], ["2", "4", "2", "5", "20 1"], ["2", "4", "g3b", "2", "5", "20 1"], ["2", "4", "g3b", "2", "5", ""], ["2", "4", "yKx", "g3b", "2", "5", ""], ["0", "2", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "yKx", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "yKx", "4", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "ebM", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "ebM", "u75", "yKx", "g3b", "2", "5"], [], ["Ne4"], ["5"], ["5", "5"], ["5", "Ir9", "5"], ["5", "1", "5"], ["PdR"], ["8"], ["8", "100 1"], ["8", "100 1 1 1 1 1 2 2 2"], ["cPj"], ["9"], ["9", "8B-"], ["9", "2"], ["9", "180,000", "2"], ["9", "1", "2"], ["9", "1", "2", "2"], ["2t9"], ["h9X", "5"], ["0", "5"], ["0", "5", "5"], ["0", "5", "5 Vh9"], ["0", "5", "5", "Vh9"], ["0 5d0", "5", "5", "Vh9"], ["0 -1", "5", "5", "Vh9"], ["0 -1", "5", "Vh9"], ["0 abacate", "5", "Vh9"], ["0 9", "5", "Vh9"], ["0 9", "5", "RmA", "Vh9"], ["0 9", "4", "5", "RmA", "Vh9"], ["", "4", "5", "RmA", "Vh9"], ["", "RmA", "4", "5", "RmA", "Vh9"], ["", "RmA", "4", "5", "10", "Vh9"], ["", "8", "4", "5", "10", "Vh9"], ["", "cN7", "8", "4", "5", "10", "Vh9"], ["", "7", "8", "4", "5", "10", "Vh9"], ["3", "", "7", "8", "4", "5", "10", "Vh9"], ["-13"], ["-13", "MRc"], ["-13", "7"], ["8x-"], ["9 9in"], ["9 -1"], ["9 -1", "QWB"], ["9 -1", "5"], ["3 4 2 5", "100 1"], ["3 4 2 5", "100", "1"], ["15 4 2 5", "100", "1"], ["15 4 2 5", "1"], ["15 4 0 5", "1"], ["15 4 0 5", "EpP", "1"], ["15 4 0 5", "8", "1"], ["15 4 0 100 1", "8", "1"], ["15", "4", "0", "100", "1", "8", "1"], ["15", "apple", "4", "0", "100", "1", "8", "1"], ["15", "2", "4", "0", "100", "1", "8", "1"], ["15", "2", "4", "0", "100", "1001", "1", "8", "1"], ["15", "0", "2", "4", "0", "100", "1001", "1", "8", "1"], ["15", "0", "2", "4", "0", "100", "1001", "100 1", "1", "8", "1"], ["nC-"], ["LNL"], ["2"], ["2", "uR7"], ["2", "9"], ["3 4 2 5", "9"], ["", "9"], ["", "9", "9"], ["", "9", "100 1", "9"], ["3,sri,87", "", "9", "100 1", "9"], ["10", "", "9", "100 1", "9"], ["10", "", "9", "100 1", "-sh", "9"], ["10", "", "9", "100 1", "-sh"], ["10", "9", "100 1", "-sh"], ["10", "100 1", "-sh"], ["10", "100 1", "-sh mSE"], ["10", "100 1", "1 1 mSE"], ["10", "100 1", ""], ["10", "100", "1", ""], ["yaP"], ["6"], ["6", "3 4 2 5"], ["4", "6", "3 4 2 5"], ["GQ2"], ["3mu", "5"], ["6", "5"], ["6", "+ 192815 figueiredo_marina@ic.com figueiredo_marina Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 figueiredo_marina@ic.com figueiredo_marina Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 10 figueiredo_marina Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 10 8 Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 10 8 8 Marina Figueiredo", "5"], ["6", "4 192815 10 8 8 4 Figueiredo", "5"], ["6", "4 192815 10 8 8 4 0", "5"], ["6", "3 192815 10 8 8 4 0", "5"], ["3 4 2 5", "6", "3 192815 10 8 8 4 0", "5"], ["3 4 2 5", "6", "", "5"], ["", "6", "", "5"], ["xtB"], ["d-I"], ["100 1", "5"], ["", "5"], ["sBp", "", "5"], ["4", "", "5"], ["4", "", "f9E", "5"], ["4", "f9E", "5"], ["4", "8", "5"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552275220.3852706, "StartTime": 1552275209.17913}, {"EndTime": 1552275222.8184614, "FinalMinimizedSolution": ["3 3 4 2 5 9 5", "3 13"], "FinalCoverage": [42, 27, 38, 6, 31, "10-21,", "24,", "27,", "29-32,", "35,", "38-53,", "9->10,", "22->38,", "23->24,", "26->27,", "28->29,", "34->35"], "FinalSolution": ["3 3 4 2 5 9 5", "3 13", ""], "StartTime": 1552275220.3866405, "FoundSolution": true, "NumProbesMade": 9, "InputHistory": [["3 4 2 5", "100 1"], ["3 4 2 5", "20 1"], ["R5w 4 2 5", "20 1"], ["2 4 2 5", "20 1"], ["2", "4", "2", "5", "20 1"], ["2", "4", "g3b", "2", "5", "20 1"], ["2", "4", "g3b", "2", "5", ""], ["2", "4", "yKx", "g3b", "2", "5", ""], ["0", "2", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "yKx", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "yKx", "4", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "ebM", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "ebM", "u75", "yKx", "g3b", "2", "5"], [], ["Ne4"], ["5"], ["5", "5"], ["5", "Ir9", "5"], ["5", "1", "5"], ["PdR"], ["8"], ["8", "100 1"], ["8", "100 1 1 1 1 1 2 2 2"], ["cPj"], ["9"], ["9", "8B-"], ["9", "2"], ["9", "180,000", "2"], ["9", "1", "2"], ["9", "1", "2", "2"], ["2t9"], ["h9X", "5"], ["0", "5"], ["0", "5", "5"], ["0", "5", "5 Vh9"], ["0", "5", "5", "Vh9"], ["0 5d0", "5", "5", "Vh9"], ["0 -1", "5", "5", "Vh9"], ["0 -1", "5", "Vh9"], ["0 abacate", "5", "Vh9"], ["0 9", "5", "Vh9"], ["0 9", "5", "RmA", "Vh9"], ["0 9", "4", "5", "RmA", "Vh9"], ["", "4", "5", "RmA", "Vh9"], ["", "RmA", "4", "5", "RmA", "Vh9"], ["", "RmA", "4", "5", "10", "Vh9"], ["", "8", "4", "5", "10", "Vh9"], ["", "cN7", "8", "4", "5", "10", "Vh9"], ["", "7", "8", "4", "5", "10", "Vh9"], ["3", "", "7", "8", "4", "5", "10", "Vh9"], ["-13"], ["-13", "MRc"], ["-13", "7"], ["8x-"], ["9 9in"], ["9 -1"], ["9 -1", "QWB"], ["9 -1", "5"], ["3 4 2 5", "100 1"], ["3 4 2 5", "100", "1"], ["15 4 2 5", "100", "1"], ["15 4 2 5", "1"], ["15 4 0 5", "1"], ["15 4 0 5", "EpP", "1"], ["15 4 0 5", "8", "1"], ["15 4 0 100 1", "8", "1"], ["15", "4", "0", "100", "1", "8", "1"], ["15", "apple", "4", "0", "100", "1", "8", "1"], ["15", "2", "4", "0", "100", "1", "8", "1"], ["15", "2", "4", "0", "100", "1001", "1", "8", "1"], ["15", "0", "2", "4", "0", "100", "1001", "1", "8", "1"], ["15", "0", "2", "4", "0", "100", "1001", "100 1", "1", "8", "1"], ["nC-"], ["LNL"], ["2"], ["2", "uR7"], ["2", "9"], ["3 4 2 5", "9"], ["", "9"], ["", "9", "9"], ["", "9", "100 1", "9"], ["3,sri,87", "", "9", "100 1", "9"], ["10", "", "9", "100 1", "9"], ["10", "", "9", "100 1", "-sh", "9"], ["10", "", "9", "100 1", "-sh"], ["10", "9", "100 1", "-sh"], ["10", "100 1", "-sh"], ["10", "100 1", "-sh mSE"], ["10", "100 1", "1 1 mSE"], ["10", "100 1", ""], ["10", "100", "1", ""], ["yaP"], ["6"], ["6", "3 4 2 5"], ["4", "6", "3 4 2 5"], ["GQ2"], ["3mu", "5"], ["6", "5"], ["6", "+ 192815 figueiredo_marina@ic.com figueiredo_marina Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 figueiredo_marina@ic.com figueiredo_marina Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 10 figueiredo_marina Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 10 8 Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 10 8 8 Marina Figueiredo", "5"], ["6", "4 192815 10 8 8 4 Figueiredo", "5"], ["6", "4 192815 10 8 8 4 0", "5"], ["6", "3 192815 10 8 8 4 0", "5"], ["3 4 2 5", "6", "3 192815 10 8 8 4 0", "5"], ["3 4 2 5", "6", "", "5"], ["", "6", "", "5"], ["xtB"], ["d-I"], ["100 1", "5"], ["", "5"], ["sBp", "", "5"], ["4", "", "5"], ["4", "", "f9E", "5"], ["4", "f9E", "5"], ["4", "8", "5"], ["3 4 2 5", "100 1"], ["3 4 3.5 5", "100 1"], ["3 4 9 5", "100 1"], ["3 4 9 5", "AABBCCDDEEFFGGHHIIJJKKLLMMBBDCCDEEFFGGHHIIJJKKLLMM 1"], ["3 4 9 5", "3 1"], ["3 4 9 5", ""], ["3 4 9 5"], ["3 4 9 5", "3 4 9 5"], ["3 3 4 2 5 9 5", ""]]}, {"InputHistory": [["3 4 2 5", "100 1"], ["3 4 2 5", "20 1"], ["R5w 4 2 5", "20 1"], ["2 4 2 5", "20 1"], ["2", "4", "2", "5", "20 1"], ["2", "4", "g3b", "2", "5", "20 1"], ["2", "4", "g3b", "2", "5", ""], ["2", "4", "yKx", "g3b", "2", "5", ""], ["0", "2", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "yKx", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "yKx", "4", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "ebM", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "ebM", "u75", "yKx", "g3b", "2", "5"], [], ["Ne4"], ["5"], ["5", "5"], ["5", "Ir9", "5"], ["5", "1", "5"], ["PdR"], ["8"], ["8", "100 1"], ["8", "100 1 1 1 1 1 2 2 2"], ["cPj"], ["9"], ["9", "8B-"], ["9", "2"], ["9", "180,000", "2"], ["9", "1", "2"], ["9", "1", "2", "2"], ["2t9"], ["h9X", "5"], ["0", "5"], ["0", "5", "5"], ["0", "5", "5 Vh9"], ["0", "5", "5", "Vh9"], ["0 5d0", "5", "5", "Vh9"], ["0 -1", "5", "5", "Vh9"], ["0 -1", "5", "Vh9"], ["0 abacate", "5", "Vh9"], ["0 9", "5", "Vh9"], ["0 9", "5", "RmA", "Vh9"], ["0 9", "4", "5", "RmA", "Vh9"], ["", "4", "5", "RmA", "Vh9"], ["", "RmA", "4", "5", "RmA", "Vh9"], ["", "RmA", "4", "5", "10", "Vh9"], ["", "8", "4", "5", "10", "Vh9"], ["", "cN7", "8", "4", "5", "10", "Vh9"], ["", "7", "8", "4", "5", "10", "Vh9"], ["3", "", "7", "8", "4", "5", "10", "Vh9"], ["-13"], ["-13", "MRc"], ["-13", "7"], ["8x-"], ["9 9in"], ["9 -1"], ["9 -1", "QWB"], ["9 -1", "5"], ["3 4 2 5", "100 1"], ["3 4 2 5", "100", "1"], ["15 4 2 5", "100", "1"], ["15 4 2 5", "1"], ["15 4 0 5", "1"], ["15 4 0 5", "EpP", "1"], ["15 4 0 5", "8", "1"], ["15 4 0 100 1", "8", "1"], ["15", "4", "0", "100", "1", "8", "1"], ["15", "apple", "4", "0", "100", "1", "8", "1"], ["15", "2", "4", "0", "100", "1", "8", "1"], ["15", "2", "4", "0", "100", "1001", "1", "8", "1"], ["15", "0", "2", "4", "0", "100", "1001", "1", "8", "1"], ["15", "0", "2", "4", "0", "100", "1001", "100 1", "1", "8", "1"], ["nC-"], ["LNL"], ["2"], ["2", "uR7"], ["2", "9"], ["3 4 2 5", "9"], ["", "9"], ["", "9", "9"], ["", "9", "100 1", "9"], ["3,sri,87", "", "9", "100 1", "9"], ["10", "", "9", "100 1", "9"], ["10", "", "9", "100 1", "-sh", "9"], ["10", "", "9", "100 1", "-sh"], ["10", "9", "100 1", "-sh"], ["10", "100 1", "-sh"], ["10", "100 1", "-sh mSE"], ["10", "100 1", "1 1 mSE"], ["10", "100 1", ""], ["10", "100", "1", ""], ["yaP"], ["6"], ["6", "3 4 2 5"], ["4", "6", "3 4 2 5"], ["GQ2"], ["3mu", "5"], ["6", "5"], ["6", "+ 192815 figueiredo_marina@ic.com figueiredo_marina Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 figueiredo_marina@ic.com figueiredo_marina Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 10 figueiredo_marina Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 10 8 Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 10 8 8 Marina Figueiredo", "5"], ["6", "4 192815 10 8 8 4 Figueiredo", "5"], ["6", "4 192815 10 8 8 4 0", "5"], ["6", "3 192815 10 8 8 4 0", "5"], ["3 4 2 5", "6", "3 192815 10 8 8 4 0", "5"], ["3 4 2 5", "6", "", "5"], ["", "6", "", "5"], ["xtB"], ["d-I"], ["100 1", "5"], ["", "5"], ["sBp", "", "5"], ["4", "", "5"], ["4", "", "f9E", "5"], ["4", "f9E", "5"], ["4", "8", "5"], ["3 4 2 5", "100 1"], ["3 4 3.5 5", "100 1"], ["3 4 9 5", "100 1"], ["3 4 9 5", "AABBCCDDEEFFGGHHIIJJKKLLMMBBDCCDEEFFGGHHIIJJKKLLMM 1"], ["3 4 9 5", "3 1"], ["3 4 9 5", ""], ["3 4 9 5"], ["3 4 9 5", "3 4 9 5"], ["3 3 4 2 5 9 5", ""], ["3 4 2 5", "100 1"], ["3", "4", "2", "5", "100 1"], ["3", "4", "2", "2", "5", "100 1"], ["3", "4", "2", "2", "5", "100 2"], ["3", "4", "2", "2", "5", "100", "2"], ["3", "7Dz", "4", "2", "2", "5", "100", "2"], ["3", "1", "4", "2", "2", "5", "100", "2"], ["3", "1", "4", "2", "2", "100", "2"], ["25g"], ["3"], ["3", "4Q8"], ["3", "3"], ["3", "3", "3"], ["3", "3", "LHy", "3"], ["3", "3 ELs", "LHy", "3"], ["3", "3 6", "LHy", "3"], ["3", "3 3 4 2 5", "LHy", "3"], ["3", "a94 3 4 2 5", "LHy", "3"], ["3", "-1 3 4 2 5", "LHy", "3"], ["3", "-1", "3", "4", "2", "5", "LHy", "3"], ["7hg"], ["XFu", "5"], ["7", "5"], ["7", "U7d", "5"], ["7", "5", "5"], ["7", "5", "7", "5"], ["7", "5", "7"], ["dob", "7", "5", "7"], ["9", "7", "5", "7"], ["QM3", "9", "7", "5", "7"], ["4", "9", "7", "5", "7"], ["4", "9", "7 sYV", "5", "7"], ["4", "9", "7 sYV", "4", "5", "7"], ["4", "9", "7 sYV", "4", "5", "7 fmG"], ["4", "9", "7 sYV", "user2", "4", "5", "7 fmG"], ["4", "9", "7 sYV", "user2 pN1", "4", "5", "7 fmG"], ["4", "9", "7 sYV", "user2 pN1", "MlE", "4", "5", "7 fmG"], ["4", "9", "7 sYV", "user2 pN1", "MlE", "5", "4", "5", "7 fmG"], ["4", "9", "7 sYV", "user2 pN1", "MlE", "5", "4", "7 fmG"], ["4", "9", "7 sYV", "user2", "pN1", "MlE", "5", "4", "7 fmG"], ["4", "9", "7 sYV", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["4", "9", "7 sYV", "1 2 3 4 5", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["4", "9", "hso sYV", "1 2 3 4 5", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["4", "7 7 7", "9", "hso sYV", "1 2 3 4 5", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["4", "7 7 7", "9", "XVP sYV", "1 2 3 4 5", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["2", "4", "7 7 7", "9", "XVP sYV", "1 2 3 4 5", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["e", "2", "4", "7 7 7", "9", "XVP sYV", "1 2 3 4 5", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["e", "2", "4", "7 7 7", "9", "XVP sYV", "1 2 3 4 5", "us10r2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["7", "2", "4", "7 7 7", "9", "XVP sYV", "1 2 3 4 5", "us10r2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["OAE"], ["7YC", "9"], ["9", "9"], ["psK", "9", "9"], ["1", "9", "9"], ["1", "9", "\u3042\u3042\u3042", "9"], ["1 kuW", "9", "\u3042\u3042\u3042", "9"], ["1 7", "9", "\u3042\u3042\u3042", "9"], ["1 7", "9", "\u3042\u3042\u3042", "20", "9"], ["1 7", "3 4 2 5", "9", "\u3042\u3042\u3042", "20", "9"], ["1 7", "3 4 2 5", "9", "20", "9"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552275233.8728273, "StartTime": 1552275222.8199942}, {"EndTime": 1552275234.935988, "FinalMinimizedSolution": ["3 8 2 5", "100 1"], "FinalCoverage": [42, 30, 38, 3, 24, "10-21,", "26-53,", "9->10,", "22->38,", "23->26"], "FinalSolution": ["3 8 2 5", "100 1"], "StartTime": 1552275233.875106, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["3 4 2 5", "100 1"], ["3 4 2 5", "20 1"], ["R5w 4 2 5", "20 1"], ["2 4 2 5", "20 1"], ["2", "4", "2", "5", "20 1"], ["2", "4", "g3b", "2", "5", "20 1"], ["2", "4", "g3b", "2", "5", ""], ["2", "4", "yKx", "g3b", "2", "5", ""], ["0", "2", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "yKx", "4", "yKx", "g3b", "2", "5", ""], ["0", "6", "2", "yKx", "4", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "ebM", "yKx", "g3b", "2", "5"], ["0", "6", "50n", "2", "yKx", "4", "ebM", "u75", "yKx", "g3b", "2", "5"], [], ["Ne4"], ["5"], ["5", "5"], ["5", "Ir9", "5"], ["5", "1", "5"], ["PdR"], ["8"], ["8", "100 1"], ["8", "100 1 1 1 1 1 2 2 2"], ["cPj"], ["9"], ["9", "8B-"], ["9", "2"], ["9", "180,000", "2"], ["9", "1", "2"], ["9", "1", "2", "2"], ["2t9"], ["h9X", "5"], ["0", "5"], ["0", "5", "5"], ["0", "5", "5 Vh9"], ["0", "5", "5", "Vh9"], ["0 5d0", "5", "5", "Vh9"], ["0 -1", "5", "5", "Vh9"], ["0 -1", "5", "Vh9"], ["0 abacate", "5", "Vh9"], ["0 9", "5", "Vh9"], ["0 9", "5", "RmA", "Vh9"], ["0 9", "4", "5", "RmA", "Vh9"], ["", "4", "5", "RmA", "Vh9"], ["", "RmA", "4", "5", "RmA", "Vh9"], ["", "RmA", "4", "5", "10", "Vh9"], ["", "8", "4", "5", "10", "Vh9"], ["", "cN7", "8", "4", "5", "10", "Vh9"], ["", "7", "8", "4", "5", "10", "Vh9"], ["3", "", "7", "8", "4", "5", "10", "Vh9"], ["-13"], ["-13", "MRc"], ["-13", "7"], ["8x-"], ["9 9in"], ["9 -1"], ["9 -1", "QWB"], ["9 -1", "5"], ["3 4 2 5", "100 1"], ["3 4 2 5", "100", "1"], ["15 4 2 5", "100", "1"], ["15 4 2 5", "1"], ["15 4 0 5", "1"], ["15 4 0 5", "EpP", "1"], ["15 4 0 5", "8", "1"], ["15 4 0 100 1", "8", "1"], ["15", "4", "0", "100", "1", "8", "1"], ["15", "apple", "4", "0", "100", "1", "8", "1"], ["15", "2", "4", "0", "100", "1", "8", "1"], ["15", "2", "4", "0", "100", "1001", "1", "8", "1"], ["15", "0", "2", "4", "0", "100", "1001", "1", "8", "1"], ["15", "0", "2", "4", "0", "100", "1001", "100 1", "1", "8", "1"], ["nC-"], ["LNL"], ["2"], ["2", "uR7"], ["2", "9"], ["3 4 2 5", "9"], ["", "9"], ["", "9", "9"], ["", "9", "100 1", "9"], ["3,sri,87", "", "9", "100 1", "9"], ["10", "", "9", "100 1", "9"], ["10", "", "9", "100 1", "-sh", "9"], ["10", "", "9", "100 1", "-sh"], ["10", "9", "100 1", "-sh"], ["10", "100 1", "-sh"], ["10", "100 1", "-sh mSE"], ["10", "100 1", "1 1 mSE"], ["10", "100 1", ""], ["10", "100", "1", ""], ["yaP"], ["6"], ["6", "3 4 2 5"], ["4", "6", "3 4 2 5"], ["GQ2"], ["3mu", "5"], ["6", "5"], ["6", "+ 192815 figueiredo_marina@ic.com figueiredo_marina Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 figueiredo_marina@ic.com figueiredo_marina Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 10 figueiredo_marina Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 10 8 Nte85#ODRK Marina Figueiredo", "5"], ["6", "4 192815 10 8 8 Marina Figueiredo", "5"], ["6", "4 192815 10 8 8 4 Figueiredo", "5"], ["6", "4 192815 10 8 8 4 0", "5"], ["6", "3 192815 10 8 8 4 0", "5"], ["3 4 2 5", "6", "3 192815 10 8 8 4 0", "5"], ["3 4 2 5", "6", "", "5"], ["", "6", "", "5"], ["xtB"], ["d-I"], ["100 1", "5"], ["", "5"], ["sBp", "", "5"], ["4", "", "5"], ["4", "", "f9E", "5"], ["4", "f9E", "5"], ["4", "8", "5"], ["3 4 2 5", "100 1"], ["3 4 3.5 5", "100 1"], ["3 4 9 5", "100 1"], ["3 4 9 5", "AABBCCDDEEFFGGHHIIJJKKLLMMBBDCCDEEFFGGHHIIJJKKLLMM 1"], ["3 4 9 5", "3 1"], ["3 4 9 5", ""], ["3 4 9 5"], ["3 4 9 5", "3 4 9 5"], ["3 3 4 2 5 9 5", ""], ["3 4 2 5", "100 1"], ["3", "4", "2", "5", "100 1"], ["3", "4", "2", "2", "5", "100 1"], ["3", "4", "2", "2", "5", "100 2"], ["3", "4", "2", "2", "5", "100", "2"], ["3", "7Dz", "4", "2", "2", "5", "100", "2"], ["3", "1", "4", "2", "2", "5", "100", "2"], ["3", "1", "4", "2", "2", "100", "2"], ["25g"], ["3"], ["3", "4Q8"], ["3", "3"], ["3", "3", "3"], ["3", "3", "LHy", "3"], ["3", "3 ELs", "LHy", "3"], ["3", "3 6", "LHy", "3"], ["3", "3 3 4 2 5", "LHy", "3"], ["3", "a94 3 4 2 5", "LHy", "3"], ["3", "-1 3 4 2 5", "LHy", "3"], ["3", "-1", "3", "4", "2", "5", "LHy", "3"], ["7hg"], ["XFu", "5"], ["7", "5"], ["7", "U7d", "5"], ["7", "5", "5"], ["7", "5", "7", "5"], ["7", "5", "7"], ["dob", "7", "5", "7"], ["9", "7", "5", "7"], ["QM3", "9", "7", "5", "7"], ["4", "9", "7", "5", "7"], ["4", "9", "7 sYV", "5", "7"], ["4", "9", "7 sYV", "4", "5", "7"], ["4", "9", "7 sYV", "4", "5", "7 fmG"], ["4", "9", "7 sYV", "user2", "4", "5", "7 fmG"], ["4", "9", "7 sYV", "user2 pN1", "4", "5", "7 fmG"], ["4", "9", "7 sYV", "user2 pN1", "MlE", "4", "5", "7 fmG"], ["4", "9", "7 sYV", "user2 pN1", "MlE", "5", "4", "5", "7 fmG"], ["4", "9", "7 sYV", "user2 pN1", "MlE", "5", "4", "7 fmG"], ["4", "9", "7 sYV", "user2", "pN1", "MlE", "5", "4", "7 fmG"], ["4", "9", "7 sYV", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["4", "9", "7 sYV", "1 2 3 4 5", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["4", "9", "hso sYV", "1 2 3 4 5", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["4", "7 7 7", "9", "hso sYV", "1 2 3 4 5", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["4", "7 7 7", "9", "XVP sYV", "1 2 3 4 5", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["2", "4", "7 7 7", "9", "XVP sYV", "1 2 3 4 5", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["e", "2", "4", "7 7 7", "9", "XVP sYV", "1 2 3 4 5", "user2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["e", "2", "4", "7 7 7", "9", "XVP sYV", "1 2 3 4 5", "us10r2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["7", "2", "4", "7 7 7", "9", "XVP sYV", "1 2 3 4 5", "us10r2", "pN1", "tzV", "MlE", "5", "4", "7 fmG"], ["OAE"], ["7YC", "9"], ["9", "9"], ["psK", "9", "9"], ["1", "9", "9"], ["1", "9", "\u3042\u3042\u3042", "9"], ["1 kuW", "9", "\u3042\u3042\u3042", "9"], ["1 7", "9", "\u3042\u3042\u3042", "9"], ["1 7", "9", "\u3042\u3042\u3042", "20", "9"], ["1 7", "3 4 2 5", "9", "\u3042\u3042\u3042", "20", "9"], ["1 7", "3 4 2 5", "9", "20", "9"], ["3 4 2 5", "100 1"], ["3 AwE 2 5", "100 1"]]}]], [{"CorrectInputs": [[["10 5", "n,k = input().split() n,k = int(n),int(k) ch = input().split() x,y = -n,-n+k-1 a,b = -n+1,-n+k z = 'NO' s = '' while x < y:     s += ch[x]     x += 1 print(s)     "], 1542818917]], "UniqueId": "48b1a695-2709-4b0d-969c-426336917394_0", "CoverageInfo": [11, 2, 2, 1, 77, "10-11,", "8->11"], "TimeStamp": 1542818936, "BadInput": ["10 5", "0123456789"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 9, in <module>\n    s += ch[x]\nIndexError: list index out of range\n", "ip": "178.93.34.95"}, [{"EndTime": 1552343644.193225, "FinalMinimizedSolution": ["9 -1", " "], "FinalCoverage": [11, 2, 2, 1, 77, "9-10,", "8->9"], "FinalSolution": ["9 -1", " "], "StartTime": 1552343637.1876218, "FoundSolution": true, "NumProbesMade": 35, "InputHistory": [["10 5", "0123456789"], ["", "0123456789"], ["", "0123456789 0123456789"], ["", "0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], [""], [" "], ["", ""], ["", " "], ["", " NO"], ["", "NO NO"], ["", "NO NO NO"], ["", "NO NO NO NO"], ["", "NO NO NO NO NO"], ["", "NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO NO NO"], ["NO", ""], ["NO", " "], ["NO NO", " "], ["NO 7", " "], ["0 7", " "], ["Rli 7", " "], ["9 7", " "], ["9 3,8", " "]]}, {"InputHistory": [["10 5", "0123456789"], ["", "0123456789"], ["", "0123456789 0123456789"], ["", "0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], [""], [" "], ["", ""], ["", " "], ["", " NO"], ["", "NO NO"], ["", "NO NO NO"], ["", "NO NO NO NO"], ["", "NO NO NO NO NO"], ["", "NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO NO NO"], ["NO", ""], ["NO", " "], ["NO NO", " "], ["NO 7", " "], ["0 7", " "], ["Rli 7", " "], ["9 7", " "], ["9 3,8", " "], ["10 5", "0123456789"], ["", "3", "0123456789"], ["", "3", "0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3"], ["", "3 3"], ["", "3 3 3"], ["", "3 3 3 3"], ["", "3 3 3 3 3"], ["", "3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3 3 3 3"], [], ["D36 NO NO"], ["D36 NO"], ["7 NO"], ["7 4"], ["7 4", "10 5"], ["7 100", "10 5"], ["", "10 5"], ["", "10 5 5"], ["", "10 5 5 5"], ["", "10 5 5 5 5"], ["", "10 5 5 5 5 5"], ["", "10 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5 5 5 5"], ["tW0", "", ""], ["tW0", "", " "], ["NO", "tW0", "", " "], ["NO", "tW0", "", "tW0 "], ["NO", "tW0", "", "tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", ""], ["NO", "tW0", " "], ["NO", "tW0", "NO", ""], ["NO", "tW0", "NO", " "], ["NO NO", "tW0", " "], ["NO 7", "tW0", " "]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552343655.5007968, "StartTime": 1552343644.193712}, {"InputHistory": [["10 5", "0123456789"], ["", "0123456789"], ["", "0123456789 0123456789"], ["", "0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], [""], [" "], ["", ""], ["", " "], ["", " NO"], ["", "NO NO"], ["", "NO NO NO"], ["", "NO NO NO NO"], ["", "NO NO NO NO NO"], ["", "NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO NO NO"], ["NO", ""], ["NO", " "], ["NO NO", " "], ["NO 7", " "], ["0 7", " "], ["Rli 7", " "], ["9 7", " "], ["9 3,8", " "], ["10 5", "0123456789"], ["", "3", "0123456789"], ["", "3", "0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3"], ["", "3 3"], ["", "3 3 3"], ["", "3 3 3 3"], ["", "3 3 3 3 3"], ["", "3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3 3 3 3"], [], ["D36 NO NO"], ["D36 NO"], ["7 NO"], ["7 4"], ["7 4", "10 5"], ["7 100", "10 5"], ["", "10 5"], ["", "10 5 5"], ["", "10 5 5 5"], ["", "10 5 5 5 5"], ["", "10 5 5 5 5 5"], ["", "10 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5 5 5 5"], ["tW0", "", ""], ["tW0", "", " "], ["NO", "tW0", "", " "], ["NO", "tW0", "", "tW0 "], ["NO", "tW0", "", "tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", ""], ["NO", "tW0", " "], ["NO", "tW0", "NO", ""], ["NO", "tW0", "NO", " "], ["NO NO", "tW0", " "], ["NO 7", "tW0", " "], ["10 5", "0123456789"], ["10 5", "", "0123456789"], ["10 5", "NO", "0123456789"], ["NO"], ["NO NO"], ["NO 10"], ["7 10"], ["7 10", "10 5"], ["7 10", "10 7 10"], ["7 10", "10", "7", "10"], ["7 5", "10", "7", "10"], ["7 5", "10", "7 NO", "10"], ["7 5", "10", "", "10"], ["RaY"], ["RaY RaY"], ["RaY 4"], ["5 4"], ["5 4", "NO"], ["5", "4", "NO"], ["5", "4", "NO NO"], ["5", "4", "NO NO NO"], ["5", "4", "NO NO NO NO"], ["5", "4", "NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO NO NO NO NO"], ["5", "4"], ["5", "4 4"], ["5", "4 4 4"], ["5", "4 4 4 4"], ["5", "4 4 4 4 4"], ["5", "4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4 4 4 4 4"], ["5"], ["5 5"], ["5 5", "NO"], ["5 5", "3,5", "NO"], ["5 NO", "3,5", "NO"], ["5 NO", "3,5", "-1"], ["5 4", "3,5", "-1"], ["5 4", "3,5", "-1 ElC"], ["5 4", "3,5", "NO ElC"], ["5 4", "3,5 OGF", "NO ElC"], ["5 fTx", "3,5 OGF", "NO ElC"], ["5 8", "3,5 OGF", "NO ElC"], ["", "3,5 OGF", "NO ElC"], ["", "3,5 OGF", "NO ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC ElC ElC ElC ElC"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552343666.8400197, "StartTime": 1552343655.5017323}, {"InputHistory": [["10 5", "0123456789"], ["", "0123456789"], ["", "0123456789 0123456789"], ["", "0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], [""], [" "], ["", ""], ["", " "], ["", " NO"], ["", "NO NO"], ["", "NO NO NO"], ["", "NO NO NO NO"], ["", "NO NO NO NO NO"], ["", "NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO NO NO"], ["NO", ""], ["NO", " "], ["NO NO", " "], ["NO 7", " "], ["0 7", " "], ["Rli 7", " "], ["9 7", " "], ["9 3,8", " "], ["10 5", "0123456789"], ["", "3", "0123456789"], ["", "3", "0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3"], ["", "3 3"], ["", "3 3 3"], ["", "3 3 3 3"], ["", "3 3 3 3 3"], ["", "3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3 3 3 3"], [], ["D36 NO NO"], ["D36 NO"], ["7 NO"], ["7 4"], ["7 4", "10 5"], ["7 100", "10 5"], ["", "10 5"], ["", "10 5 5"], ["", "10 5 5 5"], ["", "10 5 5 5 5"], ["", "10 5 5 5 5 5"], ["", "10 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5 5 5 5"], ["tW0", "", ""], ["tW0", "", " "], ["NO", "tW0", "", " "], ["NO", "tW0", "", "tW0 "], ["NO", "tW0", "", "tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", ""], ["NO", "tW0", " "], ["NO", "tW0", "NO", ""], ["NO", "tW0", "NO", " "], ["NO NO", "tW0", " "], ["NO 7", "tW0", " "], ["10 5", "0123456789"], ["10 5", "", "0123456789"], ["10 5", "NO", "0123456789"], ["NO"], ["NO NO"], ["NO 10"], ["7 10"], ["7 10", "10 5"], ["7 10", "10 7 10"], ["7 10", "10", "7", "10"], ["7 5", "10", "7", "10"], ["7 5", "10", "7 NO", "10"], ["7 5", "10", "", "10"], ["RaY"], ["RaY RaY"], ["RaY 4"], ["5 4"], ["5 4", "NO"], ["5", "4", "NO"], ["5", "4", "NO NO"], ["5", "4", "NO NO NO"], ["5", "4", "NO NO NO NO"], ["5", "4", "NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO NO NO NO NO"], ["5", "4"], ["5", "4 4"], ["5", "4 4 4"], ["5", "4 4 4 4"], ["5", "4 4 4 4 4"], ["5", "4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4 4 4 4 4"], ["5"], ["5 5"], ["5 5", "NO"], ["5 5", "3,5", "NO"], ["5 NO", "3,5", "NO"], ["5 NO", "3,5", "-1"], ["5 4", "3,5", "-1"], ["5 4", "3,5", "-1 ElC"], ["5 4", "3,5", "NO ElC"], ["5 4", "3,5 OGF", "NO ElC"], ["5 fTx", "3,5 OGF", "NO ElC"], ["5 8", "3,5 OGF", "NO ElC"], ["", "3,5 OGF", "NO ElC"], ["", "3,5 OGF", "NO ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC ElC ElC ElC ElC"], ["10 5", "0123456789"], ["NO", "", "0123456789"], ["NO", "", "0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "NO", ""], ["NO", "NO", " "], ["NO", "NO", " 1 2 3 4 5"], ["NO", "NO", "1 2 3 4 5 5"], ["NO", "NO", "1 2 3 4 5 5 5"], ["NO", "NO", "1 2 3 4 5 5 5 5"], ["NO", "NO", "1 2 3 4 5 5 5 5 5"], ["NO", "NO", "1 2 3 4 5 5 5 5 5 5"], ["NO", "NO", "1 2 3 4 5 5 5 5 5 5 5"], ["NO", "NO"], ["NO", "NO NO"], ["NO", "NO NO NO"], ["NO", "NO NO NO NO"], ["NO", "NO NO NO NO NO"], ["NO", "NO NO NO NO NO NO"], ["NO", "NO NO NO NO NO NO NO"], ["NO", "NO NO NO NO NO NO NO NO"], ["NO", "NO NO NO NO NO NO NO NO NO"], ["NO", "NO NO NO NO NO NO NO NO NO NO"], ["NO", "NO NO NO NO NO NO NO NO NO NO NO"], ["Bw3", "NO"], ["Bw3", "NO NO"], ["Bw3", "NO NO NO"], ["Bw3", "NO NO NO NO"], ["Bw3", "NO NO NO NO NO"], ["Bw3", "NO NO NO NO NO NO"], ["Bw3", "NO NO NO NO NO NO NO"], ["Bw3", "NO NO NO NO NO NO NO NO"], ["Bw3", "NO NO NO NO NO NO NO NO NO"], ["Bw3", "NO NO NO NO NO NO NO NO NO NO"], ["Bw3", "NO NO NO NO NO NO NO NO NO NO NO"], ["Bw3"], ["Bw3 Bw3"], ["Bw3 5"], ["10 5"], ["10 5", "f1H"], ["10 5", "10 5", "f1H"], ["10 5", "NO 5", "f1H"], ["10", "5", "NO 5", "f1H"], ["10", "5", "NO 5", "f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H f1H f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H f1H f1H f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H f1H f1H f1H f1H f1H f1H"]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552343678.1813545, "StartTime": 1552343666.8414364}, {"InputHistory": [["10 5", "0123456789"], ["", "0123456789"], ["", "0123456789 0123456789"], ["", "0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], [""], [" "], ["", ""], ["", " "], ["", " NO"], ["", "NO NO"], ["", "NO NO NO"], ["", "NO NO NO NO"], ["", "NO NO NO NO NO"], ["", "NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO NO"], ["", "NO NO NO NO NO NO NO NO NO NO NO"], ["NO", ""], ["NO", " "], ["NO NO", " "], ["NO 7", " "], ["0 7", " "], ["Rli 7", " "], ["9 7", " "], ["9 3,8", " "], ["10 5", "0123456789"], ["", "3", "0123456789"], ["", "3", "0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["", "3"], ["", "3 3"], ["", "3 3 3"], ["", "3 3 3 3"], ["", "3 3 3 3 3"], ["", "3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3 3 3"], ["", "3 3 3 3 3 3 3 3 3 3 3"], [], ["D36 NO NO"], ["D36 NO"], ["7 NO"], ["7 4"], ["7 4", "10 5"], ["7 100", "10 5"], ["", "10 5"], ["", "10 5 5"], ["", "10 5 5 5"], ["", "10 5 5 5 5"], ["", "10 5 5 5 5 5"], ["", "10 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5 5 5"], ["", "10 5 5 5 5 5 5 5 5 5 5"], ["tW0", "", ""], ["tW0", "", " "], ["NO", "tW0", "", " "], ["NO", "tW0", "", "tW0 "], ["NO", "tW0", "", "tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", "", "tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0 tW0"], ["NO", "tW0", ""], ["NO", "tW0", " "], ["NO", "tW0", "NO", ""], ["NO", "tW0", "NO", " "], ["NO NO", "tW0", " "], ["NO 7", "tW0", " "], ["10 5", "0123456789"], ["10 5", "", "0123456789"], ["10 5", "NO", "0123456789"], ["NO"], ["NO NO"], ["NO 10"], ["7 10"], ["7 10", "10 5"], ["7 10", "10 7 10"], ["7 10", "10", "7", "10"], ["7 5", "10", "7", "10"], ["7 5", "10", "7 NO", "10"], ["7 5", "10", "", "10"], ["RaY"], ["RaY RaY"], ["RaY 4"], ["5 4"], ["5 4", "NO"], ["5", "4", "NO"], ["5", "4", "NO NO"], ["5", "4", "NO NO NO"], ["5", "4", "NO NO NO NO"], ["5", "4", "NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO NO NO NO"], ["5", "4", "NO NO NO NO NO NO NO NO NO NO NO"], ["5", "4"], ["5", "4 4"], ["5", "4 4 4"], ["5", "4 4 4 4"], ["5", "4 4 4 4 4"], ["5", "4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4 4 4 4"], ["5", "4 4 4 4 4 4 4 4 4 4 4"], ["5"], ["5 5"], ["5 5", "NO"], ["5 5", "3,5", "NO"], ["5 NO", "3,5", "NO"], ["5 NO", "3,5", "-1"], ["5 4", "3,5", "-1"], ["5 4", "3,5", "-1 ElC"], ["5 4", "3,5", "NO ElC"], ["5 4", "3,5 OGF", "NO ElC"], ["5 fTx", "3,5 OGF", "NO ElC"], ["5 8", "3,5 OGF", "NO ElC"], ["", "3,5 OGF", "NO ElC"], ["", "3,5 OGF", "NO ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC ElC ElC ElC"], ["", "3,5 OGF", "NO ElC ElC ElC ElC ElC ElC ElC ElC"], ["10 5", "0123456789"], ["NO", "", "0123456789"], ["NO", "", "0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["NO", "NO", ""], ["NO", "NO", " "], ["NO", "NO", " 1 2 3 4 5"], ["NO", "NO", "1 2 3 4 5 5"], ["NO", "NO", "1 2 3 4 5 5 5"], ["NO", "NO", "1 2 3 4 5 5 5 5"], ["NO", "NO", "1 2 3 4 5 5 5 5 5"], ["NO", "NO", "1 2 3 4 5 5 5 5 5 5"], ["NO", "NO", "1 2 3 4 5 5 5 5 5 5 5"], ["NO", "NO"], ["NO", "NO NO"], ["NO", "NO NO NO"], ["NO", "NO NO NO NO"], ["NO", "NO NO NO NO NO"], ["NO", "NO NO NO NO NO NO"], ["NO", "NO NO NO NO NO NO NO"], ["NO", "NO NO NO NO NO NO NO NO"], ["NO", "NO NO NO NO NO NO NO NO NO"], ["NO", "NO NO NO NO NO NO NO NO NO NO"], ["NO", "NO NO NO NO NO NO NO NO NO NO NO"], ["Bw3", "NO"], ["Bw3", "NO NO"], ["Bw3", "NO NO NO"], ["Bw3", "NO NO NO NO"], ["Bw3", "NO NO NO NO NO"], ["Bw3", "NO NO NO NO NO NO"], ["Bw3", "NO NO NO NO NO NO NO"], ["Bw3", "NO NO NO NO NO NO NO NO"], ["Bw3", "NO NO NO NO NO NO NO NO NO"], ["Bw3", "NO NO NO NO NO NO NO NO NO NO"], ["Bw3", "NO NO NO NO NO NO NO NO NO NO NO"], ["Bw3"], ["Bw3 Bw3"], ["Bw3 5"], ["10 5"], ["10 5", "f1H"], ["10 5", "10 5", "f1H"], ["10 5", "NO 5", "f1H"], ["10", "5", "NO 5", "f1H"], ["10", "5", "NO 5", "f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H f1H f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H f1H f1H f1H f1H f1H"], ["10", "5", "NO 5", "f1H f1H f1H f1H f1H f1H f1H f1H f1H f1H"], ["10 5", "0123456789"], ["10 5", "NO", "NO", "0123456789"], ["10 5", "NO NO", "NO", "0123456789"], ["10", "5", "NO NO", "NO", "0123456789"], ["10", "5", "NO NO", "NO", "0123456789 0123456789"], ["10", "5", "NO NO", "NO", "0123456789 0123456789 0123456789"], ["10", "5", "NO NO", "NO", "0123456789 0123456789 0123456789 0123456789"], ["10", "5", "NO NO", "NO", "0123456789 0123456789 0123456789 0123456789 0123456789"], ["10", "5", "NO NO", "NO", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["10", "5", "NO NO", "NO", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["10", "5", "NO NO", "NO", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["10", "5", "NO NO", "NO", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["10", "5", "NO NO", "NO", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["10", "5", "NO NO", "NO", "0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789"], ["10", "5", "NO NO", "NO"], ["10", "5", "NO NO", "NO NO"], ["10", "5", "NO NO", "NO NO NO"], ["10", "5", "NO NO", "NO NO NO NO"], ["10", "5", "NO NO", "NO NO NO NO NO"], ["10", "5", "NO NO", "NO NO NO NO NO NO"], ["10", "5", "NO NO", "NO NO NO NO NO NO NO"], ["10", "5", "NO NO", "NO NO NO NO NO NO NO NO"], ["10", "5", "NO NO", "NO NO NO NO NO NO NO NO NO"], ["10", "5", "NO NO", "NO NO NO NO NO NO NO NO NO NO"], ["10", "5", "NO NO", "NO NO NO NO NO NO NO NO NO NO NO"], ["10", "5", "NO NO"], ["10", "5", "NO NO NO"], ["10", "5", "NO NO NO NO"], ["10", "5", "NO NO NO NO NO"], ["10", "5", "NO NO NO NO NO NO"], ["10", "5", "NO NO NO NO NO NO NO"], ["10", "5", "NO NO NO NO NO NO NO NO"], ["10", "5", "NO NO NO NO NO NO NO NO NO"], ["10", "5", "NO NO NO NO NO NO NO NO NO NO"], ["10", "5", "NO NO NO NO NO NO NO NO NO NO NO"], ["10", "5"], ["10", "5 5"], ["10", "5 5 5"], ["10", "5 5 5 5"], ["10", "5 5 5 5 5"], ["10", "5 5 5 5 5 5"], ["10", "5 5 5 5 5 5 5"], ["10", "5 5 5 5 5 5 5 5"], ["10", "5 5 5 5 5 5 5 5 5"], ["10", "5 5 5 5 5 5 5 5 5 5"], ["10", "5 5 5 5 5 5 5 5 5 5 5"], ["10"], ["10 10"], ["10 10", "NO"], ["NO 10", "NO"], ["NO 10", "3"], ["3 10", "3"], ["3 10", "3", "3"], ["3 0123456789", "3", "3"], ["3 hoje esta quente, logo esta umido.", "3", "3"], ["3 hoje esta quente, logo esta umido.", "3", ""], ["3 hoje esta quente, logo esta ef", "3", ""], ["3 hoje esta quente, logo esta ef", "3", " NO"], ["me gusta comer,8", "NO"], ["me gusta comer,8", ""]], "FoundSolution": false, "NumProbesMade": 60, "EndTime": 1552343689.5136452, "StartTime": 1552343678.1832442}]], [{"CorrectInputs": [[["5"], 1529647797]], "UniqueId": "37a2162e-e16b-4300-aece-f5a820cca337_0", "CoverageInfo": [30, 2, 12, 3, 88, "16,", "30,", "13->30,", "14->25,", "15->16"], "TimeStamp": 1529647811, "BadInput": ["6"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 17, in <module>\n    m[x][y]= w \nIndexError: list assignment index out of range\n", "ip": "200.17.137.73"}, [{"EndTime": 1552295455.8195302, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [30, 17, 12, 2, 36, "4,", "14-29,", "3->4,", "13->14"], "FinalSolution": ["-1", "6", "6"], "StartTime": 1552295454.4659097, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["6"], ["6", "6"], ["2l5", "6", "6"]]}, {"EndTime": 1552295456.8828154, "FinalMinimizedSolution": ["-1"], "FinalCoverage": [30, 17, 12, 2, 36, "4,", "14-29,", "3->4,", "13->14"], "FinalSolution": ["-1"], "StartTime": 1552295455.819699, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["6"], ["6", "6"], ["2l5", "6", "6"], ["6"], []]}, {"EndTime": 1552295458.1256194, "FinalMinimizedSolution": ["0"], "FinalCoverage": [30, 17, 12, 2, 36, "4,", "14-29,", "3->4,", "13->14"], "FinalSolution": ["0"], "StartTime": 1552295456.8829958, "FoundSolution": true, "NumProbesMade": 3, "InputHistory": [["6"], ["6", "6"], ["2l5", "6", "6"], ["6"], [], ["6"], ["SXs"], ["lpN"]]}, {"EndTime": 1552295459.165726, "FinalMinimizedSolution": ["1"], "FinalCoverage": [30, 16, 12, 1, 40, "14-29,", "13->14"], "FinalSolution": ["1"], "StartTime": 1552295458.125805, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["6"], ["6", "6"], ["2l5", "6", "6"], ["6"], [], ["6"], ["SXs"], ["lpN"], ["6"], ["s5C"]]}, {}]], [{"CorrectInputs": [[["15", "15"], 1539565069]], "UniqueId": "8d4ba0e9-92b8-4aba-d0fd-7a0a5fe74bc2_0", "CoverageInfo": [6, 2, 2, 1, 62, "4,", "7,", "3->4"], "TimeStamp": 1539565095, "BadInput": ["8", "12"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 6, in <module>\n    d = lcm(a, b)\nNameError: name 'lcm' is not defined\n", "ip": "178.78.21.170"}, [{"EndTime": 1552276584.3802252, "FinalMinimizedSolution": ["1", "1"], "FinalCoverage": [6, 2, 2, 1, 62, "6-7,", "3->6"], "FinalSolution": ["1", "1", "4", "8", "2 4"], "StartTime": 1552276581.2244904, "FoundSolution": true, "NumProbesMade": 15, "InputHistory": [["8", "12"], ["U72", "8", "12"], ["4", "8", "12"], ["4", "8", "12 foi"], ["w1-", "4", "8", "12 foi"], ["1", "4", "8", "12 foi"], ["B : D E", "1", "4", "8", "12 foi"], ["9", "1", "4", "8", "12 foi"], ["9 0BK", "1", "4", "8", "12 foi"], ["2", "1", "4", "8", "12 foi"], ["2", "1", "4", "8", "12 4"], ["2", "1", "yq-", "4", "8", "12 4"], ["1", "2", "1", "yq-", "4", "8", "12 4"], ["1", "2", "1", "4", "8", "12 4"], ["1", "2", "1", "4", "8", "2 4"]]}, {"EndTime": 1552276585.2919116, "FinalMinimizedSolution": ["8", "8"], "FinalCoverage": [6, 2, 2, 1, 62, "6-7,", "3->6"], "FinalSolution": ["8", "8", "12"], "StartTime": 1552276584.3806014, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["8", "12"], ["U72", "8", "12"], ["4", "8", "12"], ["4", "8", "12 foi"], ["w1-", "4", "8", "12 foi"], ["1", "4", "8", "12 foi"], ["B : D E", "1", "4", "8", "12 foi"], ["9", "1", "4", "8", "12 foi"], ["9 0BK", "1", "4", "8", "12 foi"], ["2", "1", "4", "8", "12 foi"], ["2", "1", "4", "8", "12 4"], ["2", "1", "yq-", "4", "8", "12 4"], ["1", "2", "1", "yq-", "4", "8", "12 4"], ["1", "2", "1", "4", "8", "12 4"], ["1", "2", "1", "4", "8", "2 4"], ["8", "12"]]}, {"EndTime": 1552276589.6980722, "FinalMinimizedSolution": ["8", "8"], "FinalCoverage": [6, 2, 2, 1, 62, "6-7,", "3->6"], "FinalSolution": ["8", "8"], "StartTime": 1552276585.2922633, "FoundSolution": true, "NumProbesMade": 20, "InputHistory": [["8", "12"], ["U72", "8", "12"], ["4", "8", "12"], ["4", "8", "12 foi"], ["w1-", "4", "8", "12 foi"], ["1", "4", "8", "12 foi"], ["B : D E", "1", "4", "8", "12 foi"], ["9", "1", "4", "8", "12 foi"], ["9 0BK", "1", "4", "8", "12 foi"], ["2", "1", "4", "8", "12 foi"], ["2", "1", "4", "8", "12 4"], ["2", "1", "yq-", "4", "8", "12 4"], ["1", "2", "1", "yq-", "4", "8", "12 4"], ["1", "2", "1", "4", "8", "12 4"], ["1", "2", "1", "4", "8", "2 4"], ["8", "12"], ["8", "12"], [], ["4"], ["4", "8"], ["4", "7158", "8"], ["p6G"], ["9"], ["9", "12"], ["9 rAO", "12"], ["7", "12"], ["tOq", "7", "12"], ["2", "7", "12"], ["2", "7", "7", "12"], ["-rs"], ["4 Kjj"], ["4Sx", "9"], ["4", "9"], ["3", "4", "9"], ["83q"], ["8"]]}, {"EndTime": 1552276593.5278876, "FinalMinimizedSolution": ["10", "10"], "FinalCoverage": [6, 2, 2, 1, 62, "6-7,", "3->6"], "FinalSolution": ["10", "10", "8", "2"], "StartTime": 1552276589.698603, "FoundSolution": true, "NumProbesMade": 19, "InputHistory": [["8", "12"], ["U72", "8", "12"], ["4", "8", "12"], ["4", "8", "12 foi"], ["w1-", "4", "8", "12 foi"], ["1", "4", "8", "12 foi"], ["B : D E", "1", "4", "8", "12 foi"], ["9", "1", "4", "8", "12 foi"], ["9 0BK", "1", "4", "8", "12 foi"], ["2", "1", "4", "8", "12 foi"], ["2", "1", "4", "8", "12 4"], ["2", "1", "yq-", "4", "8", "12 4"], ["1", "2", "1", "yq-", "4", "8", "12 4"], ["1", "2", "1", "4", "8", "12 4"], ["1", "2", "1", "4", "8", "2 4"], ["8", "12"], ["8", "12"], [], ["4"], ["4", "8"], ["4", "7158", "8"], ["p6G"], ["9"], ["9", "12"], ["9 rAO", "12"], ["7", "12"], ["tOq", "7", "12"], ["2", "7", "12"], ["2", "7", "7", "12"], ["-rs"], ["4 Kjj"], ["4Sx", "9"], ["4", "9"], ["3", "4", "9"], ["83q"], ["8"], ["8", "12"], ["h-3"], ["01x"], ["2"], ["2", "12"], ["2 FW1", "12"], ["3", "12"], ["3", "J32", "12"], ["3", "8", "12"], ["gpb"], ["cA0", "8"], ["-1", "8"], ["-1"], ["-1", "ckj"], ["-1", "2"], ["-1", "8", "2"], ["WF7", "-1", "8", "2"], ["10", "-1", "8", "2"], ["10", "-1", "10", "8", "2"]]}, {"EndTime": 1552276598.7180521, "FinalMinimizedSolution": ["6", "6"], "FinalCoverage": [6, 2, 2, 1, 62, "6-7,", "3->6"], "FinalSolution": ["6", "6"], "StartTime": 1552276593.5285716, "FoundSolution": true, "NumProbesMade": 24, "InputHistory": [["8", "12"], ["U72", "8", "12"], ["4", "8", "12"], ["4", "8", "12 foi"], ["w1-", "4", "8", "12 foi"], ["1", "4", "8", "12 foi"], ["B : D E", "1", "4", "8", "12 foi"], ["9", "1", "4", "8", "12 foi"], ["9 0BK", "1", "4", "8", "12 foi"], ["2", "1", "4", "8", "12 foi"], ["2", "1", "4", "8", "12 4"], ["2", "1", "yq-", "4", "8", "12 4"], ["1", "2", "1", "yq-", "4", "8", "12 4"], ["1", "2", "1", "4", "8", "12 4"], ["1", "2", "1", "4", "8", "2 4"], ["8", "12"], ["8", "12"], [], ["4"], ["4", "8"], ["4", "7158", "8"], ["p6G"], ["9"], ["9", "12"], ["9 rAO", "12"], ["7", "12"], ["tOq", "7", "12"], ["2", "7", "12"], ["2", "7", "7", "12"], ["-rs"], ["4 Kjj"], ["4Sx", "9"], ["4", "9"], ["3", "4", "9"], ["83q"], ["8"], ["8", "12"], ["h-3"], ["01x"], ["2"], ["2", "12"], ["2 FW1", "12"], ["3", "12"], ["3", "J32", "12"], ["3", "8", "12"], ["gpb"], ["cA0", "8"], ["-1", "8"], ["-1"], ["-1", "ckj"], ["-1", "2"], ["-1", "8", "2"], ["WF7", "-1", "8", "2"], ["10", "-1", "8", "2"], ["10", "-1", "10", "8", "2"], ["8", "12"], ["8", "12 7I7"], ["8", "7"], ["2", "8", "7"], ["2", "-P8", "8", "7"], ["2", "1", "8", "7"], ["2", "b1-", "1", "8", "7"], ["2", "3", "1", "8", "7"], ["2", "3", "1xh", "1", "8", "7"], ["2", "3 UvA", "1xh", "1", "8", "7"], ["2", "6", "1xh", "1", "8", "7"], ["2", "1xh", "6", "1xh", "1", "8", "7"], ["2", "1xh", "6", "2", "1", "8", "7"], ["2", "0", "6", "2", "1", "8", "7"], ["2", "0", "6", "2", "8", "7"], ["2", "0", "6", "2", "8 Uzs", "7"], ["2", "0", "2", "8 Uzs", "7"], ["2", "0", "2", "8 Uzs"], ["2", "0", "2", "8 8"], ["XXs"], ["7"], ["s9B"], ["6"], ["6", "Zx-"]]}]], [{"CorrectInputs": [[["3", "2", "2"], 1518219632]], "UniqueId": "3c1f5091-ee83-4760-d66a-c0f557b8dbb0_0", "CoverageInfo": [11, 2, 2, 1, 77, "10-12,", "8->12"], "TimeStamp": 1518219657, "BadInput": ["3", "0.01", "2"], "ErrorType": "NameError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 9, in <module>\n    a.append(u.append(0.5*(u[n]+x/u[n])))  \nNameError: name 'a' is not defined\n", "ip": "105.155.251.218"}, [{"EndTime": 1552296061.6846843, "FinalMinimizedSolution": ["3", "2.1", "-1.0"], "FinalCoverage": [11, 2, 2, 1, 77, "9-10,", "8->9"], "FinalSolution": ["3", "2.1", "-1.0", "0.2", "2"], "StartTime": 1552296059.610969, "FoundSolution": true, "NumProbesMade": 7, "InputHistory": [["3", "0.01", "2"], ["3", "0.01", "]=", "2"], ["3", "0.01", "0.2", "2"], ["3", "0.2", "2"], ["3", "Ps1", "0.2", "2"], ["3", "-1.0", "0.2", "2"], ["3", "DDDDDDDDD", "-1.0", "0.2", "2"]]}, {"EndTime": 1552296062.6104834, "FinalMinimizedSolution": ["3", "3", "0.01"], "FinalCoverage": [11, 2, 2, 1, 77, "9-10,", "8->9"], "FinalSolution": ["3", "3", "0.01", "2"], "StartTime": 1552296061.6849287, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["3", "0.01", "2"], ["3", "0.01", "]=", "2"], ["3", "0.01", "0.2", "2"], ["3", "0.2", "2"], ["3", "Ps1", "0.2", "2"], ["3", "-1.0", "0.2", "2"], ["3", "DDDDDDDDD", "-1.0", "0.2", "2"], ["3", "0.01", "2"]]}, {"EndTime": 1552296064.872655, "FinalMinimizedSolution": ["0.01", "3", "10.4"], "FinalCoverage": [11, 2, 2, 1, 77, "9-10,", "8->9"], "FinalSolution": ["0.01", "3", "10.4", "0.01", "0.10"], "StartTime": 1552296062.6107464, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [["3", "0.01", "2"], ["3", "0.01", "]=", "2"], ["3", "0.01", "0.2", "2"], ["3", "0.2", "2"], ["3", "Ps1", "0.2", "2"], ["3", "-1.0", "0.2", "2"], ["3", "DDDDDDDDD", "-1.0", "0.2", "2"], ["3", "0.01", "2"], ["3", "0.01", "2"], ["3", "0.01", "2 RCr"], ["3", "0.01", "0.10"], ["3", "0.01", "7607812693", "0.10"], ["3", "0.01", "7607812693", "0.01", "0.10"], ["3", "0.01", "3", "7607812693", "0.01", "0.10"], ["3", "0.01", "3", "7607812693 iuu", "0.01", "0.10"], ["0.01", "3", "7607812693 iuu", "0.01", "0.10"]]}, {"EndTime": 1552296065.9853358, "FinalMinimizedSolution": ["3", "9.4", "0.01"], "FinalCoverage": [11, 2, 2, 1, 77, "9-10,", "8->9"], "FinalSolution": ["3", "9.4", "0.01", "2"], "StartTime": 1552296064.8732765, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["3", "0.01", "2"], ["3", "0.01", "]=", "2"], ["3", "0.01", "0.2", "2"], ["3", "0.2", "2"], ["3", "Ps1", "0.2", "2"], ["3", "-1.0", "0.2", "2"], ["3", "DDDDDDDDD", "-1.0", "0.2", "2"], ["3", "0.01", "2"], ["3", "0.01", "2"], ["3", "0.01", "2 RCr"], ["3", "0.01", "0.10"], ["3", "0.01", "7607812693", "0.10"], ["3", "0.01", "7607812693", "0.01", "0.10"], ["3", "0.01", "3", "7607812693", "0.01", "0.10"], ["3", "0.01", "3", "7607812693 iuu", "0.01", "0.10"], ["0.01", "3", "7607812693 iuu", "0.01", "0.10"], ["3", "0.01", "2"], ["3", "3 ]=", "0.01", "2"]]}, {"EndTime": 1552296067.4202316, "FinalMinimizedSolution": ["3.7", "3.7", "0.01"], "FinalCoverage": [11, 2, 2, 1, 77, "9-10,", "8->9"], "FinalSolution": ["3.7", "3.7", "0.01"], "StartTime": 1552296065.9857256, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["3", "0.01", "2"], ["3", "0.01", "]=", "2"], ["3", "0.01", "0.2", "2"], ["3", "0.2", "2"], ["3", "Ps1", "0.2", "2"], ["3", "-1.0", "0.2", "2"], ["3", "DDDDDDDDD", "-1.0", "0.2", "2"], ["3", "0.01", "2"], ["3", "0.01", "2"], ["3", "0.01", "2 RCr"], ["3", "0.01", "0.10"], ["3", "0.01", "7607812693", "0.10"], ["3", "0.01", "7607812693", "0.01", "0.10"], ["3", "0.01", "3", "7607812693", "0.01", "0.10"], ["3", "0.01", "3", "7607812693 iuu", "0.01", "0.10"], ["0.01", "3", "7607812693 iuu", "0.01", "0.10"], ["3", "0.01", "2"], ["3", "3 ]=", "0.01", "2"], ["3", "0.01", "2"], [], ["3.7"], ["3.7", "3.7"]]}]], [{"CorrectInputs": [[["10"], 1535811790]], "UniqueId": "786b5c67-04de-4d3c-93e6-2ed8615ba41f_0", "CoverageInfo": [9, 1, 6, 2, 80, "10,", "4->exit,", "5->10"], "TimeStamp": 1535811825, "BadInput": ["1 3 5 6 10"], "ErrorType": "IndexError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 8, in <module>\n    print(x[j])\nIndexError: list index out of range\n", "ip": "5.44.172.163"}, [{"EndTime": 1552267611.9758275, "FinalMinimizedSolution": [], "FinalCoverage": [9, 3, 6, 1, 73, "6-8,", "5->6"], "FinalSolution": ["1", "3", "5", "6", "10", "3", "5", "6", "10"], "StartTime": 1552267610.2695744, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1 3 5 6 10"], ["94g 3 5 6 10"], ["-1 3 5 6 10"], ["1 3 5 6 10 3 5 6 10"]]}, {"EndTime": 1552267612.9082747, "FinalMinimizedSolution": [], "FinalCoverage": [9, 3, 6, 1, 73, "6-8,", "5->6"], "FinalSolution": ["1", "3", "5", "6", "10"], "StartTime": 1552267611.9760478, "FoundSolution": true, "NumProbesMade": 1, "InputHistory": [["1 3 5 6 10"], ["94g 3 5 6 10"], ["-1 3 5 6 10"], ["1 3 5 6 10 3 5 6 10"], ["1 3 5 6 10"]]}, {"EndTime": 1552267613.8233068, "FinalMinimizedSolution": [], "FinalCoverage": [9, 5, 6, 1, 47, "5-10,", "4->5"], "FinalSolution": [""], "StartTime": 1552267612.9085038, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [["1 3 5 6 10"], ["94g 3 5 6 10"], ["-1 3 5 6 10"], ["1 3 5 6 10 3 5 6 10"], ["1 3 5 6 10"], ["1 3 5 6 10"], ["1 3 5 6 1 3 5 6 10"]]}, {"EndTime": 1552267615.4377866, "FinalMinimizedSolution": [], "FinalCoverage": [9, 5, 6, 1, 47, "5-10,", "4->5"], "FinalSolution": [], "StartTime": 1552267613.8235288, "FoundSolution": true, "NumProbesMade": 6, "InputHistory": [["1 3 5 6 10"], ["94g 3 5 6 10"], ["-1 3 5 6 10"], ["1 3 5 6 10 3 5 6 10"], ["1 3 5 6 10"], ["1 3 5 6 10"], ["1 3 5 6 1 3 5 6 10"], ["1 3 5 6 10"], ["sJ1 3 5 6 10"], ["aacbb 3 5 6 10"], ["e a", ""], ["0 a", ""], ["0 2", ""]]}, {"EndTime": 1552267616.7271492, "FinalMinimizedSolution": [], "FinalCoverage": [9, 3, 6, 1, 73, "6-8,", "5->6"], "FinalSolution": ["5"], "StartTime": 1552267615.4380617, "FoundSolution": true, "NumProbesMade": 4, "InputHistory": [["1 3 5 6 10"], ["94g 3 5 6 10"], ["-1 3 5 6 10"], ["1 3 5 6 10 3 5 6 10"], ["1 3 5 6 10"], ["1 3 5 6 10"], ["1 3 5 6 1 3 5 6 10"], ["1 3 5 6 10"], ["sJ1 3 5 6 10"], ["aacbb 3 5 6 10"], ["e a", ""], ["0 a", ""], ["0 2", ""], ["1 3 5 6 10"], ["e0e 3 5 6 10"], ["4 3 5 6 10"], ["vKb"]]}]], [{"CorrectInputs": [[["Cebollin|Verdura;44-Cebolla*Verdura|37_Sal/Condimento*21_Papas;Verdura/22,Vinagre de vino_Vinagre,54/Salsa de queso-Salsa/12;Atun-Pescado|57|Lomo liso|Vacuno*74_Jurel,Pescado/94", "Cebollin|Atun;5.4,Cebollin|Vinagre de vino_2.9|Cebolla_Jurel_8.8|Cebolla|Cebollin,5.4,Sal*Jurel*4.4;Sal_Salsa de queso|2.7,Sal_Vinagre de vino|3.2;Sal_Papas/4.6-Papas/Lomo liso/2.3_Vinagre de vino|Papas,8.9|Vinagre de vino*Cebolla;5.0;Vinagre de vino*Atun|3.9,Salsa de queso/Cebollin/1.5|Salsa de queso;Jurel|1.5|Lomo liso,Sal-9.7_Lomo liso,Salsa de queso/5.4,Lomo liso/Jurel|1.9|Jurel/Atun-7.0", "2", "+Atun", "+Cebollin"], 1542937035]], "UniqueId": "24b156f5-3e9a-464c-d23b-8923188a7e04_0", "CoverageInfo": [78, 8, 30, 4, 87, "49-50,", "57-61,", "71,", "78,", "48->49,", "64->71,", "77->78,", "79->74"], "TimeStamp": 1542937920, "BadInput": [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], "ErrorType": "ValueError", "LastIsEmpty": false, "ErrorMessage": "Traceback (most recent call last):\n  File \"temp2018.py\", line 90, in <module>\n    print(receta.calcular_puntaje())\n  File \"temp2018.py\", line 70, in calcular_puntaje\n    Contador+=(float(ListaPuntaje[int(ListaPuntaje.index(IngredientesPonderados[i-1]))+1])+(float(ListaPuntaje[int(ListaPuntaje.index(IngredientesPonderados[i]))+1])))*float(ListaPonderaciones[int((i+1)/2)-1])\nValueError: 'Salmon' is not in list\n", "ip": "146.155.158.62"}, [{"EndTime": 1552283578.879045, "FinalMinimizedSolution": ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r", "n8r", "6", "6"], "FinalCoverage": [78, 14, 30, 4, 74, "38,", "49-50,", "57-61,", "65-70,", "78,", "37->38,", "48->49,", "64->65,", "77->78"], "FinalSolution": ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r", "n8r", "6", "6"], "StartTime": 1552283573.7926762, "FoundSolution": true, "NumProbesMade": 23, "InputHistory": [[" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4 2", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["2qE,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["2qE,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja,,", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], [], ["*"], ["*", "*"], ["*,9sw", "*"], ["*,9sw", "*", "*"], ["*,9sw", "*", "6"], ["*,9sw", "*", "6", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r", "n8r", "6"]]}, {"EndTime": 1552283581.1100776, "FinalMinimizedSolution": [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas", "9", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas"], "FinalCoverage": [78, 2, 30, 1, 97, "58-59,", "57->58"], "FinalSolution": [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas", "9", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas"], "StartTime": 1552283578.8796167, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [[" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4 2", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["2qE,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["2qE,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja,,", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], [], ["*"], ["*", "*"], ["*,9sw", "*"], ["*,9sw", "*", "*"], ["*,9sw", "*", "6"], ["*,9sw", "*", "6", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r", "n8r", "6"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas", "9"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas", "9", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95"]]}, {"EndTime": 1552283583.3329875, "FinalMinimizedSolution": [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", ";", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", ";"], "FinalCoverage": [78, 2, 30, 1, 97, "58-59,", "57->58"], "FinalSolution": [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", ";", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", ";"], "StartTime": 1552283581.1108108, "FoundSolution": true, "NumProbesMade": 8, "InputHistory": [[" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4 2", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["2qE,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["2qE,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja,,", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], [], ["*"], ["*", "*"], ["*,9sw", "*"], ["*,9sw", "*", "*"], ["*,9sw", "*", "6"], ["*,9sw", "*", "6", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r", "n8r", "6"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas", "9"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas", "9", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "+Papas", "-", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", ";"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", ";", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95"]]}, {"EndTime": 1552283584.413818, "FinalMinimizedSolution": [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Papas", "+Salmon", "+Salsa de soja", "4"], "FinalCoverage": [78, 7, 30, 2, 90, "49-50,", "57-61,", "78,", "48->49,", "77->78"], "FinalSolution": [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Papas", "+Salmon", "+Salsa de soja", "4"], "StartTime": 1552283583.333961, "FoundSolution": true, "NumProbesMade": 2, "InputHistory": [[" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4 2", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["2qE,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["2qE,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja,,", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], [], ["*"], ["*", "*"], ["*,9sw", "*"], ["*,9sw", "*", "*"], ["*,9sw", "*", "6"], ["*,9sw", "*", "6", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r", "n8r", "6"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas", "9"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas", "9", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "+Papas", "-", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", ";"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", ";", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Papas", "+Salmon", "+Salsa de soja"]]}, {"EndTime": 1552283589.1145341, "FinalMinimizedSolution": [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,4,,", "/,4,Papas,2.2", "2", "", ""], "FinalCoverage": [78, 16, 30, 5, 77, "48-55,", "57-61,", "67,", "70,", "78,", "80,", "89,", "66->67,", "69->70,", "77->78,", "79->80,", "88->89"], "FinalSolution": [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,4,,", "/,4,Papas,2.2", "2", "", "", "4", "+Fideos", "", "+Fideos", "a", "4", "+Salmon"], "StartTime": 1552283584.4147587, "FoundSolution": true, "NumProbesMade": 19, "InputHistory": [[" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4 2", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["Ru0,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["2qE,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], ["2qE,Acompanamiento/61,hTW", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Kaz,2.2", "8", "4", "+Papas", "1", "+Fideos", "ya esta en la receta", "+Papas", "+Salmon", "+Salsa de soja,,", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,hTW"], [], ["*"], ["*", "*"], ["*,9sw", "*"], ["*,9sw", "*", "*"], ["*,9sw", "*", "6"], ["*,9sw", "*", "6", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r", "n8r"], ["*,9sw", "*", "6", "n8r", "+Fideos", "n8r", "n8r", "6"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas", "9"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "9", "+Papas", "+Salmon", "+Salsa de soja", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", "+Papas", "+Papas", "9", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "+Papas", "-", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", ";"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "10", "+Papas", "-", "+Salmon", "+Salsa de soja", "+Salsa de soja", "+Salmon", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", ";", " Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,Papas*Verdura;95", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "a", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "4", "+Fideos", "a", "+Papas", "3", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "4", "+Fideos", "a", "+Papas", "3", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", " Salmon/Salsa de soja*3.9*Salsa de soja*Papas|6.7_Salsa de soja|Fideos-9.1,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "4", "+Fideos", "a", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", "/,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "4", "+Fideos", "a", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", "/,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "4", ",", "+Fideos", "a", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", "/,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "4", "BVl,", "+Fideos", "a", "+Papas", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", "/,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "4", "BVl,", "+Fideos", "a", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", "/,Fideos/Salmon/9.2*Fideos,Papas,2.2", "+Fideos", "4", "BVl,", "+Fideos", "a", "4", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", "/,4,Papas,2.2", "+Fideos", "4", "BVl,", "+Fideos", "a", "4", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", "/,4,Papas,2.2", "+Fideos", "4", "", "+Fideos", "a", "4", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", "/,4,Papas,2.2", "+Fideos", ",", "4", "", "+Fideos", "a", "4", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", "/,4,Papas,2.2", "+Fideos", ",", "4", "+Fideos", "", "+Fideos", "a", "4", "+Salmon", "+Salsa de soja"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", "/,4,Papas,2.2", "+Fideos", ",", "4", "+Fideos", "", "+Fideos", "a", "4", "+Salmon"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", "/,4,Papas,2.2", "+Fideos,EJO", ",", "4", "+Fideos", "", "+Fideos", "a", "4", "+Salmon"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,Acompanamiento/61,,", "/,4,Papas,2.2", "+Fideos,EJO", "", "", "4", "+Fideos", "", "+Fideos", "a", "4", "+Salmon"], [" Salmon_Pescado*95;Salsa de soja-Salsa-43*Fideos,4,,", "/,4,Papas,2.2", "+Fideos,EJO", "", "", "4", "+Fideos", "", "+Fideos", "a", "4", "+Salmon"]]}]]]}